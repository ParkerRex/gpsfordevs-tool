[
    {
        "title": "tryFirst(where:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/tryfirst(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse tryFirst(where:) when you need to republish only the first element of a stream that satisfies an error-throwing closure you specify. The publisher ignores all elements after the first. If this publisher doesn\u2019t receive any elements, it finishes without publishing. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a range publisher emits the first element in the range then finishes normally:\n\nlet numberRange: ClosedRange<Int> = (-1...50)\nnumberRange.publisher\n    .tryFirst {\n        guard $0 < 99 else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"-1 completion: finished\"\n// If instead the number range were ClosedRange<Int> = (100...200), the tryFirst operator would terminate publishing with a RangeError.\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "tryFilter(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/tryfilter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value that indicated whether to republish the element or throws an error.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nUse tryFilter(_:) to filter elements evaluated in an error-throwing closure. If the isIncluded closure throws an error, the publisher fails with that error.\n\nIn the example below, tryFilter(_:) checks to see if the element provided by the publisher is zero, and throws a ZeroError before terminating the publisher with the thrown error. Otherwise, it republishes the element only if it\u2019s even:\n\nstruct ZeroError: Error {}\n\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\ncancellable = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"2 4 failure(DivisionByZeroError())\".\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryCompactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/trycompactmap(_:)",
        "html": "Parameters\ntransform\n\nAn error-throwing closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of calling the supplied closure.\n\nDiscussion\n\nUse tryCompactMap(_:) to remove nil elements from a publisher\u2019s stream based on an error-throwing closure you provide. If the closure throws an error, the publisher cancels the upstream publisher and sends the thrown error to the downstream subscriber as a Failure.\n\nThe following example uses an array of numbers as the source for a collection-based publisher. A tryCompactMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform the numbers from its Arabic to Roman numerals, as an optional String.\n\nIf the closure called by tryCompactMap(_:) fails to look up a Roman numeral, it returns the optional String (unknown).\n\nIf the closure called by tryCompactMap(_:) determines the input is 0, it throws an error. The tryCompactMap(_:) operator catches this error and stops publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from: Int) throws -> String? {\n    let romanNumeralDict: [Int : String] =\n        [1: \"I\", 2: \"II\", 3: \"III\", 4: \"IV\", 5: \"V\"]\n    guard from != 0 else { throw ParseError() }\n    return romanNumeralDict[from]\n}\nlet numbers = [6, 5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryCompactMap { try romanNumeral(from: $0) }\n    .sink(\n          receiveCompletion: { print (\"\\($0)\") },\n          receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"(Unknown) V IV III II I failure(ParseError())\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryDrop(while:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/trydrop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false, and then republishes all remaining elements. If the predicate closure throws, the publisher fails with an error.\n\nDiscussion\n\nUse tryDrop(while:) to omit elements from an upstream until an error-throwing closure you provide returns false, after which the remaining items in the stream are published. If the closure throws, no elements are emitted and the publisher fails with an error.\n\nIn the example below, elements are ignored until -1 is encountered in the stream and the closure returns false. The publisher then republishes the remaining elements and finishes normally. Conversely, if the guard value in the closure had been encountered, the closure would throw and the publisher would fail with an error.\n\nstruct RangeError: Error {}\nvar numbers = [1, 2, 3, 4, 5, 6, -1, 7, 8, 9, 10]\nlet range: CountableClosedRange<Int> = (1...100)\ncancellable = numbers.publisher\n    .tryDrop {\n        guard $0 != 0 else { throw RangeError() }\n        return range.contains($0)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"-1 7 8 9 10 completion: finished\"\n// If instead numbers was [1, 2, 3, 4, 5, 6, 0, -1, 7, 8, 9, 10], tryDrop(while:) would fail with a RangeError.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryAllSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/tryallsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete. The closure may throw an error, in which case the publisher cancels the upstream publisher and fails with the thrown error.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the tryAllSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria in an error-throwing predicate you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes. If the predicate throws an error, the publisher fails and passes the error to its downstream subscriber.\n\nIn the example below, an error-throwing predicate tests if each of an integer array publisher\u2019s elements fall into the targetRange; the predicate throws an error if an element is zero and terminates the stream.\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 10, 5, 0]\n\n\nnumbers.publisher\n    .tryAllSatisfy { anInt in\n        guard anInt != 0 else { throw RangeError() }\n        return targetRange.contains(anInt)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(RangeError())\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate."
    },
    {
        "title": "filter(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/filter(_:)",
        "html": "See Also\nFiltering Elements\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Output) -> T?) -> Optional<T>.Publisher\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Just<Output>\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryRemoveDuplicates(by: (Output, Output) throws -> Bool) -> Result<Output, Error>.Publisher\nfunc replaceEmpty(with: Output) -> Just<Output>\nfunc replaceError(with: Output) -> Just<Output>"
    },
    {
        "title": "debounce(for:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/empty/debounce(for:scheduler:options:)",
        "html": "Parameters\ndueTime\n\nThe time the publisher should wait before publishing an element.\n\nscheduler\n\nThe scheduler on which this publisher delivers elements\n\noptions\n\nScheduler options that customize this publisher\u2019s delivery of elements.\n\nReturn Value\n\nA publisher that publishes events only after a specified time elapses.\n\nDiscussion\n\nUse the debounce(for:scheduler:options:) operator to control the number of values and time between delivery of values from the upstream publisher. This operator is useful to process bursty or high-volume event streams where you need to reduce the number of values delivered to the downstream to a rate you specify.\n\nIn this example, a PassthroughSubject publishes elements on a schedule defined by the bounces array. The array is composed of tuples representing a value sent by the PassthroughSubject, and a TimeInterval ranging from one-quarter second up to 2 seconds that drives a delivery timer. As the queue builds, elements arriving faster than one-half second debounceInterval are discarded, while elements arriving at a rate slower than debounceInterval are passed through to the sink(receiveValue:) operator.\n\nlet bounces:[(Int,TimeInterval)] = [\n    (0, 0),\n    (1, 0.25),  // 0.25s interval since last index\n    (2, 1),     // 0.75s interval since last index\n    (3, 1.25),  // 0.25s interval since last index\n    (4, 1.5),   // 0.25s interval since last index\n    (5, 2)      // 0.5s interval since last index\n]\n\n\nlet subject = PassthroughSubject<Int, Never>()\ncancellable = subject\n    .debounce(for: .seconds(0.5), scheduler: RunLoop.main)\n    .sink { index in\n        print (\"Received index \\(index)\")\n    }\n\n\nfor bounce in bounces {\n    DispatchQueue.main.asyncAfter(deadline: .now() + bounce.1) {\n        subject.send(bounce.0)\n    }\n}\n\n\n// Prints:\n//  Received index 1\n//  Received index 4\n//  Received index 5\n\n\n//  Here is the event flow shown from the perspective of time, showing value delivery through the `debounce()` operator:\n\n\n//  Time 0: Send index 0.\n//  Time 0.25: Send index 1. Index 0 was waiting and is discarded.\n//  Time 0.75: Debounce period ends, publish index 1.\n//  Time 1: Send index 2.\n//  Time 1.25: Send index 3. Index 2 was waiting and is discarded.\n//  Time 1.5: Send index 4. Index 3 was waiting and is discarded.\n//  Time 2: Debounce period ends, publish index 4. Also, send index 5.\n//  Time 2.5: Debounce period ends, publish index 5.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "allSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/allsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the allSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes.\n\nIn the example below, the allSatisfy(_:) operator tests if each an integer array publisher\u2019s elements fall into the targetRange:\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .allSatisfy { targetRange.contains($0) }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "tryRemoveDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/just/tryremoveduplicates(by:)",
        "html": "See Also\nFiltering Elements\nfunc filter((Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Output) -> T?) -> Optional<T>.Publisher\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Just<Output>\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Output, Output) -> Bool) -> Just<Output>\nfunc replaceEmpty(with: Output) -> Just<Output>\nfunc replaceError(with: Output) -> Just<Output>"
    },
    {
        "title": "assign(to:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/assign(to:)",
        "html": "Parameters\npublished\n\nA property marked with the @Published attribute, which receives and republishes all elements received from the upstream publisher.\n\nDiscussion\n\nUse this operator when you want to receive elements from a publisher and republish them through a property marked with the @Published attribute. The assign(to:) operator manages the life cycle of the subscription, canceling the subscription automatically when the Published instance deinitializes. Because of this, the assign(to:) operator doesn\u2019t return an AnyCancellable that you\u2019re responsible for like assign(to:on:) does.\n\nThe example below shows a model class that receives elements from an internal Timer.TimerPublisher, and assigns them to a @Published property called lastUpdated. Because the to parameter has the inout keyword, you need to use the & operator when calling this method.\n\nclass MyModel: ObservableObject {\n    @Published var lastUpdated: Date = Date()\n    init() {\n         Timer.publish(every: 1.0, on: .main, in: .common)\n             .autoconnect()\n             .assign(to: &$lastUpdated)\n    }\n}\n\n\nIf you instead implemented MyModel with assign(to: lastUpdated, on: self), storing the returned AnyCancellable instance could cause a reference cycle, because the Subscribers.Assign subscriber would hold a strong reference to self. Using assign(to:) solves this problem.\n\nWhile the to parameter uses the inout keyword, this method doesn\u2019t replace a reference type passed to it. Instead, this notation indicates that the operator may modify members of the assigned object, as seen in the following example:\n\n    class MyModel2: ObservableObject {\n        @Published var id: Int = 0\n    }\n    let model2 = MyModel2()\n    Just(100).assign(to: &model2.$id)\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "append(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/append(_:)",
        "html": "Parameters\nelements\n\nElements to publish after this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that appends the specifiecd elements after this publisher\u2019s elements.\n\nDiscussion\n\nUse append(_:) when you need to prepend specific elements after the output of a publisher.\n\nIn the example below, the append(_:) operator publishes the provided elements after republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .append(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 5 6 7 8 9 10 0 1 255\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "assertNoFailure(_:file:line:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/assertnofailure(_:file:line:)",
        "html": "Parameters\nprefix\n\nA string used at the beginning of the fatal error message.\n\nfile\n\nA filename used in the error message. This defaults to #file.\n\nline\n\nA line number used in the error message. This defaults to #line.\n\nReturn Value\n\nA publisher that raises a fatal error when its upstream publisher fails.\n\nDiscussion\n\nUse assertNoFailure() for internal integrity checks that are active during testing. However, it is important to note that, like its Swift counterpart fatalError(_:), the assertNoFailure() operator asserts a fatal exception when triggered during development and testing, and in shipping versions of code.\n\nIn the example below, a CurrentValueSubject publishes the initial and second values successfully. The third value, containing a genericSubjectError, causes the assertNoFailure() operator to assert a fatal exception stopping the process:\n\npublic enum SubjectError: Error {\n    case genericSubjectError\n}\n\n\nlet subject = CurrentValueSubject<String, Error>(\"initial value\")\nsubject\n    .assertNoFailure()\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0).\") }\n    )\n\n\nsubject.send(\"second value\")\nsubject.send(completion: Subscribers.Completion<Error>.failure(SubjectError.genericSubjectError))\n\n\n// Prints:\n//  value: initial value.\n//  value: second value.\n//  The process then terminates in the debugger as the assertNoFailure operator catches the genericSubjectError.\n\nSee Also\nHandling Errors\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "assign(to:on:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/assign(to:on:)",
        "html": "Parameters\nkeyPath\n\nA key path that indicates the property to assign. See Key-Path Expression in The Swift Programming Language to learn how to use key paths to specify a property of an object.\n\nobject\n\nThe object that contains the property. The subscriber assigns the object\u2019s property every time it receives a new value.\n\nReturn Value\n\nAn AnyCancellable instance. Call cancel() on this instance when you no longer want the publisher to automatically assign the property. Deinitializing this instance will also cancel automatic assignment.\n\nDiscussion\n\nUse the assign(to:on:) subscriber when you want to set a given property each time a publisher produces a value.\n\nIn this example, the assign(to:on:) sets the value of the anInt property on an instance of MyClass:\n\nclass MyClass {\n    var anInt: Int = 0 {\n        didSet {\n            print(\"anInt was set to: \\(anInt)\", terminator: \"; \")\n        }\n    }\n}\n\n\nvar myObject = MyClass()\nlet myRange = (0...2)\ncancellable = myRange.publisher\n    .assign(to: \\.anInt, on: myObject)\n\n\n// Prints: \"anInt was set to: 0; anInt was set to: 1; anInt was set to: 2\"\n\n\nImportant\n\nThe Subscribers.Assign instance created by this operator maintains a strong reference to object, and sets it to nil when the upstream publisher completes (either normally or with an error).\n\nSee Also\nConnecting Simple Subscribers\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/breakpoint(receivesubscription:receiveoutput:receivecompletion:)",
        "html": "Parameters\nreceiveSubscription\n\nA closure that executes when the publisher receives a subscription. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveOutput\n\nA closure that executes when the publisher receives a value. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveCompletion\n\nA closure that executes when the publisher receives a completion. Return true from this closure to raise SIGTRAP, or false to continue.\n\nReturn Value\n\nA publisher that raises a debugger signal when one of the provided closures returns true.\n\nDiscussion\n\nUse breakpoint(receiveSubscription:receiveOutput:receiveCompletion:) to examine one or more stages of the subscribe/publish/completion process and stop in the debugger, based on conditions you specify. When any of the provided closures returns true, this operator raises the SIGTRAP signal to stop the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn the example below, a PassthroughSubject publishes strings to a breakpoint republisher. When the breakpoint receives the string \u201cDEBUGGER\u201d, it returns true, which stops the app in the debugger.\n\nlet publisher = PassthroughSubject<String?, Never>()\ncancellable = publisher\n    .breakpoint(\n        receiveOutput: { value in return value == \"DEBUGGER\" }\n    )\n    .sink { print(\"\\(String(describing: $0))\" , terminator: \" \") }\n\n\npublisher.send(\"DEBUGGER\")\n\n\n// Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n// Depending on your specific environment, the console messages may\n// also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "combineLatest(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/combinelatest(_:)",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest(_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To pair elements from multiple publishers, use zip(_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn this example, PassthroughSubject pub1 and also pub2 emit values; as combineLatest(_:) receives input from either upstream publisher, it combines the latest value from each publisher into a tuple and publishes it.\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(3)\npub1.send(45)\npub2.send(22)\n\n\n// Prints:\n//    Result: (2, 2).    // pub1 latest = 2, pub2 latest = 2\n//    Result: (3, 2).    // pub1 latest = 3, pub2 latest = 2\n//    Result: (45, 2).   // pub1 latest = 45, pub2 latest = 2\n//    Result: (45, 22).  // pub1 latest = 45, pub2 latest = 22\n\n\nWhen all upstream publishers finish, this publisher finishes. If an upstream publisher never publishes a value, this publisher never finishes.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/combinelatest(_:_:)-6qtmb",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn this example, three instances of PassthroughSubject emit values; as combineLatest(_:_:) receives input from any of the upstream publishers, it combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: (2, 2, 9).\n//  Result: (3, 2, 9).\n//  Result: (3, 12, 9).\n//  Result: (13, 12, 9).\n//  Result: (13, 12, 19).\n\n\nIf any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/combinelatest(_:_:_:)-2iwph",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, combineLatest(_:_:_:) receives input from any of the publishers, combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n//\n// Prints:\n//  Result: (2, 2, 9, 1).\n//  Result: (3, 2, 9, 1).\n//  Result: (3, 12, 9, 1).\n//  Result: (13, 12, 9, 1).\n//  Result: (13, 12, 19, 1).\n\n\nIf any individual publisher of the combined set terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/combinelatest(_:_:_:)-92jbz",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest<P, Q>(_:,_:) to combine the current and two additional publishers and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer. All upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nIn the example below, combineLatest() receives the most-recent values published by three publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3) { firstValue, secondValue, thirdValue in\n        return firstValue * secondValue * thirdValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(10)\n\n\npub.send(9)\npub3.send(4)\npub2.send(12)\n\n\n// Prints:\n//  Result: 40.     // pub = 2, pub2 = 2, pub3 = 10\n//  Result: 180.    // pub = 9, pub2 = 2, pub3 = 10\n//  Result: 72.     // pub = 9, pub2 = 2, pub3 = 4\n//  Result: 432.    // pub = 9, pub2 = 12, pub3 = 4\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "breakpointOnError()",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/breakpointonerror()",
        "html": "Return Value\n\nA publisher that raises a debugger signal upon receiving a failure.\n\nDiscussion\n\nWhen the upstream publisher fails with an error, this publisher raises the SIGTRAP signal, which stops the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn this example a PassthroughSubject publishes strings, but its downstream tryMap(_:) operator throws an error. This sends the error downstream as a Subscribers.Completion.failure(_:). The breakpointOnError() operator receives this completion and stops the app in the debugger.\n\n struct CustomError : Error {}\n let publisher = PassthroughSubject<String?, Error>()\n cancellable = publisher\n     .tryMap { stringValue in\n         throw CustomError()\n     }\n     .breakpointOnError()\n     .sink(\n         receiveCompletion: { completion in print(\"Completion: \\(String(describing: completion))\") },\n         receiveValue: { aValue in print(\"Result: \\(String(describing: aValue))\") }\n     )\n\n\n publisher.send(\"TEST DATA\")\n\n\n // Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n // Depending on your specific environment, the console messages may\n // also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "collect()",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/collect()",
        "html": "Return Value\n\nA publisher that collects all received items and returns them as an array upon completion.\n\nDiscussion\n\nUse collect() to gather elements into an array that the operator emits after the upstream publisher finishes.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThis publisher requests an unlimited number of elements from the upstream publisher and uses an unbounded amount of memory to store the received values. The publisher may exert memory pressure on the system for very large sets of elements.\n\nThe collect() operator only sends the collected array to its downstream receiver after a request whose demand is greater than 0 items. Otherwise, collect() waits until it receives a non-zero request.\n\nIn the example below, an Integer range is a publisher that emits an array of integers:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\nSee Also\nReducing Elements\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "combineLatest(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/combinelatest(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:_:) when you need to combine the current and 3 additional publishers and transform the values using a closure in which you specify the published elements, to publish a new element.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, as combineLatest(_:_:_:_:) receives the most-recent values published by four publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4) { firstValue, secondValue, thirdValue, fourthValue in\n        return firstValue * secondValue * thirdValue * fourthValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: 36.     // pub = 2,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 54.     // pub = 3,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 324.    // pub = 3,  pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 1404.   // pub = 13, pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 2964.   // pub = 13, pub2 = 12,  pub3 = 19, pub4 = 1\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "collect(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/collect(_:)",
        "html": "Parameters\ncount\n\nThe maximum number of received elements to buffer before publishing.\n\nReturn Value\n\nA publisher that collects up to the specified number of elements, and then publishes them as an array.\n\nDiscussion\n\nUse collect(_:) to emit arrays of at most count elements from an upstream publisher. If the upstream publisher finishes before collecting the specified number of elements, the publisher sends an array of only the items it received. This may be fewer than count elements.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nIn the example below, the collect(_:) operator emits one partial and two full arrays based on the requested collection size of 5:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect(5)\n    .sink { print(\"\\($0), terminator: \" \"\") }\n\n\n// Prints \"[0, 1, 2, 3, 4] [5, 6, 7, 8, 9] [10] \"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "collect(_:options:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/collect(_:options:)",
        "html": "Parameters\nstrategy\n\nThe timing group strategy used by the operator to collect and publish elements.\n\noptions\n\nScheduler options to use for the strategy.\n\nReturn Value\n\nA publisher that collects elements by a given strategy, and emits a single array of the collection.\n\nDiscussion\n\nUse collect(_:options:) to emit arrays of elements on a schedule specified by a Scheduler and Stride that you provide. At the end of each scheduled interval, the publisher sends an array that contains the items it collected. If the upstream publisher finishes before filling the buffer, the publisher sends an array that contains items it received. This may be fewer than the number of elements specified in the requested Stride.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThe example above collects timestamps generated on a one-second Timer in groups (Stride) of five.\n\nlet sub = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .collect(.byTime(RunLoop.main, .seconds(5)))\n    .sink { print(\"\\($0)\", terminator: \"\\n\\n\") }\n\n\n// Prints: \"[2020-01-24 00:54:46 +0000, 2020-01-24 00:54:47 +0000,\n//          2020-01-24 00:54:48 +0000, 2020-01-24 00:54:49 +0000,\n//          2020-01-24 00:54:50 +0000]\"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "drop(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/drop(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA publisher to monitor for its first emitted element.\n\nReturn Value\n\nA publisher that drops elements from the upstream publisher until the other publisher produces a value.\n\nDiscussion\n\nUse drop(untilOutputFrom:) to ignore elements from the upstream publisher until another, second, publisher delivers its first element. This publisher requests a single value from the second publisher, and it ignores (drops) all elements from the upstream publisher until the second publisher produces a value. After the second publisher produces an element, drop(untilOutputFrom:) cancels its subscription to the second publisher, and allows events from the upstream publisher to pass through.\n\nAfter this publisher receives a subscription from the upstream publisher, it passes through backpressure requests from downstream to the upstream publisher. If the upstream publisher acts on those requests before the other publisher produces an item, this publisher drops the elements it receives from the upstream publisher.\n\nIn the example below, the pub1 publisher defers publishing its elements until the pub2 publisher delivers its first element:\n\nlet upstream = PassthroughSubject<Int,Never>()\nlet second = PassthroughSubject<String,Never>()\ncancellable = upstream\n    .drop(untilOutputFrom: second)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\nupstream.send(1)\nupstream.send(2)\nsecond.send(\"A\")\nupstream.send(3)\nupstream.send(4)\n// Prints \"3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "first(where:)",
        "url": "https://developer.apple.com/documentation/combine/just/first(where:)",
        "html": "See Also\nSelecting Specific Elements\nfunc first() -> Just<Output>\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Just<Output>\nfunc last(where: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Optional<Output>.Publisher\nfunc output<R>(in: R) -> Optional<Output>.Publisher"
    },
    {
        "title": "count()",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/count()",
        "html": "Return Value\n\nA publisher that consumes all elements until the upstream publisher finishes, then emits a single value with the total number of elements received.\n\nDiscussion\n\nUse count() to determine the number of elements received from the upstream publisher before it completes:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .count()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"11\"\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "eraseToAnyPublisher()",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/erasetoanypublisher()",
        "html": "Return Value\n\nAn AnyPublisher wrapping this publisher.\n\nDiscussion\n\nUse eraseToAnyPublisher() to expose an instance of AnyPublisher to the downstream subscriber, rather than this publisher\u2019s actual type. This form of type erasure preserves abstraction across API boundaries, such as different modules. When you expose your publishers as the AnyPublisher type, you can change the underlying implementation over time without affecting existing clients.\n\nThe following example shows two types that each have a publisher property. TypeWithSubject exposes this property as its actual type, PassthroughSubject, while TypeWithErasedSubject uses eraseToAnyPublisher() to expose it as an AnyPublisher. As seen in the output, a caller from another module can access TypeWithSubject.publisher as its native type. This means you can\u2019t change your publisher to a different type without breaking the caller. By comparison, TypeWithErasedSubject.publisher appears to callers as an AnyPublisher, so you can change the underlying publisher type at will.\n\npublic class TypeWithSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n}\npublic class TypeWithErasedSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n        .eraseToAnyPublisher()\n}\n\n\n// In another module:\nlet nonErased = TypeWithSubject()\nif let subject = nonErased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast nonErased.publisher.\")\n}\nlet erased = TypeWithErasedSubject()\nif let subject = erased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast erased.publisher.\")\n}\n\n\n// Prints \"Successfully cast nonErased.publisher.\"\n"
    },
    {
        "title": "first()",
        "url": "https://developer.apple.com/documentation/combine/just/first()",
        "html": "See Also\nSelecting Specific Elements\nfunc first(where: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Just<Output>\nfunc last(where: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Optional<Output>.Publisher\nfunc output<R>(in: R) -> Optional<Output>.Publisher"
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/map(_:)-9y5aw",
        "html": "Parameters\nkeyPath\n\nThe key path of a property on Output.\n\nReturn Value\n\nA publisher that publishes the value of the key path.\n\nDiscussion\n\nIn the following example, the map(_:) operator uses the Swift key path syntax to access the die member of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only the value of this Int, not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die: Int\n}\n\n\ncancellable = Just(DiceRoll(die:Int.random(in:1...6)))\n    .map(\\.die)\n    .sink {\n        print (\"Rolled: \\($0)\")\n    }\n// Prints \"Rolled: 3\" (or some other random value).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "subscribe(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/subscribe(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler used to send messages to upstream publishers.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher which performs upstream operations on the specified scheduler.\n\nDiscussion\n\nIn contrast with receive(on:options:), which affects downstream messages, subscribe(on:options:) changes the execution context of upstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes ioPerformingPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes uiUpdatingSubscriber to receive elements and completion on RunLoop.main.\n\nlet ioPerformingPublisher == // Some publisher.\nlet uiUpdatingSubscriber == // Some subscriber that updates the UI.\n\n\nioPerformingPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(uiUpdatingSubscriber)\n\n\nUsing subscribe(on:options:) also causes the upstream publisher to perform cancel() using the specfied scheduler.\n\nSee Also\nSpecifying Schedulers\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher."
    },
    {
        "title": "prefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/just/prefix(while:)",
        "html": "See Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Optional<Output>.Publisher\nfunc drop(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc append<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prefix(Int) -> Optional<Output>.Publisher\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/flatmap(maxpublishers:_:)-mqcb",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nDiscussion\n\nCombine\u2018s flatMap(maxPublishers:_:) operator performs a similar function to the doc://com.apple.documentation/documentation/Swift/Sequence/2905332-flatmap operator in the Swift standard library, but turns the elements from one kind of publisher into a new publisher that is sent to subscribers. Use flatMap(maxPublishers:_:) when you want to create a new series of events for downstream subscribers based on the received value. The closure creates the new Publisher based on the received value. The new Publisher can emit more than one event, and successful completion of the new Publisher does not complete the overall stream. Failure of the new Publisher causes the overall stream to fail.\n\nIn the example below, a PassthroughSubject publishes WeatherStation elements. The flatMap(maxPublishers:_:) receives each element, creates a URL from it, and produces a new URLSession.DataTaskPublisher, which will publish the data loaded from that URL.\n\npublic struct WeatherStation {\n    public let stationID: String\n}\n\n\nvar weatherPublisher = PassthroughSubject<WeatherStation, URLError>()\n\n\ncancellable = weatherPublisher.flatMap { station -> URLSession.DataTaskPublisher in\n    let url = URL(string:\"https://weatherapi.example.com/stations/\\(station.stationID)/observations/latest\")!\n    return URLSession.shared.dataTaskPublisher(for: url)\n}\n.sink(\n    receiveCompletion: { completion in\n        // Handle publisher completion (normal or error).\n    },\n    receiveValue: {\n        // Process the received data.\n    }\n )\n\n\nweatherPublisher.send(WeatherStation(stationID: \"KSFO\")) // San Francisco, CA\nweatherPublisher.send(WeatherStation(stationID: \"EGLC\")) // London, UK\nweatherPublisher.send(WeatherStation(stationID: \"ZBBB\")) // Beijing, CN\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "output(at:)",
        "url": "https://developer.apple.com/documentation/combine/just/output(at:)",
        "html": "See Also\nSelecting Specific Elements\nfunc first() -> Just<Output>\nfunc first(where: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Just<Output>\nfunc last(where: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output<R>(in: R) -> Optional<Output>.Publisher"
    },
    {
        "title": "first()",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/first()",
        "html": "Return Value\n\nA publisher that only publishes the first element of a stream.\n\nDiscussion\n\nUse first() to publish just the first element from an upstream publisher, then finish normally. The first() operator requests unlimited from its upstream as soon as downstream requests at least one element. If the upstream completes before first() receives any elements, it completes without emitting any values.\n\nIn this example, the first() publisher republishes the first element received from the sequence publisher, -10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first()\n    .sink { print(\"\\($0)\") }\n\n\n// Print: \"-10\"\n\nSee Also\nSelecting Specific Elements\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "makeConnectable()",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/makeconnectable()",
        "html": "Return Value\n\nA ConnectablePublisher wrapping this publisher.\n\nDiscussion\n\nIn the following example, makeConnectable() wraps its upstream publisher (an instance of Publishers.Share) with a ConnectablePublisher. Without this, the first sink subscriber would receive all the elements from the sequence publisher and cause it to complete before the second subscriber attaches. By making the publisher connectable, the publisher doesn\u2019t produce any elements until after the connect() call.\n\n let subject = Just<String>(\"Sent\")\n let pub = subject\n     .share()\n     .makeConnectable()\n cancellable1 = pub.sink { print (\"Stream 1 received: \\($0)\")  }\n\n\n // For example purposes, use DispatchQueue to add a second subscriber\n // a second later, and then connect to the publisher a second after that.\n DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n     self.cancellable2 = pub.sink { print (\"Stream 2 received: \\($0)\") }\n }\n DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     self.connectable = pub.connect()\n }\n // Prints:\n // Stream 2 received: Sent\n // Stream 1 received: Sent\n\n\nNote\n\nThe connect() operator returns a Cancellable instance that you must retain. You can also use this instance to cancel publishing."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/flatmap(maxpublishers:_:)-70hvn",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "last()",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/last()",
        "html": "Return Value\n\nA publisher that only publishes the last element of a stream.\n\nDiscussion\n\nUse last() when you need to emit only the last element from an upstream publisher.\n\nIn the example below, the range publisher only emits the last element from the sequence publisher, 10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "setFailureType(to:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/setfailuretype(to:)",
        "html": "Parameters\nfailureType\n\nThe Failure type presented by this publisher.\n\nReturn Value\n\nA publisher that appears to send the specified failure type.\n\nDiscussion\n\nUse setFailureType(to:) when you need set the error type of a publisher that cannot fail.\n\nConversely, if the upstream can fail, you would use mapError(_:) to provide instructions on converting the error types to needed by the downstream publisher\u2019s inputs.\n\nThe following example has two publishers with mismatched error types: pub1\u2019s error type is Never, and pub2\u2019s error type is Error. Because of the mismatch, the combineLatest(_:) operator requires that pub1 use setFailureType(to:) to make it appear that pub1 can produce the Error type, like pub2 can.\n\nlet pub1 = [0, 1, 2, 3, 4, 5].publisher\nlet pub2 = CurrentValueSubject<Int, Error>(0)\nlet cancellable = pub1\n    .setFailureType(to: Error.self)\n    .combineLatest(pub2)\n    .sink(\n        receiveCompletion: { print (\"completed: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\")}\n     )\n\n\n// Prints: \"value: (5, 0)\".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure."
    },
    {
        "title": "merge(with:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/merge(with:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\n\n\n//Prints: \"1 40 90 -1 33 44 2 50 100 -2 33 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/merge(with:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\n\n\n// Prints: \"1 40 90 -1 2 50 100 -2 \"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/merge(with:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers; it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubE, pubG)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\n\n\n//Prints: \"1 40 90 -1 33 44 54 2 50 100 -2 33 33 54\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/merge(with:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:). To combine elements from multiple upstream publishers, use zip(_:_:).\n\nIn this example, as merge(with:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubA.send(2)\npubB.send(50)\npubC.send(100)\n\n\n// Prints: \"1 40 90 2 50 100\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "measureInterval(using:options:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/measureinterval(using:options:)",
        "html": "Parameters\nscheduler\n\nA scheduler to use for tracking the timing of events.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher that emits elements representing the time interval between the elements it receives.\n\nDiscussion\n\nUse measureInterval(using:options:) to measure the time between events delivered from an upstream publisher.\n\nIn the example below, a 1-second Timer is used as the data source for an event publisher; the measureInterval(using:options:) operator reports the elapsed time between the reception of events on the main run loop:\n\ncancellable = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .measureInterval(using: RunLoop.main)\n    .sink { print(\"\\($0)\", terminator: \"\\n\") }\n\n\n// Prints:\n//      Stride(magnitude: 1.0013610124588013)\n//      Stride(magnitude: 0.9992760419845581)\n\n\nThe output type of the returned publisher is the time interval of the provided scheduler.\n\nThis operator uses the provided scheduler\u2019s now property to measure intervals between events.\n\nSee Also\nControlling Timing\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "max()",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/max()",
        "html": "Return Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max() to determine the maximum value in the stream of elements from an upstream publisher.\n\nIn the example below, the max() operator emits a value when the publisher finishes, that value is the maximum of the values received from upstream, which is 10.\n\nlet numbers = [0, 10, 5]\ncancellable = numbers.publisher\n    .max()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "map(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/map(_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of another property on Output.\n\nReturn Value\n\nA publisher that publishes the values of two key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:) operator uses the Swift key path syntax to access the die1 and die2 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these two values (as an (Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1) (total: \\(values.0 + values.1))\")\n    }\n// Prints \"Rolled: 6, 4 (total: 10)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "mapError(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/maperror(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes the upstream failure as a parameter and returns a new error for the publisher to terminate with.\n\nReturn Value\n\nA publisher that replaces any upstream failure with a new error produced by the transform closure.\n\nDiscussion\n\nUse the mapError(_:) operator when you need to replace one error type with another, or where a downstream operator needs the error types of its inputs to match.\n\nThe following example uses a tryMap(_:) operator to divide 1 by each element produced by a sequence publisher. When the publisher produces a 0, the tryMap(_:) fails with a DivisionByZeroError. The mapError(_:) operator converts this into a MyGenericError.\n\nstruct DivisionByZeroError: Error {}\nstruct MyGenericError: Error { var wrappedError: Error }\n\n\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n       guard divisor != 0 else { throw DivisionByZeroError() }\n       return dividend / divisor\n   }\n\n\nlet divisors: [Double] = [5, 4, 3, 2, 1, 0]\ndivisors.publisher\n    .tryMap { try myDivide(1, $0) }\n    .mapError { MyGenericError(wrappedError: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") ,\n        receiveValue: { print (\"value: \\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"0.2 0.25 0.3333333333333333 0.5 1.0 completion: failure(MyGenericError(wrappedError: DivisionByZeroError()))\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/combinelatest(_:_:_:)-537t",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest<P, Q>(_:,_:) to combine the current and two additional publishers and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer. All upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nIn the example below, combineLatest() receives the most-recent values published by three publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3) { firstValue, secondValue, thirdValue in\n        return firstValue * secondValue * thirdValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(10)\n\n\npub.send(9)\npub3.send(4)\npub2.send(12)\n\n\n// Prints:\n//  Result: 40.     // pub = 2, pub2 = 2, pub3 = 10\n//  Result: 180.    // pub = 9, pub2 = 2, pub3 = 10\n//  Result: 72.     // pub = 9, pub2 = 2, pub3 = 4\n//  Result: 432.    // pub = 9, pub2 = 12, pub3 = 4\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "collect(_:options:)",
        "url": "https://developer.apple.com/documentation/combine/empty/collect(_:options:)",
        "html": "Parameters\nstrategy\n\nThe timing group strategy used by the operator to collect and publish elements.\n\noptions\n\nScheduler options to use for the strategy.\n\nReturn Value\n\nA publisher that collects elements by a given strategy, and emits a single array of the collection.\n\nDiscussion\n\nUse collect(_:options:) to emit arrays of elements on a schedule specified by a Scheduler and Stride that you provide. At the end of each scheduled interval, the publisher sends an array that contains the items it collected. If the upstream publisher finishes before filling the buffer, the publisher sends an array that contains items it received. This may be fewer than the number of elements specified in the requested Stride.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThe example above collects timestamps generated on a one-second Timer in groups (Stride) of five.\n\nlet sub = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .collect(.byTime(RunLoop.main, .seconds(5)))\n    .sink { print(\"\\($0)\", terminator: \"\\n\\n\") }\n\n\n// Prints: \"[2020-01-24 00:54:46 +0000, 2020-01-24 00:54:47 +0000,\n//          2020-01-24 00:54:48 +0000, 2020-01-24 00:54:49 +0000,\n//          2020-01-24 00:54:50 +0000]\"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/combinelatest(_:_:)-m3al",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest<P,T>(_:) to combine the current and one additional publisher and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn the example below, combineLatest() receives the most-recent values published by the two publishers, it multiplies them together, and republishes the result:\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2) { (first, second) in\n        return first * second\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(9)\npub1.send(3)\npub2.send(12)\npub1.send(13)\n//\n// Prints:\n//Result: 4.    (pub1 latest = 2, pub2 latest = 2)\n//Result: 18.   (pub1 latest = 9, pub2 latest = 2)\n//Result: 6.    (pub1 latest = 3, pub2 latest = 2)\n//Result: 36.   (pub1 latest = 3, pub2 latest = 12)\n//Result: 156.  (pub1 latest = 13, pub2 latest = 12)\n\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "drop(while:)",
        "url": "https://developer.apple.com/documentation/combine/just/drop(while:)",
        "html": "See Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Optional<Output>.Publisher\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc append<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prefix(Int) -> Optional<Output>.Publisher\nfunc prefix(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "allSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/allsatisfy(_:)",
        "html": "See Also\nApplying Matching Criteria to Elements\nfunc contains(Output) -> Just<Bool>\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Output) -> Bool) -> Just<Bool>\nfunc tryContains(where: (Output) throws -> Bool) -> Result<Bool, Error>.Publisher\nfunc tryAllSatisfy((Output) throws -> Bool) -> Result<Bool, Error>.Publisher"
    },
    {
        "title": "append(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/append(_:)-7eyqj",
        "html": "See Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Optional<Output>.Publisher\nfunc drop(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prefix(Int) -> Optional<Output>.Publisher\nfunc prefix(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "dropFirst(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/dropfirst(_:)",
        "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence."
    },
    {
        "title": "reduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/reduce(_:_:)-5jyg9",
        "html": "See Also\nReducing Elements\nfunc collect() -> Just<[Output]>\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Empty<Output, Just<Output>.Failure>\nfunc tryReduce<T>(T, (T, Output) throws -> T) -> Result<T, Error>.Publisher"
    },
    {
        "title": "min()",
        "url": "https://developer.apple.com/documentation/combine/just/min()-6ix7s",
        "html": "See Also\nApplying Mathematical Operations on Elements\nfunc count() -> Just<Int>\nfunc max() -> Just<Output>\nAvailable when Output conforms to Comparable.\nfunc max(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "removeDuplicates()",
        "url": "https://developer.apple.com/documentation/combine/just/removeduplicates()-9qnux",
        "html": "See Also\nFiltering Elements\nfunc filter((Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Output) -> T?) -> Optional<T>.Publisher\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryRemoveDuplicates(by: (Output, Output) throws -> Bool) -> Result<Output, Error>.Publisher\nfunc replaceEmpty(with: Output) -> Just<Output>\nfunc replaceError(with: Output) -> Just<Output>"
    },
    {
        "title": "replaceError(with:)",
        "url": "https://developer.apple.com/documentation/combine/just/replaceerror(with:)",
        "html": "See Also\nFiltering Elements\nfunc filter((Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Output) -> T?) -> Optional<T>.Publisher\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Just<Output>\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryRemoveDuplicates(by: (Output, Output) throws -> Bool) -> Result<Output, Error>.Publisher\nfunc replaceEmpty(with: Output) -> Just<Output>"
    },
    {
        "title": "tryMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/trymap(_:)-8qhbt",
        "html": "See Also\nMapping Elements\nfunc map<T>((Output) -> T) -> Just<T>\nfunc mapError<E>((Just<Output>.Failure) -> E) -> Result<Output, E>.Publisher\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Output) -> T) -> Result<T, Just<Output>.Failure>.Publisher\nfunc tryScan<T>(T, (T, Output) throws -> T) -> Result<T, Error>.Publisher\nfunc setFailureType<E>(to: E.Type) -> Result<Output, E>.Publisher"
    },
    {
        "title": "init(from:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/completion/init(from:)",
        "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
    },
    {
        "title": "sink(receiveCompletion:receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/empty/sink(receivecompletion:receivevalue:)",
        "html": "Parameters\nreceiveComplete\n\nThe closure to execute on completion.\n\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveCompletion:receiveValue:) to observe values received by the publisher and process them using a closure you specify.\n\nIn this example, a Range publisher publishes integers to a sink(receiveCompletion:receiveValue:) operator\u2019s receiveValue closure that prints them to the console. Upon completion the sink(receiveCompletion:receiveValue:) operator\u2019s receiveCompletion closure indicates the successful termination of the stream.\n\nlet myRange = (0...3)\ncancellable = myRange.publisher\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0)\") })\n\n\n// Prints:\n//  value: 0\n//  value: 1\n//  value: 2\n//  value: 3\n//  completion: finished\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "print(_:to:)",
        "url": "https://developer.apple.com/documentation/combine/empty/print(_:to:)",
        "html": "Parameters\nprefix\n\nA string \u2014- which defaults to empty -\u2014 with which to prefix all log messages.\n\nstream\n\nA stream for text output that receives messages, and which directs output to the console by default. A custom stream can be used to log messages to other destinations.\n\nReturn Value\n\nA publisher that prints log messages for all publishing events.\n\nDiscussion\n\nUse print(_:to:) to log messages the console.\n\nIn the example below, log messages are printed on the console:\n\nlet integers = (1...2)\ncancellable = integers.publisher\n   .print(\"Logged a message\", to: nil)\n   .sink { _ in }\n\n\n// Prints:\n//  Logged a message: receive subscription: (1..<2)\n//  Logged a message: request unlimited\n//  Logged a message: receive value: (1)\n//  Logged a message: receive finished\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur."
    },
    {
        "title": "breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)",
        "url": "https://developer.apple.com/documentation/combine/empty/breakpoint(receivesubscription:receiveoutput:receivecompletion:)",
        "html": "Parameters\nreceiveSubscription\n\nA closure that executes when the publisher receives a subscription. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveOutput\n\nA closure that executes when the publisher receives a value. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveCompletion\n\nA closure that executes when the publisher receives a completion. Return true from this closure to raise SIGTRAP, or false to continue.\n\nReturn Value\n\nA publisher that raises a debugger signal when one of the provided closures returns true.\n\nDiscussion\n\nUse breakpoint(receiveSubscription:receiveOutput:receiveCompletion:) to examine one or more stages of the subscribe/publish/completion process and stop in the debugger, based on conditions you specify. When any of the provided closures returns true, this operator raises the SIGTRAP signal to stop the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn the example below, a PassthroughSubject publishes strings to a breakpoint republisher. When the breakpoint receives the string \u201cDEBUGGER\u201d, it returns true, which stops the app in the debugger.\n\nlet publisher = PassthroughSubject<String?, Never>()\ncancellable = publisher\n    .breakpoint(\n        receiveOutput: { value in return value == \"DEBUGGER\" }\n    )\n    .sink { print(\"\\(String(describing: $0))\" , terminator: \" \") }\n\n\npublisher.send(\"DEBUGGER\")\n\n\n// Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n// Depending on your specific environment, the console messages may\n// also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "breakpointOnError()",
        "url": "https://developer.apple.com/documentation/combine/empty/breakpointonerror()",
        "html": "Return Value\n\nA publisher that raises a debugger signal upon receiving a failure.\n\nDiscussion\n\nWhen the upstream publisher fails with an error, this publisher raises the SIGTRAP signal, which stops the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn this example a PassthroughSubject publishes strings, but its downstream tryMap(_:) operator throws an error. This sends the error downstream as a Subscribers.Completion.failure(_:). The breakpointOnError() operator receives this completion and stops the app in the debugger.\n\n struct CustomError : Error {}\n let publisher = PassthroughSubject<String?, Error>()\n cancellable = publisher\n     .tryMap { stringValue in\n         throw CustomError()\n     }\n     .breakpointOnError()\n     .sink(\n         receiveCompletion: { completion in print(\"Completion: \\(String(describing: completion))\") },\n         receiveValue: { aValue in print(\"Result: \\(String(describing: aValue))\") }\n     )\n\n\n publisher.send(\"TEST DATA\")\n\n\n // Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n // Depending on your specific environment, the console messages may\n // also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)",
        "url": "https://developer.apple.com/documentation/combine/empty/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)",
        "html": "Parameters\nreceiveSubscription\n\nAn optional closure that executes when the publisher receives the subscription from the upstream publisher. This value defaults to nil.\n\nreceiveOutput\n\nAn optional closure that executes when the publisher receives a value from the upstream publisher. This value defaults to nil.\n\nreceiveCompletion\n\nAn optional closure that executes when the upstream publisher finishes normally or terminates with an error. This value defaults to nil.\n\nreceiveCancel\n\nAn optional closure that executes when the downstream receiver cancels publishing. This value defaults to nil.\n\nreceiveRequest\n\nAn optional closure that executes when the publisher receives a request for more elements. This value defaults to nil.\n\nReturn Value\n\nA publisher that performs the specified closures when publisher events occur.\n\nDiscussion\n\nUse handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:) when you want to examine elements as they progress through the stages of the publisher\u2019s lifecycle.\n\nIn the example below, a publisher of integers shows the effect of printing debugging information at each stage of the element-processing lifecycle:\n\nlet integers = (0...2)\ncancellable = integers.publisher\n    .handleEvents(receiveSubscription: { subs in\n        print(\"Subscription: \\(subs.combineIdentifier)\")\n    }, receiveOutput: { anInt in\n        print(\"in output handler, received \\(anInt)\")\n    }, receiveCompletion: { _ in\n        print(\"in completion handler\")\n    }, receiveCancel: {\n        print(\"received cancel\")\n    }, receiveRequest: { (demand) in\n        print(\"received demand: \\(demand.description)\")\n    })\n    .sink { _ in return }\n\n\n// Prints:\n//   received demand: unlimited\n//   Subscription: 0x7f81284734c0\n//   in output handler, received 0\n//   in output handler, received 1\n//   in output handler, received 2\n//   in completion handler\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "eraseToAnyPublisher()",
        "url": "https://developer.apple.com/documentation/combine/empty/erasetoanypublisher()",
        "html": "Return Value\n\nAn AnyPublisher wrapping this publisher.\n\nDiscussion\n\nUse eraseToAnyPublisher() to expose an instance of AnyPublisher to the downstream subscriber, rather than this publisher\u2019s actual type. This form of type erasure preserves abstraction across API boundaries, such as different modules. When you expose your publishers as the AnyPublisher type, you can change the underlying implementation over time without affecting existing clients.\n\nThe following example shows two types that each have a publisher property. TypeWithSubject exposes this property as its actual type, PassthroughSubject, while TypeWithErasedSubject uses eraseToAnyPublisher() to expose it as an AnyPublisher. As seen in the output, a caller from another module can access TypeWithSubject.publisher as its native type. This means you can\u2019t change your publisher to a different type without breaking the caller. By comparison, TypeWithErasedSubject.publisher appears to callers as an AnyPublisher, so you can change the underlying publisher type at will.\n\npublic class TypeWithSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n}\npublic class TypeWithErasedSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n        .eraseToAnyPublisher()\n}\n\n\n// In another module:\nlet nonErased = TypeWithSubject()\nif let subject = nonErased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast nonErased.publisher.\")\n}\nlet erased = TypeWithErasedSubject()\nif let subject = erased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast erased.publisher.\")\n}\n\n\n// Prints \"Successfully cast nonErased.publisher.\"\n"
    },
    {
        "title": "share()",
        "url": "https://developer.apple.com/documentation/combine/empty/share()",
        "html": "Return Value\n\nA class instance that shares elements received from its upstream to multiple subscribers.\n\nDiscussion\n\nThe publisher returned by this operator supports multiple subscribers, all of whom receive unchanged elements and completion states from the upstream publisher.\n\nTip\n\nPublishers.Share is effectively a combination of the Publishers.Multicast and PassthroughSubject publishers, with an implicit autoconnect().\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a share() operator to share the same random number to each of two subscribers. This example uses a delay(for:tolerance:scheduler:options:) operator only to prevent the first subscriber from exhausting the sequence publisher immediately; an asynchronous publisher wouldn\u2019t need this.\n\nlet pub = (1...3).publisher\n    .delay(for: 1, scheduler: DispatchQueue.main)\n    .map( { _ in return Int.random(in: 0...100) } )\n    .print(\"Random\")\n    .share()\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\n\n\n// Prints:\n// Random: receive value: (20)\n// Stream 1 received: 20\n// Stream 2 received: 20\n// Random: receive value: (85)\n// Stream 1 received: 85\n// Stream 2 received: 85\n// Random: receive value: (98)\n// Stream 1 received: 98\n// Stream 2 received: 98\n\n\nWithout the share() operator, stream 1 receives three random values, followed by stream 2 receiving three different random values.\n\nAlso note that Publishers.Share is a class rather than a structure like most other publishers. This means you can use this operator to create a publisher instance that uses reference semantics.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers."
    },
    {
        "title": "assign(to:on:)",
        "url": "https://developer.apple.com/documentation/combine/empty/assign(to:on:)",
        "html": "Parameters\nkeyPath\n\nA key path that indicates the property to assign. See Key-Path Expression in The Swift Programming Language to learn how to use key paths to specify a property of an object.\n\nobject\n\nThe object that contains the property. The subscriber assigns the object\u2019s property every time it receives a new value.\n\nReturn Value\n\nAn AnyCancellable instance. Call cancel() on this instance when you no longer want the publisher to automatically assign the property. Deinitializing this instance will also cancel automatic assignment.\n\nDiscussion\n\nUse the assign(to:on:) subscriber when you want to set a given property each time a publisher produces a value.\n\nIn this example, the assign(to:on:) sets the value of the anInt property on an instance of MyClass:\n\nclass MyClass {\n    var anInt: Int = 0 {\n        didSet {\n            print(\"anInt was set to: \\(anInt)\", terminator: \"; \")\n        }\n    }\n}\n\n\nvar myObject = MyClass()\nlet myRange = (0...2)\ncancellable = myRange.publisher\n    .assign(to: \\.anInt, on: myObject)\n\n\n// Prints: \"anInt was set to: 0; anInt was set to: 1; anInt was set to: 2\"\n\n\nImportant\n\nThe Subscribers.Assign instance created by this operator maintains a strong reference to object, and sets it to nil when the upstream publisher completes (either normally or with an error).\n\nSee Also\nConnecting Simple Subscribers\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "first(where:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/first(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that\u2019s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends."
    },
    {
        "title": "receive(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/empty/receive(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler the publisher uses for element delivery.\n\noptions\n\nScheduler options used to customize element delivery.\n\nReturn Value\n\nA publisher that delivers elements using the specified scheduler.\n\nDiscussion\n\nYou use the receive(on:options:) operator to receive results and completion on a specific scheduler, such as performing UI work on the main run loop. In contrast with subscribe(on:options:), which affects upstream messages, receive(on:options:) changes the execution context of downstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes jsonPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes labelUpdater to receive elements and completion on RunLoop.main.\n\nlet jsonPublisher = MyJSONLoaderPublisher() // Some publisher.\nlet labelUpdater = MyLabelUpdateSubscriber() // Some subscriber that updates the UI.\n\n\njsonPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(labelUpdater)\n\n\nPrefer receive(on:options:) over explicit use of dispatch queues when performing work in subscribers. For example, instead of the following pattern:\n\npub.sink {\n    DispatchQueue.main.async {\n        // Do something.\n    }\n}\n\n\nUse this pattern instead:\n\npub.receive(on: DispatchQueue.main).sink {\n    // Do something.\n}\n\n\nNote\n\nreceive(on:options:) doesn\u2019t affect the scheduler used to call the subscriber\u2019s receive(subscription:) method.\n\nSee Also\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations."
    },
    {
        "title": "multicast(subject:)",
        "url": "https://developer.apple.com/documentation/combine/empty/multicast(subject:)",
        "html": "Parameters\nsubject\n\nA subject to deliver elements to downstream subscribers.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(_:), this method produces a publisher that shares the provided Subject among all the downstream subscribers.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(subject:) operator with a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast(subject: PassthroughSubject<(String, Int), Never>())\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 78))\n// Stream 2 received: (\"First\", 78)\n// Stream 1 received: (\"First\", 78)\n// Random: receive value: ((\"Second\", 98))\n// Stream 2 received: (\"Second\", 98)\n// Stream 1 received: (\"Second\", 98)\n// Random: receive value: ((\"Third\", 61))\n// Stream 2 received: (\"Third\", 61)\n// Stream 1 received: (\"Third\", 61)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "makeConnectable()",
        "url": "https://developer.apple.com/documentation/combine/empty/makeconnectable()",
        "html": "Return Value\n\nA ConnectablePublisher wrapping this publisher.\n\nDiscussion\n\nIn the following example, makeConnectable() wraps its upstream publisher (an instance of Publishers.Share) with a ConnectablePublisher. Without this, the first sink subscriber would receive all the elements from the sequence publisher and cause it to complete before the second subscriber attaches. By making the publisher connectable, the publisher doesn\u2019t produce any elements until after the connect() call.\n\n let subject = Just<String>(\"Sent\")\n let pub = subject\n     .share()\n     .makeConnectable()\n cancellable1 = pub.sink { print (\"Stream 1 received: \\($0)\")  }\n\n\n // For example purposes, use DispatchQueue to add a second subscriber\n // a second later, and then connect to the publisher a second after that.\n DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n     self.cancellable2 = pub.sink { print (\"Stream 2 received: \\($0)\") }\n }\n DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     self.connectable = pub.connect()\n }\n // Prints:\n // Stream 2 received: Sent\n // Stream 1 received: Sent\n\n\nNote\n\nThe connect() operator returns a Cancellable instance that you must retain. You can also use this instance to cancel publishing."
    },
    {
        "title": "buffer(size:prefetch:whenFull:)",
        "url": "https://developer.apple.com/documentation/combine/empty/buffer(size:prefetch:whenfull:)",
        "html": "Parameters\nsize\n\nThe maximum number of elements to store.\n\nprefetch\n\nThe strategy to initially populate the buffer.\n\nwhenFull\n\nThe action to take when the buffer becomes full.\n\nReturn Value\n\nA publisher that buffers elements received from an upstream publisher.\n\nDiscussion\n\nUse buffer(size:prefetch:whenFull:) to collect a specific number of elements from an upstream publisher before republishing them to the downstream subscriber according to the Publishers.BufferingStrategy and Publishers.PrefetchStrategy strategy you specify.\n\nIf the publisher completes before reaching the size threshold, it buffers the elements and publishes them downstream prior to completion."
    },
    {
        "title": "values",
        "url": "https://developer.apple.com/documentation/combine/empty/values",
        "html": "Discussion\n\nThis property provides an AsyncThrowingPublisher, which allows you to use the Swift async-await syntax to receive the publisher\u2019s elements. Because AsyncPublisher conforms to AsyncSequence, you iterate over its elements with a for-await-in loop, rather than attaching a subscriber. If the publisher terminates with an error, the awaiting caller receives the error as a throw.\n\nThe following example shows how to use the values property to receive elements asynchronously. The example adapts a code snippet from the tryFilter(_:) operator\u2019s documentation, which filters a sequence to only emit even integers, and terminate with an error on a 0. This example replaces the Subscribers.Sink subscriber with a for-await-in loop that iterates over the AsyncPublisher provided by the values property. With this approach, the error handling previously provided in the sink subscriber\u2019s receiveCompletion closure goes instead in a catch block.\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\nlet filterPublisher = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n\n\ndo {\n    for try await number in filterPublisher.values {\n        print (\"\\(number)\", terminator: \" \")\n    }\n} catch {\n    print (\"\\(error)\")\n}\n"
    },
    {
        "title": "max()",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/max()",
        "html": "Return Value\n\nThe sequence\u2019s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The max() method returns the max value of the sequence.\n\nlet max = await Counter(howHigh: 10)\n    .max()\nprint(max ?? \"none\")\n// Prints \"10\"\n"
    },
    {
        "title": "catch(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/catch(_:)",
        "html": "Parameters\nhandler\n\nA closure that accepts the upstream failure as input and returns a publisher to replace the upstream publisher.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\n\nDiscussion\n\nUse catch() to replace an error from an upstream publisher with a new publisher.\n\nIn the example below, the catch() operator handles the SimpleError thrown by the upstream publisher by replacing the error with a Just publisher. This continues the stream by publishing a single value and completing normally.\n\nstruct SimpleError: Error {}\nlet numbers = [5, 4, 3, 2, 1, 0, 9, 8, 7, 6]\ncancellable = numbers.publisher\n    .tryLast(where: {\n        guard $0 != 0 else {throw SimpleError()}\n        return true\n    })\n    .catch({ (error) in\n        Just(-1)\n    })\n    .sink { print(\"\\($0)\") }\n    // Prints: -1\n\n\nBackpressure note: This publisher passes through request and cancel to the upstream. After receiving an error, the publisher sends sends any unfulfilled demand to the new Publisher. SeeAlso: replaceError\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/flatmap(maxpublishers:_:)-4dp7o",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/compactmap(_:)",
        "html": "Parameters\ntransform\n\nA closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of the calling the supplied closure.\n\nDiscussion\n\nCombine\u2019s compactMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/2950916-compactmap in the Swift standard library: the compactMap(_:) operator in Combine removes nil elements in a publisher\u2019s stream and republishes non-nil elements to the downstream subscriber.\n\nThe example below uses a range of numbers as the source for a collection based publisher. The compactMap(_:) operator consumes each element from the numbers publisher attempting to access the dictionary using the element as the key. If the example\u2019s dictionary returns a nil, due to a non-existent key, compactMap(_:) filters out the nil (missing) elements.\n\nlet numbers = (0...5)\nlet romanNumeralDict: [Int : String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ncancellable = numbers.publisher\n    .compactMap { romanNumeralDict[$0] }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"I II III V\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "decode(type:decoder:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/decode(type:decoder:)",
        "html": "Parameters\ntype\n\nThe encoded data to decode into a struct that conforms to the Decodable protocol.\n\ndecoder\n\nA decoder that implements the TopLevelDecoder protocol.\n\nReturn Value\n\nA publisher that decodes a given type using a specified decoder and publishes the result.\n\nDiscussion\n\nUse decode(type:decoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to decode data received from a URLSession.DataTaskPublisher or other data source using the Decodable protocol.\n\nIn this example, a PassthroughSubject publishes a JSON string. The JSON decoder parses the string, converting its fields according to the Decodable protocol implemented by Article, and successfully populating a new Article. The Publishers.Decode publisher then publishes the Article to the downstream. If a decoding operation fails, which happens in the case of missing or malformed data in the source JSON string, the stream terminates and passes the error to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Data, Never>()\ncancellable = dataProvider\n    .decode(type: Article.self, decoder: JSONDecoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\")},\n          receiveValue: { print (\"value: \\($0)\") })\n\n\ndataProvider.send(Data(\"{\\\"pubDate\\\":1574273638.575666, \\\"title\\\" : \\\"My First Article\\\", \\\"author\\\" : \\\"Gita Kumar\\\" }\".utf8))\n\n\n// Prints: \".sink() data received Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: 2050-11-20 18:13:58 +0000)\"\n\nSee Also\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable."
    },
    {
        "title": "delay(for:tolerance:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/delay(for:tolerance:scheduler:options:)",
        "html": "Parameters\ninterval\n\nThe amount of time to delay.\n\ntolerance\n\nThe allowed tolerance in delivering delayed events. The Delay publisher may deliver elements this much sooner or later than the interval specifies.\n\nscheduler\n\nThe scheduler to deliver the delayed events.\n\noptions\n\nOptions relevant to the scheduler\u2019s behavior.\n\nReturn Value\n\nA publisher that delays delivery of elements and completion to the downstream receiver.\n\nDiscussion\n\nUse delay(for:tolerance:scheduler:options:) when you need to delay the delivery of elements to a downstream by a specified amount of time.\n\nIn this example, a Timer publishes an event every second. The delay(for:tolerance:scheduler:options:) operator holds the delivery of the initial element for 3 seconds (\u00b10.5 seconds), after which each element is delivered to the downstream on the main run loop after the specified delay:\n\nlet df = DateFormatter()\ndf.dateStyle = .none\ndf.timeStyle = .long\ncancellable = Timer.publish(every: 1.0, on: .main, in: .default)\n    .autoconnect()\n    .handleEvents(receiveOutput: { date in\n        print (\"Sending Timestamp \\'\\(df.string(from: date))\\' to delay()\")\n    })\n    .delay(for: .seconds(3), scheduler: RunLoop.main, options: .none)\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \"\\n\") },\n        receiveValue: { value in\n            let now = Date()\n            print (\"At \\(df.string(from: now)) received  Timestamp \\'\\(df.string(from: value))\\' sent: \\(String(format: \"%.2f\", now.timeIntervalSince(value))) secs ago\", terminator: \"\\n\")\n        }\n    )\n\n\n// Prints:\n//    Sending Timestamp '5:02:33 PM PDT' to delay()\n//    Sending Timestamp '5:02:34 PM PDT' to delay()\n//    Sending Timestamp '5:02:35 PM PDT' to delay()\n//    Sending Timestamp '5:02:36 PM PDT' to delay()\n//    At 5:02:36 PM PDT received  Timestamp '5:02:33 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:37 PM PDT' to delay()\n//    At 5:02:37 PM PDT received  Timestamp '5:02:34 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:38 PM PDT' to delay()\n//    At 5:02:38 PM PDT received  Timestamp '5:02:35 PM PDT' sent: 3.00 secs ago\n\n\nThe delay affects the delivery of elements and completion, but not of the original subscription.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "drop(while:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/drop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an upstream publisher until the element received meets a condition you specify.\n\nIn the example below, the operator omits all elements in the stream until the first element arrives that\u2019s a positive integer, after which the operator publishes all remaining elements:\n\nlet numbers = [-62, -1, 0, 10, 0, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .drop { $0 <= 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10 0, 22 41 -1 5\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "debounce(for:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/debounce(for:scheduler:options:)",
        "html": "Parameters\ndueTime\n\nThe time the publisher should wait before publishing an element.\n\nscheduler\n\nThe scheduler on which this publisher delivers elements\n\noptions\n\nScheduler options that customize this publisher\u2019s delivery of elements.\n\nReturn Value\n\nA publisher that publishes events only after a specified time elapses.\n\nDiscussion\n\nUse the debounce(for:scheduler:options:) operator to control the number of values and time between delivery of values from the upstream publisher. This operator is useful to process bursty or high-volume event streams where you need to reduce the number of values delivered to the downstream to a rate you specify.\n\nIn this example, a PassthroughSubject publishes elements on a schedule defined by the bounces array. The array is composed of tuples representing a value sent by the PassthroughSubject, and a TimeInterval ranging from one-quarter second up to 2 seconds that drives a delivery timer. As the queue builds, elements arriving faster than one-half second debounceInterval are discarded, while elements arriving at a rate slower than debounceInterval are passed through to the sink(receiveValue:) operator.\n\nlet bounces:[(Int,TimeInterval)] = [\n    (0, 0),\n    (1, 0.25),  // 0.25s interval since last index\n    (2, 1),     // 0.75s interval since last index\n    (3, 1.25),  // 0.25s interval since last index\n    (4, 1.5),   // 0.25s interval since last index\n    (5, 2)      // 0.5s interval since last index\n]\n\n\nlet subject = PassthroughSubject<Int, Never>()\ncancellable = subject\n    .debounce(for: .seconds(0.5), scheduler: RunLoop.main)\n    .sink { index in\n        print (\"Received index \\(index)\")\n    }\n\n\nfor bounce in bounces {\n    DispatchQueue.main.asyncAfter(deadline: .now() + bounce.1) {\n        subject.send(bounce.0)\n    }\n}\n\n\n// Prints:\n//  Received index 1\n//  Received index 4\n//  Received index 5\n\n\n//  Here is the event flow shown from the perspective of time, showing value delivery through the `debounce()` operator:\n\n\n//  Time 0: Send index 0.\n//  Time 0.25: Send index 1. Index 0 was waiting and is discarded.\n//  Time 0.75: Debounce period ends, publish index 1.\n//  Time 1: Send index 2.\n//  Time 1.25: Send index 3. Index 2 was waiting and is discarded.\n//  Time 1.5: Send index 4. Index 3 was waiting and is discarded.\n//  Time 2: Debounce period ends, publish index 4. Also, send index 5.\n//  Time 2.5: Debounce period ends, publish index 5.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "dropFirst(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/dropfirst(_:)",
        "html": "Parameters\ncount\n\nThe number of elements to omit. The default is 1.\n\nReturn Value\n\nA publisher that doesn\u2019t republish the first count elements.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the upstream publisher, and republish the remaining elements.\n\nThe example below drops the first five elements from the stream:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncancellable = numbers.publisher\n    .dropFirst(5)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"6 7 8 9 10 \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "encode(encoder:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/encode(encoder:)",
        "html": "Parameters\nencoder\n\nAn encoder that implements the TopLevelEncoder protocol.\n\nReturn Value\n\nA publisher that encodes received elements using a specified encoder, and publishes the resulting data.\n\nDiscussion\n\nUse encode(encoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to encode an Encodable struct into Data that could be used to make a JSON string (or written to disk as a binary plist in the case of property lists).\n\nIn this example, a PassthroughSubject publishes an Article. The encode(encoder:) operator encodes the properties of the Article struct into a new JSON string according to the Codable protocol adopted by Article. The operator publishes the resulting JSON string to the downstream subscriber. If the encoding operation fails, which can happen in the case of complex properties that can\u2019t be directly transformed into JSON, the stream terminates and the error is passed to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Article, Never>()\nlet cancellable = dataProvider\n    .encode(encoder: JSONEncoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\") },\n          receiveValue: {  data in\n            guard let stringRepresentation = String(data: data, encoding: .utf8) else { return }\n            print(\"Data received \\(data) string representation: \\(stringRepresentation)\")\n    })\n\n\ndataProvider.send(Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: Date()))\n\n\n// Prints: \"Data received 86 bytes string representation: {\"title\":\"My First Article\",\"author\":\"Gita Kumar\",\"pubDate\":606211803.279603}\"\n\nSee Also\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder."
    },
    {
        "title": "contains(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/contains(_:)",
        "html": "Parameters\noutput\n\nAn element to match against.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(_:) to find the first element in an upstream that\u2019s equal to the supplied argument. The contains publisher consumes all received elements until the upstream publisher produces a matching element. Upon finding the first match, it emits true and finishes normally. If the upstream finishes normally without producing a matching element, this publisher emits false and finishes.\n\nIn the example below, the contains(_:) operator emits true the first time it receives the value 5 from the numbers.publisher, and then finishes normally.\n\nlet numbers = [-1, 5, 10, 5]\nnumbers.publisher\n    .contains(5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "contains(where:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/contains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(where:) to find the first element in an upstream that satisfies the closure you provide. This operator consumes elements produced from the upstream publisher until the upstream publisher produces a matching element.\n\nThis operator is useful when the upstream publisher produces elements that don\u2019t conform to Equatable.\n\nIn the example below, the contains(where:) operator tests elements against the supplied closure and emits true for the first elements that\u2019s greater than 4, and then finishes normally.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .contains {$0 > 4}\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "filter(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/filter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value indicating whether to republish the element.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nCombine\u2019s filter(_:) operator performs an operation similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018365-filter in the Swift Standard Library: it uses a closure to test each element to determine whether to republish the element to the downstream subscriber.\n\nThe following example, uses a filter operation that receives an Int and only republishes a value if it\u2019s even.\n\nlet numbers: [Int] = [1, 2, 3, 4, 5]\ncancellable = numbers.publisher\n    .filter { $0 % 2 == 0 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 4\"\n\nSee Also\nFiltering Elements\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "first(where:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/first(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse first(where:) to republish only the first element of a stream that satisfies a closure you specify. The publisher ignores all elements after the first element that satisfies the closure and finishes normally. If this publisher doesn\u2019t receive any elements, it finishes without publishing.\n\nIn the example below, the provided closure causes the Publishers.FirstWhere publisher to republish the first received element that\u2019s greater than 0, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first { $0 > 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"1\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "ignoreOutput()",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/ignoreoutput()",
        "html": "Return Value\n\nA publisher that ignores all upstream elements.\n\nDiscussion\n\nUse the ignoreOutput() operator to determine if a publisher is able to complete successfully or would fail.\n\nIn the example below, the array publisher (numbers) delivers the first five of its elements successfully, as indicated by the ignoreOutput() operator. The operator consumes, but doesn\u2019t republish the elements downstream. However, the sixth element, 0, causes the error throwing closure to catch a NoZeroValuesAllowedError that terminates the stream.\n\nstruct NoZeroValuesAllowedError: Error {}\nlet numbers = [1, 2, 3, 4, 5, 0, 6, 7, 8, 9]\ncancellable = numbers.publisher\n    .tryFilter({ anInt in\n        guard anInt != 0 else { throw NoZeroValuesAllowedError() }\n        return anInt < 20\n    })\n    .ignoreOutput()\n    .sink(receiveCompletion: {print(\"completion: \\($0)\")},\n          receiveValue: {print(\"value \\($0)\")})\n\n\n// Prints: \"completion: failure(NoZeroValuesAllowedError())\"\n\n\nThe output type of this publisher is Never.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "last(where:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/last(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse last(where:) when you need to republish only the last element of a stream that satisfies a closure you specify.\n\nIn the example below, a range publisher emits the last element that satisfies the closure\u2019s criteria, then finishes normally:\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last { $0 < 6 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"5\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/dropuntiloutput/map(_:)-99e3z",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s map(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use map(_:) to transform from one kind of element to another.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A map(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the map(_:)\u2019s closure fails to look up a Roman numeral, it returns the string (unknown).\n\nlet numbers = [5, 4, 3, 2, 1, 0]\nlet romanNumeralDict: [Int : String] =\n   [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\ncancellable = numbers.publisher\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"V IV III II I (unknown)\"\n\n\nIf your closure can throw an error, use Combine\u2019s tryMap(_:) operator instead.\n\nSee Also\nMapping Elements\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "last()",
        "url": "https://developer.apple.com/documentation/combine/just/last()",
        "html": "See Also\nSelecting Specific Elements\nfunc first() -> Just<Output>\nfunc first(where: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last(where: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Optional<Output>.Publisher\nfunc output<R>(in: R) -> Optional<Output>.Publisher"
    },
    {
        "title": "prepend(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/prepend(_:)-7fg73",
        "html": "See Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Optional<Output>.Publisher\nfunc drop(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc append<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prefix(Int) -> Optional<Output>.Publisher\nfunc prefix(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "prefix(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/prefix(_:)",
        "html": "See Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Optional<Output>.Publisher\nfunc drop(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc append<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prefix(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/compactmap(_:)-84zwc",
        "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n"
    },
    {
        "title": "prefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/prefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren\u2019t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n"
    },
    {
        "title": "drop(while:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/drop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is."
    },
    {
        "title": "collect()",
        "url": "https://developer.apple.com/documentation/combine/empty/collect()",
        "html": "Return Value\n\nA publisher that collects all received items and returns them as an array upon completion.\n\nDiscussion\n\nUse collect() to gather elements into an array that the operator emits after the upstream publisher finishes.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThis publisher requests an unlimited number of elements from the upstream publisher and uses an unbounded amount of memory to store the received values. The publisher may exert memory pressure on the system for very large sets of elements.\n\nThe collect() operator only sends the collected array to its downstream receiver after a request whose demand is greater than 0 items. Otherwise, collect() waits until it receives a non-zero request.\n\nIn the example below, an Integer range is a publisher that emits an array of integers:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\nSee Also\nReducing Elements\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "init(exactly:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/init(exactly:)",
        "html": "Discussion\n\nIf exactly can\u2019t convert to an Int, the resulting time interval is nil.\n\nSee Also\nCreating Scheduler Time Strides\ninit(Int)\nCreates an immediate scheduler time interval from the given time interval.\ninit(floatLiteral: Double)\nCreates an immediate scheduler time interval from a floating-point seconds value.\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder.\ninit(integerLiteral: Int)\nCreates an immediate scheduler time interval from an integer seconds value."
    },
    {
        "title": "scan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/scan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nA closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse scan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value.\n\nThe following example logs a running total of all values received from the sequence publisher.\n\nlet range = (0...5)\ncancellable = range.publisher\n    .scan(0) { return $0 + $1 }\n    .sink { print (\"\\($0)\", terminator: \" \") }\n // Prints: \"0 1 3 6 10 15 \".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "combineLatest(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/combinelatest(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:_:) when you need to combine the current and 3 additional publishers and transform the values using a closure in which you specify the published elements, to publish a new element.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, as combineLatest(_:_:_:_:) receives the most-recent values published by four publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4) { firstValue, secondValue, thirdValue, fourthValue in\n        return firstValue * secondValue * thirdValue * fourthValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: 36.     // pub = 2,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 54.     // pub = 3,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 324.    // pub = 3,  pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 1404.   // pub = 13, pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 2964.   // pub = 13, pub2 = 12,  pub3 = 19, pub4 = 1\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "merge(with:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/merge(with:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers; it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubE, pubG)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\n\n\n//Prints: \"1 40 90 -1 33 44 54 2 50 100 -2 33 33 54\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "switchToLatest()",
        "url": "https://developer.apple.com/documentation/combine/empty/switchtolatest()",
        "html": "Discussion\n\nThis operator works with an upstream publisher of publishers, flattening the stream of elements to appear as if they were coming from a single stream of elements. It switches the inner publisher as new ones arrive but keeps the outer publisher constant for downstream subscribers.\n\nWhen this operator receives a new publisher from the upstream publisher, it cancels its previous subscription. Use this feature to prevent earlier publishers from performing unnecessary work, such as creating network request publishers from frequently updating user interface publishers.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/zip(_:_:)-71lun",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two additional publishers to publish a tuple to the downstream. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject; zip(_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:          emojiPub:        zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"      emojiPub: \"\ud83d\ude00\"   zip output: (1, \"A\", \"\ud83d\ude00\")\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:          emojiPub:        zip output: (2, \"B\", \"\ud83e\udd70\")\n\n\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\")\n//  (2, \"B\", \"\ud83e\udd70\")\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/flatmap(maxpublishers:_:)-3v18w",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nDiscussion\n\nCombine\u2018s flatMap(maxPublishers:_:) operator performs a similar function to the doc://com.apple.documentation/documentation/Swift/Sequence/2905332-flatmap operator in the Swift standard library, but turns the elements from one kind of publisher into a new publisher that is sent to subscribers. Use flatMap(maxPublishers:_:) when you want to create a new series of events for downstream subscribers based on the received value. The closure creates the new Publisher based on the received value. The new Publisher can emit more than one event, and successful completion of the new Publisher does not complete the overall stream. Failure of the new Publisher causes the overall stream to fail.\n\nIn the example below, a PassthroughSubject publishes WeatherStation elements. The flatMap(maxPublishers:_:) receives each element, creates a URL from it, and produces a new URLSession.DataTaskPublisher, which will publish the data loaded from that URL.\n\npublic struct WeatherStation {\n    public let stationID: String\n}\n\n\nvar weatherPublisher = PassthroughSubject<WeatherStation, URLError>()\n\n\ncancellable = weatherPublisher.flatMap { station -> URLSession.DataTaskPublisher in\n    let url = URL(string:\"https://weatherapi.example.com/stations/\\(station.stationID)/observations/latest\")!\n    return URLSession.shared.dataTaskPublisher(for: url)\n}\n.sink(\n    receiveCompletion: { completion in\n        // Handle publisher completion (normal or error).\n    },\n    receiveValue: {\n        // Process the received data.\n    }\n )\n\n\nweatherPublisher.send(WeatherStation(stationID: \"KSFO\")) // San Francisco, CA\nweatherPublisher.send(WeatherStation(stationID: \"EGLC\")) // London, UK\nweatherPublisher.send(WeatherStation(stationID: \"ZBBB\")) // Beijing, CN\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "zip(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/zip(_:)",
        "html": "Parameters\nother\n\nAnother publisher.\n\nReturn Value\n\nA publisher that emits pairs of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:) to combine the latest elements from two publishers and emit a tuple to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together as a tuple to the subscriber.\n\nMuch like a zipper or zip fastener on a piece of clothing pulls together rows of teeth to link the two sides, zip(_:) combines streams from two different publishers by linking pairs of elements from each side.\n\nIn this example, numbers and letters are PassthroughSubjects that emit values; once zip(_:) receives one value from each, it publishes the pair as a tuple to the downstream subscriber. It then waits for the next pair of values.\n\n let numbersPub = PassthroughSubject<Int, Never>()\n let lettersPub = PassthroughSubject<String, Never>()\n\n\n cancellable = numbersPub\n     .zip(lettersPub)\n     .sink { print(\"\\($0)\") }\n numbersPub.send(1)    // numbersPub: 1      lettersPub:        zip output: <none>\n numbersPub.send(2)    // numbersPub: 1,2    lettersPub:        zip output: <none>\n letters.send(\"A\")     // numbers: 1,2       letters:\"A\"        zip output: <none>\n numbers.send(3)       // numbers: 1,2,3     letters:           zip output: (1,\"A\")\n letters.send(\"B\")     // numbers: 1,2,3     letters: \"B\"       zip output: (2,\"B\")\n\n\n // Prints:\n //  (1, \"A\")\n //  (2, \"B\")\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "assertNoFailure(_:file:line:)",
        "url": "https://developer.apple.com/documentation/combine/empty/assertnofailure(_:file:line:)",
        "html": "Parameters\nprefix\n\nA string used at the beginning of the fatal error message.\n\nfile\n\nA filename used in the error message. This defaults to #file.\n\nline\n\nA line number used in the error message. This defaults to #line.\n\nReturn Value\n\nA publisher that raises a fatal error when its upstream publisher fails.\n\nDiscussion\n\nUse assertNoFailure() for internal integrity checks that are active during testing. However, it is important to note that, like its Swift counterpart fatalError(_:), the assertNoFailure() operator asserts a fatal exception when triggered during development and testing, and in shipping versions of code.\n\nIn the example below, a CurrentValueSubject publishes the initial and second values successfully. The third value, containing a genericSubjectError, causes the assertNoFailure() operator to assert a fatal exception stopping the process:\n\npublic enum SubjectError: Error {\n    case genericSubjectError\n}\n\n\nlet subject = CurrentValueSubject<String, Error>(\"initial value\")\nsubject\n    .assertNoFailure()\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0).\") }\n    )\n\n\nsubject.send(\"second value\")\nsubject.send(completion: Subscribers.Completion<Error>.failure(SubjectError.genericSubjectError))\n\n\n// Prints:\n//  value: initial value.\n//  value: second value.\n//  The process then terminates in the debugger as the assertNoFailure operator catches the genericSubjectError.\n\nSee Also\nHandling Errors\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "merge(with:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/merge(with:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\n\n\n//Prints: \"1 40 90 -1 33 44 2 50 100 -2 33 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "zip(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/zip(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from four upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:_:) to return a new publisher that combines the elements from three other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, the PassthroughSubject publishers, numbersPub, fractionsPub, lettersPub, and emojiPub emit values. The zip(_:_:_:_:) operator receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times and prints out the value in fractionsPub.\n\nlet numbersPub = PassthroughSubject<Int, Never>()      // first publisher\nlet lettersPub = PassthroughSubject<String, Never>()   // second\nlet emojiPub = PassthroughSubject<String, Never>()     // third\nlet fractionsPub  = PassthroughSubject<Double, Never>()// fourth\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub) { anInt, aLetter, anEmoji, aFraction  in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt)) \\(aFraction)\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:          emojiPub:          zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:\"\ud83d\ude00\"      zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"      emojiPub:          zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"      emojiPub:          zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n// Prints:\n//1 \ud83d\ude00 A 0.1\n//2 \ud83e\udd70\ud83e\udd70 BB 0.8\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/zip(_:_:_:)-41ldf",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from three upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from two other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject that emit values; zip(_:_:_:) receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(letters, emoji) { anInt, aLetter, anEmoji in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt))\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:        emojiPub:            zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"    emojiPub:\"\ud83d\ude00\"        zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:        emojiPub:\"\ud83d\ude00\", \"\ud83e\udd70\"  zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n\n\n// Prints:\n// \ud83d\ude00 A\n// \ud83e\udd70\ud83e\udd70 BB\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/zip(_:_:_:)-7cybc",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from three other publishers to publish a tuple to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, several PassthroughSubject instances emit values; zip(_:_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\nlet fractionsPub  = PassthroughSubject<Double, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 2,3     lettersPub: \"A\"    emojiPub: \"\ud83d\ude00\"  fractionsPub: 0.1     zip output: (1, \"A\", \"\ud83d\ude00\", 0.1)\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: (2, \"B\", \"\ud83e\udd70\", 0.8)\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\", 0.1)\n//  (2, \"B\", \"\ud83e\udd70\", 0.8)\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "tryLast(where:)",
        "url": "https://developer.apple.com/documentation/combine/empty/trylast(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse tryLast(where:) when you need to republish the last element that satisfies an error-throwing closure you specify. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a publisher emits the last element that satisfies the error-throwing closure, then finishes normally:\n\nstruct RangeError: Error {}\n\n\nlet numbers = [-62, 1, 6, 10, 9, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .tryLast {\n        guard 0 != 0  else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n// Prints: \"5 completion: finished\"\n// If instead the numbers array had contained a `0`, the `tryLast` operator would terminate publishing with a RangeError.\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "seconds(_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/seconds(_:)-9uwki",
        "html": "See Also\nCreating Scheduler Time Strides from Seconds\nstatic func microseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of microseconds into an instance of this scheduler time type.\nstatic func milliseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of milliseconds into an instance of this scheduler time type.\nstatic func nanoseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of nanoseconds into an instance of this scheduler time type.\nstatic func seconds(Double) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of seconds, as a floating-point value, into an instance of this scheduler time type."
    },
    {
        "title": "merge(with:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/merge(with:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\n let pubA = PassthroughSubject<Int, Never>()\n let pubB = PassthroughSubject<Int, Never>()\n let pubC = PassthroughSubject<Int, Never>()\n let pubD = PassthroughSubject<Int, Never>()\n let pubE = PassthroughSubject<Int, Never>()\n\n\n cancellable = pubA\n     .merge(with: pubB, pubC, pubD, pubE)\n     .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\n pubA.send(1)\n pubB.send(40)\n pubC.send(90)\n pubD.send(-1)\n pubE.send(33)\n pubA.send(2)\n pubB.send(50)\n pubC.send(100)\n pubD.send(-2)\n pubE.send(33)\n\n\n // Prints: \"1 40 90 -1 33 2 50 100 -2 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/combinelatest(_:_:_:)-7nvl1",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, combineLatest(_:_:_:) receives input from any of the publishers, combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n//\n// Prints:\n//  Result: (2, 2, 9, 1).\n//  Result: (3, 2, 9, 1).\n//  Result: (3, 12, 9, 1).\n//  Result: (13, 12, 9, 1).\n//  Result: (13, 12, 19, 1).\n\n\nIf any individual publisher of the combined set terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers."
    },
    {
        "title": "merge(with:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/merge(with:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:). To combine elements from multiple upstream publishers, use zip(_:_:).\n\nIn this example, as merge(with:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubA.send(2)\npubB.send(50)\npubC.send(100)\n\n\n// Prints: \"1 40 90 2 50 100\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "output(in:)",
        "url": "https://developer.apple.com/documentation/combine/empty/output(in:)",
        "html": "Parameters\nrange\n\nA range that indicates which elements to publish.\n\nReturn Value\n\nA publisher that publishes elements specified by a range.\n\nDiscussion\n\nUse output(in:) to republish a range indices you specify in the published stream. After publishing all elements, the publisher finishes normally. If the publisher completes normally or with an error before producing all the elements in the range, it doesn\u2019t publish the remaining elements.\n\nIn the example below, an array publisher emits the subset of elements at the indices in the specified range:\n\nlet numbers = [1, 1, 2, 2, 2, 3, 4, 5, 6]\nnumbers.publisher\n    .output(in: (3...5))\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 2 3\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements."
    },
    {
        "title": "last(where:)",
        "url": "https://developer.apple.com/documentation/combine/empty/last(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse last(where:) when you need to republish only the last element of a stream that satisfies a closure you specify.\n\nIn the example below, a range publisher emits the last element that satisfies the closure\u2019s criteria, then finishes normally:\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last { $0 < 6 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"5\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "tryAllSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/tryallsatisfy(_:)",
        "html": "See Also\nApplying Matching Criteria to Elements\nfunc contains(Output) -> Just<Bool>\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Output) -> Bool) -> Just<Bool>\nfunc tryContains(where: (Output) throws -> Bool) -> Result<Bool, Error>.Publisher\nfunc allSatisfy((Output) -> Bool) -> Just<Bool>"
    },
    {
        "title": "min(by:)",
        "url": "https://developer.apple.com/documentation/combine/just/min(by:)",
        "html": "See Also\nApplying Mathematical Operations on Elements\nfunc count() -> Just<Int>\nfunc max() -> Just<Output>\nAvailable when Output conforms to Comparable.\nfunc max(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Just<Output>\nAvailable when Output conforms to Comparable.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "append(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/append(_:)-7sxlu",
        "html": "See Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Optional<Output>.Publisher\nfunc drop(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prefix(Int) -> Optional<Output>.Publisher\nfunc prefix(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "last()",
        "url": "https://developer.apple.com/documentation/combine/empty/last()",
        "html": "Return Value\n\nA publisher that only publishes the last element of a stream.\n\nDiscussion\n\nUse last() when you need to emit only the last element from an upstream publisher.\n\nIn the example below, the range publisher only emits the last element from the sequence publisher, 10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "dropFirst(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/dropfirst(_:)",
        "html": "See Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc append<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prefix(Int) -> Optional<Output>.Publisher\nfunc prefix(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "max(by:)",
        "url": "https://developer.apple.com/documentation/combine/just/max(by:)",
        "html": "See Also\nApplying Mathematical Operations on Elements\nfunc count() -> Just<Int>\nfunc max() -> Just<Output>\nAvailable when Output conforms to Comparable.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Just<Output>\nAvailable when Output conforms to Comparable.\nfunc min(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "tryFirst(where:)",
        "url": "https://developer.apple.com/documentation/combine/empty/tryfirst(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse tryFirst(where:) when you need to republish only the first element of a stream that satisfies an error-throwing closure you specify. The publisher ignores all elements after the first. If this publisher doesn\u2019t receive any elements, it finishes without publishing. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a range publisher emits the first element in the range then finishes normally:\n\nlet numberRange: ClosedRange<Int> = (-1...50)\nnumberRange.publisher\n    .tryFirst {\n        guard $0 < 99 else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"-1 completion: finished\"\n// If instead the number range were ClosedRange<Int> = (100...200), the tryFirst operator would terminate publishing with a RangeError.\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "nanoseconds(_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/nanoseconds(_:)",
        "html": "See Also\nCreating Scheduler Time Strides from Seconds\nstatic func microseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of microseconds into an instance of this scheduler time type.\nstatic func milliseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of milliseconds into an instance of this scheduler time type.\nstatic func seconds(Double) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of seconds, as a floating-point value, into an instance of this scheduler time type.\nstatic func seconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of seconds into an instance of this scheduler time type."
    },
    {
        "title": "max()",
        "url": "https://developer.apple.com/documentation/combine/just/max()-8gti0",
        "html": "See Also\nApplying Mathematical Operations on Elements\nfunc count() -> Just<Int>\nfunc max(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Just<Output>\nAvailable when Output conforms to Comparable.\nfunc min(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "count()",
        "url": "https://developer.apple.com/documentation/combine/just/count()",
        "html": "See Also\nApplying Mathematical Operations on Elements\nfunc max() -> Just<Output>\nAvailable when Output conforms to Comparable.\nfunc max(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Just<Output>\nAvailable when Output conforms to Comparable.\nfunc min(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "collect()",
        "url": "https://developer.apple.com/documentation/combine/just/collect()",
        "html": "See Also\nReducing Elements\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Empty<Output, Just<Output>.Failure>\nfunc reduce<T>(T, (T, Output) -> T) -> Result<T, Just<Output>.Failure>.Publisher\nfunc tryReduce<T>(T, (T, Output) throws -> T) -> Result<T, Error>.Publisher"
    },
    {
        "title": "ignoreOutput()",
        "url": "https://developer.apple.com/documentation/combine/just/ignoreoutput()",
        "html": "See Also\nReducing Elements\nfunc collect() -> Just<[Output]>\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc reduce<T>(T, (T, Output) -> T) -> Result<T, Just<Output>.Failure>.Publisher\nfunc tryReduce<T>(T, (T, Output) throws -> T) -> Result<T, Error>.Publisher"
    },
    {
        "title": "replaceEmpty(with:)",
        "url": "https://developer.apple.com/documentation/combine/just/replaceempty(with:)",
        "html": "See Also\nFiltering Elements\nfunc filter((Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Output) -> T?) -> Optional<T>.Publisher\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Just<Output>\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryRemoveDuplicates(by: (Output, Output) throws -> Bool) -> Result<Output, Error>.Publisher\nfunc replaceError(with: Output) -> Just<Output>"
    },
    {
        "title": "removeDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/just/removeduplicates(by:)",
        "html": "See Also\nFiltering Elements\nfunc filter((Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Output) -> T?) -> Optional<T>.Publisher\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Just<Output>\nAvailable when Output conforms to Equatable.\nfunc tryRemoveDuplicates(by: (Output, Output) throws -> Bool) -> Result<Output, Error>.Publisher\nfunc replaceEmpty(with: Output) -> Just<Output>\nfunc replaceError(with: Output) -> Just<Output>"
    },
    {
        "title": "sink(receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/empty/sink(receivevalue:)",
        "html": "Parameters\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveValue:) to observe values received by the publisher and print them to the console. This operator can only be used when the stream doesn\u2019t fail, that is, when the publisher\u2019s Failure type is Never.\n\nIn this example, a Range publisher publishes integers to a sink(receiveValue:) operator\u2019s receiveValue closure that prints them to the console:\n\nlet integers = (0...3)\nintegers.publisher\n    .sink { print(\"Received \\($0)\") }\n\n\n// Prints:\n//  Received 0\n//  Received 1\n//  Received 2\n//  Received 3\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior."
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/compactmap(_:)-60iy7",
        "html": "See Also\nFiltering Elements\nfunc filter((Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Just<Output>\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryRemoveDuplicates(by: (Output, Output) throws -> Bool) -> Result<Output, Error>.Publisher\nfunc replaceEmpty(with: Output) -> Just<Output>\nfunc replaceError(with: Output) -> Just<Output>"
    },
    {
        "title": "map(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/map(_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of another property on Output.\n\nReturn Value\n\nA publisher that publishes the values of two key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:) operator uses the Swift key path syntax to access the die1 and die2 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these two values (as an (Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1) (total: \\(values.0 + values.1))\")\n    }\n// Prints \"Rolled: 6, 4 (total: 10)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "assign(to:)",
        "url": "https://developer.apple.com/documentation/combine/empty/assign(to:)",
        "html": "Parameters\npublished\n\nA property marked with the @Published attribute, which receives and republishes all elements received from the upstream publisher.\n\nDiscussion\n\nUse this operator when you want to receive elements from a publisher and republish them through a property marked with the @Published attribute. The assign(to:) operator manages the life cycle of the subscription, canceling the subscription automatically when the Published instance deinitializes. Because of this, the assign(to:) operator doesn\u2019t return an AnyCancellable that you\u2019re responsible for like assign(to:on:) does.\n\nThe example below shows a model class that receives elements from an internal Timer.TimerPublisher, and assigns them to a @Published property called lastUpdated. Because the to parameter has the inout keyword, you need to use the & operator when calling this method.\n\nclass MyModel: ObservableObject {\n    @Published var lastUpdated: Date = Date()\n    init() {\n         Timer.publish(every: 1.0, on: .main, in: .common)\n             .autoconnect()\n             .assign(to: &$lastUpdated)\n    }\n}\n\n\nIf you instead implemented MyModel with assign(to: lastUpdated, on: self), storing the returned AnyCancellable instance could cause a reference cycle, because the Subscribers.Assign subscriber would hold a strong reference to self. Using assign(to:) solves this problem.\n\nWhile the to parameter uses the inout keyword, this method doesn\u2019t replace a reference type passed to it. Instead, this notation indicates that the operator may modify members of the assigned object, as seen in the following example:\n\n    class MyModel2: ObservableObject {\n        @Published var id: Int = 0\n    }\n    let model2 = MyModel2()\n    Just(100).assign(to: &model2.$id)\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "subscribe(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/empty/subscribe(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler used to send messages to upstream publishers.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher which performs upstream operations on the specified scheduler.\n\nDiscussion\n\nIn contrast with receive(on:options:), which affects downstream messages, subscribe(on:options:) changes the execution context of upstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes ioPerformingPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes uiUpdatingSubscriber to receive elements and completion on RunLoop.main.\n\nlet ioPerformingPublisher == // Some publisher.\nlet uiUpdatingSubscriber == // Some subscriber that updates the UI.\n\n\nioPerformingPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(uiUpdatingSubscriber)\n\n\nUsing subscribe(on:options:) also causes the upstream publisher to perform cancel() using the specfied scheduler.\n\nSee Also\nSpecifying Schedulers\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher."
    },
    {
        "title": "multicast(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/multicast(_:)",
        "html": "Parameters\ncreateSubject\n\nA closure to create a new Subject each time a subscriber attaches to the multicast publisher.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(subject:), this method produces a publisher that creates a separate Subject for each subscriber.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(_:) operator whose closure creates a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast { PassthroughSubject<(String, Int), Never>() }\n\n\ncancellable1 = pub\n   .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n   .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 9))\n// Stream 2 received: (\"First\", 9)\n// Stream 1 received: (\"First\", 9)\n// Random: receive value: ((\"Second\", 46))\n// Stream 2 received: (\"Second\", 46)\n// Stream 1 received: (\"Second\", 46)\n// Random: receive value: ((\"Third\", 26))\n// Stream 2 received: (\"Third\", 26)\n// Stream 1 received: (\"Third\", 26)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "map(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/map(_:_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of a second property on Output.\n\nkeyPath2\n\nThe key path of a third property on Output.\n\nReturn Value\n\nA publisher that publishes the values of three key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:_:) operator uses the Swift key path syntax to access the die1, die2, and die3 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these three values (as an (Int, Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n    let die3: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6),\n                            die3: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2, \\.die3)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1), \\(values.2) (total \\(values.0 + values.1 + values.2))\")\n    }\n// Prints \"Rolled: 5, 4, 2 (total 11)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple."
    },
    {
        "title": "scan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/scan(_:_:)-2qr4t",
        "html": "See Also\nMapping Elements\nfunc map<T>((Output) -> T) -> Just<T>\nfunc tryMap<T>((Output) throws -> T) -> Result<T, Error>.Publisher\nfunc mapError<E>((Just<Output>.Failure) -> E) -> Result<Output, E>.Publisher\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc tryScan<T>(T, (T, Output) throws -> T) -> Result<T, Error>.Publisher\nfunc setFailureType<E>(to: E.Type) -> Result<Output, E>.Publisher"
    },
    {
        "title": "tryScan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/tryscan(_:_:)-2xnnt",
        "html": "See Also\nMapping Elements\nfunc map<T>((Output) -> T) -> Just<T>\nfunc tryMap<T>((Output) throws -> T) -> Result<T, Error>.Publisher\nfunc mapError<E>((Just<Output>.Failure) -> E) -> Result<Output, E>.Publisher\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Output) -> T) -> Result<T, Just<Output>.Failure>.Publisher\nfunc setFailureType<E>(to: E.Type) -> Result<Output, E>.Publisher"
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/==(_:_:)",
        "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false.\n\nSee Also\nComparing Scheduler Time Strides\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "setFailureType(to:)",
        "url": "https://developer.apple.com/documentation/combine/just/setfailuretype(to:)-4pu1s",
        "html": "See Also\nMapping Elements\nfunc map<T>((Output) -> T) -> Just<T>\nfunc tryMap<T>((Output) throws -> T) -> Result<T, Error>.Publisher\nfunc mapError<E>((Just<Output>.Failure) -> E) -> Result<Output, E>.Publisher\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Output) -> T) -> Result<T, Just<Output>.Failure>.Publisher\nfunc tryScan<T>(T, (T, Output) throws -> T) -> Result<T, Error>.Publisher"
    },
    {
        "title": "tryFirst(where:)",
        "url": "https://developer.apple.com/documentation/combine/fail/tryfirst(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse tryFirst(where:) when you need to republish only the first element of a stream that satisfies an error-throwing closure you specify. The publisher ignores all elements after the first. If this publisher doesn\u2019t receive any elements, it finishes without publishing. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a range publisher emits the first element in the range then finishes normally:\n\nlet numberRange: ClosedRange<Int> = (-1...50)\nnumberRange.publisher\n    .tryFirst {\n        guard $0 < 99 else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"-1 completion: finished\"\n// If instead the number range were ClosedRange<Int> = (100...200), the tryFirst operator would terminate publishing with a RangeError.\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "mapError(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/maperror(_:)-23lnl",
        "html": "See Also\nMapping Elements\nfunc map<T>((Output) -> T) -> Just<T>\nfunc tryMap<T>((Output) throws -> T) -> Result<T, Error>.Publisher\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Output) -> T) -> Result<T, Just<Output>.Failure>.Publisher\nfunc tryScan<T>(T, (T, Output) throws -> T) -> Result<T, Error>.Publisher\nfunc setFailureType<E>(to: E.Type) -> Result<Output, E>.Publisher"
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/map(_:)-7cno0",
        "html": "See Also\nMapping Elements\nfunc tryMap<T>((Output) throws -> T) -> Result<T, Error>.Publisher\nfunc mapError<E>((Just<Output>.Failure) -> E) -> Result<Output, E>.Publisher\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Output) -> T) -> Result<T, Just<Output>.Failure>.Publisher\nfunc tryScan<T>(T, (T, Output) throws -> T) -> Result<T, Error>.Publisher\nfunc setFailureType<E>(to: E.Type) -> Result<Output, E>.Publisher"
    },
    {
        "title": "tryCompactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/trycompactmap(_:)",
        "html": "Parameters\ntransform\n\nAn error-throwing closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of calling the supplied closure.\n\nDiscussion\n\nUse tryCompactMap(_:) to remove nil elements from a publisher\u2019s stream based on an error-throwing closure you provide. If the closure throws an error, the publisher cancels the upstream publisher and sends the thrown error to the downstream subscriber as a Failure.\n\nThe following example uses an array of numbers as the source for a collection-based publisher. A tryCompactMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform the numbers from its Arabic to Roman numerals, as an optional String.\n\nIf the closure called by tryCompactMap(_:) fails to look up a Roman numeral, it returns the optional String (unknown).\n\nIf the closure called by tryCompactMap(_:) determines the input is 0, it throws an error. The tryCompactMap(_:) operator catches this error and stops publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from: Int) throws -> String? {\n    let romanNumeralDict: [Int : String] =\n        [1: \"I\", 2: \"II\", 3: \"III\", 4: \"IV\", 5: \"V\"]\n    guard from != 0 else { throw ParseError() }\n    return romanNumeralDict[from]\n}\nlet numbers = [6, 5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryCompactMap { try romanNumeral(from: $0) }\n    .sink(\n          receiveCompletion: { print (\"\\($0)\") },\n          receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"(Unknown) V IV III II I failure(ParseError())\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "receive(subscriber:)",
        "url": "https://developer.apple.com/documentation/combine/just/receive(subscriber:)",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this Publisher, after which it can receive values.\n\nDiscussion\n\nImplementations of Publisher must implement this method.\n\nThe provided implementation of subscribe(_:)calls this method.\n\nSee Also\nWorking with Subscribers\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "reduce(into:_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/reduce(into:_:)",
        "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary."
    },
    {
        "title": "AdditiveArithmetic Implementations",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/additivearithmetic-implementations",
        "html": "Topics\nOperators\nstatic func + (Self) -> Self\nReturns the given number unchanged.\nstatic func += (inout Self, Self)\nAdds two values and stores the result in the left-hand-side variable.\nstatic func -= (inout Self, Self)\nSubtracts the second value from the first and stores the difference in the left-hand-side variable.\nType Properties\nstatic var zero: Self\nThe zero value.\nAvailable when Self conforms to ExpressibleByIntegerLiteral."
    },
    {
        "title": "prefix(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/prefix(_:)",
        "html": "Parameters\nmaxLength\n\nThe maximum number of elements to republish.\n\nReturn Value\n\nA publisher that publishes up to the specified number of elements.\n\nDiscussion\n\nUse prefix(_:) to limit the number of elements republished to the downstream subscriber.\n\nIn the example below, the prefix(_:) operator limits its output to the first two elements before finishing normally:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .prefix(2)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryMax(by:)",
        "url": "https://developer.apple.com/documentation/combine/empty/trymax(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMax(by:) to determine the maximum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMax(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\ncancellable = numbers.publisher\n    .tryMax { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first > second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: completion: failure(IllegalValueError())\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "prefix(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/empty/prefix(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA second publisher.\n\nReturn Value\n\nA publisher that republishes elements until the second publisher publishes an element.\n\nDiscussion\n\nAfter the second publisher publishes an element, the publisher returned by this method finishes.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue."
    },
    {
        "title": "contains(where:)",
        "url": "https://developer.apple.com/documentation/combine/empty/contains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(where:) to find the first element in an upstream that satisfies the closure you provide. This operator consumes elements produced from the upstream publisher until the upstream publisher produces a matching element.\n\nThis operator is useful when the upstream publisher produces elements that don\u2019t conform to Equatable.\n\nIn the example below, the contains(where:) operator tests elements against the supplied closure and emits true for the first elements that\u2019s greater than 4, and then finishes normally.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .contains {$0 > 4}\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "first(where:)",
        "url": "https://developer.apple.com/documentation/combine/empty/first(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse first(where:) to republish only the first element of a stream that satisfies a closure you specify. The publisher ignores all elements after the first element that satisfies the closure and finishes normally. If this publisher doesn\u2019t receive any elements, it finishes without publishing.\n\nIn the example below, the provided closure causes the Publishers.FirstWhere publisher to republish the first received element that\u2019s greater than 0, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first { $0 > 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"1\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "append(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/append(_:)",
        "html": "Parameters\nelements\n\nElements to publish after this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that appends the specifiecd elements after this publisher\u2019s elements.\n\nDiscussion\n\nUse append(_:) when you need to prepend specific elements after the output of a publisher.\n\nIn the example below, the append(_:) operator publishes the provided elements after republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .append(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 5 6 7 8 9 10 0 1 255\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryContains(where:)",
        "url": "https://developer.apple.com/documentation/combine/empty/trycontains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse tryContains(where:) to find the first element in an upstream that satisfies the error-throwing closure you provide.\n\nThis operator consumes elements produced from the upstream publisher until the upstream publisher either:\n\nProduces a matching element, after which it emits true and the publisher finishes normally.\n\nEmits false if no matching element is found and the publisher finishes normally.\n\nIf the predicate throws an error, the publisher fails, passing the error to its downstream.\n\nIn the example below, the tryContains(where:) operator tests values to find an element less than 10; when the closure finds an odd number, like 3, the publisher terminates with an IllegalValueError.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers = [3, 2, 10, 5, 0, 9]\nnumbers.publisher\n    .tryContains {\n        if ($0 % 2 != 0) {\n            throw IllegalValueError()\n        }\n       return $0 < 10\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "tryReduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/tryreduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nAn error-throwing closure that takes the previously-accumulated value and the next element from the upstream publisher to produce a new value.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes.\n\nDiscussion\n\nUse tryReduce(_:_:) to collect a stream of elements and produce an accumulated value based on an error-throwing closure you provide. If the closure throws an error, the publisher fails and passes the error to its subscriber.\n\nIn the example below, the publisher\u2019s 0 element causes the myDivide(_:_:) function to throw an error and publish the doc://com.apple.documentation/documentation/Swift/Double/1641611-nan result:\n\nstruct DivisionByZeroError: Error {}\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n    guard divisor != 0 else { throw DivisionByZeroError() }\n    return dividend / divisor\n}\n\n\nvar numbers: [Double] = [5, 4, 3, 2, 1, 0]\nnumbers.publisher\n    .tryReduce(numbers.first!, { accum, next in try myDivide(accum, next) })\n    .catch({ _ in Just(Double.nan) })\n    .sink { print(\"\\($0)\") }\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "ignoreOutput()",
        "url": "https://developer.apple.com/documentation/combine/empty/ignoreoutput()",
        "html": "Return Value\n\nA publisher that ignores all upstream elements.\n\nDiscussion\n\nUse the ignoreOutput() operator to determine if a publisher is able to complete successfully or would fail.\n\nIn the example below, the array publisher (numbers) delivers the first five of its elements successfully, as indicated by the ignoreOutput() operator. The operator consumes, but doesn\u2019t republish the elements downstream. However, the sixth element, 0, causes the error throwing closure to catch a NoZeroValuesAllowedError that terminates the stream.\n\nstruct NoZeroValuesAllowedError: Error {}\nlet numbers = [1, 2, 3, 4, 5, 0, 6, 7, 8, 9]\ncancellable = numbers.publisher\n    .tryFilter({ anInt in\n        guard anInt != 0 else { throw NoZeroValuesAllowedError() }\n        return anInt < 20\n    })\n    .ignoreOutput()\n    .sink(receiveCompletion: {print(\"completion: \\($0)\")},\n          receiveValue: {print(\"value \\($0)\")})\n\n\n// Prints: \"completion: failure(NoZeroValuesAllowedError())\"\n\n\nThe output type of this publisher is Never.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "prepend(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/prepend(_:)",
        "html": "Parameters\nelements\n\nThe elements to publish before this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that prefixes the specified elements prior to this publisher\u2019s elements.\n\nDiscussion\n\nUse prepend(_:) when you need to prepend specific elements before the output of a publisher.\n\nIn the example below, the prepend(_:) operator publishes the provided elements before republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .prepend(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 255 0 1 2 3 4 5 6 7 8 9 10\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryAllSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/tryallsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete. The closure may throw an error, in which case the publisher cancels the upstream publisher and fails with the thrown error.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the tryAllSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria in an error-throwing predicate you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes. If the predicate throws an error, the publisher fails and passes the error to its downstream subscriber.\n\nIn the example below, an error-throwing predicate tests if each of an integer array publisher\u2019s elements fall into the targetRange; the predicate throws an error if an element is zero and terminates the stream.\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 10, 5, 0]\n\n\nnumbers.publisher\n    .tryAllSatisfy { anInt in\n        guard anInt != 0 else { throw RangeError() }\n        return targetRange.contains(anInt)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(RangeError())\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate."
    },
    {
        "title": "contains(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/contains(_:)",
        "html": "Parameters\noutput\n\nAn element to match against.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(_:) to find the first element in an upstream that\u2019s equal to the supplied argument. The contains publisher consumes all received elements until the upstream publisher produces a matching element. Upon finding the first match, it emits true and finishes normally. If the upstream finishes normally without producing a matching element, this publisher emits false and finishes.\n\nIn the example below, the contains(_:) operator emits true the first time it receives the value 5 from the numbers.publisher, and then finishes normally.\n\nlet numbers = [-1, 5, 10, 5]\nnumbers.publisher\n    .contains(5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/compactmap(_:)-1bmze",
        "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n"
    },
    {
        "title": "replaceError(with:)",
        "url": "https://developer.apple.com/documentation/combine/empty/replaceerror(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher fails.\n\nReturn Value\n\nA publisher that replaces an error from the upstream publisher with the provided output element.\n\nDiscussion\n\nIf the upstream publisher fails with an error, this publisher emits the provided element, then finishes normally.\n\nIn the example below, a publisher of strings fails with a MyError instance, which sends a failure completion downstream. The replaceError(with:) operator handles the failure by publishing the string (replacement element) and completing normally.\n\nstruct MyError: Error {}\nlet fail = Fail<String, MyError>(error: MyError())\ncancellable = fail\n    .replaceError(with: \"(replacement element)\")\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"(replacement element) finished\".\n\n\nThis replaceError(with:) functionality is useful when you want to handle an error by sending a single replacement element and end the stream. Use catch(_:) to recover from an error and provide a replacement publisher to continue providing elements to the downstream subscriber.\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element."
    },
    {
        "title": "replaceEmpty(with:)",
        "url": "https://developer.apple.com/documentation/combine/empty/replaceempty(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher finishes without emitting any elements.\n\nReturn Value\n\nA publisher that replaces an empty stream with the provided output element.\n\nDiscussion\n\nUse replaceEmpty(with:) to provide a replacement element if the upstream publisher finishes without producing any elements.\n\nIn the example below, the empty Double array publisher doesn\u2019t produce any elements, so replaceEmpty(with:) publishes Double.nan and finishes normally.\n\nlet numbers: [Double] = []\ncancellable = numbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints \"(nan)\".\n\n\nConversely, providing a non-empty publisher publishes all elements and the publisher then terminates normally:\n\nlet otherNumbers: [Double] = [1.0, 2.0, 3.0]\ncancellable2 = otherNumbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: 1.0 2.0 3.0\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryRemoveDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/empty/tryremoveduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first. If this closure throws an error, the publisher terminates with the thrown error.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse tryRemoveDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of elements using an error-throwing closure you provide. If your closure throws an error, the publisher terminates with the error.\n\nIn the example below, the closure provided to tryRemoveDuplicates(by:) returns true when two consecutive elements are equal, thereby filtering out 0, 1, 2, and 3. However, the closure throws an error when it encounters 4. The publisher then terminates with this error.\n\nstruct BadValuesError: Error {}\nlet numbers = [0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\ncancellable = numbers.publisher\n    .tryRemoveDuplicates { first, second -> Bool in\n        if (first == 4 && second == 4) {\n            throw BadValuesError()\n        }\n        return first == second\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n // Prints: \"0 1 2 3 4 failure(BadValuesError()\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/compactmap(_:)",
        "html": "Parameters\ntransform\n\nA closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of the calling the supplied closure.\n\nDiscussion\n\nCombine\u2019s compactMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/2950916-compactmap in the Swift standard library: the compactMap(_:) operator in Combine removes nil elements in a publisher\u2019s stream and republishes non-nil elements to the downstream subscriber.\n\nThe example below uses a range of numbers as the source for a collection based publisher. The compactMap(_:) operator consumes each element from the numbers publisher attempting to access the dictionary using the element as the key. If the example\u2019s dictionary returns a nil, due to a non-existent key, compactMap(_:) filters out the nil (missing) elements.\n\nlet numbers = (0...5)\nlet romanNumeralDict: [Int : String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ncancellable = numbers.publisher\n    .compactMap { romanNumeralDict[$0] }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"I II III V\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryFilter(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/tryfilter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value that indicated whether to republish the element or throws an error.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nUse tryFilter(_:) to filter elements evaluated in an error-throwing closure. If the isIncluded closure throws an error, the publisher fails with that error.\n\nIn the example below, tryFilter(_:) checks to see if the element provided by the publisher is zero, and throws a ZeroError before terminating the publisher with the thrown error. Otherwise, it republishes the element only if it\u2019s even:\n\nstruct ZeroError: Error {}\n\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\ncancellable = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"2 4 failure(DivisionByZeroError())\".\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/trymap(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element. If the closure throws an error, the publisher fails with the thrown error.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s tryMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use tryMap(_:) to transform from one kind of element to another, and to terminate publishing when the map\u2019s closure throws an error.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A tryMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the tryMap(_:)\u2019s closure fails to look up a Roman numeral, it throws an error. The tryMap(_:) operator catches this error and terminates publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from:Int) throws -> String {\n    let romanNumeralDict: [Int : String] =\n        [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\n    guard let numeral = romanNumeralDict[from] else {\n        throw ParseError()\n    }\n    return numeral\n}\nlet numbers = [5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryMap { try romanNumeral(from: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"V IV III II I completion: failure(ParseError())\"\n\n\nIf your closure doesn\u2019t throw, use map(_:) instead.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "mapError(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/maperror(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes the upstream failure as a parameter and returns a new error for the publisher to terminate with.\n\nReturn Value\n\nA publisher that replaces any upstream failure with a new error produced by the transform closure.\n\nDiscussion\n\nUse the mapError(_:) operator when you need to replace one error type with another, or where a downstream operator needs the error types of its inputs to match.\n\nThe following example uses a tryMap(_:) operator to divide 1 by each element produced by a sequence publisher. When the publisher produces a 0, the tryMap(_:) fails with a DivisionByZeroError. The mapError(_:) operator converts this into a MyGenericError.\n\nstruct DivisionByZeroError: Error {}\nstruct MyGenericError: Error { var wrappedError: Error }\n\n\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n       guard divisor != 0 else { throw DivisionByZeroError() }\n       return dividend / divisor\n   }\n\n\nlet divisors: [Double] = [5, 4, 3, 2, 1, 0]\ndivisors.publisher\n    .tryMap { try myDivide(1, $0) }\n    .mapError { MyGenericError(wrappedError: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") ,\n        receiveValue: { print (\"value: \\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"0.2 0.25 0.3333333333333333 0.5 1.0 completion: failure(MyGenericError(wrappedError: DivisionByZeroError()))\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "filter(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/filter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n"
    },
    {
        "title": "merge(with:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/merge(with:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\n let pubA = PassthroughSubject<Int, Never>()\n let pubB = PassthroughSubject<Int, Never>()\n let pubC = PassthroughSubject<Int, Never>()\n let pubD = PassthroughSubject<Int, Never>()\n let pubE = PassthroughSubject<Int, Never>()\n\n\n cancellable = pubA\n     .merge(with: pubB, pubC, pubD, pubE)\n     .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\n pubA.send(1)\n pubB.send(40)\n pubC.send(90)\n pubD.send(-1)\n pubE.send(33)\n pubA.send(2)\n pubB.send(50)\n pubC.send(100)\n pubD.send(-2)\n pubE.send(33)\n\n\n // Prints: \"1 40 90 -1 33 2 50 100 -2 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "throttle(for:scheduler:latest:)",
        "url": "https://developer.apple.com/documentation/combine/fail/throttle(for:scheduler:latest:)",
        "html": "Parameters\ninterval\n\nThe interval at which to find and emit either the most recent or the first element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to publish elements.\n\nlatest\n\nA Boolean value that indicates whether to publish the most recent element. If false, the publisher emits the first element received during the interval.\n\nReturn Value\n\nA publisher that emits either the most-recent or first element received during the specified interval.\n\nDiscussion\n\nUse throttle(for:scheduler:latest:) to selectively republish elements from an upstream publisher during an interval you specify. Other elements received from the upstream in the throttling interval aren\u2019t republished.\n\nIn the example below, a Timer.TimerPublisher produces elements on one-second intervals; the throttle(for:scheduler:latest:) operator delivers the first event, then republishes only the latest event in the following ten second intervals:\n\ncancellable = Timer.publish(every: 3.0, on: .main, in: .default)\n    .autoconnect()\n    .print(\"\\(Date().description)\")\n    .throttle(for: 10.0, scheduler: RunLoop.main, latest: true)\n    .sink(\n        receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print(\"Received Timestamp \\($0).\") }\n     )\n\n\n// Prints:\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:26:57 +0000)\n //    Received Timestamp 2020-03-19 18:26:57 +0000.\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:00 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:03 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:06 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:09 +0000)\n //    Received Timestamp 2020-03-19 18:27:09 +0000.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "encode(encoder:)",
        "url": "https://developer.apple.com/documentation/combine/empty/encode(encoder:)",
        "html": "Parameters\nencoder\n\nAn encoder that implements the TopLevelEncoder protocol.\n\nReturn Value\n\nA publisher that encodes received elements using a specified encoder, and publishes the resulting data.\n\nDiscussion\n\nUse encode(encoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to encode an Encodable struct into Data that could be used to make a JSON string (or written to disk as a binary plist in the case of property lists).\n\nIn this example, a PassthroughSubject publishes an Article. The encode(encoder:) operator encodes the properties of the Article struct into a new JSON string according to the Codable protocol adopted by Article. The operator publishes the resulting JSON string to the downstream subscriber. If the encoding operation fails, which can happen in the case of complex properties that can\u2019t be directly transformed into JSON, the stream terminates and the error is passed to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Article, Never>()\nlet cancellable = dataProvider\n    .encode(encoder: JSONEncoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\") },\n          receiveValue: {  data in\n            guard let stringRepresentation = String(data: data, encoding: .utf8) else { return }\n            print(\"Data received \\(data) string representation: \\(stringRepresentation)\")\n    })\n\n\ndataProvider.send(Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: Date()))\n\n\n// Prints: \"Data received 86 bytes string representation: {\"title\":\"My First Article\",\"author\":\"Gita Kumar\",\"pubDate\":606211803.279603}\"\n\nSee Also\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/map(_:)-1fd3",
        "html": "Parameters\nkeyPath\n\nThe key path of a property on Output.\n\nReturn Value\n\nA publisher that publishes the value of the key path.\n\nDiscussion\n\nIn the following example, the map(_:) operator uses the Swift key path syntax to access the die member of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only the value of this Int, not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die: Int\n}\n\n\ncancellable = Just(DiceRoll(die:Int.random(in:1...6)))\n    .map(\\.die)\n    .sink {\n        print (\"Rolled: \\($0)\")\n    }\n// Prints \"Rolled: 3\" (or some other random value).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "decode(type:decoder:)",
        "url": "https://developer.apple.com/documentation/combine/empty/decode(type:decoder:)",
        "html": "Parameters\ntype\n\nThe encoded data to decode into a struct that conforms to the Decodable protocol.\n\ndecoder\n\nA decoder that implements the TopLevelDecoder protocol.\n\nReturn Value\n\nA publisher that decodes a given type using a specified decoder and publishes the result.\n\nDiscussion\n\nUse decode(type:decoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to decode data received from a URLSession.DataTaskPublisher or other data source using the Decodable protocol.\n\nIn this example, a PassthroughSubject publishes a JSON string. The JSON decoder parses the string, converting its fields according to the Decodable protocol implemented by Article, and successfully populating a new Article. The Publishers.Decode publisher then publishes the Article to the downstream. If a decoding operation fails, which happens in the case of missing or malformed data in the source JSON string, the stream terminates and passes the error to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Data, Never>()\ncancellable = dataProvider\n    .decode(type: Article.self, decoder: JSONDecoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\")},\n          receiveValue: { print (\"value: \\($0)\") })\n\n\ndataProvider.send(Data(\"{\\\"pubDate\\\":1574273638.575666, \\\"title\\\" : \\\"My First Article\\\", \\\"author\\\" : \\\"Gita Kumar\\\" }\".utf8))\n\n\n// Prints: \".sink() data received Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: 2050-11-20 18:13:58 +0000)\"\n\nSee Also\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable."
    },
    {
        "title": "delay(for:tolerance:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/empty/delay(for:tolerance:scheduler:options:)",
        "html": "Parameters\ninterval\n\nThe amount of time to delay.\n\ntolerance\n\nThe allowed tolerance in delivering delayed events. The Delay publisher may deliver elements this much sooner or later than the interval specifies.\n\nscheduler\n\nThe scheduler to deliver the delayed events.\n\noptions\n\nOptions relevant to the scheduler\u2019s behavior.\n\nReturn Value\n\nA publisher that delays delivery of elements and completion to the downstream receiver.\n\nDiscussion\n\nUse delay(for:tolerance:scheduler:options:) when you need to delay the delivery of elements to a downstream by a specified amount of time.\n\nIn this example, a Timer publishes an event every second. The delay(for:tolerance:scheduler:options:) operator holds the delivery of the initial element for 3 seconds (\u00b10.5 seconds), after which each element is delivered to the downstream on the main run loop after the specified delay:\n\nlet df = DateFormatter()\ndf.dateStyle = .none\ndf.timeStyle = .long\ncancellable = Timer.publish(every: 1.0, on: .main, in: .default)\n    .autoconnect()\n    .handleEvents(receiveOutput: { date in\n        print (\"Sending Timestamp \\'\\(df.string(from: date))\\' to delay()\")\n    })\n    .delay(for: .seconds(3), scheduler: RunLoop.main, options: .none)\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \"\\n\") },\n        receiveValue: { value in\n            let now = Date()\n            print (\"At \\(df.string(from: now)) received  Timestamp \\'\\(df.string(from: value))\\' sent: \\(String(format: \"%.2f\", now.timeIntervalSince(value))) secs ago\", terminator: \"\\n\")\n        }\n    )\n\n\n// Prints:\n//    Sending Timestamp '5:02:33 PM PDT' to delay()\n//    Sending Timestamp '5:02:34 PM PDT' to delay()\n//    Sending Timestamp '5:02:35 PM PDT' to delay()\n//    Sending Timestamp '5:02:36 PM PDT' to delay()\n//    At 5:02:36 PM PDT received  Timestamp '5:02:33 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:37 PM PDT' to delay()\n//    At 5:02:37 PM PDT received  Timestamp '5:02:34 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:38 PM PDT' to delay()\n//    At 5:02:38 PM PDT received  Timestamp '5:02:35 PM PDT' sent: 3.00 secs ago\n\n\nThe delay affects the delivery of elements and completion, but not of the original subscription.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "timeout(_:scheduler:options:customError:)",
        "url": "https://developer.apple.com/documentation/combine/empty/timeout(_:scheduler:options:customerror:)",
        "html": "Parameters\ninterval\n\nThe maximum time interval the publisher can go without emitting an element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to deliver events.\n\noptions\n\nScheduler options that customize the delivery of elements.\n\ncustomError\n\nA closure that executes if the publisher times out. The publisher sends the failure returned by this closure to the subscriber as the reason for termination.\n\nReturn Value\n\nA publisher that terminates if the specified interval elapses with no events received from the upstream publisher.\n\nDiscussion\n\nUse timeout(_:scheduler:options:customError:) to terminate a publisher if an element isn\u2019t delivered within a timeout interval you specify.\n\nIn the example below, a PassthroughSubject publishes String elements and is configured to time out if no new elements are received within its TIME_OUT window of 5 seconds. A single value is published after the specified 2-second WAIT_TIME, after which no more elements are available; the publisher then times out and completes normally.\n\nvar WAIT_TIME : Int = 2\nvar TIMEOUT_TIME : Int = 5\n\n\nlet subject = PassthroughSubject<String, Never>()\nlet cancellable = subject\n    .timeout(.seconds(TIMEOUT_TIME), scheduler: DispatchQueue.main, options: nil, customError:nil)\n    .sink(\n          receiveCompletion: { print (\"completion: \\($0) at \\(Date())\") },\n          receiveValue: { print (\"value: \\($0) at \\(Date())\") }\n     )\n\n\nDispatchQueue.main.asyncAfter(deadline: .now() + .seconds(WAIT_TIME),\n                              execute: { subject.send(\"Some data - sent after a delay of \\(WAIT_TIME) seconds\") } )\n\n\n// Prints: value: Some data - sent after a delay of 2 seconds at 2020-03-10 23:47:59 +0000\n//         completion: finished at 2020-03-10 23:48:04 +0000\n\n\nIf customError is nil, the publisher completes normally; if you provide a closure for the customError argument, the upstream publisher is instead terminated upon timeout, and the error is delivered to the downstream.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval."
    },
    {
        "title": "throttle(for:scheduler:latest:)",
        "url": "https://developer.apple.com/documentation/combine/empty/throttle(for:scheduler:latest:)",
        "html": "Parameters\ninterval\n\nThe interval at which to find and emit either the most recent or the first element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to publish elements.\n\nlatest\n\nA Boolean value that indicates whether to publish the most recent element. If false, the publisher emits the first element received during the interval.\n\nReturn Value\n\nA publisher that emits either the most-recent or first element received during the specified interval.\n\nDiscussion\n\nUse throttle(for:scheduler:latest:) to selectively republish elements from an upstream publisher during an interval you specify. Other elements received from the upstream in the throttling interval aren\u2019t republished.\n\nIn the example below, a Timer.TimerPublisher produces elements on one-second intervals; the throttle(for:scheduler:latest:) operator delivers the first event, then republishes only the latest event in the following ten second intervals:\n\ncancellable = Timer.publish(every: 3.0, on: .main, in: .default)\n    .autoconnect()\n    .print(\"\\(Date().description)\")\n    .throttle(for: 10.0, scheduler: RunLoop.main, latest: true)\n    .sink(\n        receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print(\"Received Timestamp \\($0).\") }\n     )\n\n\n// Prints:\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:26:57 +0000)\n //    Received Timestamp 2020-03-19 18:26:57 +0000.\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:00 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:03 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:06 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:09 +0000)\n //    Received Timestamp 2020-03-19 18:27:09 +0000.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "measureInterval(using:options:)",
        "url": "https://developer.apple.com/documentation/combine/empty/measureinterval(using:options:)",
        "html": "Parameters\nscheduler\n\nA scheduler to use for tracking the timing of events.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher that emits elements representing the time interval between the elements it receives.\n\nDiscussion\n\nUse measureInterval(using:options:) to measure the time between events delivered from an upstream publisher.\n\nIn the example below, a 1-second Timer is used as the data source for an event publisher; the measureInterval(using:options:) operator reports the elapsed time between the reception of events on the main run loop:\n\ncancellable = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .measureInterval(using: RunLoop.main)\n    .sink { print(\"\\($0)\", terminator: \"\\n\") }\n\n\n// Prints:\n//      Stride(magnitude: 1.0013610124588013)\n//      Stride(magnitude: 0.9992760419845581)\n\n\nThe output type of the returned publisher is the time interval of the provided scheduler.\n\nThis operator uses the provided scheduler\u2019s now property to measure intervals between events.\n\nSee Also\nControlling Timing\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "retry(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/retry(_:)",
        "html": "Parameters\nretries\n\nThe number of times to attempt to recreate the subscription.\n\nReturn Value\n\nA publisher that attempts to recreate its subscription to a failed upstream publisher.\n\nDiscussion\n\nUse retry(_:) to try a connecting to an upstream publisher after a failed connection attempt.\n\nIn the example below, a URLSession.DataTaskPublisher attempts to connect to a remote URL. If the connection attempt succeeds, it publishes the remote service\u2019s HTML to the downstream publisher and completes normally. Otherwise, the retry operator attempts to reestablish the connection. If after three attempts the publisher still can\u2019t connect to the remote URL, the catch(_:) operator replaces the error with a new publisher that publishes a \u201cconnection timed out\u201d HTML page. After the downstream subscriber receives the timed out message, the stream completes normally.\n\nstruct WebSiteData: Codable {\n    var rawHTML: String\n}\n\n\nlet myURL = URL(string: \"https://www.example.com\")\n\n\ncancellable = URLSession.shared.dataTaskPublisher(for: myURL!)\n    .retry(3)\n    .map({ (page) -> WebSiteData in\n        return WebSiteData(rawHTML: String(decoding: page.data, as: UTF8.self))\n    })\n    .catch { error in\n        return Just(WebSiteData(rawHTML: \"<HTML>Unable to load page - timed out.</HTML>\"))\n}\n.sink(receiveCompletion: { print (\"completion: \\($0)\") },\n      receiveValue: { print (\"value: \\($0)\") }\n )\n\n\n// Prints: The HTML content from the remote URL upon a successful connection,\n//         or returns \"<HTML>Unable to load page - timed out.</HTML>\" if the number of retries exceeds the specified value.\n\n\nAfter exceeding the specified number of retries, the publisher passes the failure to the downstream receiver.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error."
    },
    {
        "title": "tryCatch(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/trycatch(_:)",
        "html": "Parameters\nhandler\n\nA throwing closure that accepts the upstream failure as input. This closure can either replace the upstream publisher with a new one, or throw a new error to the downstream subscriber.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher, or an error.\n\nDiscussion\n\nUse tryCatch(_:) to decide how to handle from an upstream publisher by either replacing the publisher with a new publisher, or throwing a new error.\n\nIn the example below, an array publisher emits values that a tryMap(_:) operator evaluates to ensure the values are greater than zero. If the values aren\u2019t greater than zero, the operator throws an error to the downstream subscriber to let it know there was a problem. The subscriber, tryCatch(_:), replaces the error with a new publisher using Just to publish a final value before the stream ends normally.\n\nenum SimpleError: Error { case error }\nvar numbers = [5, 4, 3, 2, 1, -1, 7, 8, 9, 10]\n\n\ncancellable = numbers.publisher\n   .tryMap { v in\n        if v > 0 {\n            return v\n        } else {\n            throw SimpleError.error\n        }\n}\n  .tryCatch { error in\n      Just(0) // Send a final value before completing normally.\n              // Alternatively, throw a new error to terminate the stream.\n}\n  .sink(receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print (\"Received \\($0).\") }\n  )\n//    Received 5.\n//    Received 4.\n//    Received 3.\n//    Received 2.\n//    Received 1.\n//    Received 0.\n//    Completion: finished.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/flatmap(maxpublishers:_:)-1z8ey",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/flatmap(maxpublishers:_:)-1mvb5",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "catch(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/catch(_:)",
        "html": "Parameters\nhandler\n\nA closure that accepts the upstream failure as input and returns a publisher to replace the upstream publisher.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\n\nDiscussion\n\nUse catch() to replace an error from an upstream publisher with a new publisher.\n\nIn the example below, the catch() operator handles the SimpleError thrown by the upstream publisher by replacing the error with a Just publisher. This continues the stream by publishing a single value and completing normally.\n\nstruct SimpleError: Error {}\nlet numbers = [5, 4, 3, 2, 1, 0, 9, 8, 7, 6]\ncancellable = numbers.publisher\n    .tryLast(where: {\n        guard $0 != 0 else {throw SimpleError()}\n        return true\n    })\n    .catch({ (error) in\n        Just(-1)\n    })\n    .sink { print(\"\\($0)\") }\n    // Prints: -1\n\n\nBackpressure note: This publisher passes through request and cancel to the upstream. After receiving an error, the publisher sends sends any unfulfilled demand to the new Publisher. SeeAlso: replaceError\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/flatmap(maxpublishers:_:)-2cqeb",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "merge(with:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/merge(with:_:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nh\n\nAn eighth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\nlet pubH = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF, pubG, pubH)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\npubH.send(1000)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\npubH.send(1001)\n\n\n//Prints: \"1 40 90 -1 33 44 54 1000 2 50 100 -2 33 33 54 1001\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "combineLatest(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/combinelatest(_:)",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest(_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To pair elements from multiple publishers, use zip(_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn this example, PassthroughSubject pub1 and also pub2 emit values; as combineLatest(_:) receives input from either upstream publisher, it combines the latest value from each publisher into a tuple and publishes it.\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(3)\npub1.send(45)\npub2.send(22)\n\n\n// Prints:\n//    Result: (2, 2).    // pub1 latest = 2, pub2 latest = 2\n//    Result: (3, 2).    // pub1 latest = 3, pub2 latest = 2\n//    Result: (45, 2).   // pub1 latest = 45, pub2 latest = 2\n//    Result: (45, 22).  // pub1 latest = 45, pub2 latest = 22\n\n\nWhen all upstream publishers finish, this publisher finishes. If an upstream publisher never publishes a value, this publisher never finishes.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "merge(with:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/merge(with:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\n\n\n// Prints: \"1 40 90 -1 2 50 100 -2 \"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/combinelatest(_:_:)-80op",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn this example, three instances of PassthroughSubject emit values; as combineLatest(_:_:) receives input from any of the upstream publishers, it combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: (2, 2, 9).\n//  Result: (3, 2, 9).\n//  Result: (3, 12, 9).\n//  Result: (13, 12, 9).\n//  Result: (13, 12, 19).\n\n\nIf any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/zip(_:_:)-5opbz",
        "html": "Parameters\nother\n\nAnother publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from two upstream publishers.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two publishers using a transformation you specify to publish a new value to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, PassthroughSubject instances numbersPub and lettersPub emit values; zip(_:_:) receives the oldest value from each publisher, uses the Int from numbersPub and publishes a string that repeats the String from lettersPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\ncancellable = numbersPub\n    .zip(lettersPub) { anInt, aLetter in\n        String(repeating: aLetter, count: anInt)\n    }\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:       zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:       zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:       zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"   zip output: \"A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"   zip output: \"BB\"\n// Prints:\n//  A\n//  BB\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "merge(with:)",
        "url": "https://developer.apple.com/documentation/combine/empty/merge(with:)",
        "html": "Parameters\nother\n\nAnother publisher of this publisher\u2019s type.\n\nReturn Value\n\nA publisher that emits an event when either upstream publisher emits an event.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "output(at:)",
        "url": "https://developer.apple.com/documentation/combine/empty/output(at:)",
        "html": "Parameters\nindex\n\nThe index that indicates the element to publish.\n\nReturn Value\n\nA publisher that publishes a specific indexed element.\n\nDiscussion\n\nUse output(at:) when you need to republish a specific element specified by its position in the stream. If the publisher completes normally or with an error before publishing the specified element, then the publisher doesn\u2019t produce any elements.\n\nIn the example below, the array publisher emits the fifth element in the sequence of published elements:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.publisher\n    .output(at: 5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"6\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "ImmediateScheduler.SchedulerTimeType.Stride.Magnitude",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/magnitude-swift.typealias",
        "html": "See Also\nDeclaring Timekeeping Types\ntypealias FloatLiteralType\nThe type used when evaluating floating-point literals.\ntypealias IntegerLiteralType\nThe type used when evaluating integer literals."
    },
    {
        "title": "reduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/reduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n"
    },
    {
        "title": "last(where:)",
        "url": "https://developer.apple.com/documentation/combine/fail/last(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse last(where:) when you need to republish only the last element of a stream that satisfies a closure you specify.\n\nIn the example below, a range publisher emits the last element that satisfies the closure\u2019s criteria, then finishes normally:\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last { $0 < 6 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"5\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "min(by:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/min(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence\u2019s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence\u2019s values don\u2019t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n"
    },
    {
        "title": "max(by:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/max(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence\u2019s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence\u2019s values don\u2019t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n"
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/map(_:)-3ursx",
        "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n"
    },
    {
        "title": "flatMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/flatmap(_:)-8hker",
        "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method \u201cflattens\u201d the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n"
    },
    {
        "title": "next()",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/iterator/next()",
        "html": "Return Value\n\nThe next published element, or nil if the publisher finishes normally."
    },
    {
        "title": "flatMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/flatmap(_:)-3e8ut",
        "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method \u201cflattens\u201d the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n"
    },
    {
        "title": "prefix(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/prefix(_:)",
        "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence."
    },
    {
        "title": "prefix(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/prefix(_:)",
        "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence."
    },
    {
        "title": "contains(where:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/contains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn\u2019t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends."
    },
    {
        "title": "contains(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/contains(_:)",
        "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n"
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/compactmap(_:)-89ac4",
        "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n"
    },
    {
        "title": "allSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/allsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true."
    },
    {
        "title": "next()",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/iterator/next()",
        "html": "Return Value\n\nThe next published element, or nil if the publisher finishes normally. If the publisher terminates with an error, the call point receives the error as a throw."
    },
    {
        "title": "SignedNumeric Implementations",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/signednumeric-implementations",
        "html": "Topics\nOperators\nstatic func - (Self) -> Self\nReturns the additive inverse of the specified value.\nInstance Methods\nfunc negate()\nReplaces this value with its additive inverse."
    },
    {
        "title": "Comparable Implementations",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/comparable-implementations",
        "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/init(_:)",
        "html": "See Also\nCreating Scheduler Time Strides\ninit?<T>(exactly: T)\nCreates an immediate scheduler time interval from a binary integer type.\ninit(floatLiteral: Double)\nCreates an immediate scheduler time interval from a floating-point seconds value.\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder.\ninit(integerLiteral: Int)\nCreates an immediate scheduler time interval from an integer seconds value."
    },
    {
        "title": "first()",
        "url": "https://developer.apple.com/documentation/combine/empty/first()",
        "html": "Return Value\n\nA publisher that only publishes the first element of a stream.\n\nDiscussion\n\nUse first() to publish just the first element from an upstream publisher, then finish normally. The first() operator requests unlimited from its upstream as soon as downstream requests at least one element. If the upstream completes before first() receives any elements, it completes without emitting any values.\n\nIn this example, the first() publisher republishes the first element received from the sequence publisher, -10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first()\n    .sink { print(\"\\($0)\") }\n\n\n// Print: \"-10\"\n\nSee Also\nSelecting Specific Elements\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "init(floatLiteral:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/init(floatliteral:)",
        "html": "See Also\nCreating Scheduler Time Strides\ninit(Int)\nCreates an immediate scheduler time interval from the given time interval.\ninit?<T>(exactly: T)\nCreates an immediate scheduler time interval from a binary integer type.\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder.\ninit(integerLiteral: Int)\nCreates an immediate scheduler time interval from an integer seconds value."
    },
    {
        "title": "tryPrefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/empty/tryprefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value indicating whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate throws or indicates publishing should finish.\n\nDiscussion\n\nUse tryPrefix(while:) to emit values from the upstream publisher that meet a condition you specify in an error-throwing closure. The publisher finishes when the closure returns false. If the closure throws an error, the publisher fails with that error.\n\nstruct OutOfRangeError: Error {}\n\n\nlet numbers = (0...10).reversed()\ncancellable = numbers.publisher\n    .tryPrefix {\n        guard $0 != 0 else {throw OutOfRangeError()}\n        return $0 <= numbers.max()!\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"10 9 8 7 6 5 4 3 2 1 completion: failure(OutOfRangeError()) \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "drop(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/empty/drop(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA publisher to monitor for its first emitted element.\n\nReturn Value\n\nA publisher that drops elements from the upstream publisher until the other publisher produces a value.\n\nDiscussion\n\nUse drop(untilOutputFrom:) to ignore elements from the upstream publisher until another, second, publisher delivers its first element. This publisher requests a single value from the second publisher, and it ignores (drops) all elements from the upstream publisher until the second publisher produces a value. After the second publisher produces an element, drop(untilOutputFrom:) cancels its subscription to the second publisher, and allows events from the upstream publisher to pass through.\n\nAfter this publisher receives a subscription from the upstream publisher, it passes through backpressure requests from downstream to the upstream publisher. If the upstream publisher acts on those requests before the other publisher produces an item, this publisher drops the elements it receives from the upstream publisher.\n\nIn the example below, the pub1 publisher defers publishing its elements until the pub2 publisher delivers its first element:\n\nlet upstream = PassthroughSubject<Int,Never>()\nlet second = PassthroughSubject<String,Never>()\ncancellable = upstream\n    .drop(untilOutputFrom: second)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\nupstream.send(1)\nupstream.send(2)\nsecond.send(\"A\")\nupstream.send(3)\nupstream.send(4)\n// Prints \"3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "dropFirst(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/dropfirst(_:)",
        "html": "Parameters\ncount\n\nThe number of elements to omit. The default is 1.\n\nReturn Value\n\nA publisher that doesn\u2019t republish the first count elements.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the upstream publisher, and republish the remaining elements.\n\nThe example below drops the first five elements from the stream:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncancellable = numbers.publisher\n    .dropFirst(5)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"6 7 8 9 10 \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryDrop(while:)",
        "url": "https://developer.apple.com/documentation/combine/empty/trydrop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false, and then republishes all remaining elements. If the predicate closure throws, the publisher fails with an error.\n\nDiscussion\n\nUse tryDrop(while:) to omit elements from an upstream until an error-throwing closure you provide returns false, after which the remaining items in the stream are published. If the closure throws, no elements are emitted and the publisher fails with an error.\n\nIn the example below, elements are ignored until -1 is encountered in the stream and the closure returns false. The publisher then republishes the remaining elements and finishes normally. Conversely, if the guard value in the closure had been encountered, the closure would throw and the publisher would fail with an error.\n\nstruct RangeError: Error {}\nvar numbers = [1, 2, 3, 4, 5, 6, -1, 7, 8, 9, 10]\nlet range: CountableClosedRange<Int> = (1...100)\ncancellable = numbers.publisher\n    .tryDrop {\n        guard $0 != 0 else { throw RangeError() }\n        return range.contains($0)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"-1 7 8 9 10 completion: finished\"\n// If instead numbers was [1, 2, 3, 4, 5, 6, 0, -1, 7, 8, 9, 10], tryDrop(while:) would fail with a RangeError.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "prefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/empty/prefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate indicates publishing should finish.\n\nDiscussion\n\nUse prefix(while:) to emit values while elements from the upstream publisher meet a condition you specify. The publisher finishes when the closure returns false.\n\nIn the example below, the prefix(while:) operator emits values while the element it receives is less than five:\n\nlet numbers = (0...10)\nnumbers.publisher\n    .prefix { $0 < 5 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "drop(while:)",
        "url": "https://developer.apple.com/documentation/combine/empty/drop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an upstream publisher until the element received meets a condition you specify.\n\nIn the example below, the operator omits all elements in the stream until the first element arrives that\u2019s a positive integer, after which the operator publishes all remaining elements:\n\nlet numbers = [-62, -1, 0, 10, 0, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .drop { $0 <= 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10 0, 22 41 -1 5\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "allSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/allsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the allSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes.\n\nIn the example below, the allSatisfy(_:) operator tests if each an integer array publisher\u2019s elements fall into the targetRange:\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .allSatisfy { targetRange.contains($0) }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "min()",
        "url": "https://developer.apple.com/documentation/combine/empty/min()",
        "html": "Return Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to find the minimum value in a stream of elements from an upstream publisher.\n\nIn the example below, the min(by:) operator emits a value when the publisher finishes, that value is the minimum of the values received from upstream, which is -1.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .min()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"-1\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "min(by:)",
        "url": "https://developer.apple.com/documentation/combine/empty/min(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to determine the minimum value in the stream of elements from an upstream publisher using a comparison operation you specify.\n\nThis operator is useful when the value received from the upstream publisher isn\u2019t Comparable.\n\nIn the example below an array publishes enumeration elements representing playing card ranks. The min(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the minimum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .king]\ncancellable = cards.publisher\n    .min {\n        return  $0.rawValue < $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"ace\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "max()",
        "url": "https://developer.apple.com/documentation/combine/empty/max()",
        "html": "Return Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max() to determine the maximum value in the stream of elements from an upstream publisher.\n\nIn the example below, the max() operator emits a value when the publisher finishes, that value is the maximum of the values received from upstream, which is 10.\n\nlet numbers = [0, 10, 5]\ncancellable = numbers.publisher\n    .max()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "max(by:)",
        "url": "https://developer.apple.com/documentation/combine/empty/max(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max(by:) to determine the maximum value of elements received from the upstream publisher based on an ordering closure you specify.\n\nIn the example below, an array publishes enumeration elements representing playing card ranks. The max(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the maximum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .jack]\ncancellable = cards.publisher\n    .max {\n        return  $0.rawValue > $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"queen\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "tryMin(by:)",
        "url": "https://developer.apple.com/documentation/combine/empty/trymin(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMin(by:) to determine the minimum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMin(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\nnumbers.publisher\n    .tryMin { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first < second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes."
    },
    {
        "title": "reduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/reduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nA closure that produces a new value by taking the previously-accumulated value and the next element it receives from the upstream publisher.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes. If reduce(_:_:) receives an error from the upstream publisher, the operator delivers it to the downstream subscriber, the publisher terminates and publishes no value.\n\nDiscussion\n\nUse reduce(_:_:) to collect a stream of elements and produce an accumulated value based on a closure you provide.\n\nIn the following example, the reduce(_:_:) operator collects all the integer values it receives from its upstream publisher:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .reduce(0, { accum, next in accum + next })\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"55\"\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "count()",
        "url": "https://developer.apple.com/documentation/combine/empty/count()",
        "html": "Return Value\n\nA publisher that consumes all elements until the upstream publisher finishes, then emits a single value with the total number of elements received.\n\nDiscussion\n\nUse count() to determine the number of elements received from the upstream publisher before it completes:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .count()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"11\"\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "collect(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/collect(_:)",
        "html": "Parameters\ncount\n\nThe maximum number of received elements to buffer before publishing.\n\nReturn Value\n\nA publisher that collects up to the specified number of elements, and then publishes them as an array.\n\nDiscussion\n\nUse collect(_:) to emit arrays of at most count elements from an upstream publisher. If the upstream publisher finishes before collecting the specified number of elements, the publisher sends an array of only the items it received. This may be fewer than count elements.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nIn the example below, the collect(_:) operator emits one partial and two full arrays based on the requested collection size of 5:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect(5)\n    .sink { print(\"\\($0), terminator: \" \"\") }\n\n\n// Prints \"[0, 1, 2, 3, 4] [5, 6, 7, 8, 9] [10] \"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "removeDuplicates()",
        "url": "https://developer.apple.com/documentation/combine/empty/removeduplicates()",
        "html": "Return Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates() to remove repeating elements from an upstream publisher. This operator has a two-element memory: the operator uses the current and previously published elements as the basis for its comparison.\n\nIn the example below, removeDuplicates() triggers on the doubled, tripled, and quadrupled occurrences of 1, 3, and 4 respectively. Because the two-element memory considers only the current element and the previous element, the operator prints the final 0 in the example data since its immediate predecessor is 4.\n\nlet numbers = [0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 0]\ncancellable = numbers.publisher\n    .removeDuplicates()\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 0\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "removeDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/empty/removeduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of the current and previously published elements using a closure you provide.\n\nUse the removeDuplicates(by:) operator when comparing types that don\u2019t themselves implement Equatable, or if you need to compare values differently than the type\u2019s Equatable implementation.\n\nIn the example below, the removeDuplicates(by:) functionality triggers when the x property of the current and previous elements are equal, otherwise the operator publishes the current Point to the downstream subscriber:\n\nstruct Point {\n    let x: Int\n    let y: Int\n}\n\n\nlet points = [Point(x: 0, y: 0), Point(x: 0, y: 1),\n              Point(x: 1, y: 1), Point(x: 2, y: 1)]\ncancellable = points.publisher\n    .removeDuplicates { prev, current in\n        // Considers points to be duplicate if the x coordinate\n        // is equal, and ignores the y coordinate\n        prev.x == current.x\n    }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: Point(x: 0, y: 0) Point(x: 1, y: 1) Point(x: 2, y: 1)\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryCompactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/trycompactmap(_:)",
        "html": "Parameters\ntransform\n\nAn error-throwing closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of calling the supplied closure.\n\nDiscussion\n\nUse tryCompactMap(_:) to remove nil elements from a publisher\u2019s stream based on an error-throwing closure you provide. If the closure throws an error, the publisher cancels the upstream publisher and sends the thrown error to the downstream subscriber as a Failure.\n\nThe following example uses an array of numbers as the source for a collection-based publisher. A tryCompactMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform the numbers from its Arabic to Roman numerals, as an optional String.\n\nIf the closure called by tryCompactMap(_:) fails to look up a Roman numeral, it returns the optional String (unknown).\n\nIf the closure called by tryCompactMap(_:) determines the input is 0, it throws an error. The tryCompactMap(_:) operator catches this error and stops publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from: Int) throws -> String? {\n    let romanNumeralDict: [Int : String] =\n        [1: \"I\", 2: \"II\", 3: \"III\", 4: \"IV\", 5: \"V\"]\n    guard from != 0 else { throw ParseError() }\n    return romanNumeralDict[from]\n}\nlet numbers = [6, 5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryCompactMap { try romanNumeral(from: $0) }\n    .sink(\n          receiveCompletion: { print (\"\\($0)\") },\n          receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"(Unknown) V IV III II I failure(ParseError())\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "setFailureType(to:)",
        "url": "https://developer.apple.com/documentation/combine/empty/setfailuretype(to:)",
        "html": "Parameters\nfailureType\n\nThe Failure type presented by this publisher.\n\nReturn Value\n\nA publisher that appears to send the specified failure type.\n\nDiscussion\n\nUse setFailureType(to:) when you need set the error type of a publisher that cannot fail.\n\nConversely, if the upstream can fail, you would use mapError(_:) to provide instructions on converting the error types to needed by the downstream publisher\u2019s inputs.\n\nThe following example has two publishers with mismatched error types: pub1\u2019s error type is Never, and pub2\u2019s error type is Error. Because of the mismatch, the combineLatest(_:) operator requires that pub1 use setFailureType(to:) to make it appear that pub1 can produce the Error type, like pub2 can.\n\nlet pub1 = [0, 1, 2, 3, 4, 5].publisher\nlet pub2 = CurrentValueSubject<Int, Error>(0)\nlet cancellable = pub1\n    .setFailureType(to: Error.self)\n    .combineLatest(pub2)\n    .sink(\n        receiveCompletion: { print (\"completed: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\")}\n     )\n\n\n// Prints: \"value: (5, 0)\".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure."
    },
    {
        "title": "tryScan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/tryscan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse tryScan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value. If your accumulator closure throws an error, the publisher terminates with the error.\n\nIn the example below, tryScan(_:_:) calls a division function on elements of a collection publisher. The Publishers.TryScan publisher publishes each result until the function encounters a DivisionByZeroError, which terminates the publisher.\n\nstruct DivisionByZeroError: Error {}\n\n\n/// A function that throws a DivisionByZeroError if `current` provided by the TryScan publisher is zero.\nfunc myThrowingFunction(_ lastValue: Int, _ currentValue: Int) throws -> Int {\n    guard currentValue != 0 else { throw DivisionByZeroError() }\n    return (lastValue + currentValue) / currentValue\n }\n\n\nlet numbers = [1,2,3,4,5,0,6,7,8,9]\ncancellable = numbers.publisher\n    .tryScan(10) { try myThrowingFunction($0, $1) }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"11 6 3 1 1 -1 failure(DivisionByZeroError())\".\n\n\nIf the closure throws an error, the publisher fails with the error.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "drop(while:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/drop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is."
    },
    {
        "title": "contains(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/contains(_:)",
        "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n"
    },
    {
        "title": "allSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/allsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true."
    },
    {
        "title": "contains(where:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/contains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn\u2019t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends."
    },
    {
        "title": "dropFirst(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/dropfirst(_:)",
        "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence."
    },
    {
        "title": "filter(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/filter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value indicating whether to republish the element.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nCombine\u2019s filter(_:) operator performs an operation similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018365-filter in the Swift Standard Library: it uses a closure to test each element to determine whether to republish the element to the downstream subscriber.\n\nThe following example, uses a filter operation that receives an Int and only republishes a value if it\u2019s even.\n\nlet numbers: [Int] = [1, 2, 3, 4, 5]\ncancellable = numbers.publisher\n    .filter { $0 % 2 == 0 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 4\"\n\nSee Also\nFiltering Elements\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/map(_:)-66q23",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s map(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use map(_:) to transform from one kind of element to another.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A map(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the map(_:)\u2019s closure fails to look up a Roman numeral, it returns the string (unknown).\n\nlet numbers = [5, 4, 3, 2, 1, 0]\nlet romanNumeralDict: [Int : String] =\n   [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\ncancellable = numbers.publisher\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"V IV III II I (unknown)\"\n\n\nIf your closure can throw an error, use Combine\u2019s tryMap(_:) operator instead.\n\nSee Also\nMapping Elements\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "replaceNil(with:)",
        "url": "https://developer.apple.com/documentation/combine/empty/replacenil(with:)",
        "html": "Parameters\noutput\n\nThe element to use when replacing nil.\n\nReturn Value\n\nA publisher that replaces nil elements from the upstream publisher with the provided element.\n\nDiscussion\n\nThe replaceNil(with:) operator enables replacement of nil values in a stream with a substitute value. In the example below, a collection publisher contains a nil value. The replaceNil(with:) operator replaces this with 0.0.\n\nlet numbers: [Double?] = [1.0, 2.0, nil, 3.0]\nnumbers.publisher\n    .replaceNil(with: 0.0)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"Optional(1.0) Optional(2.0) Optional(0.0) Optional(3.0)\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/subscribe(_:)-45x01",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this publisher. After attaching, the subscriber can start to receive values.\n\nDiscussion\n\nAlways call this function instead of receive(subscriber:). Adopters of Publisher must implement receive(subscriber:). The implementation of subscribe(_:) provided by Publisher calls through to receive(subscriber:).\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/empty/subscribe(_:)-1l2fi",
        "html": "Parameters\nsubject\n\nThe subject to attach to this publisher.\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher."
    },
    {
        "title": "receive(subscriber:)",
        "url": "https://developer.apple.com/documentation/combine/empty/receive(subscriber:)",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this Publisher, after which it can receive values.\n\nDiscussion\n\nImplementations of Publisher must implement this method.\n\nThe provided implementation of subscribe(_:)calls this method.\n\nSee Also\nWorking with Subscribers\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "init(integerLiteral:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/init(integerliteral:)",
        "html": "See Also\nCreating Scheduler Time Strides\ninit(Int)\nCreates an immediate scheduler time interval from the given time interval.\ninit?<T>(exactly: T)\nCreates an immediate scheduler time interval from a binary integer type.\ninit(floatLiteral: Double)\nCreates an immediate scheduler time interval from a floating-point seconds value.\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder."
    },
    {
        "title": "microseconds(_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/microseconds(_:)",
        "html": "See Also\nCreating Scheduler Time Strides from Seconds\nstatic func milliseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of milliseconds into an instance of this scheduler time type.\nstatic func nanoseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of nanoseconds into an instance of this scheduler time type.\nstatic func seconds(Double) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of seconds, as a floating-point value, into an instance of this scheduler time type.\nstatic func seconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of seconds into an instance of this scheduler time type."
    },
    {
        "title": "zero",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/zero",
        "html": "Discussion\n\nZero is the identity element for addition. For any value, x + .zero == x and .zero + x == x."
    },
    {
        "title": "ImmediateScheduler.SchedulerTimeType.Stride.IntegerLiteralType",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/integerliteraltype",
        "html": "See Also\nDeclaring Timekeeping Types\ntypealias FloatLiteralType\nThe type used when evaluating floating-point literals.\ntypealias Magnitude\nThe type used for expressing the stride\u2019s magnitude."
    },
    {
        "title": "...(_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/'...(_:)-3ep4j",
        "html": "Parameters\nminimum\n\nThe lower bound for the range.\n\nDiscussion\n\nUse the postfix range operator (postfix ...) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeFrom<Double> instance that includes any value greater than or equal to 5.0.\n\nlet atLeastFive = 5.0...\n\n\natLeastFive.contains(4.0)     // false\natLeastFive.contains(5.0)     // true\natLeastFive.contains(6.0)     // true\n\n\nYou can use this type of partial range of a collection\u2019s indices to represent the range from the partial range\u2019s lower bound up to the end of the collection.\n\nlet numbers = [10, 20, 30, 40, 50, 60, 70]\nprint(numbers[3...])\n// Prints \"[40, 50, 60, 70]\"\n\n\nPrecondition\n\nminimum must compare equal to itself (i.e. cannot be NaN).\n\nSee Also\nCreating Ranges\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds."
    },
    {
        "title": "*=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/*=(_:_:)",
        "html": "Parameters\nlhs\n\nThe first value to multiply.\n\nrhs\n\nThe second value to multiply.\n\nSee Also\nPerforming Mathematical Operations\nfunc negate()\nReplaces this value with its additive inverse.\nstatic func * (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nMultiplies two values and produces their product.\nstatic func + (Self) -> Self\nReturns the given number unchanged.\nstatic func + (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nAdds two values and produces their sum.\nstatic func += (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nAdds two values and stores the result in the left-hand-side variable.\nstatic func - (Self) -> Self\nReturns the additive inverse of the specified value.\nstatic func - (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nSubtracts one value from another and produces their difference."
    },
    {
        "title": "...(_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/'...(_:)-4auj9",
        "html": "Parameters\nmaximum\n\nThe upper bound for the range.\n\nDiscussion\n\nUse the prefix closed range operator (prefix ...) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeThrough<Double> instance that includes any value less than or equal to 5.0.\n\nlet throughFive = ...5.0\n\n\nthroughFive.contains(4.0)     // true\nthroughFive.contains(5.0)     // true\nthroughFive.contains(6.0)     // false\n\n\nYou can use this type of partial range of a collection\u2019s indices to represent the range from the start of the collection up to, and including, the partial range\u2019s upper bound.\n\nlet numbers = [10, 20, 30, 40, 50, 60, 70]\nprint(numbers[...3])\n// Prints \"[10, 20, 30, 40]\"\n\n\nPrecondition\n\nmaximum must compare equal to itself (i.e. cannot be NaN).\n\nSee Also\nCreating Ranges\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds."
    },
    {
        "title": "*(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/*(_:_:)",
        "html": "Parameters\nlhs\n\nThe first value to multiply.\n\nrhs\n\nThe second value to multiply.\n\nDiscussion\n\nThe multiplication operator (*) calculates the product of its two arguments. For example:\n\n2 * 3                   // 6\n100 * 21                // 2100\n-10 * 15                // -150\n3.5 * 2.25              // 7.875\n\n\nYou cannot use * with arguments of different types. To multiply values of different types, convert one of the values to the other value\u2019s type.\n\nlet x: Int8 = 21\nlet y: Int = 1000000\nInt(x) * y              // 21000000\n\nSee Also\nPerforming Mathematical Operations\nfunc negate()\nReplaces this value with its additive inverse.\nstatic func *= (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nMultiplies two values and stores the result in the left-hand-side variable.\nstatic func + (Self) -> Self\nReturns the given number unchanged.\nstatic func + (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nAdds two values and produces their sum.\nstatic func += (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nAdds two values and stores the result in the left-hand-side variable.\nstatic func - (Self) -> Self\nReturns the additive inverse of the specified value.\nstatic func - (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nSubtracts one value from another and produces their difference."
    },
    {
        "title": "...(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/'...(_:_:)",
        "html": "Parameters\nminimum\n\nThe lower bound for the range.\n\nmaximum\n\nThe upper bound for the range.\n\nDiscussion\n\nUse the closed range operator (...) to create a closed range of any type that conforms to the Comparable protocol. This example creates a ClosedRange<Character> from \u201ca\u201d up to, and including, \u201cz\u201d.\n\nlet lowercase = \"a\"...\"z\"\nprint(lowercase.contains(\"z\"))\n// Prints \"true\"\n\n\nPrecondition\n\nminimum <= maximum.\n\nSee Also\nCreating Ranges\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound."
    },
    {
        "title": "-(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/-(_:_:)",
        "html": "Parameters\nlhs\n\nA numeric value.\n\nrhs\n\nThe value to subtract from lhs.\n\nDiscussion\n\nThe subtraction operator (-) calculates the difference of its two arguments. For example:\n\n8 - 3                   // 5\n-10 - 5                 // -15\n100 - -5                // 105\n10.5 - 100.0            // -89.5\n\n\nYou cannot use - with arguments of different types. To subtract values of different types, convert one of the values to the other value\u2019s type.\n\nlet x: UInt8 = 21\nlet y: UInt = 1000000\ny - UInt(x)             // 999979\n\nSee Also\nPerforming Mathematical Operations\nfunc negate()\nReplaces this value with its additive inverse.\nstatic func * (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nMultiplies two values and produces their product.\nstatic func *= (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nMultiplies two values and stores the result in the left-hand-side variable.\nstatic func + (Self) -> Self\nReturns the given number unchanged.\nstatic func + (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nAdds two values and produces their sum.\nstatic func += (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nAdds two values and stores the result in the left-hand-side variable.\nstatic func - (Self) -> Self\nReturns the additive inverse of the specified value."
    },
    {
        "title": "+(_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/+(_:)",
        "html": "Return Value\n\nThe given argument without any changes.\n\nDiscussion\n\nYou can use the unary plus operator (+) to provide symmetry in your code for positive numbers when also using the unary minus operator.\n\nlet x = -21\nlet y = +21\n// x == -21\n// y == 21\n\nSee Also\nPerforming Mathematical Operations\nfunc negate()\nReplaces this value with its additive inverse.\nstatic func * (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nMultiplies two values and produces their product.\nstatic func *= (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nMultiplies two values and stores the result in the left-hand-side variable.\nstatic func + (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nAdds two values and produces their sum.\nstatic func += (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nAdds two values and stores the result in the left-hand-side variable.\nstatic func - (Self) -> Self\nReturns the additive inverse of the specified value.\nstatic func - (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nSubtracts one value from another and produces their difference."
    },
    {
        "title": "+=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/+=(_:_:)-11o8s",
        "html": "Parameters\nlhs\n\nThe first value to add.\n\nrhs\n\nThe second value to add.\n\nSee Also\nPerforming Mathematical Operations\nfunc negate()\nReplaces this value with its additive inverse.\nstatic func * (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nMultiplies two values and produces their product.\nstatic func *= (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nMultiplies two values and stores the result in the left-hand-side variable.\nstatic func + (Self) -> Self\nReturns the given number unchanged.\nstatic func + (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nAdds two values and produces their sum.\nstatic func - (Self) -> Self\nReturns the additive inverse of the specified value.\nstatic func - (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nSubtracts one value from another and produces their difference."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/zip(_:_:_:)-1o4fr",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from three other publishers to publish a tuple to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, several PassthroughSubject instances emit values; zip(_:_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\nlet fractionsPub  = PassthroughSubject<Double, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 2,3     lettersPub: \"A\"    emojiPub: \"\ud83d\ude00\"  fractionsPub: 0.1     zip output: (1, \"A\", \"\ud83d\ude00\", 0.1)\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: (2, \"B\", \"\ud83e\udd70\", 0.8)\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\", 0.1)\n//  (2, \"B\", \"\ud83e\udd70\", 0.8)\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/!=(_:_:)",
        "html": "See Also\nComparing Scheduler Time Strides\nstatic func == (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> Bool\nReturns a Boolean value indicating whether two values are equal."
    },
    {
        "title": "-(_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/-(_:)",
        "html": "Return Value\n\nThe additive inverse of the argument.\n\nDiscussion\n\nThe negation operator (prefix -) returns the additive inverse of its argument.\n\nlet x = 21\nlet y = -x\n// y == -21\n\n\nThe resulting value must be representable in the same type as the argument. In particular, negating a signed, fixed-width integer type\u2019s minimum results in a value that cannot be represented.\n\nlet z = -Int8.min\n// Overflow error\n\nSee Also\nPerforming Mathematical Operations\nfunc negate()\nReplaces this value with its additive inverse.\nstatic func * (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nMultiplies two values and produces their product.\nstatic func *= (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nMultiplies two values and stores the result in the left-hand-side variable.\nstatic func + (Self) -> Self\nReturns the given number unchanged.\nstatic func + (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nAdds two values and produces their sum.\nstatic func += (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nAdds two values and stores the result in the left-hand-side variable.\nstatic func - (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nSubtracts one value from another and produces their difference."
    },
    {
        "title": "tryPrefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/fail/tryprefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value indicating whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate throws or indicates publishing should finish.\n\nDiscussion\n\nUse tryPrefix(while:) to emit values from the upstream publisher that meet a condition you specify in an error-throwing closure. The publisher finishes when the closure returns false. If the closure throws an error, the publisher fails with that error.\n\nstruct OutOfRangeError: Error {}\n\n\nlet numbers = (0...10).reversed()\ncancellable = numbers.publisher\n    .tryPrefix {\n        guard $0 != 0 else {throw OutOfRangeError()}\n        return $0 <= numbers.max()!\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"10 9 8 7 6 5 4 3 2 1 completion: failure(OutOfRangeError()) \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryMax(by:)",
        "url": "https://developer.apple.com/documentation/combine/fail/trymax(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMax(by:) to determine the maximum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMax(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\ncancellable = numbers.publisher\n    .tryMax { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first > second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: completion: failure(IllegalValueError())\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "encode(to:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/encode(to:)",
        "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder\u2019s format."
    },
    {
        "title": "<(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/_(_:_:)-3cmdj",
        "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nThis function is the only requirement of the Comparable protocol. The remainder of the relational operator functions are implemented by the standard library for any type that conforms to Comparable."
    },
    {
        "title": "receive(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/record/receive(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler the publisher uses for element delivery.\n\noptions\n\nScheduler options used to customize element delivery.\n\nReturn Value\n\nA publisher that delivers elements using the specified scheduler.\n\nDiscussion\n\nYou use the receive(on:options:) operator to receive results and completion on a specific scheduler, such as performing UI work on the main run loop. In contrast with subscribe(on:options:), which affects upstream messages, receive(on:options:) changes the execution context of downstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes jsonPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes labelUpdater to receive elements and completion on RunLoop.main.\n\nlet jsonPublisher = MyJSONLoaderPublisher() // Some publisher.\nlet labelUpdater = MyLabelUpdateSubscriber() // Some subscriber that updates the UI.\n\n\njsonPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(labelUpdater)\n\n\nPrefer receive(on:options:) over explicit use of dispatch queues when performing work in subscribers. For example, instead of the following pattern:\n\npub.sink {\n    DispatchQueue.main.async {\n        // Do something.\n    }\n}\n\n\nUse this pattern instead:\n\npub.receive(on: DispatchQueue.main).sink {\n    // Do something.\n}\n\n\nNote\n\nreceive(on:options:) doesn\u2019t affect the scheduler used to call the subscriber\u2019s receive(subscription:) method.\n\nSee Also\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations."
    },
    {
        "title": "share()",
        "url": "https://developer.apple.com/documentation/combine/record/share()",
        "html": "Return Value\n\nA class instance that shares elements received from its upstream to multiple subscribers.\n\nDiscussion\n\nThe publisher returned by this operator supports multiple subscribers, all of whom receive unchanged elements and completion states from the upstream publisher.\n\nTip\n\nPublishers.Share is effectively a combination of the Publishers.Multicast and PassthroughSubject publishers, with an implicit autoconnect().\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a share() operator to share the same random number to each of two subscribers. This example uses a delay(for:tolerance:scheduler:options:) operator only to prevent the first subscriber from exhausting the sequence publisher immediately; an asynchronous publisher wouldn\u2019t need this.\n\nlet pub = (1...3).publisher\n    .delay(for: 1, scheduler: DispatchQueue.main)\n    .map( { _ in return Int.random(in: 0...100) } )\n    .print(\"Random\")\n    .share()\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\n\n\n// Prints:\n// Random: receive value: (20)\n// Stream 1 received: 20\n// Stream 2 received: 20\n// Random: receive value: (85)\n// Stream 1 received: 85\n// Stream 2 received: 85\n// Random: receive value: (98)\n// Stream 1 received: 98\n// Stream 2 received: 98\n\n\nWithout the share() operator, stream 1 receives three random values, followed by stream 2 receiving three different random values.\n\nAlso note that Publishers.Share is a class rather than a structure like most other publishers. This means you can use this operator to create a publisher instance that uses reference semantics.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers."
    },
    {
        "title": "multicast(subject:)",
        "url": "https://developer.apple.com/documentation/combine/record/multicast(subject:)",
        "html": "Parameters\nsubject\n\nA subject to deliver elements to downstream subscribers.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(_:), this method produces a publisher that shares the provided Subject among all the downstream subscribers.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(subject:) operator with a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast(subject: PassthroughSubject<(String, Int), Never>())\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 78))\n// Stream 2 received: (\"First\", 78)\n// Stream 1 received: (\"First\", 78)\n// Random: receive value: ((\"Second\", 98))\n// Stream 2 received: (\"Second\", 98)\n// Stream 1 received: (\"Second\", 98)\n// Random: receive value: ((\"Third\", 61))\n// Stream 2 received: (\"Third\", 61)\n// Stream 1 received: (\"Third\", 61)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "tryAllSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/tryallsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete. The closure may throw an error, in which case the publisher cancels the upstream publisher and fails with the thrown error.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the tryAllSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria in an error-throwing predicate you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes. If the predicate throws an error, the publisher fails and passes the error to its downstream subscriber.\n\nIn the example below, an error-throwing predicate tests if each of an integer array publisher\u2019s elements fall into the targetRange; the predicate throws an error if an element is zero and terminates the stream.\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 10, 5, 0]\n\n\nnumbers.publisher\n    .tryAllSatisfy { anInt in\n        guard anInt != 0 else { throw RangeError() }\n        return targetRange.contains(anInt)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(RangeError())\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate."
    },
    {
        "title": "sink(receiveCompletion:receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/record/sink(receivecompletion:receivevalue:)",
        "html": "Parameters\nreceiveComplete\n\nThe closure to execute on completion.\n\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveCompletion:receiveValue:) to observe values received by the publisher and process them using a closure you specify.\n\nIn this example, a Range publisher publishes integers to a sink(receiveCompletion:receiveValue:) operator\u2019s receiveValue closure that prints them to the console. Upon completion the sink(receiveCompletion:receiveValue:) operator\u2019s receiveCompletion closure indicates the successful termination of the stream.\n\nlet myRange = (0...3)\ncancellable = myRange.publisher\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0)\") })\n\n\n// Prints:\n//  value: 0\n//  value: 1\n//  value: 2\n//  value: 3\n//  completion: finished\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "tryScan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/tryscan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse tryScan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value. If your accumulator closure throws an error, the publisher terminates with the error.\n\nIn the example below, tryScan(_:_:) calls a division function on elements of a collection publisher. The Publishers.TryScan publisher publishes each result until the function encounters a DivisionByZeroError, which terminates the publisher.\n\nstruct DivisionByZeroError: Error {}\n\n\n/// A function that throws a DivisionByZeroError if `current` provided by the TryScan publisher is zero.\nfunc myThrowingFunction(_ lastValue: Int, _ currentValue: Int) throws -> Int {\n    guard currentValue != 0 else { throw DivisionByZeroError() }\n    return (lastValue + currentValue) / currentValue\n }\n\n\nlet numbers = [1,2,3,4,5,0,6,7,8,9]\ncancellable = numbers.publisher\n    .tryScan(10) { try myThrowingFunction($0, $1) }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"11 6 3 1 1 -1 failure(DivisionByZeroError())\".\n\n\nIf the closure throws an error, the publisher fails with the error.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "first(where:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/first(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that\u2019s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends."
    },
    {
        "title": "flatMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/flatmap(_:)-2bsj2",
        "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method \u201cflattens\u201d the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n"
    },
    {
        "title": "flatMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/flatmap(_:)-37a2d",
        "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method \u201cflattens\u201d the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n"
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/map(_:)-8tgkw",
        "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n"
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/map(_:)-i785",
        "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn\u2019t provide a key for 4, and the closure throws an error for any key it can\u2019t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n"
    },
    {
        "title": "max()",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/max()",
        "html": "Return Value\n\nThe sequence\u2019s maximum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The max() method returns the max value of the sequence.\n\nlet max = await Counter(howHigh: 10)\n    .max()\nprint(max ?? \"none\")\n// Prints \"10\"\n"
    },
    {
        "title": "min(by:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/min(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence\u2019s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence\u2019s values don\u2019t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n"
    },
    {
        "title": "min()",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/min()",
        "html": "Return Value\n\nThe sequence\u2019s minimum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The min() method returns the minimum value of the sequence.\n\nlet min = await Counter(howHigh: 10)\n    .min()\nprint(min ?? \"none\")\n// Prints \"1\"\n"
    },
    {
        "title": "reduce(into:_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncpublisher/reduce(into:_:)",
        "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary."
    },
    {
        "title": "max(by:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/max(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence\u2019s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence\u2019s values don\u2019t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n"
    },
    {
        "title": "reduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/reduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n"
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/map(_:)-5vt13",
        "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn\u2019t provide a key for 4, and the closure throws an error for any key it can\u2019t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n"
    },
    {
        "title": "prefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/prefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren\u2019t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n"
    },
    {
        "title": "min()",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/min()",
        "html": "Return Value\n\nThe sequence\u2019s minimum element. If the sequence has no elements, returns nil.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The min() method returns the minimum value of the sequence.\n\nlet min = await Counter(howHigh: 10)\n    .min()\nprint(min ?? \"none\")\n// Prints \"1\"\n"
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/asyncthrowingpublisher/compactmap(_:)-2962z",
        "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n"
    },
    {
        "title": "encode(to:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/completion/encode(to:)",
        "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder\u2019s format."
    },
    {
        "title": "breakpointOnError()",
        "url": "https://developer.apple.com/documentation/combine/fail/breakpointonerror()",
        "html": "Return Value\n\nA publisher that raises a debugger signal upon receiving a failure.\n\nDiscussion\n\nWhen the upstream publisher fails with an error, this publisher raises the SIGTRAP signal, which stops the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn this example a PassthroughSubject publishes strings, but its downstream tryMap(_:) operator throws an error. This sends the error downstream as a Subscribers.Completion.failure(_:). The breakpointOnError() operator receives this completion and stops the app in the debugger.\n\n struct CustomError : Error {}\n let publisher = PassthroughSubject<String?, Error>()\n cancellable = publisher\n     .tryMap { stringValue in\n         throw CustomError()\n     }\n     .breakpointOnError()\n     .sink(\n         receiveCompletion: { completion in print(\"Completion: \\(String(describing: completion))\") },\n         receiveValue: { aValue in print(\"Result: \\(String(describing: aValue))\") }\n     )\n\n\n publisher.send(\"TEST DATA\")\n\n\n // Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n // Depending on your specific environment, the console messages may\n // also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "last()",
        "url": "https://developer.apple.com/documentation/combine/fail/last()",
        "html": "Return Value\n\nA publisher that only publishes the last element of a stream.\n\nDiscussion\n\nUse last() when you need to emit only the last element from an upstream publisher.\n\nIn the example below, the range publisher only emits the last element from the sequence publisher, 10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "init(from:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/init(from:)",
        "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid.\n\nSee Also\nCreating Scheduler Time Strides\ninit(Int)\nCreates an immediate scheduler time interval from the given time interval.\ninit?<T>(exactly: T)\nCreates an immediate scheduler time interval from a binary integer type.\ninit(floatLiteral: Double)\nCreates an immediate scheduler time interval from a floating-point seconds value.\ninit(integerLiteral: Int)\nCreates an immediate scheduler time interval from an integer seconds value."
    },
    {
        "title": "min(by:)",
        "url": "https://developer.apple.com/documentation/combine/fail/min(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to determine the minimum value in the stream of elements from an upstream publisher using a comparison operation you specify.\n\nThis operator is useful when the value received from the upstream publisher isn\u2019t Comparable.\n\nIn the example below an array publishes enumeration elements representing playing card ranks. The min(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the minimum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .king]\ncancellable = cards.publisher\n    .min {\n        return  $0.rawValue < $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"ace\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "prepend(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/prepend(_:)",
        "html": "Parameters\nelements\n\nThe elements to publish before this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that prefixes the specified elements prior to this publisher\u2019s elements.\n\nDiscussion\n\nUse prepend(_:) when you need to prepend specific elements before the output of a publisher.\n\nIn the example below, the prepend(_:) operator publishes the provided elements before republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .prepend(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 255 0 1 2 3 4 5 6 7 8 9 10\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "sink(receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/fail/sink(receivevalue:)",
        "html": "Parameters\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveValue:) to observe values received by the publisher and print them to the console. This operator can only be used when the stream doesn\u2019t fail, that is, when the publisher\u2019s Failure type is Never.\n\nIn this example, a Range publisher publishes integers to a sink(receiveValue:) operator\u2019s receiveValue closure that prints them to the console:\n\nlet integers = (0...3)\nintegers.publisher\n    .sink { print(\"Received \\($0)\") }\n\n\n// Prints:\n//  Received 0\n//  Received 1\n//  Received 2\n//  Received 3\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior."
    },
    {
        "title": "subscribe(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/fail/subscribe(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler used to send messages to upstream publishers.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher which performs upstream operations on the specified scheduler.\n\nDiscussion\n\nIn contrast with receive(on:options:), which affects downstream messages, subscribe(on:options:) changes the execution context of upstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes ioPerformingPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes uiUpdatingSubscriber to receive elements and completion on RunLoop.main.\n\nlet ioPerformingPublisher == // Some publisher.\nlet uiUpdatingSubscriber == // Some subscriber that updates the UI.\n\n\nioPerformingPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(uiUpdatingSubscriber)\n\n\nUsing subscribe(on:options:) also causes the upstream publisher to perform cancel() using the specfied scheduler.\n\nSee Also\nSpecifying Schedulers\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher."
    },
    {
        "title": "values",
        "url": "https://developer.apple.com/documentation/combine/fail/values",
        "html": "Discussion\n\nThis property provides an AsyncThrowingPublisher, which allows you to use the Swift async-await syntax to receive the publisher\u2019s elements. Because AsyncPublisher conforms to AsyncSequence, you iterate over its elements with a for-await-in loop, rather than attaching a subscriber. If the publisher terminates with an error, the awaiting caller receives the error as a throw.\n\nThe following example shows how to use the values property to receive elements asynchronously. The example adapts a code snippet from the tryFilter(_:) operator\u2019s documentation, which filters a sequence to only emit even integers, and terminate with an error on a 0. This example replaces the Subscribers.Sink subscriber with a for-await-in loop that iterates over the AsyncPublisher provided by the values property. With this approach, the error handling previously provided in the sink subscriber\u2019s receiveCompletion closure goes instead in a catch block.\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\nlet filterPublisher = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n\n\ndo {\n    for try await number in filterPublisher.values {\n        print (\"\\(number)\", terminator: \" \")\n    }\n} catch {\n    print (\"\\(error)\")\n}\n"
    },
    {
        "title": "prefix(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/fail/prefix(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA second publisher.\n\nReturn Value\n\nA publisher that republishes elements until the second publisher publishes an element.\n\nDiscussion\n\nAfter the second publisher publishes an element, the publisher returned by this method finishes.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue."
    },
    {
        "title": "prefix(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/prefix(_:)",
        "html": "Parameters\nmaxLength\n\nThe maximum number of elements to republish.\n\nReturn Value\n\nA publisher that publishes up to the specified number of elements.\n\nDiscussion\n\nUse prefix(_:) to limit the number of elements republished to the downstream subscriber.\n\nIn the example below, the prefix(_:) operator limits its output to the first two elements before finishing normally:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .prefix(2)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "retry(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/retry(_:)",
        "html": "Parameters\nretries\n\nThe number of times to attempt to recreate the subscription.\n\nReturn Value\n\nA publisher that attempts to recreate its subscription to a failed upstream publisher.\n\nDiscussion\n\nUse retry(_:) to try a connecting to an upstream publisher after a failed connection attempt.\n\nIn the example below, a URLSession.DataTaskPublisher attempts to connect to a remote URL. If the connection attempt succeeds, it publishes the remote service\u2019s HTML to the downstream publisher and completes normally. Otherwise, the retry operator attempts to reestablish the connection. If after three attempts the publisher still can\u2019t connect to the remote URL, the catch(_:) operator replaces the error with a new publisher that publishes a \u201cconnection timed out\u201d HTML page. After the downstream subscriber receives the timed out message, the stream completes normally.\n\nstruct WebSiteData: Codable {\n    var rawHTML: String\n}\n\n\nlet myURL = URL(string: \"https://www.example.com\")\n\n\ncancellable = URLSession.shared.dataTaskPublisher(for: myURL!)\n    .retry(3)\n    .map({ (page) -> WebSiteData in\n        return WebSiteData(rawHTML: String(decoding: page.data, as: UTF8.self))\n    })\n    .catch { error in\n        return Just(WebSiteData(rawHTML: \"<HTML>Unable to load page - timed out.</HTML>\"))\n}\n.sink(receiveCompletion: { print (\"completion: \\($0)\") },\n      receiveValue: { print (\"value: \\($0)\") }\n )\n\n\n// Prints: The HTML content from the remote URL upon a successful connection,\n//         or returns \"<HTML>Unable to load page - timed out.</HTML>\" if the number of retries exceeds the specified value.\n\n\nAfter exceeding the specified number of retries, the publisher passes the failure to the downstream receiver.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error."
    },
    {
        "title": "removeDuplicates()",
        "url": "https://developer.apple.com/documentation/combine/fail/removeduplicates()",
        "html": "Return Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates() to remove repeating elements from an upstream publisher. This operator has a two-element memory: the operator uses the current and previously published elements as the basis for its comparison.\n\nIn the example below, removeDuplicates() triggers on the doubled, tripled, and quadrupled occurrences of 1, 3, and 4 respectively. Because the two-element memory considers only the current element and the previous element, the operator prints the final 0 in the example data since its immediate predecessor is 4.\n\nlet numbers = [0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 0]\ncancellable = numbers.publisher\n    .removeDuplicates()\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 0\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "prefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/fail/prefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate indicates publishing should finish.\n\nDiscussion\n\nUse prefix(while:) to emit values while elements from the upstream publisher meet a condition you specify. The publisher finishes when the closure returns false.\n\nIn the example below, the prefix(while:) operator emits values while the element it receives is less than five:\n\nlet numbers = (0...10)\nnumbers.publisher\n    .prefix { $0 < 5 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "multicast(subject:)",
        "url": "https://developer.apple.com/documentation/combine/fail/multicast(subject:)",
        "html": "Parameters\nsubject\n\nA subject to deliver elements to downstream subscribers.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(_:), this method produces a publisher that shares the provided Subject among all the downstream subscribers.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(subject:) operator with a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast(subject: PassthroughSubject<(String, Int), Never>())\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 78))\n// Stream 2 received: (\"First\", 78)\n// Stream 1 received: (\"First\", 78)\n// Random: receive value: ((\"Second\", 98))\n// Stream 2 received: (\"Second\", 98)\n// Stream 1 received: (\"Second\", 98)\n// Random: receive value: ((\"Third\", 61))\n// Stream 2 received: (\"Third\", 61)\n// Stream 1 received: (\"Third\", 61)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "output(in:)",
        "url": "https://developer.apple.com/documentation/combine/fail/output(in:)",
        "html": "Parameters\nrange\n\nA range that indicates which elements to publish.\n\nReturn Value\n\nA publisher that publishes elements specified by a range.\n\nDiscussion\n\nUse output(in:) to republish a range indices you specify in the published stream. After publishing all elements, the publisher finishes normally. If the publisher completes normally or with an error before producing all the elements in the range, it doesn\u2019t publish the remaining elements.\n\nIn the example below, an array publisher emits the subset of elements at the indices in the specified range:\n\nlet numbers = [1, 1, 2, 2, 2, 3, 4, 5, 6]\nnumbers.publisher\n    .output(in: (3...5))\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 2 3\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements."
    },
    {
        "title": "replaceError(with:)",
        "url": "https://developer.apple.com/documentation/combine/fail/replaceerror(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher fails.\n\nReturn Value\n\nA publisher that replaces an error from the upstream publisher with the provided output element.\n\nDiscussion\n\nIf the upstream publisher fails with an error, this publisher emits the provided element, then finishes normally.\n\nIn the example below, a publisher of strings fails with a MyError instance, which sends a failure completion downstream. The replaceError(with:) operator handles the failure by publishing the string (replacement element) and completing normally.\n\nstruct MyError: Error {}\nlet fail = Fail<String, MyError>(error: MyError())\ncancellable = fail\n    .replaceError(with: \"(replacement element)\")\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"(replacement element) finished\".\n\n\nThis replaceError(with:) functionality is useful when you want to handle an error by sending a single replacement element and end the stream. Use catch(_:) to recover from an error and provide a replacement publisher to continue providing elements to the downstream subscriber.\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element."
    },
    {
        "title": "replaceEmpty(with:)",
        "url": "https://developer.apple.com/documentation/combine/fail/replaceempty(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher finishes without emitting any elements.\n\nReturn Value\n\nA publisher that replaces an empty stream with the provided output element.\n\nDiscussion\n\nUse replaceEmpty(with:) to provide a replacement element if the upstream publisher finishes without producing any elements.\n\nIn the example below, the empty Double array publisher doesn\u2019t produce any elements, so replaceEmpty(with:) publishes Double.nan and finishes normally.\n\nlet numbers: [Double] = []\ncancellable = numbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints \"(nan)\".\n\n\nConversely, providing a non-empty publisher publishes all elements and the publisher then terminates normally:\n\nlet otherNumbers: [Double] = [1.0, 2.0, 3.0]\ncancellable2 = otherNumbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: 1.0 2.0 3.0\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "output(at:)",
        "url": "https://developer.apple.com/documentation/combine/fail/output(at:)",
        "html": "Parameters\nindex\n\nThe index that indicates the element to publish.\n\nReturn Value\n\nA publisher that publishes a specific indexed element.\n\nDiscussion\n\nUse output(at:) when you need to republish a specific element specified by its position in the stream. If the publisher completes normally or with an error before publishing the specified element, then the publisher doesn\u2019t produce any elements.\n\nIn the example below, the array publisher emits the fifth element in the sequence of published elements:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.publisher\n    .output(at: 5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"6\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "reduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/reduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nA closure that produces a new value by taking the previously-accumulated value and the next element it receives from the upstream publisher.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes. If reduce(_:_:) receives an error from the upstream publisher, the operator delivers it to the downstream subscriber, the publisher terminates and publishes no value.\n\nDiscussion\n\nUse reduce(_:_:) to collect a stream of elements and produce an accumulated value based on a closure you provide.\n\nIn the following example, the reduce(_:_:) operator collects all the integer values it receives from its upstream publisher:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .reduce(0, { accum, next in accum + next })\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"55\"\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "merge(with:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/merge(with:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers; it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubE, pubG)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\n\n\n//Prints: \"1 40 90 -1 33 44 54 2 50 100 -2 33 33 54\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "multicast(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/multicast(_:)",
        "html": "Parameters\ncreateSubject\n\nA closure to create a new Subject each time a subscriber attaches to the multicast publisher.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(subject:), this method produces a publisher that creates a separate Subject for each subscriber.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(_:) operator whose closure creates a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast { PassthroughSubject<(String, Int), Never>() }\n\n\ncancellable1 = pub\n   .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n   .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 9))\n// Stream 2 received: (\"First\", 9)\n// Stream 1 received: (\"First\", 9)\n// Random: receive value: ((\"Second\", 46))\n// Stream 2 received: (\"Second\", 46)\n// Stream 1 received: (\"Second\", 46)\n// Random: receive value: ((\"Third\", 26))\n// Stream 2 received: (\"Third\", 26)\n// Stream 1 received: (\"Third\", 26)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "merge(with:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/merge(with:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\n\n\n//Prints: \"1 40 90 -1 33 44 2 50 100 -2 33 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/subscribe(_:)-9ph0b",
        "html": "Parameters\nsubject\n\nThe subject to attach to this publisher.\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/subscribe(_:)-58ybm",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this publisher. After attaching, the subscriber can start to receive values.\n\nDiscussion\n\nAlways call this function instead of receive(subscriber:). Adopters of Publisher must implement receive(subscriber:). The implementation of subscribe(_:) provided by Publisher calls through to receive(subscriber:).\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "merge(with:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/merge(with:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\n\n\n// Prints: \"1 40 90 -1 2 50 100 -2 \"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/merge(with:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:). To combine elements from multiple upstream publishers, use zip(_:_:).\n\nIn this example, as merge(with:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubA.send(2)\npubB.send(50)\npubC.send(100)\n\n\n// Prints: \"1 40 90 2 50 100\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "max(by:)",
        "url": "https://developer.apple.com/documentation/combine/fail/max(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max(by:) to determine the maximum value of elements received from the upstream publisher based on an ordering closure you specify.\n\nIn the example below, an array publishes enumeration elements representing playing card ranks. The max(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the maximum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .jack]\ncancellable = cards.publisher\n    .max {\n        return  $0.rawValue > $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"queen\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "first()",
        "url": "https://developer.apple.com/documentation/combine/record/first()",
        "html": "Return Value\n\nA publisher that only publishes the first element of a stream.\n\nDiscussion\n\nUse first() to publish just the first element from an upstream publisher, then finish normally. The first() operator requests unlimited from its upstream as soon as downstream requests at least one element. If the upstream completes before first() receives any elements, it completes without emitting any values.\n\nIn this example, the first() publisher republishes the first element received from the sequence publisher, -10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first()\n    .sink { print(\"\\($0)\") }\n\n\n// Print: \"-10\"\n\nSee Also\nSelecting Specific Elements\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "seconds(_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/seconds(_:)-8lm65",
        "html": "See Also\nCreating Scheduler Time Strides from Seconds\nstatic func microseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of microseconds into an instance of this scheduler time type.\nstatic func milliseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of milliseconds into an instance of this scheduler time type.\nstatic func nanoseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of nanoseconds into an instance of this scheduler time type.\nstatic func seconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of seconds into an instance of this scheduler time type."
    },
    {
        "title": "measureInterval(using:options:)",
        "url": "https://developer.apple.com/documentation/combine/fail/measureinterval(using:options:)",
        "html": "Parameters\nscheduler\n\nA scheduler to use for tracking the timing of events.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher that emits elements representing the time interval between the elements it receives.\n\nDiscussion\n\nUse measureInterval(using:options:) to measure the time between events delivered from an upstream publisher.\n\nIn the example below, a 1-second Timer is used as the data source for an event publisher; the measureInterval(using:options:) operator reports the elapsed time between the reception of events on the main run loop:\n\ncancellable = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .measureInterval(using: RunLoop.main)\n    .sink { print(\"\\($0)\", terminator: \"\\n\") }\n\n\n// Prints:\n//      Stride(magnitude: 1.0013610124588013)\n//      Stride(magnitude: 0.9992760419845581)\n\n\nThe output type of the returned publisher is the time interval of the provided scheduler.\n\nThis operator uses the provided scheduler\u2019s now property to measure intervals between events.\n\nSee Also\nControlling Timing\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/combinelatest(_:_:_:)-4scpb",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest<P, Q>(_:,_:) to combine the current and two additional publishers and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer. All upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nIn the example below, combineLatest() receives the most-recent values published by three publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3) { firstValue, secondValue, thirdValue in\n        return firstValue * secondValue * thirdValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(10)\n\n\npub.send(9)\npub3.send(4)\npub2.send(12)\n\n\n// Prints:\n//  Result: 40.     // pub = 2, pub2 = 2, pub3 = 10\n//  Result: 180.    // pub = 9, pub2 = 2, pub3 = 10\n//  Result: 72.     // pub = 9, pub2 = 2, pub3 = 4\n//  Result: 432.    // pub = 9, pub2 = 12, pub3 = 4\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "map(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/map(_:_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of a second property on Output.\n\nkeyPath2\n\nThe key path of a third property on Output.\n\nReturn Value\n\nA publisher that publishes the values of three key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:_:) operator uses the Swift key path syntax to access the die1, die2, and die3 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these three values (as an (Int, Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n    let die3: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6),\n                            die3: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2, \\.die3)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1), \\(values.2) (total \\(values.0 + values.1 + values.2))\")\n    }\n// Prints \"Rolled: 5, 4, 2 (total 11)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple."
    },
    {
        "title": "merge(with:)",
        "url": "https://developer.apple.com/documentation/combine/fail/merge(with:)",
        "html": "Parameters\nother\n\nAnother publisher of this publisher\u2019s type.\n\nReturn Value\n\nA publisher that emits an event when either upstream publisher emits an event.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "max()",
        "url": "https://developer.apple.com/documentation/combine/fail/max()",
        "html": "Return Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max() to determine the maximum value in the stream of elements from an upstream publisher.\n\nIn the example below, the max() operator emits a value when the publisher finishes, that value is the maximum of the values received from upstream, which is 10.\n\nlet numbers = [0, 10, 5]\ncancellable = numbers.publisher\n    .max()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/map(_:)-9cs2j",
        "html": "Parameters\nkeyPath\n\nThe key path of a property on Output.\n\nReturn Value\n\nA publisher that publishes the value of the key path.\n\nDiscussion\n\nIn the following example, the map(_:) operator uses the Swift key path syntax to access the die member of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only the value of this Int, not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die: Int\n}\n\n\ncancellable = Just(DiceRoll(die:Int.random(in:1...6)))\n    .map(\\.die)\n    .sink {\n        print (\"Rolled: \\($0)\")\n    }\n// Prints \"Rolled: 3\" (or some other random value).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "milliseconds(_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/milliseconds(_:)",
        "html": "See Also\nCreating Scheduler Time Strides from Seconds\nstatic func microseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of microseconds into an instance of this scheduler time type.\nstatic func nanoseconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of nanoseconds into an instance of this scheduler time type.\nstatic func seconds(Double) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of seconds, as a floating-point value, into an instance of this scheduler time type.\nstatic func seconds(Int) -> ImmediateScheduler.SchedulerTimeType.Stride\nConverts the specified number of seconds into an instance of this scheduler time type."
    },
    {
        "title": "ImmediateScheduler.SchedulerTimeType.Stride.FloatLiteralType",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/floatliteraltype",
        "html": "See Also\nDeclaring Timekeeping Types\ntypealias IntegerLiteralType\nThe type used when evaluating integer literals.\ntypealias Magnitude\nThe type used for expressing the stride\u2019s magnitude."
    },
    {
        "title": "negate()",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/negate()",
        "html": "Discussion\n\nThe following example uses the negate() method to negate the value of an integer x:\n\nvar x = 21\nx.negate()\n// x == -21\n\n\nThe resulting value must be representable within the value\u2019s type. In particular, negating a signed, fixed-width integer type\u2019s minimum results in a value that cannot be represented.\n\nvar y = Int8.min\ny.negate()\n// Overflow error\n\nSee Also\nPerforming Mathematical Operations\nstatic func * (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nMultiplies two values and produces their product.\nstatic func *= (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nMultiplies two values and stores the result in the left-hand-side variable.\nstatic func + (Self) -> Self\nReturns the given number unchanged.\nstatic func + (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nAdds two values and produces their sum.\nstatic func += (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nAdds two values and stores the result in the left-hand-side variable.\nstatic func - (Self) -> Self\nReturns the additive inverse of the specified value.\nstatic func - (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nSubtracts one value from another and produces their difference."
    },
    {
        "title": "+(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/+(_:_:)",
        "html": "Parameters\nlhs\n\nThe first value to add.\n\nrhs\n\nThe second value to add.\n\nDiscussion\n\nThe addition operator (+) calculates the sum of its two arguments. For example:\n\n1 + 2                   // 3\n-10 + 15                // 5\n-15 + -5                // -20\n21.5 + 3.25             // 24.75\n\n\nYou cannot use + with arguments of different types. To add values of different types, convert one of the values to the other value\u2019s type.\n\nlet x: Int8 = 21\nlet y: Int = 1000000\nInt(x) + y              // 1000021\n\nSee Also\nPerforming Mathematical Operations\nfunc negate()\nReplaces this value with its additive inverse.\nstatic func * (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nMultiplies two values and produces their product.\nstatic func *= (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nMultiplies two values and stores the result in the left-hand-side variable.\nstatic func + (Self) -> Self\nReturns the given number unchanged.\nstatic func += (inout ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride)\nAdds two values and stores the result in the left-hand-side variable.\nstatic func - (Self) -> Self\nReturns the additive inverse of the specified value.\nstatic func - (ImmediateScheduler.SchedulerTimeType.Stride, ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType.Stride\nSubtracts one value from another and produces their difference."
    },
    {
        "title": "-=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/stride/-=(_:_:)-7t2f",
        "html": "Parameters\nlhs\n\nA numeric value.\n\nrhs\n\nThe value to subtract from lhs."
    },
    {
        "title": "zip(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/zip(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from four upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:_:) to return a new publisher that combines the elements from three other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, the PassthroughSubject publishers, numbersPub, fractionsPub, lettersPub, and emojiPub emit values. The zip(_:_:_:_:) operator receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times and prints out the value in fractionsPub.\n\nlet numbersPub = PassthroughSubject<Int, Never>()      // first publisher\nlet lettersPub = PassthroughSubject<String, Never>()   // second\nlet emojiPub = PassthroughSubject<String, Never>()     // third\nlet fractionsPub  = PassthroughSubject<Double, Never>()// fourth\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub) { anInt, aLetter, anEmoji, aFraction  in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt)) \\(aFraction)\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:          emojiPub:          zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:\"\ud83d\ude00\"      zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"      emojiPub:          zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"      emojiPub:          zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n// Prints:\n//1 \ud83d\ude00 A 0.1\n//2 \ud83e\udd70\ud83e\udd70 BB 0.8\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/zip(_:_:_:)-4v5mm",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from three upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from two other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject that emit values; zip(_:_:_:) receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(letters, emoji) { anInt, aLetter, anEmoji in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt))\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:        emojiPub:            zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"    emojiPub:\"\ud83d\ude00\"        zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:        emojiPub:\"\ud83d\ude00\", \"\ud83e\udd70\"  zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n\n\n// Prints:\n// \ud83d\ude00 A\n// \ud83e\udd70\ud83e\udd70 BB\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "receive(subscriber:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/receive(subscriber:)",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this Publisher, after which it can receive values.\n\nDiscussion\n\nImplementations of Publisher must implement this method.\n\nThe provided implementation of subscribe(_:)calls this method.\n\nSee Also\nWorking with Subscribers\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "receive(subscriber:)",
        "url": "https://developer.apple.com/documentation/combine/fail/receive(subscriber:)",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this Publisher, after which it can receive values.\n\nDiscussion\n\nImplementations of Publisher must implement this method.\n\nThe provided implementation of subscribe(_:)calls this method.\n\nSee Also\nWorking with Subscribers\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/zip(_:_:)-63awb",
        "html": "Parameters\nother\n\nAnother publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from two upstream publishers.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two publishers using a transformation you specify to publish a new value to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, PassthroughSubject instances numbersPub and lettersPub emit values; zip(_:_:) receives the oldest value from each publisher, uses the Int from numbersPub and publishes a string that repeats the String from lettersPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\ncancellable = numbersPub\n    .zip(lettersPub) { anInt, aLetter in\n        String(repeating: aLetter, count: anInt)\n    }\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:       zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:       zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:       zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"   zip output: \"A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"   zip output: \"BB\"\n// Prints:\n//  A\n//  BB\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "zip(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/zip(_:)",
        "html": "Parameters\nother\n\nAnother publisher.\n\nReturn Value\n\nA publisher that emits pairs of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:) to combine the latest elements from two publishers and emit a tuple to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together as a tuple to the subscriber.\n\nMuch like a zipper or zip fastener on a piece of clothing pulls together rows of teeth to link the two sides, zip(_:) combines streams from two different publishers by linking pairs of elements from each side.\n\nIn this example, numbers and letters are PassthroughSubjects that emit values; once zip(_:) receives one value from each, it publishes the pair as a tuple to the downstream subscriber. It then waits for the next pair of values.\n\n let numbersPub = PassthroughSubject<Int, Never>()\n let lettersPub = PassthroughSubject<String, Never>()\n\n\n cancellable = numbersPub\n     .zip(lettersPub)\n     .sink { print(\"\\($0)\") }\n numbersPub.send(1)    // numbersPub: 1      lettersPub:        zip output: <none>\n numbersPub.send(2)    // numbersPub: 1,2    lettersPub:        zip output: <none>\n letters.send(\"A\")     // numbers: 1,2       letters:\"A\"        zip output: <none>\n numbers.send(3)       // numbers: 1,2,3     letters:           zip output: (1,\"A\")\n letters.send(\"B\")     // numbers: 1,2,3     letters: \"B\"       zip output: (2,\"B\")\n\n\n // Prints:\n //  (1, \"A\")\n //  (2, \"B\")\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/zip(_:_:)-3bxlv",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two additional publishers to publish a tuple to the downstream. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject; zip(_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:          emojiPub:        zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"      emojiPub: \"\ud83d\ude00\"   zip output: (1, \"A\", \"\ud83d\ude00\")\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:          emojiPub:        zip output: (2, \"B\", \"\ud83e\udd70\")\n\n\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\")\n//  (2, \"B\", \"\ud83e\udd70\")\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "tryReduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/tryreduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nAn error-throwing closure that takes the previously-accumulated value and the next element from the upstream publisher to produce a new value.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes.\n\nDiscussion\n\nUse tryReduce(_:_:) to collect a stream of elements and produce an accumulated value based on an error-throwing closure you provide. If the closure throws an error, the publisher fails and passes the error to its subscriber.\n\nIn the example below, the publisher\u2019s 0 element causes the myDivide(_:_:) function to throw an error and publish the doc://com.apple.documentation/documentation/Swift/Double/1641611-nan result:\n\nstruct DivisionByZeroError: Error {}\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n    guard divisor != 0 else { throw DivisionByZeroError() }\n    return dividend / divisor\n}\n\n\nvar numbers: [Double] = [5, 4, 3, 2, 1, 0]\nnumbers.publisher\n    .tryReduce(numbers.first!, { accum, next in try myDivide(accum, next) })\n    .catch({ _ in Just(Double.nan) })\n    .sink { print(\"\\($0)\") }\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "tryLast(where:)",
        "url": "https://developer.apple.com/documentation/combine/fail/trylast(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse tryLast(where:) when you need to republish the last element that satisfies an error-throwing closure you specify. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a publisher emits the last element that satisfies the error-throwing closure, then finishes normally:\n\nstruct RangeError: Error {}\n\n\nlet numbers = [-62, 1, 6, 10, 9, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .tryLast {\n        guard 0 != 0  else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n// Prints: \"5 completion: finished\"\n// If instead the numbers array had contained a `0`, the `tryLast` operator would terminate publishing with a RangeError.\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "tryRemoveDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/fail/tryremoveduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first. If this closure throws an error, the publisher terminates with the thrown error.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse tryRemoveDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of elements using an error-throwing closure you provide. If your closure throws an error, the publisher terminates with the error.\n\nIn the example below, the closure provided to tryRemoveDuplicates(by:) returns true when two consecutive elements are equal, thereby filtering out 0, 1, 2, and 3. However, the closure throws an error when it encounters 4. The publisher then terminates with this error.\n\nstruct BadValuesError: Error {}\nlet numbers = [0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\ncancellable = numbers.publisher\n    .tryRemoveDuplicates { first, second -> Bool in\n        if (first == 4 && second == 4) {\n            throw BadValuesError()\n        }\n        return first == second\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n // Prints: \"0 1 2 3 4 failure(BadValuesError()\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryCatch(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/trycatch(_:)",
        "html": "Parameters\nhandler\n\nA throwing closure that accepts the upstream failure as input. This closure can either replace the upstream publisher with a new one, or throw a new error to the downstream subscriber.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher, or an error.\n\nDiscussion\n\nUse tryCatch(_:) to decide how to handle from an upstream publisher by either replacing the publisher with a new publisher, or throwing a new error.\n\nIn the example below, an array publisher emits values that a tryMap(_:) operator evaluates to ensure the values are greater than zero. If the values aren\u2019t greater than zero, the operator throws an error to the downstream subscriber to let it know there was a problem. The subscriber, tryCatch(_:), replaces the error with a new publisher using Just to publish a final value before the stream ends normally.\n\nenum SimpleError: Error { case error }\nvar numbers = [5, 4, 3, 2, 1, -1, 7, 8, 9, 10]\n\n\ncancellable = numbers.publisher\n   .tryMap { v in\n        if v > 0 {\n            return v\n        } else {\n            throw SimpleError.error\n        }\n}\n  .tryCatch { error in\n      Just(0) // Send a final value before completing normally.\n              // Alternatively, throw a new error to terminate the stream.\n}\n  .sink(receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print (\"Received \\($0).\") }\n  )\n//    Received 5.\n//    Received 4.\n//    Received 3.\n//    Received 2.\n//    Received 1.\n//    Received 0.\n//    Completion: finished.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "tryMin(by:)",
        "url": "https://developer.apple.com/documentation/combine/fail/trymin(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMin(by:) to determine the minimum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMin(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\nnumbers.publisher\n    .tryMin { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first < second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes."
    },
    {
        "title": "tryDrop(while:)",
        "url": "https://developer.apple.com/documentation/combine/fail/trydrop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false, and then republishes all remaining elements. If the predicate closure throws, the publisher fails with an error.\n\nDiscussion\n\nUse tryDrop(while:) to omit elements from an upstream until an error-throwing closure you provide returns false, after which the remaining items in the stream are published. If the closure throws, no elements are emitted and the publisher fails with an error.\n\nIn the example below, elements are ignored until -1 is encountered in the stream and the closure returns false. The publisher then republishes the remaining elements and finishes normally. Conversely, if the guard value in the closure had been encountered, the closure would throw and the publisher would fail with an error.\n\nstruct RangeError: Error {}\nvar numbers = [1, 2, 3, 4, 5, 6, -1, 7, 8, 9, 10]\nlet range: CountableClosedRange<Int> = (1...100)\ncancellable = numbers.publisher\n    .tryDrop {\n        guard $0 != 0 else { throw RangeError() }\n        return range.contains($0)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"-1 7 8 9 10 completion: finished\"\n// If instead numbers was [1, 2, 3, 4, 5, 6, 0, -1, 7, 8, 9, 10], tryDrop(while:) would fail with a RangeError.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryContains(where:)",
        "url": "https://developer.apple.com/documentation/combine/fail/trycontains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse tryContains(where:) to find the first element in an upstream that satisfies the error-throwing closure you provide.\n\nThis operator consumes elements produced from the upstream publisher until the upstream publisher either:\n\nProduces a matching element, after which it emits true and the publisher finishes normally.\n\nEmits false if no matching element is found and the publisher finishes normally.\n\nIf the predicate throws an error, the publisher fails, passing the error to its downstream.\n\nIn the example below, the tryContains(where:) operator tests values to find an element less than 10; when the closure finds an odd number, like 3, the publisher terminates with an IllegalValueError.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers = [3, 2, 10, 5, 0, 9]\nnumbers.publisher\n    .tryContains {\n        if ($0 % 2 != 0) {\n            throw IllegalValueError()\n        }\n       return $0 < 10\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "timeout(_:scheduler:options:customError:)",
        "url": "https://developer.apple.com/documentation/combine/fail/timeout(_:scheduler:options:customerror:)",
        "html": "Parameters\ninterval\n\nThe maximum time interval the publisher can go without emitting an element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to deliver events.\n\noptions\n\nScheduler options that customize the delivery of elements.\n\ncustomError\n\nA closure that executes if the publisher times out. The publisher sends the failure returned by this closure to the subscriber as the reason for termination.\n\nReturn Value\n\nA publisher that terminates if the specified interval elapses with no events received from the upstream publisher.\n\nDiscussion\n\nUse timeout(_:scheduler:options:customError:) to terminate a publisher if an element isn\u2019t delivered within a timeout interval you specify.\n\nIn the example below, a PassthroughSubject publishes String elements and is configured to time out if no new elements are received within its TIME_OUT window of 5 seconds. A single value is published after the specified 2-second WAIT_TIME, after which no more elements are available; the publisher then times out and completes normally.\n\nvar WAIT_TIME : Int = 2\nvar TIMEOUT_TIME : Int = 5\n\n\nlet subject = PassthroughSubject<String, Never>()\nlet cancellable = subject\n    .timeout(.seconds(TIMEOUT_TIME), scheduler: DispatchQueue.main, options: nil, customError:nil)\n    .sink(\n          receiveCompletion: { print (\"completion: \\($0) at \\(Date())\") },\n          receiveValue: { print (\"value: \\($0) at \\(Date())\") }\n     )\n\n\nDispatchQueue.main.asyncAfter(deadline: .now() + .seconds(WAIT_TIME),\n                              execute: { subject.send(\"Some data - sent after a delay of \\(WAIT_TIME) seconds\") } )\n\n\n// Prints: value: Some data - sent after a delay of 2 seconds at 2020-03-10 23:47:59 +0000\n//         completion: finished at 2020-03-10 23:48:04 +0000\n\n\nIf customError is nil, the publisher completes normally; if you provide a closure for the customError argument, the upstream publisher is instead terminated upon timeout, and the error is delivered to the downstream.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval."
    },
    {
        "title": "tryFilter(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/tryfilter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value that indicated whether to republish the element or throws an error.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nUse tryFilter(_:) to filter elements evaluated in an error-throwing closure. If the isIncluded closure throws an error, the publisher fails with that error.\n\nIn the example below, tryFilter(_:) checks to see if the element provided by the publisher is zero, and throws a ZeroError before terminating the publisher with the thrown error. Otherwise, it republishes the element only if it\u2019s even:\n\nstruct ZeroError: Error {}\n\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\ncancellable = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"2 4 failure(DivisionByZeroError())\".\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/trymap(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element. If the closure throws an error, the publisher fails with the thrown error.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s tryMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use tryMap(_:) to transform from one kind of element to another, and to terminate publishing when the map\u2019s closure throws an error.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A tryMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the tryMap(_:)\u2019s closure fails to look up a Roman numeral, it throws an error. The tryMap(_:) operator catches this error and terminates publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from:Int) throws -> String {\n    let romanNumeralDict: [Int : String] =\n        [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\n    guard let numeral = romanNumeralDict[from] else {\n        throw ParseError()\n    }\n    return numeral\n}\nlet numbers = [5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryMap { try romanNumeral(from: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"V IV III II I completion: failure(ParseError())\"\n\n\nIf your closure doesn\u2019t throw, use map(_:) instead.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/flatmap(maxpublishers:_:)-69cgz",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nDiscussion\n\nCombine\u2018s flatMap(maxPublishers:_:) operator performs a similar function to the doc://com.apple.documentation/documentation/Swift/Sequence/2905332-flatmap operator in the Swift standard library, but turns the elements from one kind of publisher into a new publisher that is sent to subscribers. Use flatMap(maxPublishers:_:) when you want to create a new series of events for downstream subscribers based on the received value. The closure creates the new Publisher based on the received value. The new Publisher can emit more than one event, and successful completion of the new Publisher does not complete the overall stream. Failure of the new Publisher causes the overall stream to fail.\n\nIn the example below, a PassthroughSubject publishes WeatherStation elements. The flatMap(maxPublishers:_:) receives each element, creates a URL from it, and produces a new URLSession.DataTaskPublisher, which will publish the data loaded from that URL.\n\npublic struct WeatherStation {\n    public let stationID: String\n}\n\n\nvar weatherPublisher = PassthroughSubject<WeatherStation, URLError>()\n\n\ncancellable = weatherPublisher.flatMap { station -> URLSession.DataTaskPublisher in\n    let url = URL(string:\"https://weatherapi.example.com/stations/\\(station.stationID)/observations/latest\")!\n    return URLSession.shared.dataTaskPublisher(for: url)\n}\n.sink(\n    receiveCompletion: { completion in\n        // Handle publisher completion (normal or error).\n    },\n    receiveValue: {\n        // Process the received data.\n    }\n )\n\n\nweatherPublisher.send(WeatherStation(stationID: \"KSFO\")) // San Francisco, CA\nweatherPublisher.send(WeatherStation(stationID: \"EGLC\")) // London, UK\nweatherPublisher.send(WeatherStation(stationID: \"ZBBB\")) // Beijing, CN\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/flatmap(maxpublishers:_:)-6tkfz",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/flatmap(maxpublishers:_:)-6mrvi",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "makeConnectable()",
        "url": "https://developer.apple.com/documentation/combine/record/makeconnectable()",
        "html": "Return Value\n\nA ConnectablePublisher wrapping this publisher.\n\nDiscussion\n\nIn the following example, makeConnectable() wraps its upstream publisher (an instance of Publishers.Share) with a ConnectablePublisher. Without this, the first sink subscriber would receive all the elements from the sequence publisher and cause it to complete before the second subscriber attaches. By making the publisher connectable, the publisher doesn\u2019t produce any elements until after the connect() call.\n\n let subject = Just<String>(\"Sent\")\n let pub = subject\n     .share()\n     .makeConnectable()\n cancellable1 = pub.sink { print (\"Stream 1 received: \\($0)\")  }\n\n\n // For example purposes, use DispatchQueue to add a second subscriber\n // a second later, and then connect to the publisher a second after that.\n DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n     self.cancellable2 = pub.sink { print (\"Stream 2 received: \\($0)\") }\n }\n DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     self.connectable = pub.connect()\n }\n // Prints:\n // Stream 2 received: Sent\n // Stream 1 received: Sent\n\n\nNote\n\nThe connect() operator returns a Cancellable instance that you must retain. You can also use this instance to cancel publishing."
    },
    {
        "title": "handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)",
        "url": "https://developer.apple.com/documentation/combine/fail/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)",
        "html": "Parameters\nreceiveSubscription\n\nAn optional closure that executes when the publisher receives the subscription from the upstream publisher. This value defaults to nil.\n\nreceiveOutput\n\nAn optional closure that executes when the publisher receives a value from the upstream publisher. This value defaults to nil.\n\nreceiveCompletion\n\nAn optional closure that executes when the upstream publisher finishes normally or terminates with an error. This value defaults to nil.\n\nreceiveCancel\n\nAn optional closure that executes when the downstream receiver cancels publishing. This value defaults to nil.\n\nreceiveRequest\n\nAn optional closure that executes when the publisher receives a request for more elements. This value defaults to nil.\n\nReturn Value\n\nA publisher that performs the specified closures when publisher events occur.\n\nDiscussion\n\nUse handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:) when you want to examine elements as they progress through the stages of the publisher\u2019s lifecycle.\n\nIn the example below, a publisher of integers shows the effect of printing debugging information at each stage of the element-processing lifecycle:\n\nlet integers = (0...2)\ncancellable = integers.publisher\n    .handleEvents(receiveSubscription: { subs in\n        print(\"Subscription: \\(subs.combineIdentifier)\")\n    }, receiveOutput: { anInt in\n        print(\"in output handler, received \\(anInt)\")\n    }, receiveCompletion: { _ in\n        print(\"in completion handler\")\n    }, receiveCancel: {\n        print(\"received cancel\")\n    }, receiveRequest: { (demand) in\n        print(\"received demand: \\(demand.description)\")\n    })\n    .sink { _ in return }\n\n\n// Prints:\n//   received demand: unlimited\n//   Subscription: 0x7f81284734c0\n//   in output handler, received 0\n//   in output handler, received 1\n//   in output handler, received 2\n//   in completion handler\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "combineLatest(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/combinelatest(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:_:) when you need to combine the current and 3 additional publishers and transform the values using a closure in which you specify the published elements, to publish a new element.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, as combineLatest(_:_:_:_:) receives the most-recent values published by four publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4) { firstValue, secondValue, thirdValue, fourthValue in\n        return firstValue * secondValue * thirdValue * fourthValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: 36.     // pub = 2,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 54.     // pub = 3,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 324.    // pub = 3,  pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 1404.   // pub = 13, pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 2964.   // pub = 13, pub2 = 12,  pub3 = 19, pub4 = 1\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/combinelatest(_:_:_:)-6vkeb",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, combineLatest(_:_:_:) receives input from any of the publishers, combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n//\n// Prints:\n//  Result: (2, 2, 9, 1).\n//  Result: (3, 2, 9, 1).\n//  Result: (3, 12, 9, 1).\n//  Result: (13, 12, 9, 1).\n//  Result: (13, 12, 19, 1).\n\n\nIf any individual publisher of the combined set terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/flatmap(maxpublishers:_:)-7byes",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "eraseToAnyPublisher()",
        "url": "https://developer.apple.com/documentation/combine/fail/erasetoanypublisher()",
        "html": "Return Value\n\nAn AnyPublisher wrapping this publisher.\n\nDiscussion\n\nUse eraseToAnyPublisher() to expose an instance of AnyPublisher to the downstream subscriber, rather than this publisher\u2019s actual type. This form of type erasure preserves abstraction across API boundaries, such as different modules. When you expose your publishers as the AnyPublisher type, you can change the underlying implementation over time without affecting existing clients.\n\nThe following example shows two types that each have a publisher property. TypeWithSubject exposes this property as its actual type, PassthroughSubject, while TypeWithErasedSubject uses eraseToAnyPublisher() to expose it as an AnyPublisher. As seen in the output, a caller from another module can access TypeWithSubject.publisher as its native type. This means you can\u2019t change your publisher to a different type without breaking the caller. By comparison, TypeWithErasedSubject.publisher appears to callers as an AnyPublisher, so you can change the underlying publisher type at will.\n\npublic class TypeWithSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n}\npublic class TypeWithErasedSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n        .eraseToAnyPublisher()\n}\n\n\n// In another module:\nlet nonErased = TypeWithSubject()\nif let subject = nonErased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast nonErased.publisher.\")\n}\nlet erased = TypeWithErasedSubject()\nif let subject = erased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast erased.publisher.\")\n}\n\n\n// Prints \"Successfully cast nonErased.publisher.\"\n"
    },
    {
        "title": "contains(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/contains(_:)",
        "html": "Parameters\noutput\n\nAn element to match against.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(_:) to find the first element in an upstream that\u2019s equal to the supplied argument. The contains publisher consumes all received elements until the upstream publisher produces a matching element. Upon finding the first match, it emits true and finishes normally. If the upstream finishes normally without producing a matching element, this publisher emits false and finishes.\n\nIn the example below, the contains(_:) operator emits true the first time it receives the value 5 from the numbers.publisher, and then finishes normally.\n\nlet numbers = [-1, 5, 10, 5]\nnumbers.publisher\n    .contains(5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "first()",
        "url": "https://developer.apple.com/documentation/combine/fail/first()",
        "html": "Return Value\n\nA publisher that only publishes the first element of a stream.\n\nDiscussion\n\nUse first() to publish just the first element from an upstream publisher, then finish normally. The first() operator requests unlimited from its upstream as soon as downstream requests at least one element. If the upstream completes before first() receives any elements, it completes without emitting any values.\n\nIn this example, the first() publisher republishes the first element received from the sequence publisher, -10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first()\n    .sink { print(\"\\($0)\") }\n\n\n// Print: \"-10\"\n\nSee Also\nSelecting Specific Elements\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "debounce(for:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/fail/debounce(for:scheduler:options:)",
        "html": "Parameters\ndueTime\n\nThe time the publisher should wait before publishing an element.\n\nscheduler\n\nThe scheduler on which this publisher delivers elements\n\noptions\n\nScheduler options that customize this publisher\u2019s delivery of elements.\n\nReturn Value\n\nA publisher that publishes events only after a specified time elapses.\n\nDiscussion\n\nUse the debounce(for:scheduler:options:) operator to control the number of values and time between delivery of values from the upstream publisher. This operator is useful to process bursty or high-volume event streams where you need to reduce the number of values delivered to the downstream to a rate you specify.\n\nIn this example, a PassthroughSubject publishes elements on a schedule defined by the bounces array. The array is composed of tuples representing a value sent by the PassthroughSubject, and a TimeInterval ranging from one-quarter second up to 2 seconds that drives a delivery timer. As the queue builds, elements arriving faster than one-half second debounceInterval are discarded, while elements arriving at a rate slower than debounceInterval are passed through to the sink(receiveValue:) operator.\n\nlet bounces:[(Int,TimeInterval)] = [\n    (0, 0),\n    (1, 0.25),  // 0.25s interval since last index\n    (2, 1),     // 0.75s interval since last index\n    (3, 1.25),  // 0.25s interval since last index\n    (4, 1.5),   // 0.25s interval since last index\n    (5, 2)      // 0.5s interval since last index\n]\n\n\nlet subject = PassthroughSubject<Int, Never>()\ncancellable = subject\n    .debounce(for: .seconds(0.5), scheduler: RunLoop.main)\n    .sink { index in\n        print (\"Received index \\(index)\")\n    }\n\n\nfor bounce in bounces {\n    DispatchQueue.main.asyncAfter(deadline: .now() + bounce.1) {\n        subject.send(bounce.0)\n    }\n}\n\n\n// Prints:\n//  Received index 1\n//  Received index 4\n//  Received index 5\n\n\n//  Here is the event flow shown from the perspective of time, showing value delivery through the `debounce()` operator:\n\n\n//  Time 0: Send index 0.\n//  Time 0.25: Send index 1. Index 0 was waiting and is discarded.\n//  Time 0.75: Debounce period ends, publish index 1.\n//  Time 1: Send index 2.\n//  Time 1.25: Send index 3. Index 2 was waiting and is discarded.\n//  Time 1.5: Send index 4. Index 3 was waiting and is discarded.\n//  Time 2: Debounce period ends, publish index 4. Also, send index 5.\n//  Time 2.5: Debounce period ends, publish index 5.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "drop(while:)",
        "url": "https://developer.apple.com/documentation/combine/fail/drop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an upstream publisher until the element received meets a condition you specify.\n\nIn the example below, the operator omits all elements in the stream until the first element arrives that\u2019s a positive integer, after which the operator publishes all remaining elements:\n\nlet numbers = [-62, -1, 0, 10, 0, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .drop { $0 <= 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10 0, 22 41 -1 5\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "dropFirst(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/dropfirst(_:)",
        "html": "Parameters\ncount\n\nThe number of elements to omit. The default is 1.\n\nReturn Value\n\nA publisher that doesn\u2019t republish the first count elements.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the upstream publisher, and republish the remaining elements.\n\nThe example below drops the first five elements from the stream:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncancellable = numbers.publisher\n    .dropFirst(5)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"6 7 8 9 10 \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "collect(_:options:)",
        "url": "https://developer.apple.com/documentation/combine/fail/collect(_:options:)",
        "html": "Parameters\nstrategy\n\nThe timing group strategy used by the operator to collect and publish elements.\n\noptions\n\nScheduler options to use for the strategy.\n\nReturn Value\n\nA publisher that collects elements by a given strategy, and emits a single array of the collection.\n\nDiscussion\n\nUse collect(_:options:) to emit arrays of elements on a schedule specified by a Scheduler and Stride that you provide. At the end of each scheduled interval, the publisher sends an array that contains the items it collected. If the upstream publisher finishes before filling the buffer, the publisher sends an array that contains items it received. This may be fewer than the number of elements specified in the requested Stride.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThe example above collects timestamps generated on a one-second Timer in groups (Stride) of five.\n\nlet sub = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .collect(.byTime(RunLoop.main, .seconds(5)))\n    .sink { print(\"\\($0)\", terminator: \"\\n\\n\") }\n\n\n// Prints: \"[2020-01-24 00:54:46 +0000, 2020-01-24 00:54:47 +0000,\n//          2020-01-24 00:54:48 +0000, 2020-01-24 00:54:49 +0000,\n//          2020-01-24 00:54:50 +0000]\"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/combinelatest(_:_:_:)-435bn",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest<P, Q>(_:,_:) to combine the current and two additional publishers and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer. All upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nIn the example below, combineLatest() receives the most-recent values published by three publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3) { firstValue, secondValue, thirdValue in\n        return firstValue * secondValue * thirdValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(10)\n\n\npub.send(9)\npub3.send(4)\npub2.send(12)\n\n\n// Prints:\n//  Result: 40.     // pub = 2, pub2 = 2, pub3 = 10\n//  Result: 180.    // pub = 9, pub2 = 2, pub3 = 10\n//  Result: 72.     // pub = 9, pub2 = 2, pub3 = 4\n//  Result: 432.    // pub = 9, pub2 = 12, pub3 = 4\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "contains(where:)",
        "url": "https://developer.apple.com/documentation/combine/fail/contains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(where:) to find the first element in an upstream that satisfies the closure you provide. This operator consumes elements produced from the upstream publisher until the upstream publisher produces a matching element.\n\nThis operator is useful when the upstream publisher produces elements that don\u2019t conform to Equatable.\n\nIn the example below, the contains(where:) operator tests elements against the supplied closure and emits true for the first elements that\u2019s greater than 4, and then finishes normally.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .contains {$0 > 4}\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "encode(encoder:)",
        "url": "https://developer.apple.com/documentation/combine/fail/encode(encoder:)",
        "html": "Parameters\nencoder\n\nAn encoder that implements the TopLevelEncoder protocol.\n\nReturn Value\n\nA publisher that encodes received elements using a specified encoder, and publishes the resulting data.\n\nDiscussion\n\nUse encode(encoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to encode an Encodable struct into Data that could be used to make a JSON string (or written to disk as a binary plist in the case of property lists).\n\nIn this example, a PassthroughSubject publishes an Article. The encode(encoder:) operator encodes the properties of the Article struct into a new JSON string according to the Codable protocol adopted by Article. The operator publishes the resulting JSON string to the downstream subscriber. If the encoding operation fails, which can happen in the case of complex properties that can\u2019t be directly transformed into JSON, the stream terminates and the error is passed to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Article, Never>()\nlet cancellable = dataProvider\n    .encode(encoder: JSONEncoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\") },\n          receiveValue: {  data in\n            guard let stringRepresentation = String(data: data, encoding: .utf8) else { return }\n            print(\"Data received \\(data) string representation: \\(stringRepresentation)\")\n    })\n\n\ndataProvider.send(Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: Date()))\n\n\n// Prints: \"Data received 86 bytes string representation: {\"title\":\"My First Article\",\"author\":\"Gita Kumar\",\"pubDate\":606211803.279603}\"\n\nSee Also\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder."
    },
    {
        "title": "collect(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/collect(_:)",
        "html": "Parameters\ncount\n\nThe maximum number of received elements to buffer before publishing.\n\nReturn Value\n\nA publisher that collects up to the specified number of elements, and then publishes them as an array.\n\nDiscussion\n\nUse collect(_:) to emit arrays of at most count elements from an upstream publisher. If the upstream publisher finishes before collecting the specified number of elements, the publisher sends an array of only the items it received. This may be fewer than count elements.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nIn the example below, the collect(_:) operator emits one partial and two full arrays based on the requested collection size of 5:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect(5)\n    .sink { print(\"\\($0), terminator: \" \"\") }\n\n\n// Prints \"[0, 1, 2, 3, 4] [5, 6, 7, 8, 9] [10] \"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "buffer(size:prefetch:whenFull:)",
        "url": "https://developer.apple.com/documentation/combine/fail/buffer(size:prefetch:whenfull:)",
        "html": "Parameters\nsize\n\nThe maximum number of elements to store.\n\nprefetch\n\nThe strategy to initially populate the buffer.\n\nwhenFull\n\nThe action to take when the buffer becomes full.\n\nReturn Value\n\nA publisher that buffers elements received from an upstream publisher.\n\nDiscussion\n\nUse buffer(size:prefetch:whenFull:) to collect a specific number of elements from an upstream publisher before republishing them to the downstream subscriber according to the Publishers.BufferingStrategy and Publishers.PrefetchStrategy strategy you specify.\n\nIf the publisher completes before reaching the size threshold, it buffers the elements and publishes them downstream prior to completion."
    },
    {
        "title": "collect()",
        "url": "https://developer.apple.com/documentation/combine/fail/collect()",
        "html": "Return Value\n\nA publisher that collects all received items and returns them as an array upon completion.\n\nDiscussion\n\nUse collect() to gather elements into an array that the operator emits after the upstream publisher finishes.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThis publisher requests an unlimited number of elements from the upstream publisher and uses an unbounded amount of memory to store the received values. The publisher may exert memory pressure on the system for very large sets of elements.\n\nThe collect() operator only sends the collected array to its downstream receiver after a request whose demand is greater than 0 items. Otherwise, collect() waits until it receives a non-zero request.\n\nIn the example below, an Integer range is a publisher that emits an array of integers:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\nSee Also\nReducing Elements\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "catch(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/catch(_:)",
        "html": "Parameters\nhandler\n\nA closure that accepts the upstream failure as input and returns a publisher to replace the upstream publisher.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\n\nDiscussion\n\nUse catch() to replace an error from an upstream publisher with a new publisher.\n\nIn the example below, the catch() operator handles the SimpleError thrown by the upstream publisher by replacing the error with a Just publisher. This continues the stream by publishing a single value and completing normally.\n\nstruct SimpleError: Error {}\nlet numbers = [5, 4, 3, 2, 1, 0, 9, 8, 7, 6]\ncancellable = numbers.publisher\n    .tryLast(where: {\n        guard $0 != 0 else {throw SimpleError()}\n        return true\n    })\n    .catch({ (error) in\n        Just(-1)\n    })\n    .sink { print(\"\\($0)\") }\n    // Prints: -1\n\n\nBackpressure note: This publisher passes through request and cancel to the upstream. After receiving an error, the publisher sends sends any unfulfilled demand to the new Publisher. SeeAlso: replaceError\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "advanced(by:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/advanced(by:)",
        "html": "Parameters\nn\n\nThe amount to advance by. The ImmediateScheduler ignores this value.\n\nReturn Value\n\nAn empty SchedulerTimeType.\n\nSee Also\nCalculating Time Offsets\nfunc distance(to: ImmediateScheduler.SchedulerTimeType) -> ImmediateScheduler.SchedulerTimeType.Stride\nReturns the distance to another immediate scheduler time; this distance is always 0 in the context of an immediate scheduler."
    },
    {
        "title": "assign(to:on:)",
        "url": "https://developer.apple.com/documentation/combine/fail/assign(to:on:)",
        "html": "Parameters\nkeyPath\n\nA key path that indicates the property to assign. See Key-Path Expression in The Swift Programming Language to learn how to use key paths to specify a property of an object.\n\nobject\n\nThe object that contains the property. The subscriber assigns the object\u2019s property every time it receives a new value.\n\nReturn Value\n\nAn AnyCancellable instance. Call cancel() on this instance when you no longer want the publisher to automatically assign the property. Deinitializing this instance will also cancel automatic assignment.\n\nDiscussion\n\nUse the assign(to:on:) subscriber when you want to set a given property each time a publisher produces a value.\n\nIn this example, the assign(to:on:) sets the value of the anInt property on an instance of MyClass:\n\nclass MyClass {\n    var anInt: Int = 0 {\n        didSet {\n            print(\"anInt was set to: \\(anInt)\", terminator: \"; \")\n        }\n    }\n}\n\n\nvar myObject = MyClass()\nlet myRange = (0...2)\ncancellable = myRange.publisher\n    .assign(to: \\.anInt, on: myObject)\n\n\n// Prints: \"anInt was set to: 0; anInt was set to: 1; anInt was set to: 2\"\n\n\nImportant\n\nThe Subscribers.Assign instance created by this operator maintains a strong reference to object, and sets it to nil when the upstream publisher completes (either normally or with an error).\n\nSee Also\nConnecting Simple Subscribers\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "assertNoFailure(_:file:line:)",
        "url": "https://developer.apple.com/documentation/combine/fail/assertnofailure(_:file:line:)",
        "html": "Parameters\nprefix\n\nA string used at the beginning of the fatal error message.\n\nfile\n\nA filename used in the error message. This defaults to #file.\n\nline\n\nA line number used in the error message. This defaults to #line.\n\nReturn Value\n\nA publisher that raises a fatal error when its upstream publisher fails.\n\nDiscussion\n\nUse assertNoFailure() for internal integrity checks that are active during testing. However, it is important to note that, like its Swift counterpart fatalError(_:), the assertNoFailure() operator asserts a fatal exception when triggered during development and testing, and in shipping versions of code.\n\nIn the example below, a CurrentValueSubject publishes the initial and second values successfully. The third value, containing a genericSubjectError, causes the assertNoFailure() operator to assert a fatal exception stopping the process:\n\npublic enum SubjectError: Error {\n    case genericSubjectError\n}\n\n\nlet subject = CurrentValueSubject<String, Error>(\"initial value\")\nsubject\n    .assertNoFailure()\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0).\") }\n    )\n\n\nsubject.send(\"second value\")\nsubject.send(completion: Subscribers.Completion<Error>.failure(SubjectError.genericSubjectError))\n\n\n// Prints:\n//  value: initial value.\n//  value: second value.\n//  The process then terminates in the debugger as the assertNoFailure operator catches the genericSubjectError.\n\nSee Also\nHandling Errors\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "allSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/allsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the allSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes.\n\nIn the example below, the allSatisfy(_:) operator tests if each an integer array publisher\u2019s elements fall into the targetRange:\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .allSatisfy { targetRange.contains($0) }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-mergemany-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Upstream) -> Publishers.MergeMany<Upstream>\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "distance(to:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/distance(to:)",
        "html": "Parameters\nother\n\nThe other scheduler time.\n\nReturn Value\n\n0, as a Stride.\n\nSee Also\nCalculating Time Offsets\nfunc advanced(by: ImmediateScheduler.SchedulerTimeType.Stride) -> ImmediateScheduler.SchedulerTimeType\nAdvances the time by the specified amount; this is meaningless in the context of an immediate scheduler."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/mergemany/init(_:)-3hrmo",
        "html": "Parameters\nupstream\n\nA sequence containing zero or more publishers to merge with this publisher.\n\nSee Also\nCreating a Merge Many Publisher\ninit(Upstream...)\nCreates a publisher created by applying the merge function to an arbitrary number of upstream publishers."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/mergemany/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.MergeMany<Upstream>, Publishers.MergeMany<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "append(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/append(_:)",
        "html": "Parameters\nelements\n\nElements to publish after this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that appends the specifiecd elements after this publisher\u2019s elements.\n\nDiscussion\n\nUse append(_:) when you need to prepend specific elements after the output of a publisher.\n\nIn the example below, the append(_:) operator publishes the provided elements after republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .append(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 5 6 7 8 9 10 0 1 255\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "Publishers.MergeMany.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/mergemany/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "switchToLatest()",
        "url": "https://developer.apple.com/documentation/combine/fail/switchtolatest()",
        "html": "Discussion\n\nThis operator works with an upstream publisher of publishers, flattening the stream of elements to appear as if they were coming from a single stream of elements. It switches the inner publisher as new ones arrive but keeps the outer publisher constant for downstream subscribers.\n\nWhen this operator receives a new publisher from the upstream publisher, it cancels its previous subscription. Use this feature to prevent earlier publishers from performing unnecessary work, such as creating network request publishers from frequently updating user interface publishers.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify."
    },
    {
        "title": "merge(with:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/merge(with:_:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nh\n\nAn eighth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\nlet pubH = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF, pubG, pubH)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\npubH.send(1000)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\npubH.send(1001)\n\n\n//Prints: \"1 40 90 -1 33 44 54 1000 2 50 100 -2 33 33 54 1001\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "sink(receiveCompletion:receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/fail/sink(receivecompletion:receivevalue:)",
        "html": "Parameters\nreceiveComplete\n\nThe closure to execute on completion.\n\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveCompletion:receiveValue:) to observe values received by the publisher and process them using a closure you specify.\n\nIn this example, a Range publisher publishes integers to a sink(receiveCompletion:receiveValue:) operator\u2019s receiveValue closure that prints them to the console. Upon completion the sink(receiveCompletion:receiveValue:) operator\u2019s receiveCompletion closure indicates the successful termination of the stream.\n\nlet myRange = (0...3)\ncancellable = myRange.publisher\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0)\") })\n\n\n// Prints:\n//  value: 0\n//  value: 1\n//  value: 2\n//  value: 3\n//  completion: finished\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "min()",
        "url": "https://developer.apple.com/documentation/combine/fail/min()",
        "html": "Return Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to find the minimum value in a stream of elements from an upstream publisher.\n\nIn the example below, the min(by:) operator emits a value when the publisher finishes, that value is the minimum of the values received from upstream, which is -1.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .min()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"-1\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "share()",
        "url": "https://developer.apple.com/documentation/combine/fail/share()",
        "html": "Return Value\n\nA class instance that shares elements received from its upstream to multiple subscribers.\n\nDiscussion\n\nThe publisher returned by this operator supports multiple subscribers, all of whom receive unchanged elements and completion states from the upstream publisher.\n\nTip\n\nPublishers.Share is effectively a combination of the Publishers.Multicast and PassthroughSubject publishers, with an implicit autoconnect().\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a share() operator to share the same random number to each of two subscribers. This example uses a delay(for:tolerance:scheduler:options:) operator only to prevent the first subscriber from exhausting the sequence publisher immediately; an asynchronous publisher wouldn\u2019t need this.\n\nlet pub = (1...3).publisher\n    .delay(for: 1, scheduler: DispatchQueue.main)\n    .map( { _ in return Int.random(in: 0...100) } )\n    .print(\"Random\")\n    .share()\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\n\n\n// Prints:\n// Random: receive value: (20)\n// Stream 1 received: 20\n// Stream 2 received: 20\n// Random: receive value: (85)\n// Stream 1 received: 85\n// Stream 2 received: 85\n// Random: receive value: (98)\n// Stream 1 received: 98\n// Stream 2 received: 98\n\n\nWithout the share() operator, stream 1 receives three random values, followed by stream 2 receiving three different random values.\n\nAlso note that Publishers.Share is a class rather than a structure like most other publishers. This means you can use this operator to create a publisher instance that uses reference semantics.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers."
    },
    {
        "title": "setFailureType(to:)",
        "url": "https://developer.apple.com/documentation/combine/fail/setfailuretype(to:)",
        "html": "Parameters\nfailureType\n\nThe Failure type presented by this publisher.\n\nReturn Value\n\nA publisher that appears to send the specified failure type.\n\nDiscussion\n\nUse setFailureType(to:) when you need set the error type of a publisher that cannot fail.\n\nConversely, if the upstream can fail, you would use mapError(_:) to provide instructions on converting the error types to needed by the downstream publisher\u2019s inputs.\n\nThe following example has two publishers with mismatched error types: pub1\u2019s error type is Never, and pub2\u2019s error type is Error. Because of the mismatch, the combineLatest(_:) operator requires that pub1 use setFailureType(to:) to make it appear that pub1 can produce the Error type, like pub2 can.\n\nlet pub1 = [0, 1, 2, 3, 4, 5].publisher\nlet pub2 = CurrentValueSubject<Int, Error>(0)\nlet cancellable = pub1\n    .setFailureType(to: Error.self)\n    .combineLatest(pub2)\n    .sink(\n        receiveCompletion: { print (\"completed: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\")}\n     )\n\n\n// Prints: \"value: (5, 0)\".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure."
    },
    {
        "title": "receive(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/fail/receive(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler the publisher uses for element delivery.\n\noptions\n\nScheduler options used to customize element delivery.\n\nReturn Value\n\nA publisher that delivers elements using the specified scheduler.\n\nDiscussion\n\nYou use the receive(on:options:) operator to receive results and completion on a specific scheduler, such as performing UI work on the main run loop. In contrast with subscribe(on:options:), which affects upstream messages, receive(on:options:) changes the execution context of downstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes jsonPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes labelUpdater to receive elements and completion on RunLoop.main.\n\nlet jsonPublisher = MyJSONLoaderPublisher() // Some publisher.\nlet labelUpdater = MyLabelUpdateSubscriber() // Some subscriber that updates the UI.\n\n\njsonPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(labelUpdater)\n\n\nPrefer receive(on:options:) over explicit use of dispatch queues when performing work in subscribers. For example, instead of the following pattern:\n\npub.sink {\n    DispatchQueue.main.async {\n        // Do something.\n    }\n}\n\n\nUse this pattern instead:\n\npub.receive(on: DispatchQueue.main).sink {\n    // Do something.\n}\n\n\nNote\n\nreceive(on:options:) doesn\u2019t affect the scheduler used to call the subscriber\u2019s receive(subscription:) method.\n\nSee Also\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations."
    },
    {
        "title": "removeDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/fail/removeduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of the current and previously published elements using a closure you provide.\n\nUse the removeDuplicates(by:) operator when comparing types that don\u2019t themselves implement Equatable, or if you need to compare values differently than the type\u2019s Equatable implementation.\n\nIn the example below, the removeDuplicates(by:) functionality triggers when the x property of the current and previous elements are equal, otherwise the operator publishes the current Point to the downstream subscriber:\n\nstruct Point {\n    let x: Int\n    let y: Int\n}\n\n\nlet points = [Point(x: 0, y: 0), Point(x: 0, y: 1),\n              Point(x: 1, y: 1), Point(x: 2, y: 1)]\ncancellable = points.publisher\n    .removeDuplicates { prev, current in\n        // Considers points to be duplicate if the x coordinate\n        // is equal, and ignores the y coordinate\n        prev.x == current.x\n    }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: Point(x: 0, y: 0) Point(x: 1, y: 1) Point(x: 2, y: 1)\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "hashValue",
        "url": "https://developer.apple.com/documentation/combine/subscribers/completion/hashvalue",
        "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
    },
    {
        "title": "print(_:to:)",
        "url": "https://developer.apple.com/documentation/combine/fail/print(_:to:)",
        "html": "Parameters\nprefix\n\nA string \u2014- which defaults to empty -\u2014 with which to prefix all log messages.\n\nstream\n\nA stream for text output that receives messages, and which directs output to the console by default. A custom stream can be used to log messages to other destinations.\n\nReturn Value\n\nA publisher that prints log messages for all publishing events.\n\nDiscussion\n\nUse print(_:to:) to log messages the console.\n\nIn the example below, log messages are printed on the console:\n\nlet integers = (1...2)\ncancellable = integers.publisher\n   .print(\"Logged a message\", to: nil)\n   .sink { _ in }\n\n\n// Prints:\n//  Logged a message: receive subscription: (1..<2)\n//  Logged a message: request unlimited\n//  Logged a message: receive value: (1)\n//  Logged a message: receive finished\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur."
    },
    {
        "title": "scan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/scan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nA closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse scan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value.\n\nThe following example logs a running total of all values received from the sequence publisher.\n\nlet range = (0...5)\ncancellable = range.publisher\n    .scan(0) { return $0 + $1 }\n    .sink { print (\"\\($0)\", terminator: \" \") }\n // Prints: \"0 1 3 6 10 15 \".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "replaceNil(with:)",
        "url": "https://developer.apple.com/documentation/combine/fail/replacenil(with:)",
        "html": "Parameters\noutput\n\nThe element to use when replacing nil.\n\nReturn Value\n\nA publisher that replaces nil elements from the upstream publisher with the provided element.\n\nDiscussion\n\nThe replaceNil(with:) operator enables replacement of nil values in a stream with a substitute value. In the example below, a collection publisher contains a nil value. The replaceNil(with:) operator replaces this with 0.0.\n\nlet numbers: [Double?] = [1.0, 2.0, nil, 3.0]\nnumbers.publisher\n    .replaceNil(with: 0.0)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"Optional(1.0) Optional(2.0) Optional(0.0) Optional(3.0)\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "map(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/map(_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of another property on Output.\n\nReturn Value\n\nA publisher that publishes the values of two key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:) operator uses the Swift key path syntax to access the die1 and die2 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these two values (as an (Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1) (total: \\(values.0 + values.1))\")\n    }\n// Prints \"Rolled: 6, 4 (total: 10)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "tryDrop(while:)",
        "url": "https://developer.apple.com/documentation/combine/record/trydrop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false, and then republishes all remaining elements. If the predicate closure throws, the publisher fails with an error.\n\nDiscussion\n\nUse tryDrop(while:) to omit elements from an upstream until an error-throwing closure you provide returns false, after which the remaining items in the stream are published. If the closure throws, no elements are emitted and the publisher fails with an error.\n\nIn the example below, elements are ignored until -1 is encountered in the stream and the closure returns false. The publisher then republishes the remaining elements and finishes normally. Conversely, if the guard value in the closure had been encountered, the closure would throw and the publisher would fail with an error.\n\nstruct RangeError: Error {}\nvar numbers = [1, 2, 3, 4, 5, 6, -1, 7, 8, 9, 10]\nlet range: CountableClosedRange<Int> = (1...100)\ncancellable = numbers.publisher\n    .tryDrop {\n        guard $0 != 0 else { throw RangeError() }\n        return range.contains($0)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"-1 7 8 9 10 completion: finished\"\n// If instead numbers was [1, 2, 3, 4, 5, 6, 0, -1, 7, 8, 9, 10], tryDrop(while:) would fail with a RangeError.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)",
        "url": "https://developer.apple.com/documentation/combine/record/breakpoint(receivesubscription:receiveoutput:receivecompletion:)",
        "html": "Parameters\nreceiveSubscription\n\nA closure that executes when the publisher receives a subscription. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveOutput\n\nA closure that executes when the publisher receives a value. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveCompletion\n\nA closure that executes when the publisher receives a completion. Return true from this closure to raise SIGTRAP, or false to continue.\n\nReturn Value\n\nA publisher that raises a debugger signal when one of the provided closures returns true.\n\nDiscussion\n\nUse breakpoint(receiveSubscription:receiveOutput:receiveCompletion:) to examine one or more stages of the subscribe/publish/completion process and stop in the debugger, based on conditions you specify. When any of the provided closures returns true, this operator raises the SIGTRAP signal to stop the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn the example below, a PassthroughSubject publishes strings to a breakpoint republisher. When the breakpoint receives the string \u201cDEBUGGER\u201d, it returns true, which stops the app in the debugger.\n\nlet publisher = PassthroughSubject<String?, Never>()\ncancellable = publisher\n    .breakpoint(\n        receiveOutput: { value in return value == \"DEBUGGER\" }\n    )\n    .sink { print(\"\\(String(describing: $0))\" , terminator: \" \") }\n\n\npublisher.send(\"DEBUGGER\")\n\n\n// Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n// Depending on your specific environment, the console messages may\n// also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "prepend(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/prepend(_:)",
        "html": "Parameters\nelements\n\nThe elements to publish before this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that prefixes the specified elements prior to this publisher\u2019s elements.\n\nDiscussion\n\nUse prepend(_:) when you need to prepend specific elements before the output of a publisher.\n\nIn the example below, the prepend(_:) operator publishes the provided elements before republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .prepend(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 255 0 1 2 3 4 5 6 7 8 9 10\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "breakpointOnError()",
        "url": "https://developer.apple.com/documentation/combine/record/breakpointonerror()",
        "html": "Return Value\n\nA publisher that raises a debugger signal upon receiving a failure.\n\nDiscussion\n\nWhen the upstream publisher fails with an error, this publisher raises the SIGTRAP signal, which stops the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn this example a PassthroughSubject publishes strings, but its downstream tryMap(_:) operator throws an error. This sends the error downstream as a Subscribers.Completion.failure(_:). The breakpointOnError() operator receives this completion and stops the app in the debugger.\n\n struct CustomError : Error {}\n let publisher = PassthroughSubject<String?, Error>()\n cancellable = publisher\n     .tryMap { stringValue in\n         throw CustomError()\n     }\n     .breakpointOnError()\n     .sink(\n         receiveCompletion: { completion in print(\"Completion: \\(String(describing: completion))\") },\n         receiveValue: { aValue in print(\"Result: \\(String(describing: aValue))\") }\n     )\n\n\n publisher.send(\"TEST DATA\")\n\n\n // Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n // Depending on your specific environment, the console messages may\n // also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "print(_:to:)",
        "url": "https://developer.apple.com/documentation/combine/record/print(_:to:)",
        "html": "Parameters\nprefix\n\nA string \u2014- which defaults to empty -\u2014 with which to prefix all log messages.\n\nstream\n\nA stream for text output that receives messages, and which directs output to the console by default. A custom stream can be used to log messages to other destinations.\n\nReturn Value\n\nA publisher that prints log messages for all publishing events.\n\nDiscussion\n\nUse print(_:to:) to log messages the console.\n\nIn the example below, log messages are printed on the console:\n\nlet integers = (1...2)\ncancellable = integers.publisher\n   .print(\"Logged a message\", to: nil)\n   .sink { _ in }\n\n\n// Prints:\n//  Logged a message: receive subscription: (1..<2)\n//  Logged a message: request unlimited\n//  Logged a message: receive value: (1)\n//  Logged a message: receive finished\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur."
    },
    {
        "title": "mapError(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/maperror(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes the upstream failure as a parameter and returns a new error for the publisher to terminate with.\n\nReturn Value\n\nA publisher that replaces any upstream failure with a new error produced by the transform closure.\n\nDiscussion\n\nUse the mapError(_:) operator when you need to replace one error type with another, or where a downstream operator needs the error types of its inputs to match.\n\nThe following example uses a tryMap(_:) operator to divide 1 by each element produced by a sequence publisher. When the publisher produces a 0, the tryMap(_:) fails with a DivisionByZeroError. The mapError(_:) operator converts this into a MyGenericError.\n\nstruct DivisionByZeroError: Error {}\nstruct MyGenericError: Error { var wrappedError: Error }\n\n\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n       guard divisor != 0 else { throw DivisionByZeroError() }\n       return dividend / divisor\n   }\n\n\nlet divisors: [Double] = [5, 4, 3, 2, 1, 0]\ndivisors.publisher\n    .tryMap { try myDivide(1, $0) }\n    .mapError { MyGenericError(wrappedError: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") ,\n        receiveValue: { print (\"value: \\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"0.2 0.25 0.3333333333333333 0.5 1.0 completion: failure(MyGenericError(wrappedError: DivisionByZeroError()))\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)",
        "url": "https://developer.apple.com/documentation/combine/record/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)",
        "html": "Parameters\nreceiveSubscription\n\nAn optional closure that executes when the publisher receives the subscription from the upstream publisher. This value defaults to nil.\n\nreceiveOutput\n\nAn optional closure that executes when the publisher receives a value from the upstream publisher. This value defaults to nil.\n\nreceiveCompletion\n\nAn optional closure that executes when the upstream publisher finishes normally or terminates with an error. This value defaults to nil.\n\nreceiveCancel\n\nAn optional closure that executes when the downstream receiver cancels publishing. This value defaults to nil.\n\nreceiveRequest\n\nAn optional closure that executes when the publisher receives a request for more elements. This value defaults to nil.\n\nReturn Value\n\nA publisher that performs the specified closures when publisher events occur.\n\nDiscussion\n\nUse handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:) when you want to examine elements as they progress through the stages of the publisher\u2019s lifecycle.\n\nIn the example below, a publisher of integers shows the effect of printing debugging information at each stage of the element-processing lifecycle:\n\nlet integers = (0...2)\ncancellable = integers.publisher\n    .handleEvents(receiveSubscription: { subs in\n        print(\"Subscription: \\(subs.combineIdentifier)\")\n    }, receiveOutput: { anInt in\n        print(\"in output handler, received \\(anInt)\")\n    }, receiveCompletion: { _ in\n        print(\"in completion handler\")\n    }, receiveCancel: {\n        print(\"received cancel\")\n    }, receiveRequest: { (demand) in\n        print(\"received demand: \\(demand.description)\")\n    })\n    .sink { _ in return }\n\n\n// Prints:\n//   received demand: unlimited\n//   Subscription: 0x7f81284734c0\n//   in output handler, received 0\n//   in output handler, received 1\n//   in output handler, received 2\n//   in completion handler\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Comparable Implementations",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/comparable-implementations",
        "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func < (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than that of the second argument.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    },
    {
        "title": "...(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/'...(_:_:)",
        "html": "Parameters\nminimum\n\nThe lower bound for the range.\n\nmaximum\n\nThe upper bound for the range.\n\nDiscussion\n\nUse the closed range operator (...) to create a closed range of any type that conforms to the Comparable protocol. This example creates a ClosedRange<Character> from \u201ca\u201d up to, and including, \u201cz\u201d.\n\nlet lowercase = \"a\"...\"z\"\nprint(lowercase.contains(\"z\"))\n// Prints \"true\"\n\n\nPrecondition\n\nminimum <= maximum.\n\nSee Also\nComparing Scheduler Times\nstatic func != (Self, Self) -> Bool\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal."
    },
    {
        "title": "...(_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/'...(_:)-5ai2g",
        "html": "Parameters\nmaximum\n\nThe upper bound for the range.\n\nDiscussion\n\nUse the prefix closed range operator (prefix ...) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeThrough<Double> instance that includes any value less than or equal to 5.0.\n\nlet throughFive = ...5.0\n\n\nthroughFive.contains(4.0)     // true\nthroughFive.contains(5.0)     // true\nthroughFive.contains(6.0)     // false\n\n\nYou can use this type of partial range of a collection\u2019s indices to represent the range from the start of the collection up to, and including, the partial range\u2019s upper bound.\n\nlet numbers = [10, 20, 30, 40, 50, 60, 70]\nprint(numbers[...3])\n// Prints \"[10, 20, 30, 40]\"\n\n\nPrecondition\n\nmaximum must compare equal to itself (i.e. cannot be NaN).\n\nSee Also\nComparing Scheduler Times\nstatic func != (Self, Self) -> Bool\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal."
    },
    {
        "title": "...(_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/'...(_:)-6wy1j",
        "html": "Parameters\nminimum\n\nThe lower bound for the range.\n\nDiscussion\n\nUse the postfix range operator (postfix ...) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeFrom<Double> instance that includes any value greater than or equal to 5.0.\n\nlet atLeastFive = 5.0...\n\n\natLeastFive.contains(4.0)     // false\natLeastFive.contains(5.0)     // true\natLeastFive.contains(6.0)     // true\n\n\nYou can use this type of partial range of a collection\u2019s indices to represent the range from the partial range\u2019s lower bound up to the end of the collection.\n\nlet numbers = [10, 20, 30, 40, 50, 60, 70]\nprint(numbers[3...])\n// Prints \"[40, 50, 60, 70]\"\n\n\nPrecondition\n\nminimum must compare equal to itself (i.e. cannot be NaN).\n\nSee Also\nComparing Scheduler Times\nstatic func != (Self, Self) -> Bool\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/map(_:)-5gfsb",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s map(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use map(_:) to transform from one kind of element to another.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A map(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the map(_:)\u2019s closure fails to look up a Roman numeral, it returns the string (unknown).\n\nlet numbers = [5, 4, 3, 2, 1, 0]\nlet romanNumeralDict: [Int : String] =\n   [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\ncancellable = numbers.publisher\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"V IV III II I (unknown)\"\n\n\nIf your closure can throw an error, use Combine\u2019s tryMap(_:) operator instead.\n\nSee Also\nMapping Elements\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/==(_:_:)",
        "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false.\n\nSee Also\nComparing Scheduler Times\nstatic func != (Self, Self) -> Bool\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/!=(_:_:)",
        "html": "See Also\nComparing Scheduler Times\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal."
    },
    {
        "title": "sink(receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/record/sink(receivevalue:)",
        "html": "Parameters\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveValue:) to observe values received by the publisher and print them to the console. This operator can only be used when the stream doesn\u2019t fail, that is, when the publisher\u2019s Failure type is Never.\n\nIn this example, a Range publisher publishes integers to a sink(receiveValue:) operator\u2019s receiveValue closure that prints them to the console:\n\nlet integers = (0...3)\nintegers.publisher\n    .sink { print(\"Received \\($0)\") }\n\n\n// Prints:\n//  Received 0\n//  Received 1\n//  Received 2\n//  Received 3\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior."
    },
    {
        "title": "contains(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/contains(_:)",
        "html": "Parameters\noutput\n\nAn element to match against.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(_:) to find the first element in an upstream that\u2019s equal to the supplied argument. The contains publisher consumes all received elements until the upstream publisher produces a matching element. Upon finding the first match, it emits true and finishes normally. If the upstream finishes normally without producing a matching element, this publisher emits false and finishes.\n\nIn the example below, the contains(_:) operator emits true the first time it receives the value 5 from the numbers.publisher, and then finishes normally.\n\nlet numbers = [-1, 5, 10, 5]\nnumbers.publisher\n    .contains(5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "subscribe(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/record/subscribe(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler used to send messages to upstream publishers.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher which performs upstream operations on the specified scheduler.\n\nDiscussion\n\nIn contrast with receive(on:options:), which affects downstream messages, subscribe(on:options:) changes the execution context of upstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes ioPerformingPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes uiUpdatingSubscriber to receive elements and completion on RunLoop.main.\n\nlet ioPerformingPublisher == // Some publisher.\nlet uiUpdatingSubscriber == // Some subscriber that updates the UI.\n\n\nioPerformingPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(uiUpdatingSubscriber)\n\n\nUsing subscribe(on:options:) also causes the upstream publisher to perform cancel() using the specfied scheduler.\n\nSee Also\nSpecifying Schedulers\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher."
    },
    {
        "title": "multicast(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/multicast(_:)",
        "html": "Parameters\ncreateSubject\n\nA closure to create a new Subject each time a subscriber attaches to the multicast publisher.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(subject:), this method produces a publisher that creates a separate Subject for each subscriber.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(_:) operator whose closure creates a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast { PassthroughSubject<(String, Int), Never>() }\n\n\ncancellable1 = pub\n   .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n   .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 9))\n// Stream 2 received: (\"First\", 9)\n// Stream 1 received: (\"First\", 9)\n// Random: receive value: ((\"Second\", 46))\n// Stream 2 received: (\"Second\", 46)\n// Stream 1 received: (\"Second\", 46)\n// Random: receive value: ((\"Third\", 26))\n// Stream 2 received: (\"Third\", 26)\n// Stream 1 received: (\"Third\", 26)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/map(_:)-8ifgx",
        "html": "Parameters\nkeyPath\n\nThe key path of a property on Output.\n\nReturn Value\n\nA publisher that publishes the value of the key path.\n\nDiscussion\n\nIn the following example, the map(_:) operator uses the Swift key path syntax to access the die member of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only the value of this Int, not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die: Int\n}\n\n\ncancellable = Just(DiceRoll(die:Int.random(in:1...6)))\n    .map(\\.die)\n    .sink {\n        print (\"Rolled: \\($0)\")\n    }\n// Prints \"Rolled: 3\" (or some other random value).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "map(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/map(_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of another property on Output.\n\nReturn Value\n\nA publisher that publishes the values of two key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:) operator uses the Swift key path syntax to access the die1 and die2 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these two values (as an (Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1) (total: \\(values.0 + values.1))\")\n    }\n// Prints \"Rolled: 6, 4 (total: 10)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "throttle(for:scheduler:latest:)",
        "url": "https://developer.apple.com/documentation/combine/record/throttle(for:scheduler:latest:)",
        "html": "Parameters\ninterval\n\nThe interval at which to find and emit either the most recent or the first element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to publish elements.\n\nlatest\n\nA Boolean value that indicates whether to publish the most recent element. If false, the publisher emits the first element received during the interval.\n\nReturn Value\n\nA publisher that emits either the most-recent or first element received during the specified interval.\n\nDiscussion\n\nUse throttle(for:scheduler:latest:) to selectively republish elements from an upstream publisher during an interval you specify. Other elements received from the upstream in the throttling interval aren\u2019t republished.\n\nIn the example below, a Timer.TimerPublisher produces elements on one-second intervals; the throttle(for:scheduler:latest:) operator delivers the first event, then republishes only the latest event in the following ten second intervals:\n\ncancellable = Timer.publish(every: 3.0, on: .main, in: .default)\n    .autoconnect()\n    .print(\"\\(Date().description)\")\n    .throttle(for: 10.0, scheduler: RunLoop.main, latest: true)\n    .sink(\n        receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print(\"Received Timestamp \\($0).\") }\n     )\n\n\n// Prints:\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:26:57 +0000)\n //    Received Timestamp 2020-03-19 18:26:57 +0000.\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:00 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:03 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:06 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:09 +0000)\n //    Received Timestamp 2020-03-19 18:27:09 +0000.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "timeout(_:scheduler:options:customError:)",
        "url": "https://developer.apple.com/documentation/combine/record/timeout(_:scheduler:options:customerror:)",
        "html": "Parameters\ninterval\n\nThe maximum time interval the publisher can go without emitting an element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to deliver events.\n\noptions\n\nScheduler options that customize the delivery of elements.\n\ncustomError\n\nA closure that executes if the publisher times out. The publisher sends the failure returned by this closure to the subscriber as the reason for termination.\n\nReturn Value\n\nA publisher that terminates if the specified interval elapses with no events received from the upstream publisher.\n\nDiscussion\n\nUse timeout(_:scheduler:options:customError:) to terminate a publisher if an element isn\u2019t delivered within a timeout interval you specify.\n\nIn the example below, a PassthroughSubject publishes String elements and is configured to time out if no new elements are received within its TIME_OUT window of 5 seconds. A single value is published after the specified 2-second WAIT_TIME, after which no more elements are available; the publisher then times out and completes normally.\n\nvar WAIT_TIME : Int = 2\nvar TIMEOUT_TIME : Int = 5\n\n\nlet subject = PassthroughSubject<String, Never>()\nlet cancellable = subject\n    .timeout(.seconds(TIMEOUT_TIME), scheduler: DispatchQueue.main, options: nil, customError:nil)\n    .sink(\n          receiveCompletion: { print (\"completion: \\($0) at \\(Date())\") },\n          receiveValue: { print (\"value: \\($0) at \\(Date())\") }\n     )\n\n\nDispatchQueue.main.asyncAfter(deadline: .now() + .seconds(WAIT_TIME),\n                              execute: { subject.send(\"Some data - sent after a delay of \\(WAIT_TIME) seconds\") } )\n\n\n// Prints: value: Some data - sent after a delay of 2 seconds at 2020-03-10 23:47:59 +0000\n//         completion: finished at 2020-03-10 23:48:04 +0000\n\n\nIf customError is nil, the publisher completes normally; if you provide a closure for the customError argument, the upstream publisher is instead terminated upon timeout, and the error is delivered to the downstream.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval."
    },
    {
        "title": "encode(encoder:)",
        "url": "https://developer.apple.com/documentation/combine/record/encode(encoder:)",
        "html": "Parameters\nencoder\n\nAn encoder that implements the TopLevelEncoder protocol.\n\nReturn Value\n\nA publisher that encodes received elements using a specified encoder, and publishes the resulting data.\n\nDiscussion\n\nUse encode(encoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to encode an Encodable struct into Data that could be used to make a JSON string (or written to disk as a binary plist in the case of property lists).\n\nIn this example, a PassthroughSubject publishes an Article. The encode(encoder:) operator encodes the properties of the Article struct into a new JSON string according to the Codable protocol adopted by Article. The operator publishes the resulting JSON string to the downstream subscriber. If the encoding operation fails, which can happen in the case of complex properties that can\u2019t be directly transformed into JSON, the stream terminates and the error is passed to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Article, Never>()\nlet cancellable = dataProvider\n    .encode(encoder: JSONEncoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\") },\n          receiveValue: {  data in\n            guard let stringRepresentation = String(data: data, encoding: .utf8) else { return }\n            print(\"Data received \\(data) string representation: \\(stringRepresentation)\")\n    })\n\n\ndataProvider.send(Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: Date()))\n\n\n// Prints: \"Data received 86 bytes string representation: {\"title\":\"My First Article\",\"author\":\"Gita Kumar\",\"pubDate\":606211803.279603}\"\n\nSee Also\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder."
    },
    {
        "title": "scan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/scan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nA closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse scan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value.\n\nThe following example logs a running total of all values received from the sequence publisher.\n\nlet range = (0...5)\ncancellable = range.publisher\n    .scan(0) { return $0 + $1 }\n    .sink { print (\"\\($0)\", terminator: \" \") }\n // Prints: \"0 1 3 6 10 15 \".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "throttle(for:scheduler:latest:)",
        "url": "https://developer.apple.com/documentation/combine/just/throttle(for:scheduler:latest:)",
        "html": "Parameters\ninterval\n\nThe interval at which to find and emit either the most recent or the first element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to publish elements.\n\nlatest\n\nA Boolean value that indicates whether to publish the most recent element. If false, the publisher emits the first element received during the interval.\n\nReturn Value\n\nA publisher that emits either the most-recent or first element received during the specified interval.\n\nDiscussion\n\nUse throttle(for:scheduler:latest:) to selectively republish elements from an upstream publisher during an interval you specify. Other elements received from the upstream in the throttling interval aren\u2019t republished.\n\nIn the example below, a Timer.TimerPublisher produces elements on one-second intervals; the throttle(for:scheduler:latest:) operator delivers the first event, then republishes only the latest event in the following ten second intervals:\n\ncancellable = Timer.publish(every: 3.0, on: .main, in: .default)\n    .autoconnect()\n    .print(\"\\(Date().description)\")\n    .throttle(for: 10.0, scheduler: RunLoop.main, latest: true)\n    .sink(\n        receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print(\"Received Timestamp \\($0).\") }\n     )\n\n\n// Prints:\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:26:57 +0000)\n //    Received Timestamp 2020-03-19 18:26:57 +0000.\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:00 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:03 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:06 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:09 +0000)\n //    Received Timestamp 2020-03-19 18:27:09 +0000.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "decode(type:decoder:)",
        "url": "https://developer.apple.com/documentation/combine/record/decode(type:decoder:)",
        "html": "Parameters\ntype\n\nThe encoded data to decode into a struct that conforms to the Decodable protocol.\n\ndecoder\n\nA decoder that implements the TopLevelDecoder protocol.\n\nReturn Value\n\nA publisher that decodes a given type using a specified decoder and publishes the result.\n\nDiscussion\n\nUse decode(type:decoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to decode data received from a URLSession.DataTaskPublisher or other data source using the Decodable protocol.\n\nIn this example, a PassthroughSubject publishes a JSON string. The JSON decoder parses the string, converting its fields according to the Decodable protocol implemented by Article, and successfully populating a new Article. The Publishers.Decode publisher then publishes the Article to the downstream. If a decoding operation fails, which happens in the case of missing or malformed data in the source JSON string, the stream terminates and passes the error to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Data, Never>()\ncancellable = dataProvider\n    .decode(type: Article.self, decoder: JSONDecoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\")},\n          receiveValue: { print (\"value: \\($0)\") })\n\n\ndataProvider.send(Data(\"{\\\"pubDate\\\":1574273638.575666, \\\"title\\\" : \\\"My First Article\\\", \\\"author\\\" : \\\"Gita Kumar\\\" }\".utf8))\n\n\n// Prints: \".sink() data received Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: 2050-11-20 18:13:58 +0000)\"\n\nSee Also\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable."
    },
    {
        "title": "delay(for:tolerance:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/record/delay(for:tolerance:scheduler:options:)",
        "html": "Parameters\ninterval\n\nThe amount of time to delay.\n\ntolerance\n\nThe allowed tolerance in delivering delayed events. The Delay publisher may deliver elements this much sooner or later than the interval specifies.\n\nscheduler\n\nThe scheduler to deliver the delayed events.\n\noptions\n\nOptions relevant to the scheduler\u2019s behavior.\n\nReturn Value\n\nA publisher that delays delivery of elements and completion to the downstream receiver.\n\nDiscussion\n\nUse delay(for:tolerance:scheduler:options:) when you need to delay the delivery of elements to a downstream by a specified amount of time.\n\nIn this example, a Timer publishes an event every second. The delay(for:tolerance:scheduler:options:) operator holds the delivery of the initial element for 3 seconds (\u00b10.5 seconds), after which each element is delivered to the downstream on the main run loop after the specified delay:\n\nlet df = DateFormatter()\ndf.dateStyle = .none\ndf.timeStyle = .long\ncancellable = Timer.publish(every: 1.0, on: .main, in: .default)\n    .autoconnect()\n    .handleEvents(receiveOutput: { date in\n        print (\"Sending Timestamp \\'\\(df.string(from: date))\\' to delay()\")\n    })\n    .delay(for: .seconds(3), scheduler: RunLoop.main, options: .none)\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \"\\n\") },\n        receiveValue: { value in\n            let now = Date()\n            print (\"At \\(df.string(from: now)) received  Timestamp \\'\\(df.string(from: value))\\' sent: \\(String(format: \"%.2f\", now.timeIntervalSince(value))) secs ago\", terminator: \"\\n\")\n        }\n    )\n\n\n// Prints:\n//    Sending Timestamp '5:02:33 PM PDT' to delay()\n//    Sending Timestamp '5:02:34 PM PDT' to delay()\n//    Sending Timestamp '5:02:35 PM PDT' to delay()\n//    Sending Timestamp '5:02:36 PM PDT' to delay()\n//    At 5:02:36 PM PDT received  Timestamp '5:02:33 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:37 PM PDT' to delay()\n//    At 5:02:37 PM PDT received  Timestamp '5:02:34 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:38 PM PDT' to delay()\n//    At 5:02:38 PM PDT received  Timestamp '5:02:35 PM PDT' sent: 3.00 secs ago\n\n\nThe delay affects the delivery of elements and completion, but not of the original subscription.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "makeConnectable()",
        "url": "https://developer.apple.com/documentation/combine/fail/makeconnectable()",
        "html": "Return Value\n\nA ConnectablePublisher wrapping this publisher.\n\nDiscussion\n\nIn the following example, makeConnectable() wraps its upstream publisher (an instance of Publishers.Share) with a ConnectablePublisher. Without this, the first sink subscriber would receive all the elements from the sequence publisher and cause it to complete before the second subscriber attaches. By making the publisher connectable, the publisher doesn\u2019t produce any elements until after the connect() call.\n\n let subject = Just<String>(\"Sent\")\n let pub = subject\n     .share()\n     .makeConnectable()\n cancellable1 = pub.sink { print (\"Stream 1 received: \\($0)\")  }\n\n\n // For example purposes, use DispatchQueue to add a second subscriber\n // a second later, and then connect to the publisher a second after that.\n DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n     self.cancellable2 = pub.sink { print (\"Stream 2 received: \\($0)\") }\n }\n DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     self.connectable = pub.connect()\n }\n // Prints:\n // Stream 2 received: Sent\n // Stream 1 received: Sent\n\n\nNote\n\nThe connect() operator returns a Cancellable instance that you must retain. You can also use this instance to cancel publishing."
    },
    {
        "title": "ignoreOutput()",
        "url": "https://developer.apple.com/documentation/combine/fail/ignoreoutput()",
        "html": "Return Value\n\nA publisher that ignores all upstream elements.\n\nDiscussion\n\nUse the ignoreOutput() operator to determine if a publisher is able to complete successfully or would fail.\n\nIn the example below, the array publisher (numbers) delivers the first five of its elements successfully, as indicated by the ignoreOutput() operator. The operator consumes, but doesn\u2019t republish the elements downstream. However, the sixth element, 0, causes the error throwing closure to catch a NoZeroValuesAllowedError that terminates the stream.\n\nstruct NoZeroValuesAllowedError: Error {}\nlet numbers = [1, 2, 3, 4, 5, 0, 6, 7, 8, 9]\ncancellable = numbers.publisher\n    .tryFilter({ anInt in\n        guard anInt != 0 else { throw NoZeroValuesAllowedError() }\n        return anInt < 20\n    })\n    .ignoreOutput()\n    .sink(receiveCompletion: {print(\"completion: \\($0)\")},\n          receiveValue: {print(\"value \\($0)\")})\n\n\n// Prints: \"completion: failure(NoZeroValuesAllowedError())\"\n\n\nThe output type of this publisher is Never.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "tryRemoveDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/record/tryremoveduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first. If this closure throws an error, the publisher terminates with the thrown error.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse tryRemoveDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of elements using an error-throwing closure you provide. If your closure throws an error, the publisher terminates with the error.\n\nIn the example below, the closure provided to tryRemoveDuplicates(by:) returns true when two consecutive elements are equal, thereby filtering out 0, 1, 2, and 3. However, the closure throws an error when it encounters 4. The publisher then terminates with this error.\n\nstruct BadValuesError: Error {}\nlet numbers = [0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\ncancellable = numbers.publisher\n    .tryRemoveDuplicates { first, second -> Bool in\n        if (first == 4 && second == 4) {\n            throw BadValuesError()\n        }\n        return first == second\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n // Prints: \"0 1 2 3 4 failure(BadValuesError()\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/combinelatest(_:_:)-9ouxu",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn this example, three instances of PassthroughSubject emit values; as combineLatest(_:_:) receives input from any of the upstream publishers, it combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: (2, 2, 9).\n//  Result: (3, 2, 9).\n//  Result: (3, 12, 9).\n//  Result: (13, 12, 9).\n//  Result: (13, 12, 19).\n\n\nIf any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "delay(for:tolerance:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/fail/delay(for:tolerance:scheduler:options:)",
        "html": "Parameters\ninterval\n\nThe amount of time to delay.\n\ntolerance\n\nThe allowed tolerance in delivering delayed events. The Delay publisher may deliver elements this much sooner or later than the interval specifies.\n\nscheduler\n\nThe scheduler to deliver the delayed events.\n\noptions\n\nOptions relevant to the scheduler\u2019s behavior.\n\nReturn Value\n\nA publisher that delays delivery of elements and completion to the downstream receiver.\n\nDiscussion\n\nUse delay(for:tolerance:scheduler:options:) when you need to delay the delivery of elements to a downstream by a specified amount of time.\n\nIn this example, a Timer publishes an event every second. The delay(for:tolerance:scheduler:options:) operator holds the delivery of the initial element for 3 seconds (\u00b10.5 seconds), after which each element is delivered to the downstream on the main run loop after the specified delay:\n\nlet df = DateFormatter()\ndf.dateStyle = .none\ndf.timeStyle = .long\ncancellable = Timer.publish(every: 1.0, on: .main, in: .default)\n    .autoconnect()\n    .handleEvents(receiveOutput: { date in\n        print (\"Sending Timestamp \\'\\(df.string(from: date))\\' to delay()\")\n    })\n    .delay(for: .seconds(3), scheduler: RunLoop.main, options: .none)\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \"\\n\") },\n        receiveValue: { value in\n            let now = Date()\n            print (\"At \\(df.string(from: now)) received  Timestamp \\'\\(df.string(from: value))\\' sent: \\(String(format: \"%.2f\", now.timeIntervalSince(value))) secs ago\", terminator: \"\\n\")\n        }\n    )\n\n\n// Prints:\n//    Sending Timestamp '5:02:33 PM PDT' to delay()\n//    Sending Timestamp '5:02:34 PM PDT' to delay()\n//    Sending Timestamp '5:02:35 PM PDT' to delay()\n//    Sending Timestamp '5:02:36 PM PDT' to delay()\n//    At 5:02:36 PM PDT received  Timestamp '5:02:33 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:37 PM PDT' to delay()\n//    At 5:02:37 PM PDT received  Timestamp '5:02:34 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:38 PM PDT' to delay()\n//    At 5:02:38 PM PDT received  Timestamp '5:02:35 PM PDT' sent: 3.00 secs ago\n\n\nThe delay affects the delivery of elements and completion, but not of the original subscription.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "first(where:)",
        "url": "https://developer.apple.com/documentation/combine/fail/first(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse first(where:) to republish only the first element of a stream that satisfies a closure you specify. The publisher ignores all elements after the first element that satisfies the closure and finishes normally. If this publisher doesn\u2019t receive any elements, it finishes without publishing.\n\nIn the example below, the provided closure causes the Publishers.FirstWhere publisher to republish the first received element that\u2019s greater than 0, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first { $0 > 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"1\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "decode(type:decoder:)",
        "url": "https://developer.apple.com/documentation/combine/fail/decode(type:decoder:)",
        "html": "Parameters\ntype\n\nThe encoded data to decode into a struct that conforms to the Decodable protocol.\n\ndecoder\n\nA decoder that implements the TopLevelDecoder protocol.\n\nReturn Value\n\nA publisher that decodes a given type using a specified decoder and publishes the result.\n\nDiscussion\n\nUse decode(type:decoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to decode data received from a URLSession.DataTaskPublisher or other data source using the Decodable protocol.\n\nIn this example, a PassthroughSubject publishes a JSON string. The JSON decoder parses the string, converting its fields according to the Decodable protocol implemented by Article, and successfully populating a new Article. The Publishers.Decode publisher then publishes the Article to the downstream. If a decoding operation fails, which happens in the case of missing or malformed data in the source JSON string, the stream terminates and passes the error to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Data, Never>()\ncancellable = dataProvider\n    .decode(type: Article.self, decoder: JSONDecoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\")},\n          receiveValue: { print (\"value: \\($0)\") })\n\n\ndataProvider.send(Data(\"{\\\"pubDate\\\":1574273638.575666, \\\"title\\\" : \\\"My First Article\\\", \\\"author\\\" : \\\"Gita Kumar\\\" }\".utf8))\n\n\n// Prints: \".sink() data received Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: 2050-11-20 18:13:58 +0000)\"\n\nSee Also\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable."
    },
    {
        "title": "drop(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/fail/drop(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA publisher to monitor for its first emitted element.\n\nReturn Value\n\nA publisher that drops elements from the upstream publisher until the other publisher produces a value.\n\nDiscussion\n\nUse drop(untilOutputFrom:) to ignore elements from the upstream publisher until another, second, publisher delivers its first element. This publisher requests a single value from the second publisher, and it ignores (drops) all elements from the upstream publisher until the second publisher produces a value. After the second publisher produces an element, drop(untilOutputFrom:) cancels its subscription to the second publisher, and allows events from the upstream publisher to pass through.\n\nAfter this publisher receives a subscription from the upstream publisher, it passes through backpressure requests from downstream to the upstream publisher. If the upstream publisher acts on those requests before the other publisher produces an item, this publisher drops the elements it receives from the upstream publisher.\n\nIn the example below, the pub1 publisher defers publishing its elements until the pub2 publisher delivers its first element:\n\nlet upstream = PassthroughSubject<Int,Never>()\nlet second = PassthroughSubject<String,Never>()\ncancellable = upstream\n    .drop(untilOutputFrom: second)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\nupstream.send(1)\nupstream.send(2)\nsecond.send(\"A\")\nupstream.send(3)\nupstream.send(4)\n// Prints \"3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/combinelatest(_:_:)-80pmk",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest<P,T>(_:) to combine the current and one additional publisher and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn the example below, combineLatest() receives the most-recent values published by the two publishers, it multiplies them together, and republishes the result:\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2) { (first, second) in\n        return first * second\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(9)\npub1.send(3)\npub2.send(12)\npub1.send(13)\n//\n// Prints:\n//Result: 4.    (pub1 latest = 2, pub2 latest = 2)\n//Result: 18.   (pub1 latest = 9, pub2 latest = 2)\n//Result: 6.    (pub1 latest = 3, pub2 latest = 2)\n//Result: 36.   (pub1 latest = 3, pub2 latest = 12)\n//Result: 156.  (pub1 latest = 13, pub2 latest = 12)\n\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "filter(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/filter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value indicating whether to republish the element.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nCombine\u2019s filter(_:) operator performs an operation similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018365-filter in the Swift Standard Library: it uses a closure to test each element to determine whether to republish the element to the downstream subscriber.\n\nThe following example, uses a filter operation that receives an Int and only republishes a value if it\u2019s even.\n\nlet numbers: [Int] = [1, 2, 3, 4, 5]\ncancellable = numbers.publisher\n    .filter { $0 % 2 == 0 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 4\"\n\nSee Also\nFiltering Elements\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "count()",
        "url": "https://developer.apple.com/documentation/combine/fail/count()",
        "html": "Return Value\n\nA publisher that consumes all elements until the upstream publisher finishes, then emits a single value with the total number of elements received.\n\nDiscussion\n\nUse count() to determine the number of elements received from the upstream publisher before it completes:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .count()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"11\"\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/compactmap(_:)",
        "html": "Parameters\ntransform\n\nA closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of the calling the supplied closure.\n\nDiscussion\n\nCombine\u2019s compactMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/2950916-compactmap in the Swift standard library: the compactMap(_:) operator in Combine removes nil elements in a publisher\u2019s stream and republishes non-nil elements to the downstream subscriber.\n\nThe example below uses a range of numbers as the source for a collection based publisher. The compactMap(_:) operator consumes each element from the numbers publisher attempting to access the dictionary using the element as the key. If the example\u2019s dictionary returns a nil, due to a non-existent key, compactMap(_:) filters out the nil (missing) elements.\n\nlet numbers = (0...5)\nlet romanNumeralDict: [Int : String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ncancellable = numbers.publisher\n    .compactMap { romanNumeralDict[$0] }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"I II III V\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "combineLatest(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/combinelatest(_:)",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest(_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To pair elements from multiple publishers, use zip(_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn this example, PassthroughSubject pub1 and also pub2 emit values; as combineLatest(_:) receives input from either upstream publisher, it combines the latest value from each publisher into a tuple and publishes it.\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(3)\npub1.send(45)\npub2.send(22)\n\n\n// Prints:\n//    Result: (2, 2).    // pub1 latest = 2, pub2 latest = 2\n//    Result: (3, 2).    // pub1 latest = 3, pub2 latest = 2\n//    Result: (45, 2).   // pub1 latest = 45, pub2 latest = 2\n//    Result: (45, 22).  // pub1 latest = 45, pub2 latest = 22\n\n\nWhen all upstream publishers finish, this publisher finishes. If an upstream publisher never publishes a value, this publisher never finishes.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/mergemany/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)",
        "url": "https://developer.apple.com/documentation/combine/fail/breakpoint(receivesubscription:receiveoutput:receivecompletion:)",
        "html": "Parameters\nreceiveSubscription\n\nA closure that executes when the publisher receives a subscription. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveOutput\n\nA closure that executes when the publisher receives a value. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveCompletion\n\nA closure that executes when the publisher receives a completion. Return true from this closure to raise SIGTRAP, or false to continue.\n\nReturn Value\n\nA publisher that raises a debugger signal when one of the provided closures returns true.\n\nDiscussion\n\nUse breakpoint(receiveSubscription:receiveOutput:receiveCompletion:) to examine one or more stages of the subscribe/publish/completion process and stop in the debugger, based on conditions you specify. When any of the provided closures returns true, this operator raises the SIGTRAP signal to stop the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn the example below, a PassthroughSubject publishes strings to a breakpoint republisher. When the breakpoint receives the string \u201cDEBUGGER\u201d, it returns true, which stops the app in the debugger.\n\nlet publisher = PassthroughSubject<String?, Never>()\ncancellable = publisher\n    .breakpoint(\n        receiveOutput: { value in return value == \"DEBUGGER\" }\n    )\n    .sink { print(\"\\(String(describing: $0))\" , terminator: \" \") }\n\n\npublisher.send(\"DEBUGGER\")\n\n\n// Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n// Depending on your specific environment, the console messages may\n// also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "append(_:)",
        "url": "https://developer.apple.com/documentation/combine/fail/append(_:)",
        "html": "Parameters\nelements\n\nElements to publish after this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that appends the specifiecd elements after this publisher\u2019s elements.\n\nDiscussion\n\nUse append(_:) when you need to prepend specific elements after the output of a publisher.\n\nIn the example below, the append(_:) operator publishes the provided elements after republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .append(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 5 6 7 8 9 10 0 1 255\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "assign(to:)",
        "url": "https://developer.apple.com/documentation/combine/fail/assign(to:)",
        "html": "Parameters\npublished\n\nA property marked with the @Published attribute, which receives and republishes all elements received from the upstream publisher.\n\nDiscussion\n\nUse this operator when you want to receive elements from a publisher and republish them through a property marked with the @Published attribute. The assign(to:) operator manages the life cycle of the subscription, canceling the subscription automatically when the Published instance deinitializes. Because of this, the assign(to:) operator doesn\u2019t return an AnyCancellable that you\u2019re responsible for like assign(to:on:) does.\n\nThe example below shows a model class that receives elements from an internal Timer.TimerPublisher, and assigns them to a @Published property called lastUpdated. Because the to parameter has the inout keyword, you need to use the & operator when calling this method.\n\nclass MyModel: ObservableObject {\n    @Published var lastUpdated: Date = Date()\n    init() {\n         Timer.publish(every: 1.0, on: .main, in: .common)\n             .autoconnect()\n             .assign(to: &$lastUpdated)\n    }\n}\n\n\nIf you instead implemented MyModel with assign(to: lastUpdated, on: self), storing the returned AnyCancellable instance could cause a reference cycle, because the Subscribers.Assign subscriber would hold a strong reference to self. Using assign(to:) solves this problem.\n\nWhile the to parameter uses the inout keyword, this method doesn\u2019t replace a reference type passed to it. Instead, this notation indicates that the operator may modify members of the assigned object, as seen in the following example:\n\n    class MyModel2: ObservableObject {\n        @Published var id: Int = 0\n    }\n    let model2 = MyModel2()\n    Just(100).assign(to: &model2.$id)\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "Publishers.MergeMany.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/mergemany/output",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "init(_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/mergemany/init(_:)-1hsqd",
        "html": "Parameters\nupstream\n\nA variadic parameter containing zero or more publishers to merge with this publisher.\n\nSee Also\nCreating a Merge Many Publisher\ninit<S>(S)\nCreates a publisher created by applying the merge function to a sequence of upstream publishers."
    },
    {
        "title": "tryMin(by:)",
        "url": "https://developer.apple.com/documentation/combine/record/trymin(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMin(by:) to determine the minimum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMin(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\nnumbers.publisher\n    .tryMin { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first < second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes."
    },
    {
        "title": "tryCompactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/trycompactmap(_:)",
        "html": "Parameters\ntransform\n\nAn error-throwing closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of calling the supplied closure.\n\nDiscussion\n\nUse tryCompactMap(_:) to remove nil elements from a publisher\u2019s stream based on an error-throwing closure you provide. If the closure throws an error, the publisher cancels the upstream publisher and sends the thrown error to the downstream subscriber as a Failure.\n\nThe following example uses an array of numbers as the source for a collection-based publisher. A tryCompactMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform the numbers from its Arabic to Roman numerals, as an optional String.\n\nIf the closure called by tryCompactMap(_:) fails to look up a Roman numeral, it returns the optional String (unknown).\n\nIf the closure called by tryCompactMap(_:) determines the input is 0, it throws an error. The tryCompactMap(_:) operator catches this error and stops publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from: Int) throws -> String? {\n    let romanNumeralDict: [Int : String] =\n        [1: \"I\", 2: \"II\", 3: \"III\", 4: \"IV\", 5: \"V\"]\n    guard from != 0 else { throw ParseError() }\n    return romanNumeralDict[from]\n}\nlet numbers = [6, 5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryCompactMap { try romanNumeral(from: $0) }\n    .sink(\n          receiveCompletion: { print (\"\\($0)\") },\n          receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"(Unknown) V IV III II I failure(ParseError())\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/mergemany/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.MergeMany<Upstream>, Publishers.MergeMany<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/mergemany/==(_:_:)",
        "html": "Parameters\nlhs\n\nA MergeMany publisher to compare for equality.\n\nrhs\n\nAnother MergeMany publisher to compare for equality.\n\nReturn Value\n\ntrue if the publishers have equal publishers properties; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "hash(into:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/completion/hash(into:)",
        "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type\u2019s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don\u2019t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
    },
    {
        "title": "dropFirst(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/dropfirst(_:)",
        "html": "Parameters\ncount\n\nThe number of elements to omit. The default is 1.\n\nReturn Value\n\nA publisher that doesn\u2019t republish the first count elements.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the upstream publisher, and republish the remaining elements.\n\nThe example below drops the first five elements from the stream:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncancellable = numbers.publisher\n    .dropFirst(5)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"6 7 8 9 10 \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "values",
        "url": "https://developer.apple.com/documentation/combine/record/values",
        "html": "Discussion\n\nThis property provides an AsyncThrowingPublisher, which allows you to use the Swift async-await syntax to receive the publisher\u2019s elements. Because AsyncPublisher conforms to AsyncSequence, you iterate over its elements with a for-await-in loop, rather than attaching a subscriber. If the publisher terminates with an error, the awaiting caller receives the error as a throw.\n\nThe following example shows how to use the values property to receive elements asynchronously. The example adapts a code snippet from the tryFilter(_:) operator\u2019s documentation, which filters a sequence to only emit even integers, and terminate with an error on a 0. This example replaces the Subscribers.Sink subscriber with a for-await-in loop that iterates over the AsyncPublisher provided by the values property. With this approach, the error handling previously provided in the sink subscriber\u2019s receiveCompletion closure goes instead in a catch block.\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\nlet filterPublisher = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n\n\ndo {\n    for try await number in filterPublisher.values {\n        print (\"\\(number)\", terminator: \" \")\n    }\n} catch {\n    print (\"\\(error)\")\n}\n"
    },
    {
        "title": "tryAllSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/tryallsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete. The closure may throw an error, in which case the publisher cancels the upstream publisher and fails with the thrown error.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the tryAllSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria in an error-throwing predicate you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes. If the predicate throws an error, the publisher fails and passes the error to its downstream subscriber.\n\nIn the example below, an error-throwing predicate tests if each of an integer array publisher\u2019s elements fall into the targetRange; the predicate throws an error if an element is zero and terminates the stream.\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 10, 5, 0]\n\n\nnumbers.publisher\n    .tryAllSatisfy { anInt in\n        guard anInt != 0 else { throw RangeError() }\n        return targetRange.contains(anInt)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(RangeError())\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate."
    },
    {
        "title": "tryCatch(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/trycatch(_:)",
        "html": "Parameters\nhandler\n\nA throwing closure that accepts the upstream failure as input. This closure can either replace the upstream publisher with a new one, or throw a new error to the downstream subscriber.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher, or an error.\n\nDiscussion\n\nUse tryCatch(_:) to decide how to handle from an upstream publisher by either replacing the publisher with a new publisher, or throwing a new error.\n\nIn the example below, an array publisher emits values that a tryMap(_:) operator evaluates to ensure the values are greater than zero. If the values aren\u2019t greater than zero, the operator throws an error to the downstream subscriber to let it know there was a problem. The subscriber, tryCatch(_:), replaces the error with a new publisher using Just to publish a final value before the stream ends normally.\n\nenum SimpleError: Error { case error }\nvar numbers = [5, 4, 3, 2, 1, -1, 7, 8, 9, 10]\n\n\ncancellable = numbers.publisher\n   .tryMap { v in\n        if v > 0 {\n            return v\n        } else {\n            throw SimpleError.error\n        }\n}\n  .tryCatch { error in\n      Just(0) // Send a final value before completing normally.\n              // Alternatively, throw a new error to terminate the stream.\n}\n  .sink(receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print (\"Received \\($0).\") }\n  )\n//    Received 5.\n//    Received 4.\n//    Received 3.\n//    Received 2.\n//    Received 1.\n//    Received 0.\n//    Completion: finished.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc retry(Int) -> Just<Output>"
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/subscribe(_:)-1ydw2",
        "html": "Parameters\nsubject\n\nThe subject to attach to this publisher.\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher."
    },
    {
        "title": "drop(while:)",
        "url": "https://developer.apple.com/documentation/combine/record/drop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an upstream publisher until the element received meets a condition you specify.\n\nIn the example below, the operator omits all elements in the stream until the first element arrives that\u2019s a positive integer, after which the operator publishes all remaining elements:\n\nlet numbers = [-62, -1, 0, 10, 0, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .drop { $0 <= 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10 0, 22 41 -1 5\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "drop(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/record/drop(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA publisher to monitor for its first emitted element.\n\nReturn Value\n\nA publisher that drops elements from the upstream publisher until the other publisher produces a value.\n\nDiscussion\n\nUse drop(untilOutputFrom:) to ignore elements from the upstream publisher until another, second, publisher delivers its first element. This publisher requests a single value from the second publisher, and it ignores (drops) all elements from the upstream publisher until the second publisher produces a value. After the second publisher produces an element, drop(untilOutputFrom:) cancels its subscription to the second publisher, and allows events from the upstream publisher to pass through.\n\nAfter this publisher receives a subscription from the upstream publisher, it passes through backpressure requests from downstream to the upstream publisher. If the upstream publisher acts on those requests before the other publisher produces an item, this publisher drops the elements it receives from the upstream publisher.\n\nIn the example below, the pub1 publisher defers publishing its elements until the pub2 publisher delivers its first element:\n\nlet upstream = PassthroughSubject<Int,Never>()\nlet second = PassthroughSubject<String,Never>()\ncancellable = upstream\n    .drop(untilOutputFrom: second)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\nupstream.send(1)\nupstream.send(2)\nsecond.send(\"A\")\nupstream.send(3)\nupstream.send(4)\n// Prints \"3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "allSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/allsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the allSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes.\n\nIn the example below, the allSatisfy(_:) operator tests if each an integer array publisher\u2019s elements fall into the targetRange:\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .allSatisfy { targetRange.contains($0) }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "min()",
        "url": "https://developer.apple.com/documentation/combine/record/min()",
        "html": "Return Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to find the minimum value in a stream of elements from an upstream publisher.\n\nIn the example below, the min(by:) operator emits a value when the publisher finishes, that value is the minimum of the values received from upstream, which is -1.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .min()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"-1\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "tryContains(where:)",
        "url": "https://developer.apple.com/documentation/combine/record/trycontains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse tryContains(where:) to find the first element in an upstream that satisfies the error-throwing closure you provide.\n\nThis operator consumes elements produced from the upstream publisher until the upstream publisher either:\n\nProduces a matching element, after which it emits true and the publisher finishes normally.\n\nEmits false if no matching element is found and the publisher finishes normally.\n\nIf the predicate throws an error, the publisher fails, passing the error to its downstream.\n\nIn the example below, the tryContains(where:) operator tests values to find an element less than 10; when the closure finds an odd number, like 3, the publisher terminates with an IllegalValueError.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers = [3, 2, 10, 5, 0, 9]\nnumbers.publisher\n    .tryContains {\n        if ($0 % 2 != 0) {\n            throw IllegalValueError()\n        }\n       return $0 < 10\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "contains(where:)",
        "url": "https://developer.apple.com/documentation/combine/record/contains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(where:) to find the first element in an upstream that satisfies the closure you provide. This operator consumes elements produced from the upstream publisher until the upstream publisher produces a matching element.\n\nThis operator is useful when the upstream publisher produces elements that don\u2019t conform to Equatable.\n\nIn the example below, the contains(where:) operator tests elements against the supplied closure and emits true for the first elements that\u2019s greater than 4, and then finishes normally.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .contains {$0 > 4}\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "min(by:)",
        "url": "https://developer.apple.com/documentation/combine/record/min(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to determine the minimum value in the stream of elements from an upstream publisher using a comparison operation you specify.\n\nThis operator is useful when the value received from the upstream publisher isn\u2019t Comparable.\n\nIn the example below an array publishes enumeration elements representing playing card ranks. The min(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the minimum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .king]\ncancellable = cards.publisher\n    .min {\n        return  $0.rawValue < $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"ace\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "max(by:)",
        "url": "https://developer.apple.com/documentation/combine/record/max(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max(by:) to determine the maximum value of elements received from the upstream publisher based on an ordering closure you specify.\n\nIn the example below, an array publishes enumeration elements representing playing card ranks. The max(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the maximum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .jack]\ncancellable = cards.publisher\n    .max {\n        return  $0.rawValue > $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"queen\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "max()",
        "url": "https://developer.apple.com/documentation/combine/record/max()",
        "html": "Return Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max() to determine the maximum value in the stream of elements from an upstream publisher.\n\nIn the example below, the max() operator emits a value when the publisher finishes, that value is the maximum of the values received from upstream, which is 10.\n\nlet numbers = [0, 10, 5]\ncancellable = numbers.publisher\n    .max()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "count()",
        "url": "https://developer.apple.com/documentation/combine/record/count()",
        "html": "Return Value\n\nA publisher that consumes all elements until the upstream publisher finishes, then emits a single value with the total number of elements received.\n\nDiscussion\n\nUse count() to determine the number of elements received from the upstream publisher before it completes:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .count()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"11\"\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "tryReduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/tryreduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nAn error-throwing closure that takes the previously-accumulated value and the next element from the upstream publisher to produce a new value.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes.\n\nDiscussion\n\nUse tryReduce(_:_:) to collect a stream of elements and produce an accumulated value based on an error-throwing closure you provide. If the closure throws an error, the publisher fails and passes the error to its subscriber.\n\nIn the example below, the publisher\u2019s 0 element causes the myDivide(_:_:) function to throw an error and publish the doc://com.apple.documentation/documentation/Swift/Double/1641611-nan result:\n\nstruct DivisionByZeroError: Error {}\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n    guard divisor != 0 else { throw DivisionByZeroError() }\n    return dividend / divisor\n}\n\n\nvar numbers: [Double] = [5, 4, 3, 2, 1, 0]\nnumbers.publisher\n    .tryReduce(numbers.first!, { accum, next in try myDivide(accum, next) })\n    .catch({ _ in Just(Double.nan) })\n    .sink { print(\"\\($0)\") }\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "reduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/reduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nA closure that produces a new value by taking the previously-accumulated value and the next element it receives from the upstream publisher.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes. If reduce(_:_:) receives an error from the upstream publisher, the operator delivers it to the downstream subscriber, the publisher terminates and publishes no value.\n\nDiscussion\n\nUse reduce(_:_:) to collect a stream of elements and produce an accumulated value based on a closure you provide.\n\nIn the following example, the reduce(_:_:) operator collects all the integer values it receives from its upstream publisher:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .reduce(0, { accum, next in accum + next })\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"55\"\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "collect(_:options:)",
        "url": "https://developer.apple.com/documentation/combine/record/collect(_:options:)",
        "html": "Parameters\nstrategy\n\nThe timing group strategy used by the operator to collect and publish elements.\n\noptions\n\nScheduler options to use for the strategy.\n\nReturn Value\n\nA publisher that collects elements by a given strategy, and emits a single array of the collection.\n\nDiscussion\n\nUse collect(_:options:) to emit arrays of elements on a schedule specified by a Scheduler and Stride that you provide. At the end of each scheduled interval, the publisher sends an array that contains the items it collected. If the upstream publisher finishes before filling the buffer, the publisher sends an array that contains items it received. This may be fewer than the number of elements specified in the requested Stride.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThe example above collects timestamps generated on a one-second Timer in groups (Stride) of five.\n\nlet sub = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .collect(.byTime(RunLoop.main, .seconds(5)))\n    .sink { print(\"\\($0)\", terminator: \"\\n\\n\") }\n\n\n// Prints: \"[2020-01-24 00:54:46 +0000, 2020-01-24 00:54:47 +0000,\n//          2020-01-24 00:54:48 +0000, 2020-01-24 00:54:49 +0000,\n//          2020-01-24 00:54:50 +0000]\"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "merge(with:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/merge(with:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers; it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubE, pubG)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\n\n\n//Prints: \"1 40 90 -1 33 44 54 2 50 100 -2 33 33 54\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "measureInterval(using:options:)",
        "url": "https://developer.apple.com/documentation/combine/record/measureinterval(using:options:)",
        "html": "Parameters\nscheduler\n\nA scheduler to use for tracking the timing of events.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher that emits elements representing the time interval between the elements it receives.\n\nDiscussion\n\nUse measureInterval(using:options:) to measure the time between events delivered from an upstream publisher.\n\nIn the example below, a 1-second Timer is used as the data source for an event publisher; the measureInterval(using:options:) operator reports the elapsed time between the reception of events on the main run loop:\n\ncancellable = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .measureInterval(using: RunLoop.main)\n    .sink { print(\"\\($0)\", terminator: \"\\n\") }\n\n\n// Prints:\n//      Stride(magnitude: 1.0013610124588013)\n//      Stride(magnitude: 0.9992760419845581)\n\n\nThe output type of the returned publisher is the time interval of the provided scheduler.\n\nThis operator uses the provided scheduler\u2019s now property to measure intervals between events.\n\nSee Also\nControlling Timing\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "debounce(for:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/record/debounce(for:scheduler:options:)",
        "html": "Parameters\ndueTime\n\nThe time the publisher should wait before publishing an element.\n\nscheduler\n\nThe scheduler on which this publisher delivers elements\n\noptions\n\nScheduler options that customize this publisher\u2019s delivery of elements.\n\nReturn Value\n\nA publisher that publishes events only after a specified time elapses.\n\nDiscussion\n\nUse the debounce(for:scheduler:options:) operator to control the number of values and time between delivery of values from the upstream publisher. This operator is useful to process bursty or high-volume event streams where you need to reduce the number of values delivered to the downstream to a rate you specify.\n\nIn this example, a PassthroughSubject publishes elements on a schedule defined by the bounces array. The array is composed of tuples representing a value sent by the PassthroughSubject, and a TimeInterval ranging from one-quarter second up to 2 seconds that drives a delivery timer. As the queue builds, elements arriving faster than one-half second debounceInterval are discarded, while elements arriving at a rate slower than debounceInterval are passed through to the sink(receiveValue:) operator.\n\nlet bounces:[(Int,TimeInterval)] = [\n    (0, 0),\n    (1, 0.25),  // 0.25s interval since last index\n    (2, 1),     // 0.75s interval since last index\n    (3, 1.25),  // 0.25s interval since last index\n    (4, 1.5),   // 0.25s interval since last index\n    (5, 2)      // 0.5s interval since last index\n]\n\n\nlet subject = PassthroughSubject<Int, Never>()\ncancellable = subject\n    .debounce(for: .seconds(0.5), scheduler: RunLoop.main)\n    .sink { index in\n        print (\"Received index \\(index)\")\n    }\n\n\nfor bounce in bounces {\n    DispatchQueue.main.asyncAfter(deadline: .now() + bounce.1) {\n        subject.send(bounce.0)\n    }\n}\n\n\n// Prints:\n//  Received index 1\n//  Received index 4\n//  Received index 5\n\n\n//  Here is the event flow shown from the perspective of time, showing value delivery through the `debounce()` operator:\n\n\n//  Time 0: Send index 0.\n//  Time 0.25: Send index 1. Index 0 was waiting and is discarded.\n//  Time 0.75: Debounce period ends, publish index 1.\n//  Time 1: Send index 2.\n//  Time 1.25: Send index 3. Index 2 was waiting and is discarded.\n//  Time 1.5: Send index 4. Index 3 was waiting and is discarded.\n//  Time 2: Debounce period ends, publish index 4. Also, send index 5.\n//  Time 2.5: Debounce period ends, publish index 5.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "collect(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/collect(_:)",
        "html": "Parameters\ncount\n\nThe maximum number of received elements to buffer before publishing.\n\nReturn Value\n\nA publisher that collects up to the specified number of elements, and then publishes them as an array.\n\nDiscussion\n\nUse collect(_:) to emit arrays of at most count elements from an upstream publisher. If the upstream publisher finishes before collecting the specified number of elements, the publisher sends an array of only the items it received. This may be fewer than count elements.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nIn the example below, the collect(_:) operator emits one partial and two full arrays based on the requested collection size of 5:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect(5)\n    .sink { print(\"\\($0), terminator: \" \"\") }\n\n\n// Prints \"[0, 1, 2, 3, 4] [5, 6, 7, 8, 9] [10] \"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "retry(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/retry(_:)",
        "html": "Parameters\nretries\n\nThe number of times to attempt to recreate the subscription.\n\nReturn Value\n\nA publisher that attempts to recreate its subscription to a failed upstream publisher.\n\nDiscussion\n\nUse retry(_:) to try a connecting to an upstream publisher after a failed connection attempt.\n\nIn the example below, a URLSession.DataTaskPublisher attempts to connect to a remote URL. If the connection attempt succeeds, it publishes the remote service\u2019s HTML to the downstream publisher and completes normally. Otherwise, the retry operator attempts to reestablish the connection. If after three attempts the publisher still can\u2019t connect to the remote URL, the catch(_:) operator replaces the error with a new publisher that publishes a \u201cconnection timed out\u201d HTML page. After the downstream subscriber receives the timed out message, the stream completes normally.\n\nstruct WebSiteData: Codable {\n    var rawHTML: String\n}\n\n\nlet myURL = URL(string: \"https://www.example.com\")\n\n\ncancellable = URLSession.shared.dataTaskPublisher(for: myURL!)\n    .retry(3)\n    .map({ (page) -> WebSiteData in\n        return WebSiteData(rawHTML: String(decoding: page.data, as: UTF8.self))\n    })\n    .catch { error in\n        return Just(WebSiteData(rawHTML: \"<HTML>Unable to load page - timed out.</HTML>\"))\n}\n.sink(receiveCompletion: { print (\"completion: \\($0)\") },\n      receiveValue: { print (\"value: \\($0)\") }\n )\n\n\n// Prints: The HTML content from the remote URL upon a successful connection,\n//         or returns \"<HTML>Unable to load page - timed out.</HTML>\" if the number of retries exceeds the specified value.\n\n\nAfter exceeding the specified number of retries, the publisher passes the failure to the downstream receiver.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/zip(_:_:_:)-290ua",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from three other publishers to publish a tuple to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, several PassthroughSubject instances emit values; zip(_:_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\nlet fractionsPub  = PassthroughSubject<Double, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 2,3     lettersPub: \"A\"    emojiPub: \"\ud83d\ude00\"  fractionsPub: 0.1     zip output: (1, \"A\", \"\ud83d\ude00\", 0.1)\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: (2, \"B\", \"\ud83e\udd70\", 0.8)\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\", 0.1)\n//  (2, \"B\", \"\ud83e\udd70\", 0.8)\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "combineLatest(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/combinelatest(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:_:) when you need to combine the current and 3 additional publishers and transform the values using a closure in which you specify the published elements, to publish a new element.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, as combineLatest(_:_:_:_:) receives the most-recent values published by four publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4) { firstValue, secondValue, thirdValue, fourthValue in\n        return firstValue * secondValue * thirdValue * fourthValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: 36.     // pub = 2,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 54.     // pub = 3,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 324.    // pub = 3,  pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 1404.   // pub = 13, pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 2964.   // pub = 13, pub2 = 12,  pub3 = 19, pub4 = 1\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "first(where:)",
        "url": "https://developer.apple.com/documentation/combine/record/first(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse first(where:) to republish only the first element of a stream that satisfies a closure you specify. The publisher ignores all elements after the first element that satisfies the closure and finishes normally. If this publisher doesn\u2019t receive any elements, it finishes without publishing.\n\nIn the example below, the provided closure causes the Publishers.FirstWhere publisher to republish the first received element that\u2019s greater than 0, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first { $0 > 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"1\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "tryCatch(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/trycatch(_:)",
        "html": "Parameters\nhandler\n\nA throwing closure that accepts the upstream failure as input. This closure can either replace the upstream publisher with a new one, or throw a new error to the downstream subscriber.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher, or an error.\n\nDiscussion\n\nUse tryCatch(_:) to decide how to handle from an upstream publisher by either replacing the publisher with a new publisher, or throwing a new error.\n\nIn the example below, an array publisher emits values that a tryMap(_:) operator evaluates to ensure the values are greater than zero. If the values aren\u2019t greater than zero, the operator throws an error to the downstream subscriber to let it know there was a problem. The subscriber, tryCatch(_:), replaces the error with a new publisher using Just to publish a final value before the stream ends normally.\n\nenum SimpleError: Error { case error }\nvar numbers = [5, 4, 3, 2, 1, -1, 7, 8, 9, 10]\n\n\ncancellable = numbers.publisher\n   .tryMap { v in\n        if v > 0 {\n            return v\n        } else {\n            throw SimpleError.error\n        }\n}\n  .tryCatch { error in\n      Just(0) // Send a final value before completing normally.\n              // Alternatively, throw a new error to terminate the stream.\n}\n  .sink(receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print (\"Received \\($0).\") }\n  )\n//    Received 5.\n//    Received 4.\n//    Received 3.\n//    Received 2.\n//    Received 1.\n//    Received 0.\n//    Completion: finished.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "merge(with:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/merge(with:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\n\n\n//Prints: \"1 40 90 -1 33 44 2 50 100 -2 33 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "assertNoFailure(_:file:line:)",
        "url": "https://developer.apple.com/documentation/combine/record/assertnofailure(_:file:line:)",
        "html": "Parameters\nprefix\n\nA string used at the beginning of the fatal error message.\n\nfile\n\nA filename used in the error message. This defaults to #file.\n\nline\n\nA line number used in the error message. This defaults to #line.\n\nReturn Value\n\nA publisher that raises a fatal error when its upstream publisher fails.\n\nDiscussion\n\nUse assertNoFailure() for internal integrity checks that are active during testing. However, it is important to note that, like its Swift counterpart fatalError(_:), the assertNoFailure() operator asserts a fatal exception when triggered during development and testing, and in shipping versions of code.\n\nIn the example below, a CurrentValueSubject publishes the initial and second values successfully. The third value, containing a genericSubjectError, causes the assertNoFailure() operator to assert a fatal exception stopping the process:\n\npublic enum SubjectError: Error {\n    case genericSubjectError\n}\n\n\nlet subject = CurrentValueSubject<String, Error>(\"initial value\")\nsubject\n    .assertNoFailure()\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0).\") }\n    )\n\n\nsubject.send(\"second value\")\nsubject.send(completion: Subscribers.Completion<Error>.failure(SubjectError.genericSubjectError))\n\n\n// Prints:\n//  value: initial value.\n//  value: second value.\n//  The process then terminates in the debugger as the assertNoFailure operator catches the genericSubjectError.\n\nSee Also\nHandling Errors\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "catch(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/catch(_:)",
        "html": "Parameters\nhandler\n\nA closure that accepts the upstream failure as input and returns a publisher to replace the upstream publisher.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\n\nDiscussion\n\nUse catch() to replace an error from an upstream publisher with a new publisher.\n\nIn the example below, the catch() operator handles the SimpleError thrown by the upstream publisher by replacing the error with a Just publisher. This continues the stream by publishing a single value and completing normally.\n\nstruct SimpleError: Error {}\nlet numbers = [5, 4, 3, 2, 1, 0, 9, 8, 7, 6]\ncancellable = numbers.publisher\n    .tryLast(where: {\n        guard $0 != 0 else {throw SimpleError()}\n        return true\n    })\n    .catch({ (error) in\n        Just(-1)\n    })\n    .sink { print(\"\\($0)\") }\n    // Prints: -1\n\n\nBackpressure note: This publisher passes through request and cancel to the upstream. After receiving an error, the publisher sends sends any unfulfilled demand to the new Publisher. SeeAlso: replaceError\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "switchToLatest()",
        "url": "https://developer.apple.com/documentation/combine/record/switchtolatest()",
        "html": "Discussion\n\nThis operator works with an upstream publisher of publishers, flattening the stream of elements to appear as if they were coming from a single stream of elements. It switches the inner publisher as new ones arrive but keeps the outer publisher constant for downstream subscribers.\n\nWhen this operator receives a new publisher from the upstream publisher, it cancels its previous subscription. Use this feature to prevent earlier publishers from performing unnecessary work, such as creating network request publishers from frequently updating user interface publishers.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/flatmap(maxpublishers:_:)-8e1h8",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "prefix(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/just/prefix(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA second publisher.\n\nReturn Value\n\nA publisher that republishes elements until the second publisher publishes an element.\n\nDiscussion\n\nAfter the second publisher publishes an element, the publisher returned by this method finishes.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Optional<Output>.Publisher\nfunc drop(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc append<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prefix(Int) -> Optional<Output>.Publisher\nfunc prefix(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue."
    },
    {
        "title": "zip(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/zip(_:)",
        "html": "Parameters\nother\n\nAnother publisher.\n\nReturn Value\n\nA publisher that emits pairs of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:) to combine the latest elements from two publishers and emit a tuple to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together as a tuple to the subscriber.\n\nMuch like a zipper or zip fastener on a piece of clothing pulls together rows of teeth to link the two sides, zip(_:) combines streams from two different publishers by linking pairs of elements from each side.\n\nIn this example, numbers and letters are PassthroughSubjects that emit values; once zip(_:) receives one value from each, it publishes the pair as a tuple to the downstream subscriber. It then waits for the next pair of values.\n\n let numbersPub = PassthroughSubject<Int, Never>()\n let lettersPub = PassthroughSubject<String, Never>()\n\n\n cancellable = numbersPub\n     .zip(lettersPub)\n     .sink { print(\"\\($0)\") }\n numbersPub.send(1)    // numbersPub: 1      lettersPub:        zip output: <none>\n numbersPub.send(2)    // numbersPub: 1,2    lettersPub:        zip output: <none>\n letters.send(\"A\")     // numbers: 1,2       letters:\"A\"        zip output: <none>\n numbers.send(3)       // numbers: 1,2,3     letters:           zip output: (1,\"A\")\n letters.send(\"B\")     // numbers: 1,2,3     letters: \"B\"       zip output: (2,\"B\")\n\n\n // Prints:\n //  (1, \"A\")\n //  (2, \"B\")\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "merge(with:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/merge(with:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:). To combine elements from multiple upstream publishers, use zip(_:_:).\n\nIn this example, as merge(with:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubA.send(2)\npubB.send(50)\npubC.send(100)\n\n\n// Prints: \"1 40 90 2 50 100\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "tryPrefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/record/tryprefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value indicating whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate throws or indicates publishing should finish.\n\nDiscussion\n\nUse tryPrefix(while:) to emit values from the upstream publisher that meet a condition you specify in an error-throwing closure. The publisher finishes when the closure returns false. If the closure throws an error, the publisher fails with that error.\n\nstruct OutOfRangeError: Error {}\n\n\nlet numbers = (0...10).reversed()\ncancellable = numbers.publisher\n    .tryPrefix {\n        guard $0 != 0 else {throw OutOfRangeError()}\n        return $0 <= numbers.max()!\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"10 9 8 7 6 5 4 3 2 1 completion: failure(OutOfRangeError()) \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "prefix(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/prefix(_:)",
        "html": "Parameters\nmaxLength\n\nThe maximum number of elements to republish.\n\nReturn Value\n\nA publisher that publishes up to the specified number of elements.\n\nDiscussion\n\nUse prefix(_:) to limit the number of elements republished to the downstream subscriber.\n\nIn the example below, the prefix(_:) operator limits its output to the first two elements before finishing normally:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .prefix(2)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "prefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/record/prefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate indicates publishing should finish.\n\nDiscussion\n\nUse prefix(while:) to emit values while elements from the upstream publisher meet a condition you specify. The publisher finishes when the closure returns false.\n\nIn the example below, the prefix(while:) operator emits values while the element it receives is less than five:\n\nlet numbers = (0...10)\nnumbers.publisher\n    .prefix { $0 < 5 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/combinelatest(_:_:)-193tt",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn this example, three instances of PassthroughSubject emit values; as combineLatest(_:_:) receives input from any of the upstream publishers, it combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: (2, 2, 9).\n//  Result: (3, 2, 9).\n//  Result: (3, 12, 9).\n//  Result: (13, 12, 9).\n//  Result: (13, 12, 19).\n\n\nIf any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "prefix(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/record/prefix(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA second publisher.\n\nReturn Value\n\nA publisher that republishes elements until the second publisher publishes an element.\n\nDiscussion\n\nAfter the second publisher publishes an element, the publisher returned by this method finishes.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue."
    },
    {
        "title": "merge(with:)",
        "url": "https://developer.apple.com/documentation/combine/record/merge(with:)",
        "html": "Parameters\nother\n\nAnother publisher of this publisher\u2019s type.\n\nReturn Value\n\nA publisher that emits an event when either upstream publisher emits an event.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "output(at:)",
        "url": "https://developer.apple.com/documentation/combine/record/output(at:)",
        "html": "Parameters\nindex\n\nThe index that indicates the element to publish.\n\nReturn Value\n\nA publisher that publishes a specific indexed element.\n\nDiscussion\n\nUse output(at:) when you need to republish a specific element specified by its position in the stream. If the publisher completes normally or with an error before publishing the specified element, then the publisher doesn\u2019t produce any elements.\n\nIn the example below, the array publisher emits the fifth element in the sequence of published elements:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.publisher\n    .output(at: 5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"6\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "tryFirst(where:)",
        "url": "https://developer.apple.com/documentation/combine/record/tryfirst(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse tryFirst(where:) when you need to republish only the first element of a stream that satisfies an error-throwing closure you specify. The publisher ignores all elements after the first. If this publisher doesn\u2019t receive any elements, it finishes without publishing. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a range publisher emits the first element in the range then finishes normally:\n\nlet numberRange: ClosedRange<Int> = (-1...50)\nnumberRange.publisher\n    .tryFirst {\n        guard $0 < 99 else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"-1 completion: finished\"\n// If instead the number range were ClosedRange<Int> = (100...200), the tryFirst operator would terminate publishing with a RangeError.\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "last(where:)",
        "url": "https://developer.apple.com/documentation/combine/record/last(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse last(where:) when you need to republish only the last element of a stream that satisfies a closure you specify.\n\nIn the example below, a range publisher emits the last element that satisfies the closure\u2019s criteria, then finishes normally:\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last { $0 < 6 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"5\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "last()",
        "url": "https://developer.apple.com/documentation/combine/record/last()",
        "html": "Return Value\n\nA publisher that only publishes the last element of a stream.\n\nDiscussion\n\nUse last() when you need to emit only the last element from an upstream publisher.\n\nIn the example below, the range publisher only emits the last element from the sequence publisher, 10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "output(in:)",
        "url": "https://developer.apple.com/documentation/combine/record/output(in:)",
        "html": "Parameters\nrange\n\nA range that indicates which elements to publish.\n\nReturn Value\n\nA publisher that publishes elements specified by a range.\n\nDiscussion\n\nUse output(in:) to republish a range indices you specify in the published stream. After publishing all elements, the publisher finishes normally. If the publisher completes normally or with an error before producing all the elements in the range, it doesn\u2019t publish the remaining elements.\n\nIn the example below, an array publisher emits the subset of elements at the indices in the specified range:\n\nlet numbers = [1, 1, 2, 2, 2, 3, 4, 5, 6]\nnumbers.publisher\n    .output(in: (3...5))\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 2 3\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/immediatescheduler/schedulertimetype/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Self, Self) -> Bool\nReturns a Boolean value indicating whether two values are equal."
    },
    {
        "title": "assign(to:)",
        "url": "https://developer.apple.com/documentation/combine/record/assign(to:)",
        "html": "Parameters\npublished\n\nA property marked with the @Published attribute, which receives and republishes all elements received from the upstream publisher.\n\nDiscussion\n\nUse this operator when you want to receive elements from a publisher and republish them through a property marked with the @Published attribute. The assign(to:) operator manages the life cycle of the subscription, canceling the subscription automatically when the Published instance deinitializes. Because of this, the assign(to:) operator doesn\u2019t return an AnyCancellable that you\u2019re responsible for like assign(to:on:) does.\n\nThe example below shows a model class that receives elements from an internal Timer.TimerPublisher, and assigns them to a @Published property called lastUpdated. Because the to parameter has the inout keyword, you need to use the & operator when calling this method.\n\nclass MyModel: ObservableObject {\n    @Published var lastUpdated: Date = Date()\n    init() {\n         Timer.publish(every: 1.0, on: .main, in: .common)\n             .autoconnect()\n             .assign(to: &$lastUpdated)\n    }\n}\n\n\nIf you instead implemented MyModel with assign(to: lastUpdated, on: self), storing the returned AnyCancellable instance could cause a reference cycle, because the Subscribers.Assign subscriber would hold a strong reference to self. Using assign(to:) solves this problem.\n\nWhile the to parameter uses the inout keyword, this method doesn\u2019t replace a reference type passed to it. Instead, this notation indicates that the operator may modify members of the assigned object, as seen in the following example:\n\n    class MyModel2: ObservableObject {\n        @Published var id: Int = 0\n    }\n    let model2 = MyModel2()\n    Just(100).assign(to: &model2.$id)\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "assign(to:on:)",
        "url": "https://developer.apple.com/documentation/combine/record/assign(to:on:)",
        "html": "Parameters\nkeyPath\n\nA key path that indicates the property to assign. See Key-Path Expression in The Swift Programming Language to learn how to use key paths to specify a property of an object.\n\nobject\n\nThe object that contains the property. The subscriber assigns the object\u2019s property every time it receives a new value.\n\nReturn Value\n\nAn AnyCancellable instance. Call cancel() on this instance when you no longer want the publisher to automatically assign the property. Deinitializing this instance will also cancel automatic assignment.\n\nDiscussion\n\nUse the assign(to:on:) subscriber when you want to set a given property each time a publisher produces a value.\n\nIn this example, the assign(to:on:) sets the value of the anInt property on an instance of MyClass:\n\nclass MyClass {\n    var anInt: Int = 0 {\n        didSet {\n            print(\"anInt was set to: \\(anInt)\", terminator: \"; \")\n        }\n    }\n}\n\n\nvar myObject = MyClass()\nlet myRange = (0...2)\ncancellable = myRange.publisher\n    .assign(to: \\.anInt, on: myObject)\n\n\n// Prints: \"anInt was set to: 0; anInt was set to: 1; anInt was set to: 2\"\n\n\nImportant\n\nThe Subscribers.Assign instance created by this operator maintains a strong reference to object, and sets it to nil when the upstream publisher completes (either normally or with an error).\n\nSee Also\nConnecting Simple Subscribers\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "map(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/map(_:_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of a second property on Output.\n\nkeyPath2\n\nThe key path of a third property on Output.\n\nReturn Value\n\nA publisher that publishes the values of three key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:_:) operator uses the Swift key path syntax to access the die1, die2, and die3 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these three values (as an (Int, Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n    let die3: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6),\n                            die3: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2, \\.die3)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1), \\(values.2) (total \\(values.0 + values.1 + values.2))\")\n    }\n// Prints \"Rolled: 5, 4, 2 (total 11)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple."
    },
    {
        "title": "eraseToAnyPublisher()",
        "url": "https://developer.apple.com/documentation/combine/record/erasetoanypublisher()",
        "html": "Return Value\n\nAn AnyPublisher wrapping this publisher.\n\nDiscussion\n\nUse eraseToAnyPublisher() to expose an instance of AnyPublisher to the downstream subscriber, rather than this publisher\u2019s actual type. This form of type erasure preserves abstraction across API boundaries, such as different modules. When you expose your publishers as the AnyPublisher type, you can change the underlying implementation over time without affecting existing clients.\n\nThe following example shows two types that each have a publisher property. TypeWithSubject exposes this property as its actual type, PassthroughSubject, while TypeWithErasedSubject uses eraseToAnyPublisher() to expose it as an AnyPublisher. As seen in the output, a caller from another module can access TypeWithSubject.publisher as its native type. This means you can\u2019t change your publisher to a different type without breaking the caller. By comparison, TypeWithErasedSubject.publisher appears to callers as an AnyPublisher, so you can change the underlying publisher type at will.\n\npublic class TypeWithSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n}\npublic class TypeWithErasedSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n        .eraseToAnyPublisher()\n}\n\n\n// In another module:\nlet nonErased = TypeWithSubject()\nif let subject = nonErased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast nonErased.publisher.\")\n}\nlet erased = TypeWithErasedSubject()\nif let subject = erased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast erased.publisher.\")\n}\n\n\n// Prints \"Successfully cast nonErased.publisher.\"\n"
    },
    {
        "title": "buffer(size:prefetch:whenFull:)",
        "url": "https://developer.apple.com/documentation/combine/record/buffer(size:prefetch:whenfull:)",
        "html": "Parameters\nsize\n\nThe maximum number of elements to store.\n\nprefetch\n\nThe strategy to initially populate the buffer.\n\nwhenFull\n\nThe action to take when the buffer becomes full.\n\nReturn Value\n\nA publisher that buffers elements received from an upstream publisher.\n\nDiscussion\n\nUse buffer(size:prefetch:whenFull:) to collect a specific number of elements from an upstream publisher before republishing them to the downstream subscriber according to the Publishers.BufferingStrategy and Publishers.PrefetchStrategy strategy you specify.\n\nIf the publisher completes before reaching the size threshold, it buffers the elements and publishes them downstream prior to completion."
    },
    {
        "title": "zip(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/zip(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from four upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:_:) to return a new publisher that combines the elements from three other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, the PassthroughSubject publishers, numbersPub, fractionsPub, lettersPub, and emojiPub emit values. The zip(_:_:_:_:) operator receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times and prints out the value in fractionsPub.\n\nlet numbersPub = PassthroughSubject<Int, Never>()      // first publisher\nlet lettersPub = PassthroughSubject<String, Never>()   // second\nlet emojiPub = PassthroughSubject<String, Never>()     // third\nlet fractionsPub  = PassthroughSubject<Double, Never>()// fourth\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub) { anInt, aLetter, anEmoji, aFraction  in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt)) \\(aFraction)\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:          emojiPub:          zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:\"\ud83d\ude00\"      zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"      emojiPub:          zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"      emojiPub:          zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n// Prints:\n//1 \ud83d\ude00 A 0.1\n//2 \ud83e\udd70\ud83e\udd70 BB 0.8\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/zip(_:_:_:)-9fcfd",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from three other publishers to publish a tuple to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, several PassthroughSubject instances emit values; zip(_:_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\nlet fractionsPub  = PassthroughSubject<Double, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 2,3     lettersPub: \"A\"    emojiPub: \"\ud83d\ude00\"  fractionsPub: 0.1     zip output: (1, \"A\", \"\ud83d\ude00\", 0.1)\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: (2, \"B\", \"\ud83e\udd70\", 0.8)\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\", 0.1)\n//  (2, \"B\", \"\ud83e\udd70\", 0.8)\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "timeout(_:scheduler:options:customError:)",
        "url": "https://developer.apple.com/documentation/combine/just/timeout(_:scheduler:options:customerror:)",
        "html": "Parameters\ninterval\n\nThe maximum time interval the publisher can go without emitting an element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to deliver events.\n\noptions\n\nScheduler options that customize the delivery of elements.\n\ncustomError\n\nA closure that executes if the publisher times out. The publisher sends the failure returned by this closure to the subscriber as the reason for termination.\n\nReturn Value\n\nA publisher that terminates if the specified interval elapses with no events received from the upstream publisher.\n\nDiscussion\n\nUse timeout(_:scheduler:options:customError:) to terminate a publisher if an element isn\u2019t delivered within a timeout interval you specify.\n\nIn the example below, a PassthroughSubject publishes String elements and is configured to time out if no new elements are received within its TIME_OUT window of 5 seconds. A single value is published after the specified 2-second WAIT_TIME, after which no more elements are available; the publisher then times out and completes normally.\n\nvar WAIT_TIME : Int = 2\nvar TIMEOUT_TIME : Int = 5\n\n\nlet subject = PassthroughSubject<String, Never>()\nlet cancellable = subject\n    .timeout(.seconds(TIMEOUT_TIME), scheduler: DispatchQueue.main, options: nil, customError:nil)\n    .sink(\n          receiveCompletion: { print (\"completion: \\($0) at \\(Date())\") },\n          receiveValue: { print (\"value: \\($0) at \\(Date())\") }\n     )\n\n\nDispatchQueue.main.asyncAfter(deadline: .now() + .seconds(WAIT_TIME),\n                              execute: { subject.send(\"Some data - sent after a delay of \\(WAIT_TIME) seconds\") } )\n\n\n// Prints: value: Some data - sent after a delay of 2 seconds at 2020-03-10 23:47:59 +0000\n//         completion: finished at 2020-03-10 23:48:04 +0000\n\n\nIf customError is nil, the publisher completes normally; if you provide a closure for the customError argument, the upstream publisher is instead terminated upon timeout, and the error is delivered to the downstream.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval."
    },
    {
        "title": "tryDrop(while:)",
        "url": "https://developer.apple.com/documentation/combine/just/trydrop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false, and then republishes all remaining elements. If the predicate closure throws, the publisher fails with an error.\n\nDiscussion\n\nUse tryDrop(while:) to omit elements from an upstream until an error-throwing closure you provide returns false, after which the remaining items in the stream are published. If the closure throws, no elements are emitted and the publisher fails with an error.\n\nIn the example below, elements are ignored until -1 is encountered in the stream and the closure returns false. The publisher then republishes the remaining elements and finishes normally. Conversely, if the guard value in the closure had been encountered, the closure would throw and the publisher would fail with an error.\n\nstruct RangeError: Error {}\nvar numbers = [1, 2, 3, 4, 5, 6, -1, 7, 8, 9, 10]\nlet range: CountableClosedRange<Int> = (1...100)\ncancellable = numbers.publisher\n    .tryDrop {\n        guard $0 != 0 else { throw RangeError() }\n        return range.contains($0)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"-1 7 8 9 10 completion: finished\"\n// If instead numbers was [1, 2, 3, 4, 5, 6, 0, -1, 7, 8, 9, 10], tryDrop(while:) would fail with a RangeError.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Optional<Output>.Publisher\nfunc drop(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc append(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc append<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prefix(Int) -> Optional<Output>.Publisher\nfunc prefix(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryFirst(where:)",
        "url": "https://developer.apple.com/documentation/combine/just/tryfirst(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse tryFirst(where:) when you need to republish only the first element of a stream that satisfies an error-throwing closure you specify. The publisher ignores all elements after the first. If this publisher doesn\u2019t receive any elements, it finishes without publishing. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a range publisher emits the first element in the range then finishes normally:\n\nlet numberRange: ClosedRange<Int> = (-1...50)\nnumberRange.publisher\n    .tryFirst {\n        guard $0 < 99 else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"-1 completion: finished\"\n// If instead the number range were ClosedRange<Int> = (100...200), the tryFirst operator would terminate publishing with a RangeError.\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Just<Output>\nfunc first(where: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc last() -> Just<Output>\nfunc last(where: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Optional<Output>.Publisher\nfunc output<R>(in: R) -> Optional<Output>.Publisher"
    },
    {
        "title": "replaceNil(with:)",
        "url": "https://developer.apple.com/documentation/combine/record/replacenil(with:)",
        "html": "Parameters\noutput\n\nThe element to use when replacing nil.\n\nReturn Value\n\nA publisher that replaces nil elements from the upstream publisher with the provided element.\n\nDiscussion\n\nThe replaceNil(with:) operator enables replacement of nil values in a stream with a substitute value. In the example below, a collection publisher contains a nil value. The replaceNil(with:) operator replaces this with 0.0.\n\nlet numbers: [Double?] = [1.0, 2.0, nil, 3.0]\nnumbers.publisher\n    .replaceNil(with: 0.0)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"Optional(1.0) Optional(2.0) Optional(0.0) Optional(3.0)\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "tryScan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/tryscan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse tryScan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value. If your accumulator closure throws an error, the publisher terminates with the error.\n\nIn the example below, tryScan(_:_:) calls a division function on elements of a collection publisher. The Publishers.TryScan publisher publishes each result until the function encounters a DivisionByZeroError, which terminates the publisher.\n\nstruct DivisionByZeroError: Error {}\n\n\n/// A function that throws a DivisionByZeroError if `current` provided by the TryScan publisher is zero.\nfunc myThrowingFunction(_ lastValue: Int, _ currentValue: Int) throws -> Int {\n    guard currentValue != 0 else { throw DivisionByZeroError() }\n    return (lastValue + currentValue) / currentValue\n }\n\n\nlet numbers = [1,2,3,4,5,0,6,7,8,9]\ncancellable = numbers.publisher\n    .tryScan(10) { try myThrowingFunction($0, $1) }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"11 6 3 1 1 -1 failure(DivisionByZeroError())\".\n\n\nIf the closure throws an error, the publisher fails with the error.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "tryFilter(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/tryfilter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value that indicated whether to republish the element or throws an error.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nUse tryFilter(_:) to filter elements evaluated in an error-throwing closure. If the isIncluded closure throws an error, the publisher fails with that error.\n\nIn the example below, tryFilter(_:) checks to see if the element provided by the publisher is zero, and throws a ZeroError before terminating the publisher with the thrown error. Otherwise, it republishes the element only if it\u2019s even:\n\nstruct ZeroError: Error {}\n\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\ncancellable = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"2 4 failure(DivisionByZeroError())\".\n\nSee Also\nFiltering Elements\nfunc filter((Output) -> Bool) -> Optional<Output>.Publisher\nfunc compactMap<T>((Output) -> T?) -> Optional<T>.Publisher\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Just<Output>\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryRemoveDuplicates(by: (Output, Output) throws -> Bool) -> Result<Output, Error>.Publisher\nfunc replaceEmpty(with: Output) -> Just<Output>\nfunc replaceError(with: Output) -> Just<Output>"
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/subscribe(_:)-3ebfm",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this publisher. After attaching, the subscriber can start to receive values.\n\nDiscussion\n\nAlways call this function instead of receive(subscriber:). Adopters of Publisher must implement receive(subscriber:). The implementation of subscribe(_:) provided by Publisher calls through to receive(subscriber:).\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "receive(subscriber:)",
        "url": "https://developer.apple.com/documentation/combine/future/receive(subscriber:)",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this Publisher, after which it can receive values.\n\nDiscussion\n\nImplementations of Publisher must implement this method.\n\nThe provided implementation of subscribe(_:)calls this method.\n\nSee Also\nWorking with Subscribers\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "tryMax(by:)",
        "url": "https://developer.apple.com/documentation/combine/record/trymax(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMax(by:) to determine the maximum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMax(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\ncancellable = numbers.publisher\n    .tryMax { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first > second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: completion: failure(IllegalValueError())\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "collect()",
        "url": "https://developer.apple.com/documentation/combine/record/collect()",
        "html": "Return Value\n\nA publisher that collects all received items and returns them as an array upon completion.\n\nDiscussion\n\nUse collect() to gather elements into an array that the operator emits after the upstream publisher finishes.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThis publisher requests an unlimited number of elements from the upstream publisher and uses an unbounded amount of memory to store the received values. The publisher may exert memory pressure on the system for very large sets of elements.\n\nThe collect() operator only sends the collected array to its downstream receiver after a request whose demand is greater than 0 items. Otherwise, collect() waits until it receives a non-zero request.\n\nIn the example below, an Integer range is a publisher that emits an array of integers:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\nSee Also\nReducing Elements\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/flatmap(maxpublishers:_:)-5k6a8",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/flatmap(maxpublishers:_:)-q20b",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nDiscussion\n\nCombine\u2018s flatMap(maxPublishers:_:) operator performs a similar function to the doc://com.apple.documentation/documentation/Swift/Sequence/2905332-flatmap operator in the Swift standard library, but turns the elements from one kind of publisher into a new publisher that is sent to subscribers. Use flatMap(maxPublishers:_:) when you want to create a new series of events for downstream subscribers based on the received value. The closure creates the new Publisher based on the received value. The new Publisher can emit more than one event, and successful completion of the new Publisher does not complete the overall stream. Failure of the new Publisher causes the overall stream to fail.\n\nIn the example below, a PassthroughSubject publishes WeatherStation elements. The flatMap(maxPublishers:_:) receives each element, creates a URL from it, and produces a new URLSession.DataTaskPublisher, which will publish the data loaded from that URL.\n\npublic struct WeatherStation {\n    public let stationID: String\n}\n\n\nvar weatherPublisher = PassthroughSubject<WeatherStation, URLError>()\n\n\ncancellable = weatherPublisher.flatMap { station -> URLSession.DataTaskPublisher in\n    let url = URL(string:\"https://weatherapi.example.com/stations/\\(station.stationID)/observations/latest\")!\n    return URLSession.shared.dataTaskPublisher(for: url)\n}\n.sink(\n    receiveCompletion: { completion in\n        // Handle publisher completion (normal or error).\n    },\n    receiveValue: {\n        // Process the received data.\n    }\n )\n\n\nweatherPublisher.send(WeatherStation(stationID: \"KSFO\")) // San Francisco, CA\nweatherPublisher.send(WeatherStation(stationID: \"EGLC\")) // London, UK\nweatherPublisher.send(WeatherStation(stationID: \"ZBBB\")) // Beijing, CN\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/flatmap(maxpublishers:_:)-917dd",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "merge(with:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/merge(with:_:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nh\n\nAn eighth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\nlet pubH = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF, pubG, pubH)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\npubH.send(1000)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\npubH.send(1001)\n\n\n//Prints: \"1 40 90 -1 33 44 54 1000 2 50 100 -2 33 33 54 1001\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "zip(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/zip(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from four upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:_:) to return a new publisher that combines the elements from three other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, the PassthroughSubject publishers, numbersPub, fractionsPub, lettersPub, and emojiPub emit values. The zip(_:_:_:_:) operator receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times and prints out the value in fractionsPub.\n\nlet numbersPub = PassthroughSubject<Int, Never>()      // first publisher\nlet lettersPub = PassthroughSubject<String, Never>()   // second\nlet emojiPub = PassthroughSubject<String, Never>()     // third\nlet fractionsPub  = PassthroughSubject<Double, Never>()// fourth\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub) { anInt, aLetter, anEmoji, aFraction  in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt)) \\(aFraction)\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:          emojiPub:          zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:\"\ud83d\ude00\"      zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"      emojiPub:          zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"      emojiPub:          zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n// Prints:\n//1 \ud83d\ude00 A 0.1\n//2 \ud83e\udd70\ud83e\udd70 BB 0.8\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/zip(_:_:_:)-nvtb",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from three upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from two other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject that emit values; zip(_:_:_:) receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(letters, emoji) { anInt, aLetter, anEmoji in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt))\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:        emojiPub:            zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"    emojiPub:\"\ud83d\ude00\"        zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:        emojiPub:\"\ud83d\ude00\", \"\ud83e\udd70\"  zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n\n\n// Prints:\n// \ud83d\ude00 A\n// \ud83e\udd70\ud83e\udd70 BB\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/zip(_:_:)-5zkuu",
        "html": "Parameters\nother\n\nAnother publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from two upstream publishers.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two publishers using a transformation you specify to publish a new value to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, PassthroughSubject instances numbersPub and lettersPub emit values; zip(_:_:) receives the oldest value from each publisher, uses the Int from numbersPub and publishes a string that repeats the String from lettersPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\ncancellable = numbersPub\n    .zip(lettersPub) { anInt, aLetter in\n        String(repeating: aLetter, count: anInt)\n    }\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:       zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:       zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:       zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"   zip output: \"A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"   zip output: \"BB\"\n// Prints:\n//  A\n//  BB\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/zip(_:_:)-5eo4z",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two additional publishers to publish a tuple to the downstream. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject; zip(_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:          emojiPub:        zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"      emojiPub: \"\ud83d\ude00\"   zip output: (1, \"A\", \"\ud83d\ude00\")\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:          emojiPub:        zip output: (2, \"B\", \"\ud83e\udd70\")\n\n\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\")\n//  (2, \"B\", \"\ud83e\udd70\")\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "merge(with:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/merge(with:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\n let pubA = PassthroughSubject<Int, Never>()\n let pubB = PassthroughSubject<Int, Never>()\n let pubC = PassthroughSubject<Int, Never>()\n let pubD = PassthroughSubject<Int, Never>()\n let pubE = PassthroughSubject<Int, Never>()\n\n\n cancellable = pubA\n     .merge(with: pubB, pubC, pubD, pubE)\n     .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\n pubA.send(1)\n pubB.send(40)\n pubC.send(90)\n pubD.send(-1)\n pubE.send(33)\n pubA.send(2)\n pubB.send(50)\n pubC.send(100)\n pubD.send(-2)\n pubE.send(33)\n\n\n // Prints: \"1 40 90 -1 33 2 50 100 -2 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/merge(with:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\n\n\n// Prints: \"1 40 90 -1 2 50 100 -2 \"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/combinelatest(_:_:_:)-5hds1",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, combineLatest(_:_:_:) receives input from any of the publishers, combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n//\n// Prints:\n//  Result: (2, 2, 9, 1).\n//  Result: (3, 2, 9, 1).\n//  Result: (3, 12, 9, 1).\n//  Result: (13, 12, 9, 1).\n//  Result: (13, 12, 19, 1).\n\n\nIf any individual publisher of the combined set terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/record/combinelatest(_:_:)-1tw",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest<P,T>(_:) to combine the current and one additional publisher and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn the example below, combineLatest() receives the most-recent values published by the two publishers, it multiplies them together, and republishes the result:\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2) { (first, second) in\n        return first * second\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(9)\npub1.send(3)\npub2.send(12)\npub1.send(13)\n//\n// Prints:\n//Result: 4.    (pub1 latest = 2, pub2 latest = 2)\n//Result: 18.   (pub1 latest = 9, pub2 latest = 2)\n//Result: 6.    (pub1 latest = 3, pub2 latest = 2)\n//Result: 36.   (pub1 latest = 3, pub2 latest = 12)\n//Result: 156.  (pub1 latest = 13, pub2 latest = 12)\n\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/combinelatest(_:)",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest(_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To pair elements from multiple publishers, use zip(_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn this example, PassthroughSubject pub1 and also pub2 emit values; as combineLatest(_:) receives input from either upstream publisher, it combines the latest value from each publisher into a tuple and publishes it.\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(3)\npub1.send(45)\npub2.send(22)\n\n\n// Prints:\n//    Result: (2, 2).    // pub1 latest = 2, pub2 latest = 2\n//    Result: (3, 2).    // pub1 latest = 3, pub2 latest = 2\n//    Result: (45, 2).   // pub1 latest = 45, pub2 latest = 2\n//    Result: (45, 22).  // pub1 latest = 45, pub2 latest = 22\n\n\nWhen all upstream publishers finish, this publisher finishes. If an upstream publisher never publishes a value, this publisher never finishes.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "tryLast(where:)",
        "url": "https://developer.apple.com/documentation/combine/record/trylast(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse tryLast(where:) when you need to republish the last element that satisfies an error-throwing closure you specify. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a publisher emits the last element that satisfies the error-throwing closure, then finishes normally:\n\nstruct RangeError: Error {}\n\n\nlet numbers = [-62, 1, 6, 10, 9, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .tryLast {\n        guard 0 != 0  else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n// Prints: \"5 completion: finished\"\n// If instead the numbers array had contained a `0`, the `tryLast` operator would terminate publishing with a RangeError.\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)",
        "url": "https://developer.apple.com/documentation/combine/just/breakpoint(receivesubscription:receiveoutput:receivecompletion:)",
        "html": "Parameters\nreceiveSubscription\n\nA closure that executes when the publisher receives a subscription. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveOutput\n\nA closure that executes when the publisher receives a value. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveCompletion\n\nA closure that executes when the publisher receives a completion. Return true from this closure to raise SIGTRAP, or false to continue.\n\nReturn Value\n\nA publisher that raises a debugger signal when one of the provided closures returns true.\n\nDiscussion\n\nUse breakpoint(receiveSubscription:receiveOutput:receiveCompletion:) to examine one or more stages of the subscribe/publish/completion process and stop in the debugger, based on conditions you specify. When any of the provided closures returns true, this operator raises the SIGTRAP signal to stop the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn the example below, a PassthroughSubject publishes strings to a breakpoint republisher. When the breakpoint receives the string \u201cDEBUGGER\u201d, it returns true, which stops the app in the debugger.\n\nlet publisher = PassthroughSubject<String?, Never>()\ncancellable = publisher\n    .breakpoint(\n        receiveOutput: { value in return value == \"DEBUGGER\" }\n    )\n    .sink { print(\"\\(String(describing: $0))\" , terminator: \" \") }\n\n\npublisher.send(\"DEBUGGER\")\n\n\n// Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n// Depending on your specific environment, the console messages may\n// also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "catch(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/catch(_:)",
        "html": "Parameters\nhandler\n\nA closure that accepts the upstream failure as input and returns a publisher to replace the upstream publisher.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\n\nDiscussion\n\nUse catch() to replace an error from an upstream publisher with a new publisher.\n\nIn the example below, the catch() operator handles the SimpleError thrown by the upstream publisher by replacing the error with a Just publisher. This continues the stream by publishing a single value and completing normally.\n\nstruct SimpleError: Error {}\nlet numbers = [5, 4, 3, 2, 1, 0, 9, 8, 7, 6]\ncancellable = numbers.publisher\n    .tryLast(where: {\n        guard $0 != 0 else {throw SimpleError()}\n        return true\n    })\n    .catch({ (error) in\n        Just(-1)\n    })\n    .sink { print(\"\\($0)\") }\n    // Prints: -1\n\n\nBackpressure note: This publisher passes through request and cancel to the upstream. After receiving an error, the publisher sends sends any unfulfilled demand to the new Publisher. SeeAlso: replaceError\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Just<Output>"
    },
    {
        "title": "switchToLatest()",
        "url": "https://developer.apple.com/documentation/combine/just/switchtolatest()",
        "html": "Discussion\n\nThis operator works with an upstream publisher of publishers, flattening the stream of elements to appear as if they were coming from a single stream of elements. It switches the inner publisher as new ones arrive but keeps the outer publisher constant for downstream subscribers.\n\nWhen this operator receives a new publisher from the upstream publisher, it cancels its previous subscription. Use this feature to prevent earlier publishers from performing unnecessary work, such as creating network request publishers from frequently updating user interface publishers.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify."
    },
    {
        "title": "merge(with:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/merge(with:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\n\n\n//Prints: \"1 40 90 -1 33 44 2 50 100 -2 33 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "print(_:to:)",
        "url": "https://developer.apple.com/documentation/combine/just/print(_:to:)",
        "html": "Parameters\nprefix\n\nA string \u2014- which defaults to empty -\u2014 with which to prefix all log messages.\n\nstream\n\nA stream for text output that receives messages, and which directs output to the console by default. A custom stream can be used to log messages to other destinations.\n\nReturn Value\n\nA publisher that prints log messages for all publishing events.\n\nDiscussion\n\nUse print(_:to:) to log messages the console.\n\nIn the example below, log messages are printed on the console:\n\nlet integers = (1...2)\ncancellable = integers.publisher\n   .print(\"Logged a message\", to: nil)\n   .sink { _ in }\n\n\n// Prints:\n//  Logged a message: receive subscription: (1..<2)\n//  Logged a message: request unlimited\n//  Logged a message: receive value: (1)\n//  Logged a message: receive finished\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur."
    },
    {
        "title": "buffer(size:prefetch:whenFull:)",
        "url": "https://developer.apple.com/documentation/combine/just/buffer(size:prefetch:whenfull:)",
        "html": "Parameters\nsize\n\nThe maximum number of elements to store.\n\nprefetch\n\nThe strategy to initially populate the buffer.\n\nwhenFull\n\nThe action to take when the buffer becomes full.\n\nReturn Value\n\nA publisher that buffers elements received from an upstream publisher.\n\nDiscussion\n\nUse buffer(size:prefetch:whenFull:) to collect a specific number of elements from an upstream publisher before republishing them to the downstream subscriber according to the Publishers.BufferingStrategy and Publishers.PrefetchStrategy strategy you specify.\n\nIf the publisher completes before reaching the size threshold, it buffers the elements and publishes them downstream prior to completion."
    },
    {
        "title": "removeDuplicates()",
        "url": "https://developer.apple.com/documentation/combine/just/removeduplicates()-4pqk0",
        "html": "Return Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates() to remove repeating elements from an upstream publisher. This operator has a two-element memory: the operator uses the current and previously published elements as the basis for its comparison.\n\nIn the example below, removeDuplicates() triggers on the doubled, tripled, and quadrupled occurrences of 1, 3, and 4 respectively. Because the two-element memory considers only the current element and the previous element, the operator prints the final 0 in the example data since its immediate predecessor is 4.\n\nlet numbers = [0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 0]\ncancellable = numbers.publisher\n    .removeDuplicates()\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 0\"\n"
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/zip(_:_:)-mjul",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two additional publishers to publish a tuple to the downstream. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject; zip(_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:          emojiPub:        zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"      emojiPub: \"\ud83d\ude00\"   zip output: (1, \"A\", \"\ud83d\ude00\")\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:          emojiPub:        zip output: (2, \"B\", \"\ud83e\udd70\")\n\n\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\")\n//  (2, \"B\", \"\ud83e\udd70\")\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "receive(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/just/receive(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler the publisher uses for element delivery.\n\noptions\n\nScheduler options used to customize element delivery.\n\nReturn Value\n\nA publisher that delivers elements using the specified scheduler.\n\nDiscussion\n\nYou use the receive(on:options:) operator to receive results and completion on a specific scheduler, such as performing UI work on the main run loop. In contrast with subscribe(on:options:), which affects upstream messages, receive(on:options:) changes the execution context of downstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes jsonPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes labelUpdater to receive elements and completion on RunLoop.main.\n\nlet jsonPublisher = MyJSONLoaderPublisher() // Some publisher.\nlet labelUpdater = MyLabelUpdateSubscriber() // Some subscriber that updates the UI.\n\n\njsonPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(labelUpdater)\n\n\nPrefer receive(on:options:) over explicit use of dispatch queues when performing work in subscribers. For example, instead of the following pattern:\n\npub.sink {\n    DispatchQueue.main.async {\n        // Do something.\n    }\n}\n\n\nUse this pattern instead:\n\npub.receive(on: DispatchQueue.main).sink {\n    // Do something.\n}\n\n\nNote\n\nreceive(on:options:) doesn\u2019t affect the scheduler used to call the subscriber\u2019s receive(subscription:) method.\n\nSee Also\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations."
    },
    {
        "title": "tryPrefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/just/tryprefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value indicating whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate throws or indicates publishing should finish.\n\nDiscussion\n\nUse tryPrefix(while:) to emit values from the upstream publisher that meet a condition you specify in an error-throwing closure. The publisher finishes when the closure returns false. If the closure throws an error, the publisher fails with that error.\n\nstruct OutOfRangeError: Error {}\n\n\nlet numbers = (0...10).reversed()\ncancellable = numbers.publisher\n    .tryPrefix {\n        guard $0 != 0 else {throw OutOfRangeError()}\n        return $0 <= numbers.max()!\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"10 9 8 7 6 5 4 3 2 1 completion: failure(OutOfRangeError()) \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Optional<Output>.Publisher\nfunc drop(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc append<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prefix(Int) -> Optional<Output>.Publisher\nfunc prefix(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "zip(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/zip(_:)",
        "html": "Parameters\nother\n\nAnother publisher.\n\nReturn Value\n\nA publisher that emits pairs of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:) to combine the latest elements from two publishers and emit a tuple to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together as a tuple to the subscriber.\n\nMuch like a zipper or zip fastener on a piece of clothing pulls together rows of teeth to link the two sides, zip(_:) combines streams from two different publishers by linking pairs of elements from each side.\n\nIn this example, numbers and letters are PassthroughSubjects that emit values; once zip(_:) receives one value from each, it publishes the pair as a tuple to the downstream subscriber. It then waits for the next pair of values.\n\n let numbersPub = PassthroughSubject<Int, Never>()\n let lettersPub = PassthroughSubject<String, Never>()\n\n\n cancellable = numbersPub\n     .zip(lettersPub)\n     .sink { print(\"\\($0)\") }\n numbersPub.send(1)    // numbersPub: 1      lettersPub:        zip output: <none>\n numbersPub.send(2)    // numbersPub: 1,2    lettersPub:        zip output: <none>\n letters.send(\"A\")     // numbers: 1,2       letters:\"A\"        zip output: <none>\n numbers.send(3)       // numbers: 1,2,3     letters:           zip output: (1,\"A\")\n letters.send(\"B\")     // numbers: 1,2,3     letters: \"B\"       zip output: (2,\"B\")\n\n\n // Prints:\n //  (1, \"A\")\n //  (2, \"B\")\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "multicast(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/multicast(_:)",
        "html": "Parameters\ncreateSubject\n\nA closure to create a new Subject each time a subscriber attaches to the multicast publisher.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(subject:), this method produces a publisher that creates a separate Subject for each subscriber.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(_:) operator whose closure creates a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast { PassthroughSubject<(String, Int), Never>() }\n\n\ncancellable1 = pub\n   .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n   .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 9))\n// Stream 2 received: (\"First\", 9)\n// Stream 1 received: (\"First\", 9)\n// Random: receive value: ((\"Second\", 46))\n// Stream 2 received: (\"Second\", 46)\n// Stream 1 received: (\"Second\", 46)\n// Random: receive value: ((\"Third\", 26))\n// Stream 2 received: (\"Third\", 26)\n// Stream 1 received: (\"Third\", 26)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "removeDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/record/removeduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of the current and previously published elements using a closure you provide.\n\nUse the removeDuplicates(by:) operator when comparing types that don\u2019t themselves implement Equatable, or if you need to compare values differently than the type\u2019s Equatable implementation.\n\nIn the example below, the removeDuplicates(by:) functionality triggers when the x property of the current and previous elements are equal, otherwise the operator publishes the current Point to the downstream subscriber:\n\nstruct Point {\n    let x: Int\n    let y: Int\n}\n\n\nlet points = [Point(x: 0, y: 0), Point(x: 0, y: 1),\n              Point(x: 1, y: 1), Point(x: 2, y: 1)]\ncancellable = points.publisher\n    .removeDuplicates { prev, current in\n        // Considers points to be duplicate if the x coordinate\n        // is equal, and ignores the y coordinate\n        prev.x == current.x\n    }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: Point(x: 0, y: 0) Point(x: 1, y: 1) Point(x: 2, y: 1)\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/subscribe(_:)-3svzx",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this publisher. After attaching, the subscriber can start to receive values.\n\nDiscussion\n\nAlways call this function instead of receive(subscriber:). Adopters of Publisher must implement receive(subscriber:). The implementation of subscribe(_:) provided by Publisher calls through to receive(subscriber:).\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "replaceError(with:)",
        "url": "https://developer.apple.com/documentation/combine/record/replaceerror(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher fails.\n\nReturn Value\n\nA publisher that replaces an error from the upstream publisher with the provided output element.\n\nDiscussion\n\nIf the upstream publisher fails with an error, this publisher emits the provided element, then finishes normally.\n\nIn the example below, a publisher of strings fails with a MyError instance, which sends a failure completion downstream. The replaceError(with:) operator handles the failure by publishing the string (replacement element) and completing normally.\n\nstruct MyError: Error {}\nlet fail = Fail<String, MyError>(error: MyError())\ncancellable = fail\n    .replaceError(with: \"(replacement element)\")\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"(replacement element) finished\".\n\n\nThis replaceError(with:) functionality is useful when you want to handle an error by sending a single replacement element and end the stream. Use catch(_:) to recover from an error and provide a replacement publisher to continue providing elements to the downstream subscriber.\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element."
    },
    {
        "title": "tryReduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/tryreduce(_:_:)-40io",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nAn error-throwing closure that takes the previously-accumulated value and the next element from the upstream publisher to produce a new value.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes.\n\nDiscussion\n\nUse tryReduce(_:_:) to collect a stream of elements and produce an accumulated value based on an error-throwing closure you provide. If the closure throws an error, the publisher fails and passes the error to its subscriber.\n\nIn the example below, the publisher\u2019s 0 element causes the myDivide(_:_:) function to throw an error and publish the doc://com.apple.documentation/documentation/Swift/Double/1641611-nan result:\n\nstruct DivisionByZeroError: Error {}\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n    guard divisor != 0 else { throw DivisionByZeroError() }\n    return dividend / divisor\n}\n\n\nvar numbers: [Double] = [5, 4, 3, 2, 1, 0]\nnumbers.publisher\n    .tryReduce(numbers.first!, { accum, next in try myDivide(accum, next) })\n    .catch({ _ in Just(Double.nan) })\n    .sink { print(\"\\($0)\") }\n"
    },
    {
        "title": "replaceEmpty(with:)",
        "url": "https://developer.apple.com/documentation/combine/record/replaceempty(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher finishes without emitting any elements.\n\nReturn Value\n\nA publisher that replaces an empty stream with the provided output element.\n\nDiscussion\n\nUse replaceEmpty(with:) to provide a replacement element if the upstream publisher finishes without producing any elements.\n\nIn the example below, the empty Double array publisher doesn\u2019t produce any elements, so replaceEmpty(with:) publishes Double.nan and finishes normally.\n\nlet numbers: [Double] = []\ncancellable = numbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints \"(nan)\".\n\n\nConversely, providing a non-empty publisher publishes all elements and the publisher then terminates normally:\n\nlet otherNumbers: [Double] = [1.0, 2.0, 3.0]\ncancellable2 = otherNumbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: 1.0 2.0 3.0\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/zip(_:_:)-4z882",
        "html": "Parameters\nother\n\nAnother publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from two upstream publishers.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two publishers using a transformation you specify to publish a new value to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, PassthroughSubject instances numbersPub and lettersPub emit values; zip(_:_:) receives the oldest value from each publisher, uses the Int from numbersPub and publishes a string that repeats the String from lettersPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\ncancellable = numbersPub\n    .zip(lettersPub) { anInt, aLetter in\n        String(repeating: aLetter, count: anInt)\n    }\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:       zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:       zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:       zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"   zip output: \"A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"   zip output: \"BB\"\n// Prints:\n//  A\n//  BB\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "removeDuplicates()",
        "url": "https://developer.apple.com/documentation/combine/record/removeduplicates()",
        "html": "Return Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates() to remove repeating elements from an upstream publisher. This operator has a two-element memory: the operator uses the current and previously published elements as the basis for its comparison.\n\nIn the example below, removeDuplicates() triggers on the doubled, tripled, and quadrupled occurrences of 1, 3, and 4 respectively. Because the two-element memory considers only the current element and the previous element, the operator prints the final 0 in the example data since its immediate predecessor is 4.\n\nlet numbers = [0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 0]\ncancellable = numbers.publisher\n    .removeDuplicates()\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 0\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/compactmap(_:)",
        "html": "Parameters\ntransform\n\nA closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of the calling the supplied closure.\n\nDiscussion\n\nCombine\u2019s compactMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/2950916-compactmap in the Swift standard library: the compactMap(_:) operator in Combine removes nil elements in a publisher\u2019s stream and republishes non-nil elements to the downstream subscriber.\n\nThe example below uses a range of numbers as the source for a collection based publisher. The compactMap(_:) operator consumes each element from the numbers publisher attempting to access the dictionary using the element as the key. If the example\u2019s dictionary returns a nil, due to a non-existent key, compactMap(_:) filters out the nil (missing) elements.\n\nlet numbers = (0...5)\nlet romanNumeralDict: [Int : String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ncancellable = numbers.publisher\n    .compactMap { romanNumeralDict[$0] }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"I II III V\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "filter(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/filter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value indicating whether to republish the element.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nCombine\u2019s filter(_:) operator performs an operation similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018365-filter in the Swift Standard Library: it uses a closure to test each element to determine whether to republish the element to the downstream subscriber.\n\nThe following example, uses a filter operation that receives an Int and only republishes a value if it\u2019s even.\n\nlet numbers: [Int] = [1, 2, 3, 4, 5]\ncancellable = numbers.publisher\n    .filter { $0 % 2 == 0 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 4\"\n\nSee Also\nFiltering Elements\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryFilter(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/tryfilter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value that indicated whether to republish the element or throws an error.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nUse tryFilter(_:) to filter elements evaluated in an error-throwing closure. If the isIncluded closure throws an error, the publisher fails with that error.\n\nIn the example below, tryFilter(_:) checks to see if the element provided by the publisher is zero, and throws a ZeroError before terminating the publisher with the thrown error. Otherwise, it republishes the element only if it\u2019s even:\n\nstruct ZeroError: Error {}\n\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\ncancellable = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"2 4 failure(DivisionByZeroError())\".\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "timeout(_:scheduler:options:customError:)",
        "url": "https://developer.apple.com/documentation/combine/future/timeout(_:scheduler:options:customerror:)",
        "html": "Parameters\ninterval\n\nThe maximum time interval the publisher can go without emitting an element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to deliver events.\n\noptions\n\nScheduler options that customize the delivery of elements.\n\ncustomError\n\nA closure that executes if the publisher times out. The publisher sends the failure returned by this closure to the subscriber as the reason for termination.\n\nReturn Value\n\nA publisher that terminates if the specified interval elapses with no events received from the upstream publisher.\n\nDiscussion\n\nUse timeout(_:scheduler:options:customError:) to terminate a publisher if an element isn\u2019t delivered within a timeout interval you specify.\n\nIn the example below, a PassthroughSubject publishes String elements and is configured to time out if no new elements are received within its TIME_OUT window of 5 seconds. A single value is published after the specified 2-second WAIT_TIME, after which no more elements are available; the publisher then times out and completes normally.\n\nvar WAIT_TIME : Int = 2\nvar TIMEOUT_TIME : Int = 5\n\n\nlet subject = PassthroughSubject<String, Never>()\nlet cancellable = subject\n    .timeout(.seconds(TIMEOUT_TIME), scheduler: DispatchQueue.main, options: nil, customError:nil)\n    .sink(\n          receiveCompletion: { print (\"completion: \\($0) at \\(Date())\") },\n          receiveValue: { print (\"value: \\($0) at \\(Date())\") }\n     )\n\n\nDispatchQueue.main.asyncAfter(deadline: .now() + .seconds(WAIT_TIME),\n                              execute: { subject.send(\"Some data - sent after a delay of \\(WAIT_TIME) seconds\") } )\n\n\n// Prints: value: Some data - sent after a delay of 2 seconds at 2020-03-10 23:47:59 +0000\n//         completion: finished at 2020-03-10 23:48:04 +0000\n\n\nIf customError is nil, the publisher completes normally; if you provide a closure for the customError argument, the upstream publisher is instead terminated upon timeout, and the error is delivered to the downstream.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval."
    },
    {
        "title": "setFailureType(to:)",
        "url": "https://developer.apple.com/documentation/combine/record/setfailuretype(to:)",
        "html": "Parameters\nfailureType\n\nThe Failure type presented by this publisher.\n\nReturn Value\n\nA publisher that appears to send the specified failure type.\n\nDiscussion\n\nUse setFailureType(to:) when you need set the error type of a publisher that cannot fail.\n\nConversely, if the upstream can fail, you would use mapError(_:) to provide instructions on converting the error types to needed by the downstream publisher\u2019s inputs.\n\nThe following example has two publishers with mismatched error types: pub1\u2019s error type is Never, and pub2\u2019s error type is Error. Because of the mismatch, the combineLatest(_:) operator requires that pub1 use setFailureType(to:) to make it appear that pub1 can produce the Error type, like pub2 can.\n\nlet pub1 = [0, 1, 2, 3, 4, 5].publisher\nlet pub2 = CurrentValueSubject<Int, Error>(0)\nlet cancellable = pub1\n    .setFailureType(to: Error.self)\n    .combineLatest(pub2)\n    .sink(\n        receiveCompletion: { print (\"completed: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\")}\n     )\n\n\n// Prints: \"value: (5, 0)\".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure."
    },
    {
        "title": "tryMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/trymap(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element. If the closure throws an error, the publisher fails with the thrown error.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s tryMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use tryMap(_:) to transform from one kind of element to another, and to terminate publishing when the map\u2019s closure throws an error.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A tryMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the tryMap(_:)\u2019s closure fails to look up a Roman numeral, it throws an error. The tryMap(_:) operator catches this error and terminates publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from:Int) throws -> String {\n    let romanNumeralDict: [Int : String] =\n        [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\n    guard let numeral = romanNumeralDict[from] else {\n        throw ParseError()\n    }\n    return numeral\n}\nlet numbers = [5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryMap { try romanNumeral(from: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"V IV III II I completion: failure(ParseError())\"\n\n\nIf your closure doesn\u2019t throw, use map(_:) instead.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "receive(subscriber:)",
        "url": "https://developer.apple.com/documentation/combine/record/receive(subscriber:)",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this Publisher, after which it can receive values.\n\nDiscussion\n\nImplementations of Publisher must implement this method.\n\nThe provided implementation of subscribe(_:)calls this method.\n\nSee Also\nWorking with Subscribers\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/map(_:)-7n1o3",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s map(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use map(_:) to transform from one kind of element to another.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A map(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the map(_:)\u2019s closure fails to look up a Roman numeral, it returns the string (unknown).\n\nlet numbers = [5, 4, 3, 2, 1, 0]\nlet romanNumeralDict: [Int : String] =\n   [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\ncancellable = numbers.publisher\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"V IV III II I (unknown)\"\n\n\nIf your closure can throw an error, use Combine\u2019s tryMap(_:) operator instead.\n\nSee Also\nMapping Elements\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "tryCompactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/trycompactmap(_:)",
        "html": "Parameters\ntransform\n\nAn error-throwing closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of calling the supplied closure.\n\nDiscussion\n\nUse tryCompactMap(_:) to remove nil elements from a publisher\u2019s stream based on an error-throwing closure you provide. If the closure throws an error, the publisher cancels the upstream publisher and sends the thrown error to the downstream subscriber as a Failure.\n\nThe following example uses an array of numbers as the source for a collection-based publisher. A tryCompactMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform the numbers from its Arabic to Roman numerals, as an optional String.\n\nIf the closure called by tryCompactMap(_:) fails to look up a Roman numeral, it returns the optional String (unknown).\n\nIf the closure called by tryCompactMap(_:) determines the input is 0, it throws an error. The tryCompactMap(_:) operator catches this error and stops publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from: Int) throws -> String? {\n    let romanNumeralDict: [Int : String] =\n        [1: \"I\", 2: \"II\", 3: \"III\", 4: \"IV\", 5: \"V\"]\n    guard from != 0 else { throw ParseError() }\n    return romanNumeralDict[from]\n}\nlet numbers = [6, 5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryCompactMap { try romanNumeral(from: $0) }\n    .sink(\n          receiveCompletion: { print (\"\\($0)\") },\n          receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"(Unknown) V IV III II I failure(ParseError())\"\n\nSee Also\nFiltering Elements\nfunc filter((Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Output) -> T?) -> Optional<T>.Publisher\nfunc removeDuplicates() -> Just<Output>\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryRemoveDuplicates(by: (Output, Output) throws -> Bool) -> Result<Output, Error>.Publisher\nfunc replaceEmpty(with: Output) -> Just<Output>\nfunc replaceError(with: Output) -> Just<Output>"
    },
    {
        "title": "scan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/scan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nA closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse scan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value.\n\nThe following example logs a running total of all values received from the sequence publisher.\n\nlet range = (0...5)\ncancellable = range.publisher\n    .scan(0) { return $0 + $1 }\n    .sink { print (\"\\($0)\", terminator: \" \") }\n // Prints: \"0 1 3 6 10 15 \".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "debounce(for:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/just/debounce(for:scheduler:options:)",
        "html": "Parameters\ndueTime\n\nThe time the publisher should wait before publishing an element.\n\nscheduler\n\nThe scheduler on which this publisher delivers elements\n\noptions\n\nScheduler options that customize this publisher\u2019s delivery of elements.\n\nReturn Value\n\nA publisher that publishes events only after a specified time elapses.\n\nDiscussion\n\nUse the debounce(for:scheduler:options:) operator to control the number of values and time between delivery of values from the upstream publisher. This operator is useful to process bursty or high-volume event streams where you need to reduce the number of values delivered to the downstream to a rate you specify.\n\nIn this example, a PassthroughSubject publishes elements on a schedule defined by the bounces array. The array is composed of tuples representing a value sent by the PassthroughSubject, and a TimeInterval ranging from one-quarter second up to 2 seconds that drives a delivery timer. As the queue builds, elements arriving faster than one-half second debounceInterval are discarded, while elements arriving at a rate slower than debounceInterval are passed through to the sink(receiveValue:) operator.\n\nlet bounces:[(Int,TimeInterval)] = [\n    (0, 0),\n    (1, 0.25),  // 0.25s interval since last index\n    (2, 1),     // 0.75s interval since last index\n    (3, 1.25),  // 0.25s interval since last index\n    (4, 1.5),   // 0.25s interval since last index\n    (5, 2)      // 0.5s interval since last index\n]\n\n\nlet subject = PassthroughSubject<Int, Never>()\ncancellable = subject\n    .debounce(for: .seconds(0.5), scheduler: RunLoop.main)\n    .sink { index in\n        print (\"Received index \\(index)\")\n    }\n\n\nfor bounce in bounces {\n    DispatchQueue.main.asyncAfter(deadline: .now() + bounce.1) {\n        subject.send(bounce.0)\n    }\n}\n\n\n// Prints:\n//  Received index 1\n//  Received index 4\n//  Received index 5\n\n\n//  Here is the event flow shown from the perspective of time, showing value delivery through the `debounce()` operator:\n\n\n//  Time 0: Send index 0.\n//  Time 0.25: Send index 1. Index 0 was waiting and is discarded.\n//  Time 0.75: Debounce period ends, publish index 1.\n//  Time 1: Send index 2.\n//  Time 1.25: Send index 3. Index 2 was waiting and is discarded.\n//  Time 1.5: Send index 4. Index 3 was waiting and is discarded.\n//  Time 2: Debounce period ends, publish index 4. Also, send index 5.\n//  Time 2.5: Debounce period ends, publish index 5.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "receive(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/future/receive(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler the publisher uses for element delivery.\n\noptions\n\nScheduler options used to customize element delivery.\n\nReturn Value\n\nA publisher that delivers elements using the specified scheduler.\n\nDiscussion\n\nYou use the receive(on:options:) operator to receive results and completion on a specific scheduler, such as performing UI work on the main run loop. In contrast with subscribe(on:options:), which affects upstream messages, receive(on:options:) changes the execution context of downstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes jsonPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes labelUpdater to receive elements and completion on RunLoop.main.\n\nlet jsonPublisher = MyJSONLoaderPublisher() // Some publisher.\nlet labelUpdater = MyLabelUpdateSubscriber() // Some subscriber that updates the UI.\n\n\njsonPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(labelUpdater)\n\n\nPrefer receive(on:options:) over explicit use of dispatch queues when performing work in subscribers. For example, instead of the following pattern:\n\npub.sink {\n    DispatchQueue.main.async {\n        // Do something.\n    }\n}\n\n\nUse this pattern instead:\n\npub.receive(on: DispatchQueue.main).sink {\n    // Do something.\n}\n\n\nNote\n\nreceive(on:options:) doesn\u2019t affect the scheduler used to call the subscriber\u2019s receive(subscription:) method.\n\nSee Also\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations."
    },
    {
        "title": "map(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/map(_:_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of a second property on Output.\n\nkeyPath2\n\nThe key path of a third property on Output.\n\nReturn Value\n\nA publisher that publishes the values of three key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:_:) operator uses the Swift key path syntax to access the die1, die2, and die3 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these three values (as an (Int, Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n    let die3: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6),\n                            die3: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2, \\.die3)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1), \\(values.2) (total \\(values.0 + values.1 + values.2))\")\n    }\n// Prints \"Rolled: 5, 4, 2 (total 11)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple."
    },
    {
        "title": "reduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/reduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nA closure that produces a new value by taking the previously-accumulated value and the next element it receives from the upstream publisher.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes. If reduce(_:_:) receives an error from the upstream publisher, the operator delivers it to the downstream subscriber, the publisher terminates and publishes no value.\n\nDiscussion\n\nUse reduce(_:_:) to collect a stream of elements and produce an accumulated value based on a closure you provide.\n\nIn the following example, the reduce(_:_:) operator collects all the integer values it receives from its upstream publisher:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .reduce(0, { accum, next in accum + next })\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"55\"\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "prefix(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/prefix(_:)",
        "html": "Parameters\nmaxLength\n\nThe maximum number of elements to republish.\n\nReturn Value\n\nA publisher that publishes up to the specified number of elements.\n\nDiscussion\n\nUse prefix(_:) to limit the number of elements republished to the downstream subscriber.\n\nIn the example below, the prefix(_:) operator limits its output to the first two elements before finishing normally:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .prefix(2)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "eraseToAnyPublisher()",
        "url": "https://developer.apple.com/documentation/combine/just/erasetoanypublisher()",
        "html": "Return Value\n\nAn AnyPublisher wrapping this publisher.\n\nDiscussion\n\nUse eraseToAnyPublisher() to expose an instance of AnyPublisher to the downstream subscriber, rather than this publisher\u2019s actual type. This form of type erasure preserves abstraction across API boundaries, such as different modules. When you expose your publishers as the AnyPublisher type, you can change the underlying implementation over time without affecting existing clients.\n\nThe following example shows two types that each have a publisher property. TypeWithSubject exposes this property as its actual type, PassthroughSubject, while TypeWithErasedSubject uses eraseToAnyPublisher() to expose it as an AnyPublisher. As seen in the output, a caller from another module can access TypeWithSubject.publisher as its native type. This means you can\u2019t change your publisher to a different type without breaking the caller. By comparison, TypeWithErasedSubject.publisher appears to callers as an AnyPublisher, so you can change the underlying publisher type at will.\n\npublic class TypeWithSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n}\npublic class TypeWithErasedSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n        .eraseToAnyPublisher()\n}\n\n\n// In another module:\nlet nonErased = TypeWithSubject()\nif let subject = nonErased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast nonErased.publisher.\")\n}\nlet erased = TypeWithErasedSubject()\nif let subject = erased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast erased.publisher.\")\n}\n\n\n// Prints \"Successfully cast nonErased.publisher.\"\n"
    },
    {
        "title": "mapError(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/maperror(_:)-9qdhf",
        "html": "Parameters\ntransform\n\nA closure that takes the upstream failure as a parameter and returns a new error for the publisher to terminate with.\n\nReturn Value\n\nA publisher that replaces any upstream failure with a new error produced by the transform closure.\n\nDiscussion\n\nUse the mapError(_:) operator when you need to replace one error type with another, or where a downstream operator needs the error types of its inputs to match.\n\nThe following example uses a tryMap(_:) operator to divide 1 by each element produced by a sequence publisher. When the publisher produces a 0, the tryMap(_:) fails with a DivisionByZeroError. The mapError(_:) operator converts this into a MyGenericError.\n\nstruct DivisionByZeroError: Error {}\nstruct MyGenericError: Error { var wrappedError: Error }\n\n\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n       guard divisor != 0 else { throw DivisionByZeroError() }\n       return dividend / divisor\n   }\n\n\nlet divisors: [Double] = [5, 4, 3, 2, 1, 0]\ndivisors.publisher\n    .tryMap { try myDivide(1, $0) }\n    .mapError { MyGenericError(wrappedError: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") ,\n        receiveValue: { print (\"value: \\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"0.2 0.25 0.3333333333333333 0.5 1.0 completion: failure(MyGenericError(wrappedError: DivisionByZeroError()))\"\n"
    },
    {
        "title": "encode(encoder:)",
        "url": "https://developer.apple.com/documentation/combine/just/encode(encoder:)",
        "html": "Parameters\nencoder\n\nAn encoder that implements the TopLevelEncoder protocol.\n\nReturn Value\n\nA publisher that encodes received elements using a specified encoder, and publishes the resulting data.\n\nDiscussion\n\nUse encode(encoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to encode an Encodable struct into Data that could be used to make a JSON string (or written to disk as a binary plist in the case of property lists).\n\nIn this example, a PassthroughSubject publishes an Article. The encode(encoder:) operator encodes the properties of the Article struct into a new JSON string according to the Codable protocol adopted by Article. The operator publishes the resulting JSON string to the downstream subscriber. If the encoding operation fails, which can happen in the case of complex properties that can\u2019t be directly transformed into JSON, the stream terminates and the error is passed to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Article, Never>()\nlet cancellable = dataProvider\n    .encode(encoder: JSONEncoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\") },\n          receiveValue: {  data in\n            guard let stringRepresentation = String(data: data, encoding: .utf8) else { return }\n            print(\"Data received \\(data) string representation: \\(stringRepresentation)\")\n    })\n\n\ndataProvider.send(Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: Date()))\n\n\n// Prints: \"Data received 86 bytes string representation: {\"title\":\"My First Article\",\"author\":\"Gita Kumar\",\"pubDate\":606211803.279603}\"\n\nSee Also\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/combinelatest(_:_:)-20das",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest<P,T>(_:) to combine the current and one additional publisher and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn the example below, combineLatest() receives the most-recent values published by the two publishers, it multiplies them together, and republishes the result:\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2) { (first, second) in\n        return first * second\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(9)\npub1.send(3)\npub2.send(12)\npub1.send(13)\n//\n// Prints:\n//Result: 4.    (pub1 latest = 2, pub2 latest = 2)\n//Result: 18.   (pub1 latest = 9, pub2 latest = 2)\n//Result: 6.    (pub1 latest = 3, pub2 latest = 2)\n//Result: 36.   (pub1 latest = 3, pub2 latest = 12)\n//Result: 156.  (pub1 latest = 13, pub2 latest = 12)\n\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/combinelatest(_:)",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest(_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To pair elements from multiple publishers, use zip(_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn this example, PassthroughSubject pub1 and also pub2 emit values; as combineLatest(_:) receives input from either upstream publisher, it combines the latest value from each publisher into a tuple and publishes it.\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(3)\npub1.send(45)\npub2.send(22)\n\n\n// Prints:\n//    Result: (2, 2).    // pub1 latest = 2, pub2 latest = 2\n//    Result: (3, 2).    // pub1 latest = 3, pub2 latest = 2\n//    Result: (45, 2).   // pub1 latest = 45, pub2 latest = 2\n//    Result: (45, 22).  // pub1 latest = 45, pub2 latest = 22\n\n\nWhen all upstream publishers finish, this publisher finishes. If an upstream publisher never publishes a value, this publisher never finishes.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "share()",
        "url": "https://developer.apple.com/documentation/combine/just/share()",
        "html": "Return Value\n\nA class instance that shares elements received from its upstream to multiple subscribers.\n\nDiscussion\n\nThe publisher returned by this operator supports multiple subscribers, all of whom receive unchanged elements and completion states from the upstream publisher.\n\nTip\n\nPublishers.Share is effectively a combination of the Publishers.Multicast and PassthroughSubject publishers, with an implicit autoconnect().\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a share() operator to share the same random number to each of two subscribers. This example uses a delay(for:tolerance:scheduler:options:) operator only to prevent the first subscriber from exhausting the sequence publisher immediately; an asynchronous publisher wouldn\u2019t need this.\n\nlet pub = (1...3).publisher\n    .delay(for: 1, scheduler: DispatchQueue.main)\n    .map( { _ in return Int.random(in: 0...100) } )\n    .print(\"Random\")\n    .share()\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\n\n\n// Prints:\n// Random: receive value: (20)\n// Stream 1 received: 20\n// Stream 2 received: 20\n// Random: receive value: (85)\n// Stream 1 received: 85\n// Stream 2 received: 85\n// Random: receive value: (98)\n// Stream 1 received: 98\n// Stream 2 received: 98\n\n\nWithout the share() operator, stream 1 receives three random values, followed by stream 2 receiving three different random values.\n\nAlso note that Publishers.Share is a class rather than a structure like most other publishers. This means you can use this operator to create a publisher instance that uses reference semantics.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers."
    },
    {
        "title": "collect(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/collect(_:)",
        "html": "Parameters\ncount\n\nThe maximum number of received elements to buffer before publishing.\n\nReturn Value\n\nA publisher that collects up to the specified number of elements, and then publishes them as an array.\n\nDiscussion\n\nUse collect(_:) to emit arrays of at most count elements from an upstream publisher. If the upstream publisher finishes before collecting the specified number of elements, the publisher sends an array of only the items it received. This may be fewer than count elements.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nIn the example below, the collect(_:) operator emits one partial and two full arrays based on the requested collection size of 5:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect(5)\n    .sink { print(\"\\($0), terminator: \" \"\") }\n\n\n// Prints \"[0, 1, 2, 3, 4] [5, 6, 7, 8, 9] [10] \"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Just<[Output]>\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Empty<Output, Just<Output>.Failure>\nfunc reduce<T>(T, (T, Output) -> T) -> Result<T, Just<Output>.Failure>.Publisher\nfunc tryReduce<T>(T, (T, Output) throws -> T) -> Result<T, Error>.Publisher"
    },
    {
        "title": "assign(to:)",
        "url": "https://developer.apple.com/documentation/combine/just/assign(to:)",
        "html": "Parameters\npublished\n\nA property marked with the @Published attribute, which receives and republishes all elements received from the upstream publisher.\n\nDiscussion\n\nUse this operator when you want to receive elements from a publisher and republish them through a property marked with the @Published attribute. The assign(to:) operator manages the life cycle of the subscription, canceling the subscription automatically when the Published instance deinitializes. Because of this, the assign(to:) operator doesn\u2019t return an AnyCancellable that you\u2019re responsible for like assign(to:on:) does.\n\nThe example below shows a model class that receives elements from an internal Timer.TimerPublisher, and assigns them to a @Published property called lastUpdated. Because the to parameter has the inout keyword, you need to use the & operator when calling this method.\n\nclass MyModel: ObservableObject {\n    @Published var lastUpdated: Date = Date()\n    init() {\n         Timer.publish(every: 1.0, on: .main, in: .common)\n             .autoconnect()\n             .assign(to: &$lastUpdated)\n    }\n}\n\n\nIf you instead implemented MyModel with assign(to: lastUpdated, on: self), storing the returned AnyCancellable instance could cause a reference cycle, because the Subscribers.Assign subscriber would hold a strong reference to self. Using assign(to:) solves this problem.\n\nWhile the to parameter uses the inout keyword, this method doesn\u2019t replace a reference type passed to it. Instead, this notation indicates that the operator may modify members of the assigned object, as seen in the following example:\n\n    class MyModel2: ObservableObject {\n        @Published var id: Int = 0\n    }\n    let model2 = MyModel2()\n    Just(100).assign(to: &model2.$id)\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "assertNoFailure(_:file:line:)",
        "url": "https://developer.apple.com/documentation/combine/just/assertnofailure(_:file:line:)",
        "html": "Parameters\nprefix\n\nA string used at the beginning of the fatal error message.\n\nfile\n\nA filename used in the error message. This defaults to #file.\n\nline\n\nA line number used in the error message. This defaults to #line.\n\nReturn Value\n\nA publisher that raises a fatal error when its upstream publisher fails.\n\nDiscussion\n\nUse assertNoFailure() for internal integrity checks that are active during testing. However, it is important to note that, like its Swift counterpart fatalError(_:), the assertNoFailure() operator asserts a fatal exception when triggered during development and testing, and in shipping versions of code.\n\nIn the example below, a CurrentValueSubject publishes the initial and second values successfully. The third value, containing a genericSubjectError, causes the assertNoFailure() operator to assert a fatal exception stopping the process:\n\npublic enum SubjectError: Error {\n    case genericSubjectError\n}\n\n\nlet subject = CurrentValueSubject<String, Error>(\"initial value\")\nsubject\n    .assertNoFailure()\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0).\") }\n    )\n\n\nsubject.send(\"second value\")\nsubject.send(completion: Subscribers.Completion<Error>.failure(SubjectError.genericSubjectError))\n\n\n// Prints:\n//  value: initial value.\n//  value: second value.\n//  The process then terminates in the debugger as the assertNoFailure operator catches the genericSubjectError.\n\nSee Also\nHandling Errors\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Just<Output>"
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/zip(_:_:_:)-2ssme",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from three upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from two other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject that emit values; zip(_:_:_:) receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(letters, emoji) { anInt, aLetter, anEmoji in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt))\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:        emojiPub:            zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"    emojiPub:\"\ud83d\ude00\"        zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:        emojiPub:\"\ud83d\ude00\", \"\ud83e\udd70\"  zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n\n\n// Prints:\n// \ud83d\ude00 A\n// \ud83e\udd70\ud83e\udd70 BB\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/zip(_:_:_:)-2xm0m",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from three other publishers to publish a tuple to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, several PassthroughSubject instances emit values; zip(_:_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\nlet fractionsPub  = PassthroughSubject<Double, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 2,3     lettersPub: \"A\"    emojiPub: \"\ud83d\ude00\"  fractionsPub: 0.1     zip output: (1, \"A\", \"\ud83d\ude00\", 0.1)\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: (2, \"B\", \"\ud83e\udd70\", 0.8)\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\", 0.1)\n//  (2, \"B\", \"\ud83e\udd70\", 0.8)\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "zip(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/zip(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from four upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:_:) to return a new publisher that combines the elements from three other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, the PassthroughSubject publishers, numbersPub, fractionsPub, lettersPub, and emojiPub emit values. The zip(_:_:_:_:) operator receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times and prints out the value in fractionsPub.\n\nlet numbersPub = PassthroughSubject<Int, Never>()      // first publisher\nlet lettersPub = PassthroughSubject<String, Never>()   // second\nlet emojiPub = PassthroughSubject<String, Never>()     // third\nlet fractionsPub  = PassthroughSubject<Double, Never>()// fourth\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub) { anInt, aLetter, anEmoji, aFraction  in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt)) \\(aFraction)\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:          emojiPub:          zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:\"\ud83d\ude00\"      zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"      emojiPub:          zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"      emojiPub:          zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n// Prints:\n//1 \ud83d\ude00 A 0.1\n//2 \ud83e\udd70\ud83e\udd70 BB 0.8\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/zip(_:_:)-jjmy",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two additional publishers to publish a tuple to the downstream. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject; zip(_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:          emojiPub:        zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"      emojiPub: \"\ud83d\ude00\"   zip output: (1, \"A\", \"\ud83d\ude00\")\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:          emojiPub:        zip output: (2, \"B\", \"\ud83e\udd70\")\n\n\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\")\n//  (2, \"B\", \"\ud83e\udd70\")\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "values",
        "url": "https://developer.apple.com/documentation/combine/just/values",
        "html": "Discussion\n\nThis property provides an AsyncPublisher, which allows you to use the Swift async-await syntax to receive the publisher\u2019s elements. Because AsyncPublisher conforms to AsyncSequence, you iterate over its elements with a for-await-in loop, rather than attaching a subscriber.\n\nThe following example shows how to use the values property to receive elements asynchronously. The example adapts a code snippet from the filter(_:) operator\u2019s documentation, which filters a sequence to only emit even integers. This example replaces the Subscribers.Sink subscriber with a for-await-in loop that iterates over the AsyncPublisher provided by the values property.\n\nlet numbers: [Int] = [1, 2, 3, 4, 5]\nlet filtered = numbers.publisher\n    .filter { $0 % 2 == 0 }\n\n\nfor await number in filtered.values\n{\n    print(\"\\(number)\", terminator: \" \")\n}\n"
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/zip(_:_:)-3iys9",
        "html": "Parameters\nother\n\nAnother publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from two upstream publishers.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two publishers using a transformation you specify to publish a new value to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, PassthroughSubject instances numbersPub and lettersPub emit values; zip(_:_:) receives the oldest value from each publisher, uses the Int from numbersPub and publishes a string that repeats the String from lettersPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\ncancellable = numbersPub\n    .zip(lettersPub) { anInt, aLetter in\n        String(repeating: aLetter, count: anInt)\n    }\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:       zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:       zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:       zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"   zip output: \"A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"   zip output: \"BB\"\n// Prints:\n//  A\n//  BB\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "tryFilter(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/tryfilter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value that indicated whether to republish the element or throws an error.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nUse tryFilter(_:) to filter elements evaluated in an error-throwing closure. If the isIncluded closure throws an error, the publisher fails with that error.\n\nIn the example below, tryFilter(_:) checks to see if the element provided by the publisher is zero, and throws a ZeroError before terminating the publisher with the thrown error. Otherwise, it republishes the element only if it\u2019s even:\n\nstruct ZeroError: Error {}\n\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\ncancellable = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"2 4 failure(DivisionByZeroError())\".\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryFirst(where:)",
        "url": "https://developer.apple.com/documentation/combine/future/tryfirst(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse tryFirst(where:) when you need to republish only the first element of a stream that satisfies an error-throwing closure you specify. The publisher ignores all elements after the first. If this publisher doesn\u2019t receive any elements, it finishes without publishing. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a range publisher emits the first element in the range then finishes normally:\n\nlet numberRange: ClosedRange<Int> = (-1...50)\nnumberRange.publisher\n    .tryFirst {\n        guard $0 < 99 else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"-1 completion: finished\"\n// If instead the number range were ClosedRange<Int> = (100...200), the tryFirst operator would terminate publishing with a RangeError.\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "tryLast(where:)",
        "url": "https://developer.apple.com/documentation/combine/future/trylast(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse tryLast(where:) when you need to republish the last element that satisfies an error-throwing closure you specify. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a publisher emits the last element that satisfies the error-throwing closure, then finishes normally:\n\nstruct RangeError: Error {}\n\n\nlet numbers = [-62, 1, 6, 10, 9, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .tryLast {\n        guard 0 != 0  else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n// Prints: \"5 completion: finished\"\n// If instead the numbers array had contained a `0`, the `tryLast` operator would terminate publishing with a RangeError.\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "merge(with:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/merge(with:_:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nh\n\nAn eighth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\nlet pubH = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF, pubG, pubH)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\npubH.send(1000)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\npubH.send(1001)\n\n\n//Prints: \"1 40 90 -1 33 44 54 1000 2 50 100 -2 33 33 54 1001\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/merge(with:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\n let pubA = PassthroughSubject<Int, Never>()\n let pubB = PassthroughSubject<Int, Never>()\n let pubC = PassthroughSubject<Int, Never>()\n let pubD = PassthroughSubject<Int, Never>()\n let pubE = PassthroughSubject<Int, Never>()\n\n\n cancellable = pubA\n     .merge(with: pubB, pubC, pubD, pubE)\n     .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\n pubA.send(1)\n pubB.send(40)\n pubC.send(90)\n pubD.send(-1)\n pubE.send(33)\n pubA.send(2)\n pubB.send(50)\n pubC.send(100)\n pubD.send(-2)\n pubE.send(33)\n\n\n // Prints: \"1 40 90 -1 33 2 50 100 -2 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "reduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/reduce(_:_:)-11pp5",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nA closure that produces a new value by taking the previously-accumulated value and the next element it receives from the upstream publisher.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes. If reduce(_:_:) receives an error from the upstream publisher, the operator delivers it to the downstream subscriber, the publisher terminates and publishes no value.\n\nDiscussion\n\nUse reduce(_:_:) to collect a stream of elements and produce an accumulated value based on a closure you provide.\n\nIn the following example, the reduce(_:_:) operator collects all the integer values it receives from its upstream publisher:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .reduce(0, { accum, next in accum + next })\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"55\"\n"
    },
    {
        "title": "multicast(subject:)",
        "url": "https://developer.apple.com/documentation/combine/just/multicast(subject:)",
        "html": "Parameters\nsubject\n\nA subject to deliver elements to downstream subscribers.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(_:), this method produces a publisher that shares the provided Subject among all the downstream subscribers.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(subject:) operator with a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast(subject: PassthroughSubject<(String, Int), Never>())\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 78))\n// Stream 2 received: (\"First\", 78)\n// Stream 1 received: (\"First\", 78)\n// Random: receive value: ((\"Second\", 98))\n// Stream 2 received: (\"Second\", 98)\n// Stream 1 received: (\"Second\", 98)\n// Random: receive value: ((\"Third\", 61))\n// Stream 2 received: (\"Third\", 61)\n// Stream 1 received: (\"Third\", 61)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "replaceNil(with:)",
        "url": "https://developer.apple.com/documentation/combine/just/replacenil(with:)",
        "html": "Parameters\noutput\n\nThe element to use when replacing nil.\n\nReturn Value\n\nA publisher that replaces nil elements from the upstream publisher with the provided element.\n\nDiscussion\n\nThe replaceNil(with:) operator enables replacement of nil values in a stream with a substitute value. In the example below, a collection publisher contains a nil value. The replaceNil(with:) operator replaces this with 0.0.\n\nlet numbers: [Double?] = [1.0, 2.0, nil, 3.0]\nnumbers.publisher\n    .replaceNil(with: 0.0)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"Optional(1.0) Optional(2.0) Optional(0.0) Optional(3.0)\"\n\nSee Also\nMapping Elements\nfunc map<T>((Output) -> T) -> Just<T>\nfunc tryMap<T>((Output) throws -> T) -> Result<T, Error>.Publisher\nfunc mapError<E>((Just<Output>.Failure) -> E) -> Result<Output, E>.Publisher\nfunc scan<T>(T, (T, Output) -> T) -> Result<T, Just<Output>.Failure>.Publisher\nfunc tryScan<T>(T, (T, Output) throws -> T) -> Result<T, Error>.Publisher\nfunc setFailureType<E>(to: E.Type) -> Result<Output, E>.Publisher"
    },
    {
        "title": "merge(with:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/merge(with:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\n\n\n// Prints: \"1 40 90 -1 2 50 100 -2 \"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "output(in:)",
        "url": "https://developer.apple.com/documentation/combine/just/output(in:)-36ht0",
        "html": "Parameters\nrange\n\nA range that indicates which elements to publish.\n\nReturn Value\n\nA publisher that publishes elements specified by a range.\n\nDiscussion\n\nUse output(in:) to republish a range indices you specify in the published stream. After publishing all elements, the publisher finishes normally. If the publisher completes normally or with an error before producing all the elements in the range, it doesn\u2019t publish the remaining elements.\n\nIn the example below, an array publisher emits the subset of elements at the indices in the specified range:\n\nlet numbers = [1, 1, 2, 2, 2, 3, 4, 5, 6]\nnumbers.publisher\n    .output(in: (3...5))\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 2 3\"\n"
    },
    {
        "title": "min()",
        "url": "https://developer.apple.com/documentation/combine/just/min()-3p3co",
        "html": "Return Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to find the minimum value in a stream of elements from an upstream publisher.\n\nIn the example below, the min(by:) operator emits a value when the publisher finishes, that value is the minimum of the values received from upstream, which is -1.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .min()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"-1\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher."
    },
    {
        "title": "merge(with:)",
        "url": "https://developer.apple.com/documentation/combine/just/merge(with:)",
        "html": "Parameters\nother\n\nAnother publisher of this publisher\u2019s type.\n\nReturn Value\n\nA publisher that emits an event when either upstream publisher emits an event.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/zip(_:_:_:)-41m0z",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from three upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from two other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject that emit values; zip(_:_:_:) receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(letters, emoji) { anInt, aLetter, anEmoji in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt))\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:        emojiPub:            zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"    emojiPub:\"\ud83d\ude00\"        zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:        emojiPub:\"\ud83d\ude00\", \"\ud83e\udd70\"  zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n\n\n// Prints:\n// \ud83d\ude00 A\n// \ud83e\udd70\ud83e\udd70 BB\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "tryLast(where:)",
        "url": "https://developer.apple.com/documentation/combine/just/trylast(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse tryLast(where:) when you need to republish the last element that satisfies an error-throwing closure you specify. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a publisher emits the last element that satisfies the error-throwing closure, then finishes normally:\n\nstruct RangeError: Error {}\n\n\nlet numbers = [-62, 1, 6, 10, 9, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .tryLast {\n        guard 0 != 0  else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n// Prints: \"5 completion: finished\"\n// If instead the numbers array had contained a `0`, the `tryLast` operator would terminate publishing with a RangeError.\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Just<Output>\nfunc first(where: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Just<Output>\nfunc last(where: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc output(at: Int) -> Optional<Output>.Publisher\nfunc output<R>(in: R) -> Optional<Output>.Publisher"
    },
    {
        "title": "tryMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/trymap(_:)-9tr4g",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element. If the closure throws an error, the publisher fails with the thrown error.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s tryMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use tryMap(_:) to transform from one kind of element to another, and to terminate publishing when the map\u2019s closure throws an error.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A tryMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the tryMap(_:)\u2019s closure fails to look up a Roman numeral, it throws an error. The tryMap(_:) operator catches this error and terminates publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from:Int) throws -> String {\n    let romanNumeralDict: [Int : String] =\n        [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\n    guard let numeral = romanNumeralDict[from] else {\n        throw ParseError()\n    }\n    return numeral\n}\nlet numbers = [5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryMap { try romanNumeral(from: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"V IV III II I completion: failure(ParseError())\"\n\n\nIf your closure doesn\u2019t throw, use map(_:) instead."
    },
    {
        "title": "tryScan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/tryscan(_:_:)-3xgg1",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse tryScan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value. If your accumulator closure throws an error, the publisher terminates with the error.\n\nIn the example below, tryScan(_:_:) calls a division function on elements of a collection publisher. The Publishers.TryScan publisher publishes each result until the function encounters a DivisionByZeroError, which terminates the publisher.\n\nstruct DivisionByZeroError: Error {}\n\n\n/// A function that throws a DivisionByZeroError if `current` provided by the TryScan publisher is zero.\nfunc myThrowingFunction(_ lastValue: Int, _ currentValue: Int) throws -> Int {\n    guard currentValue != 0 else { throw DivisionByZeroError() }\n    return (lastValue + currentValue) / currentValue\n }\n\n\nlet numbers = [1,2,3,4,5,0,6,7,8,9]\ncancellable = numbers.publisher\n    .tryScan(10) { try myThrowingFunction($0, $1) }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"11 6 3 1 1 -1 failure(DivisionByZeroError())\".\n\n\nIf the closure throws an error, the publisher fails with the error."
    },
    {
        "title": "tryMax(by:)",
        "url": "https://developer.apple.com/documentation/combine/just/trymax(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMax(by:) to determine the maximum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMax(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\ncancellable = numbers.publisher\n    .tryMax { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first > second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: completion: failure(IllegalValueError())\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Just<Int>\nfunc max() -> Just<Output>\nAvailable when Output conforms to Comparable.\nfunc max(by: (Output, Output) -> Bool) -> Just<Output>\nfunc min() -> Just<Output>\nAvailable when Output conforms to Comparable.\nfunc min(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "tryMin(by:)",
        "url": "https://developer.apple.com/documentation/combine/just/trymin(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMin(by:) to determine the minimum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMin(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\nnumbers.publisher\n    .tryMin { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first < second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Just<Int>\nfunc max() -> Just<Output>\nAvailable when Output conforms to Comparable.\nfunc max(by: (Output, Output) -> Bool) -> Just<Output>\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Just<Output>\nAvailable when Output conforms to Comparable.\nfunc min(by: (Output, Output) -> Bool) -> Just<Output>"
    },
    {
        "title": "removeDuplicates()",
        "url": "https://developer.apple.com/documentation/combine/future/removeduplicates()",
        "html": "Return Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates() to remove repeating elements from an upstream publisher. This operator has a two-element memory: the operator uses the current and previously published elements as the basis for its comparison.\n\nIn the example below, removeDuplicates() triggers on the doubled, tripled, and quadrupled occurrences of 1, 3, and 4 respectively. Because the two-element memory considers only the current element and the previous element, the operator prints the final 0 in the example data since its immediate predecessor is 4.\n\nlet numbers = [0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 0]\ncancellable = numbers.publisher\n    .removeDuplicates()\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 0\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "removeDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/future/removeduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of the current and previously published elements using a closure you provide.\n\nUse the removeDuplicates(by:) operator when comparing types that don\u2019t themselves implement Equatable, or if you need to compare values differently than the type\u2019s Equatable implementation.\n\nIn the example below, the removeDuplicates(by:) functionality triggers when the x property of the current and previous elements are equal, otherwise the operator publishes the current Point to the downstream subscriber:\n\nstruct Point {\n    let x: Int\n    let y: Int\n}\n\n\nlet points = [Point(x: 0, y: 0), Point(x: 0, y: 1),\n              Point(x: 1, y: 1), Point(x: 2, y: 1)]\ncancellable = points.publisher\n    .removeDuplicates { prev, current in\n        // Considers points to be duplicate if the x coordinate\n        // is equal, and ignores the y coordinate\n        prev.x == current.x\n    }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: Point(x: 0, y: 0) Point(x: 1, y: 1) Point(x: 2, y: 1)\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "print(_:to:)",
        "url": "https://developer.apple.com/documentation/combine/future/print(_:to:)",
        "html": "Parameters\nprefix\n\nA string \u2014- which defaults to empty -\u2014 with which to prefix all log messages.\n\nstream\n\nA stream for text output that receives messages, and which directs output to the console by default. A custom stream can be used to log messages to other destinations.\n\nReturn Value\n\nA publisher that prints log messages for all publishing events.\n\nDiscussion\n\nUse print(_:to:) to log messages the console.\n\nIn the example below, log messages are printed on the console:\n\nlet integers = (1...2)\ncancellable = integers.publisher\n   .print(\"Logged a message\", to: nil)\n   .sink { _ in }\n\n\n// Prints:\n//  Logged a message: receive subscription: (1..<2)\n//  Logged a message: request unlimited\n//  Logged a message: receive value: (1)\n//  Logged a message: receive finished\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur."
    },
    {
        "title": "prepend(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/prepend(_:)",
        "html": "Parameters\nelements\n\nThe elements to publish before this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that prefixes the specified elements prior to this publisher\u2019s elements.\n\nDiscussion\n\nUse prepend(_:) when you need to prepend specific elements before the output of a publisher.\n\nIn the example below, the prepend(_:) operator publishes the provided elements before republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .prepend(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 255 0 1 2 3 4 5 6 7 8 9 10\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "merge(with:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/merge(with:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers; it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubE, pubG)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\n\n\n//Prints: \"1 40 90 -1 33 44 54 2 50 100 -2 33 33 54\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "prefix(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/future/prefix(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA second publisher.\n\nReturn Value\n\nA publisher that republishes elements until the second publisher publishes an element.\n\nDiscussion\n\nAfter the second publisher publishes an element, the publisher returned by this method finishes.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue."
    },
    {
        "title": "output(in:)",
        "url": "https://developer.apple.com/documentation/combine/future/output(in:)",
        "html": "Parameters\nrange\n\nA range that indicates which elements to publish.\n\nReturn Value\n\nA publisher that publishes elements specified by a range.\n\nDiscussion\n\nUse output(in:) to republish a range indices you specify in the published stream. After publishing all elements, the publisher finishes normally. If the publisher completes normally or with an error before producing all the elements in the range, it doesn\u2019t publish the remaining elements.\n\nIn the example below, an array publisher emits the subset of elements at the indices in the specified range:\n\nlet numbers = [1, 1, 2, 2, 2, 3, 4, 5, 6]\nnumbers.publisher\n    .output(in: (3...5))\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 2 3\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/flatmap(maxpublishers:_:)-6h2sh",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nDiscussion\n\nCombine\u2018s flatMap(maxPublishers:_:) operator performs a similar function to the doc://com.apple.documentation/documentation/Swift/Sequence/2905332-flatmap operator in the Swift standard library, but turns the elements from one kind of publisher into a new publisher that is sent to subscribers. Use flatMap(maxPublishers:_:) when you want to create a new series of events for downstream subscribers based on the received value. The closure creates the new Publisher based on the received value. The new Publisher can emit more than one event, and successful completion of the new Publisher does not complete the overall stream. Failure of the new Publisher causes the overall stream to fail.\n\nIn the example below, a PassthroughSubject publishes WeatherStation elements. The flatMap(maxPublishers:_:) receives each element, creates a URL from it, and produces a new URLSession.DataTaskPublisher, which will publish the data loaded from that URL.\n\npublic struct WeatherStation {\n    public let stationID: String\n}\n\n\nvar weatherPublisher = PassthroughSubject<WeatherStation, URLError>()\n\n\ncancellable = weatherPublisher.flatMap { station -> URLSession.DataTaskPublisher in\n    let url = URL(string:\"https://weatherapi.example.com/stations/\\(station.stationID)/observations/latest\")!\n    return URLSession.shared.dataTaskPublisher(for: url)\n}\n.sink(\n    receiveCompletion: { completion in\n        // Handle publisher completion (normal or error).\n    },\n    receiveValue: {\n        // Process the received data.\n    }\n )\n\n\nweatherPublisher.send(WeatherStation(stationID: \"KSFO\")) // San Francisco, CA\nweatherPublisher.send(WeatherStation(stationID: \"EGLC\")) // London, UK\nweatherPublisher.send(WeatherStation(stationID: \"ZBBB\")) // Beijing, CN\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/flatmap(maxpublishers:_:)-7kd93",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "measureInterval(using:options:)",
        "url": "https://developer.apple.com/documentation/combine/just/measureinterval(using:options:)",
        "html": "Parameters\nscheduler\n\nA scheduler to use for tracking the timing of events.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher that emits elements representing the time interval between the elements it receives.\n\nDiscussion\n\nUse measureInterval(using:options:) to measure the time between events delivered from an upstream publisher.\n\nIn the example below, a 1-second Timer is used as the data source for an event publisher; the measureInterval(using:options:) operator reports the elapsed time between the reception of events on the main run loop:\n\ncancellable = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .measureInterval(using: RunLoop.main)\n    .sink { print(\"\\($0)\", terminator: \"\\n\") }\n\n\n// Prints:\n//      Stride(magnitude: 1.0013610124588013)\n//      Stride(magnitude: 0.9992760419845581)\n\n\nThe output type of the returned publisher is the time interval of the provided scheduler.\n\nThis operator uses the provided scheduler\u2019s now property to measure intervals between events.\n\nSee Also\nControlling Timing\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)",
        "url": "https://developer.apple.com/documentation/combine/just/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)",
        "html": "Parameters\nreceiveSubscription\n\nAn optional closure that executes when the publisher receives the subscription from the upstream publisher. This value defaults to nil.\n\nreceiveOutput\n\nAn optional closure that executes when the publisher receives a value from the upstream publisher. This value defaults to nil.\n\nreceiveCompletion\n\nAn optional closure that executes when the upstream publisher finishes normally or terminates with an error. This value defaults to nil.\n\nreceiveCancel\n\nAn optional closure that executes when the downstream receiver cancels publishing. This value defaults to nil.\n\nreceiveRequest\n\nAn optional closure that executes when the publisher receives a request for more elements. This value defaults to nil.\n\nReturn Value\n\nA publisher that performs the specified closures when publisher events occur.\n\nDiscussion\n\nUse handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:) when you want to examine elements as they progress through the stages of the publisher\u2019s lifecycle.\n\nIn the example below, a publisher of integers shows the effect of printing debugging information at each stage of the element-processing lifecycle:\n\nlet integers = (0...2)\ncancellable = integers.publisher\n    .handleEvents(receiveSubscription: { subs in\n        print(\"Subscription: \\(subs.combineIdentifier)\")\n    }, receiveOutput: { anInt in\n        print(\"in output handler, received \\(anInt)\")\n    }, receiveCompletion: { _ in\n        print(\"in completion handler\")\n    }, receiveCancel: {\n        print(\"received cancel\")\n    }, receiveRequest: { (demand) in\n        print(\"received demand: \\(demand.description)\")\n    })\n    .sink { _ in return }\n\n\n// Prints:\n//   received demand: unlimited\n//   Subscription: 0x7f81284734c0\n//   in output handler, received 0\n//   in output handler, received 1\n//   in output handler, received 2\n//   in completion handler\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "map(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/map(_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of another property on Output.\n\nReturn Value\n\nA publisher that publishes the values of two key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:) operator uses the Swift key path syntax to access the die1 and die2 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these two values (as an (Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1) (total: \\(values.0 + values.1))\")\n    }\n// Prints \"Rolled: 6, 4 (total: 10)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "max()",
        "url": "https://developer.apple.com/documentation/combine/just/max()-49bgv",
        "html": "Return Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max() to determine the maximum value in the stream of elements from an upstream publisher.\n\nIn the example below, the max() operator emits a value when the publisher finishes, that value is the maximum of the values received from upstream, which is 10.\n\nlet numbers = [0, 10, 5]\ncancellable = numbers.publisher\n    .max()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/map(_:)-7jaa0",
        "html": "Parameters\nkeyPath\n\nThe key path of a property on Output.\n\nReturn Value\n\nA publisher that publishes the value of the key path.\n\nDiscussion\n\nIn the following example, the map(_:) operator uses the Swift key path syntax to access the die member of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only the value of this Int, not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die: Int\n}\n\n\ncancellable = Just(DiceRoll(die:Int.random(in:1...6)))\n    .map(\\.die)\n    .sink {\n        print (\"Rolled: \\($0)\")\n    }\n// Prints \"Rolled: 3\" (or some other random value).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/flatmap(maxpublishers:_:)-z2r1",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/map(_:)-7fb7v",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s map(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use map(_:) to transform from one kind of element to another.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A map(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the map(_:)\u2019s closure fails to look up a Roman numeral, it returns the string (unknown).\n\nlet numbers = [5, 4, 3, 2, 1, 0]\nlet romanNumeralDict: [Int : String] =\n   [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\ncancellable = numbers.publisher\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"V IV III II I (unknown)\"\n\n\nIf your closure can throw an error, use Combine\u2019s tryMap(_:) operator instead."
    },
    {
        "title": "makeConnectable()",
        "url": "https://developer.apple.com/documentation/combine/just/makeconnectable()",
        "html": "Return Value\n\nA ConnectablePublisher wrapping this publisher.\n\nDiscussion\n\nIn the following example, makeConnectable() wraps its upstream publisher (an instance of Publishers.Share) with a ConnectablePublisher. Without this, the first sink subscriber would receive all the elements from the sequence publisher and cause it to complete before the second subscriber attaches. By making the publisher connectable, the publisher doesn\u2019t produce any elements until after the connect() call.\n\n let subject = Just<String>(\"Sent\")\n let pub = subject\n     .share()\n     .makeConnectable()\n cancellable1 = pub.sink { print (\"Stream 1 received: \\($0)\")  }\n\n\n // For example purposes, use DispatchQueue to add a second subscriber\n // a second later, and then connect to the publisher a second after that.\n DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n     self.cancellable2 = pub.sink { print (\"Stream 2 received: \\($0)\") }\n }\n DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     self.connectable = pub.connect()\n }\n // Prints:\n // Stream 2 received: Sent\n // Stream 1 received: Sent\n\n\nNote\n\nThe connect() operator returns a Cancellable instance that you must retain. You can also use this instance to cancel publishing."
    },
    {
        "title": "subscribe(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/just/subscribe(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler used to send messages to upstream publishers.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher which performs upstream operations on the specified scheduler.\n\nDiscussion\n\nIn contrast with receive(on:options:), which affects downstream messages, subscribe(on:options:) changes the execution context of upstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes ioPerformingPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes uiUpdatingSubscriber to receive elements and completion on RunLoop.main.\n\nlet ioPerformingPublisher == // Some publisher.\nlet uiUpdatingSubscriber == // Some subscriber that updates the UI.\n\n\nioPerformingPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(uiUpdatingSubscriber)\n\n\nUsing subscribe(on:options:) also causes the upstream publisher to perform cancel() using the specfied scheduler.\n\nSee Also\nSpecifying Schedulers\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher."
    },
    {
        "title": "merge(with:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/merge(with:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers; it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubE, pubG)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\n\n\n//Prints: \"1 40 90 -1 33 44 54 2 50 100 -2 33 33 54\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "sink(receiveCompletion:receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/just/sink(receivecompletion:receivevalue:)",
        "html": "Parameters\nreceiveComplete\n\nThe closure to execute on completion.\n\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveCompletion:receiveValue:) to observe values received by the publisher and process them using a closure you specify.\n\nIn this example, a Range publisher publishes integers to a sink(receiveCompletion:receiveValue:) operator\u2019s receiveValue closure that prints them to the console. Upon completion the sink(receiveCompletion:receiveValue:) operator\u2019s receiveCompletion closure indicates the successful termination of the stream.\n\nlet myRange = (0...3)\ncancellable = myRange.publisher\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0)\") })\n\n\n// Prints:\n//  value: 0\n//  value: 1\n//  value: 2\n//  value: 3\n//  completion: finished\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "setFailureType(to:)",
        "url": "https://developer.apple.com/documentation/combine/just/setfailuretype(to:)-8l4j3",
        "html": "Parameters\nfailureType\n\nThe Failure type presented by this publisher.\n\nReturn Value\n\nA publisher that appears to send the specified failure type.\n\nDiscussion\n\nUse setFailureType(to:) when you need set the error type of a publisher that cannot fail.\n\nConversely, if the upstream can fail, you would use mapError(_:) to provide instructions on converting the error types to needed by the downstream publisher\u2019s inputs.\n\nThe following example has two publishers with mismatched error types: pub1\u2019s error type is Never, and pub2\u2019s error type is Error. Because of the mismatch, the combineLatest(_:) operator requires that pub1 use setFailureType(to:) to make it appear that pub1 can produce the Error type, like pub2 can.\n\nlet pub1 = [0, 1, 2, 3, 4, 5].publisher\nlet pub2 = CurrentValueSubject<Int, Error>(0)\nlet cancellable = pub1\n    .setFailureType(to: Error.self)\n    .combineLatest(pub2)\n    .sink(\n        receiveCompletion: { print (\"completed: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\")}\n     )\n\n\n// Prints: \"value: (5, 0)\".\n"
    },
    {
        "title": "scan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/scan(_:_:)-18xna",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nA closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse scan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value.\n\nThe following example logs a running total of all values received from the sequence publisher.\n\nlet range = (0...5)\ncancellable = range.publisher\n    .scan(0) { return $0 + $1 }\n    .sink { print (\"\\($0)\", terminator: \" \") }\n // Prints: \"0 1 3 6 10 15 \".\n"
    },
    {
        "title": "sink(receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/just/sink(receivevalue:)",
        "html": "Parameters\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveValue:) to observe values received by the publisher and print them to the console. This operator can only be used when the stream doesn\u2019t fail, that is, when the publisher\u2019s Failure type is Never.\n\nIn this example, a Range publisher publishes integers to a sink(receiveValue:) operator\u2019s receiveValue closure that prints them to the console:\n\nlet integers = (0...3)\nintegers.publisher\n    .sink { print(\"Received \\($0)\") }\n\n\n// Prints:\n//  Received 0\n//  Received 1\n//  Received 2\n//  Received 3\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/subscribe(_:)-3p4s7",
        "html": "Parameters\nsubject\n\nThe subject to attach to this publisher.\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher."
    },
    {
        "title": "sink(receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/future/sink(receivevalue:)",
        "html": "Parameters\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveValue:) to observe values received by the publisher and print them to the console. This operator can only be used when the stream doesn\u2019t fail, that is, when the publisher\u2019s Failure type is Never.\n\nIn this example, a Range publisher publishes integers to a sink(receiveValue:) operator\u2019s receiveValue closure that prints them to the console:\n\nlet integers = (0...3)\nintegers.publisher\n    .sink { print(\"Received \\($0)\") }\n\n\n// Prints:\n//  Received 0\n//  Received 1\n//  Received 2\n//  Received 3\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior."
    },
    {
        "title": "sink(receiveCompletion:receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/future/sink(receivecompletion:receivevalue:)",
        "html": "Parameters\nreceiveComplete\n\nThe closure to execute on completion.\n\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveCompletion:receiveValue:) to observe values received by the publisher and process them using a closure you specify.\n\nIn this example, a Range publisher publishes integers to a sink(receiveCompletion:receiveValue:) operator\u2019s receiveValue closure that prints them to the console. Upon completion the sink(receiveCompletion:receiveValue:) operator\u2019s receiveCompletion closure indicates the successful termination of the stream.\n\nlet myRange = (0...3)\ncancellable = myRange.publisher\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0)\") })\n\n\n// Prints:\n//  value: 0\n//  value: 1\n//  value: 2\n//  value: 3\n//  completion: finished\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "switchToLatest()",
        "url": "https://developer.apple.com/documentation/combine/future/switchtolatest()",
        "html": "Discussion\n\nThis operator works with an upstream publisher of publishers, flattening the stream of elements to appear as if they were coming from a single stream of elements. It switches the inner publisher as new ones arrive but keeps the outer publisher constant for downstream subscribers.\n\nWhen this operator receives a new publisher from the upstream publisher, it cancels its previous subscription. Use this feature to prevent earlier publishers from performing unnecessary work, such as creating network request publishers from frequently updating user interface publishers.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify."
    },
    {
        "title": "setFailureType(to:)",
        "url": "https://developer.apple.com/documentation/combine/future/setfailuretype(to:)",
        "html": "Parameters\nfailureType\n\nThe Failure type presented by this publisher.\n\nReturn Value\n\nA publisher that appears to send the specified failure type.\n\nDiscussion\n\nUse setFailureType(to:) when you need set the error type of a publisher that cannot fail.\n\nConversely, if the upstream can fail, you would use mapError(_:) to provide instructions on converting the error types to needed by the downstream publisher\u2019s inputs.\n\nThe following example has two publishers with mismatched error types: pub1\u2019s error type is Never, and pub2\u2019s error type is Error. Because of the mismatch, the combineLatest(_:) operator requires that pub1 use setFailureType(to:) to make it appear that pub1 can produce the Error type, like pub2 can.\n\nlet pub1 = [0, 1, 2, 3, 4, 5].publisher\nlet pub2 = CurrentValueSubject<Int, Error>(0)\nlet cancellable = pub1\n    .setFailureType(to: Error.self)\n    .combineLatest(pub2)\n    .sink(\n        receiveCompletion: { print (\"completed: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\")}\n     )\n\n\n// Prints: \"value: (5, 0)\".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure."
    },
    {
        "title": "combineLatest(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/combinelatest(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:_:) when you need to combine the current and 3 additional publishers and transform the values using a closure in which you specify the published elements, to publish a new element.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, as combineLatest(_:_:_:_:) receives the most-recent values published by four publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4) { firstValue, secondValue, thirdValue, fourthValue in\n        return firstValue * secondValue * thirdValue * fourthValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: 36.     // pub = 2,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 54.     // pub = 3,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 324.    // pub = 3,  pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 1404.   // pub = 13, pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 2964.   // pub = 13, pub2 = 12,  pub3 = 19, pub4 = 1\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "drop(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/just/drop(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA publisher to monitor for its first emitted element.\n\nReturn Value\n\nA publisher that drops elements from the upstream publisher until the other publisher produces a value.\n\nDiscussion\n\nUse drop(untilOutputFrom:) to ignore elements from the upstream publisher until another, second, publisher delivers its first element. This publisher requests a single value from the second publisher, and it ignores (drops) all elements from the upstream publisher until the second publisher produces a value. After the second publisher produces an element, drop(untilOutputFrom:) cancels its subscription to the second publisher, and allows events from the upstream publisher to pass through.\n\nAfter this publisher receives a subscription from the upstream publisher, it passes through backpressure requests from downstream to the upstream publisher. If the upstream publisher acts on those requests before the other publisher produces an item, this publisher drops the elements it receives from the upstream publisher.\n\nIn the example below, the pub1 publisher defers publishing its elements until the pub2 publisher delivers its first element:\n\nlet upstream = PassthroughSubject<Int,Never>()\nlet second = PassthroughSubject<String,Never>()\ncancellable = upstream\n    .drop(untilOutputFrom: second)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\nupstream.send(1)\nupstream.send(2)\nsecond.send(\"A\")\nupstream.send(3)\nupstream.send(4)\n// Prints \"3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc dropFirst(Int) -> Optional<Output>.Publisher\nfunc drop(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc append<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend<S>(S) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prepend(Output...) -> Publishers.Sequence<[Output], Just<Output>.Failure>\nfunc prefix(Int) -> Optional<Output>.Publisher\nfunc prefix(while: (Output) -> Bool) -> Optional<Output>.Publisher\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/subscribe(_:)-4c6l3",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this publisher. After attaching, the subscriber can start to receive values.\n\nDiscussion\n\nAlways call this function instead of receive(subscriber:). Adopters of Publisher must implement receive(subscriber:). The implementation of subscribe(_:) provided by Publisher calls through to receive(subscriber:).\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "delay(for:tolerance:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/just/delay(for:tolerance:scheduler:options:)",
        "html": "Parameters\ninterval\n\nThe amount of time to delay.\n\ntolerance\n\nThe allowed tolerance in delivering delayed events. The Delay publisher may deliver elements this much sooner or later than the interval specifies.\n\nscheduler\n\nThe scheduler to deliver the delayed events.\n\noptions\n\nOptions relevant to the scheduler\u2019s behavior.\n\nReturn Value\n\nA publisher that delays delivery of elements and completion to the downstream receiver.\n\nDiscussion\n\nUse delay(for:tolerance:scheduler:options:) when you need to delay the delivery of elements to a downstream by a specified amount of time.\n\nIn this example, a Timer publishes an event every second. The delay(for:tolerance:scheduler:options:) operator holds the delivery of the initial element for 3 seconds (\u00b10.5 seconds), after which each element is delivered to the downstream on the main run loop after the specified delay:\n\nlet df = DateFormatter()\ndf.dateStyle = .none\ndf.timeStyle = .long\ncancellable = Timer.publish(every: 1.0, on: .main, in: .default)\n    .autoconnect()\n    .handleEvents(receiveOutput: { date in\n        print (\"Sending Timestamp \\'\\(df.string(from: date))\\' to delay()\")\n    })\n    .delay(for: .seconds(3), scheduler: RunLoop.main, options: .none)\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \"\\n\") },\n        receiveValue: { value in\n            let now = Date()\n            print (\"At \\(df.string(from: now)) received  Timestamp \\'\\(df.string(from: value))\\' sent: \\(String(format: \"%.2f\", now.timeIntervalSince(value))) secs ago\", terminator: \"\\n\")\n        }\n    )\n\n\n// Prints:\n//    Sending Timestamp '5:02:33 PM PDT' to delay()\n//    Sending Timestamp '5:02:34 PM PDT' to delay()\n//    Sending Timestamp '5:02:35 PM PDT' to delay()\n//    Sending Timestamp '5:02:36 PM PDT' to delay()\n//    At 5:02:36 PM PDT received  Timestamp '5:02:33 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:37 PM PDT' to delay()\n//    At 5:02:37 PM PDT received  Timestamp '5:02:34 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:38 PM PDT' to delay()\n//    At 5:02:38 PM PDT received  Timestamp '5:02:35 PM PDT' sent: 3.00 secs ago\n\n\nThe delay affects the delivery of elements and completion, but not of the original subscription.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "decode(type:decoder:)",
        "url": "https://developer.apple.com/documentation/combine/just/decode(type:decoder:)",
        "html": "Parameters\ntype\n\nThe encoded data to decode into a struct that conforms to the Decodable protocol.\n\ndecoder\n\nA decoder that implements the TopLevelDecoder protocol.\n\nReturn Value\n\nA publisher that decodes a given type using a specified decoder and publishes the result.\n\nDiscussion\n\nUse decode(type:decoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to decode data received from a URLSession.DataTaskPublisher or other data source using the Decodable protocol.\n\nIn this example, a PassthroughSubject publishes a JSON string. The JSON decoder parses the string, converting its fields according to the Decodable protocol implemented by Article, and successfully populating a new Article. The Publishers.Decode publisher then publishes the Article to the downstream. If a decoding operation fails, which happens in the case of missing or malformed data in the source JSON string, the stream terminates and passes the error to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Data, Never>()\ncancellable = dataProvider\n    .decode(type: Article.self, decoder: JSONDecoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\")},\n          receiveValue: { print (\"value: \\($0)\") })\n\n\ndataProvider.send(Data(\"{\\\"pubDate\\\":1574273638.575666, \\\"title\\\" : \\\"My First Article\\\", \\\"author\\\" : \\\"Gita Kumar\\\" }\".utf8))\n\n\n// Prints: \".sink() data received Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: 2050-11-20 18:13:58 +0000)\"\n\nSee Also\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable."
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/compactmap(_:)-61xqc",
        "html": "Parameters\ntransform\n\nA closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of the calling the supplied closure.\n\nDiscussion\n\nCombine\u2019s compactMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/2950916-compactmap in the Swift standard library: the compactMap(_:) operator in Combine removes nil elements in a publisher\u2019s stream and republishes non-nil elements to the downstream subscriber.\n\nThe example below uses a range of numbers as the source for a collection based publisher. The compactMap(_:) operator consumes each element from the numbers publisher attempting to access the dictionary using the element as the key. If the example\u2019s dictionary returns a nil, due to a non-existent key, compactMap(_:) filters out the nil (missing) elements.\n\nlet numbers = (0...5)\nlet romanNumeralDict: [Int : String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ncancellable = numbers.publisher\n    .compactMap { romanNumeralDict[$0] }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"I II III V\"\n"
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/just/combinelatest(_:_:_:)-79blm",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, combineLatest(_:_:_:) receives input from any of the publishers, combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n//\n// Prints:\n//  Result: (2, 2, 9, 1).\n//  Result: (3, 2, 9, 1).\n//  Result: (3, 12, 9, 1).\n//  Result: (13, 12, 9, 1).\n//  Result: (13, 12, 19, 1).\n\n\nIf any individual publisher of the combined set terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers."
    },
    {
        "title": "contains(_:)",
        "url": "https://developer.apple.com/documentation/combine/just/contains(_:)-8c28x",
        "html": "Parameters\noutput\n\nAn element to match against.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(_:) to find the first element in an upstream that\u2019s equal to the supplied argument. The contains publisher consumes all received elements until the upstream publisher produces a matching element. Upon finding the first match, it emits true and finishes normally. If the upstream finishes normally without producing a matching element, this publisher emits false and finishes.\n\nIn the example below, the contains(_:) operator emits true the first time it receives the value 5 from the numbers.publisher, and then finishes normally.\n\nlet numbers = [-1, 5, 10, 5]\nnumbers.publisher\n    .contains(5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n"
    },
    {
        "title": "collect(_:options:)",
        "url": "https://developer.apple.com/documentation/combine/just/collect(_:options:)",
        "html": "Parameters\nstrategy\n\nThe timing group strategy used by the operator to collect and publish elements.\n\noptions\n\nScheduler options to use for the strategy.\n\nReturn Value\n\nA publisher that collects elements by a given strategy, and emits a single array of the collection.\n\nDiscussion\n\nUse collect(_:options:) to emit arrays of elements on a schedule specified by a Scheduler and Stride that you provide. At the end of each scheduled interval, the publisher sends an array that contains the items it collected. If the upstream publisher finishes before filling the buffer, the publisher sends an array that contains items it received. This may be fewer than the number of elements specified in the requested Stride.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThe example above collects timestamps generated on a one-second Timer in groups (Stride) of five.\n\nlet sub = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .collect(.byTime(RunLoop.main, .seconds(5)))\n    .sink { print(\"\\($0)\", terminator: \"\\n\\n\") }\n\n\n// Prints: \"[2020-01-24 00:54:46 +0000, 2020-01-24 00:54:47 +0000,\n//          2020-01-24 00:54:48 +0000, 2020-01-24 00:54:49 +0000,\n//          2020-01-24 00:54:50 +0000]\"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Just<[Output]>\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc ignoreOutput() -> Empty<Output, Just<Output>.Failure>\nfunc reduce<T>(T, (T, Output) -> T) -> Result<T, Just<Output>.Failure>.Publisher\nfunc tryReduce<T>(T, (T, Output) throws -> T) -> Result<T, Error>.Publisher"
    },
    {
        "title": "breakpointOnError()",
        "url": "https://developer.apple.com/documentation/combine/just/breakpointonerror()",
        "html": "Return Value\n\nA publisher that raises a debugger signal upon receiving a failure.\n\nDiscussion\n\nWhen the upstream publisher fails with an error, this publisher raises the SIGTRAP signal, which stops the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn this example a PassthroughSubject publishes strings, but its downstream tryMap(_:) operator throws an error. This sends the error downstream as a Subscribers.Completion.failure(_:). The breakpointOnError() operator receives this completion and stops the app in the debugger.\n\n struct CustomError : Error {}\n let publisher = PassthroughSubject<String?, Error>()\n cancellable = publisher\n     .tryMap { stringValue in\n         throw CustomError()\n     }\n     .breakpointOnError()\n     .sink(\n         receiveCompletion: { completion in print(\"Completion: \\(String(describing: completion))\") },\n         receiveValue: { aValue in print(\"Result: \\(String(describing: aValue))\") }\n     )\n\n\n publisher.send(\"TEST DATA\")\n\n\n // Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n // Depending on your specific environment, the console messages may\n // also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "zip(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/zip(_:)",
        "html": "Parameters\nother\n\nAnother publisher.\n\nReturn Value\n\nA publisher that emits pairs of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:) to combine the latest elements from two publishers and emit a tuple to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together as a tuple to the subscriber.\n\nMuch like a zipper or zip fastener on a piece of clothing pulls together rows of teeth to link the two sides, zip(_:) combines streams from two different publishers by linking pairs of elements from each side.\n\nIn this example, numbers and letters are PassthroughSubjects that emit values; once zip(_:) receives one value from each, it publishes the pair as a tuple to the downstream subscriber. It then waits for the next pair of values.\n\n let numbersPub = PassthroughSubject<Int, Never>()\n let lettersPub = PassthroughSubject<String, Never>()\n\n\n cancellable = numbersPub\n     .zip(lettersPub)\n     .sink { print(\"\\($0)\") }\n numbersPub.send(1)    // numbersPub: 1      lettersPub:        zip output: <none>\n numbersPub.send(2)    // numbersPub: 1,2    lettersPub:        zip output: <none>\n letters.send(\"A\")     // numbers: 1,2       letters:\"A\"        zip output: <none>\n numbers.send(3)       // numbers: 1,2,3     letters:           zip output: (1,\"A\")\n letters.send(\"B\")     // numbers: 1,2,3     letters: \"B\"       zip output: (2,\"B\")\n\n\n // Prints:\n //  (1, \"A\")\n //  (2, \"B\")\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "tryPrefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/future/tryprefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value indicating whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate throws or indicates publishing should finish.\n\nDiscussion\n\nUse tryPrefix(while:) to emit values from the upstream publisher that meet a condition you specify in an error-throwing closure. The publisher finishes when the closure returns false. If the closure throws an error, the publisher fails with that error.\n\nstruct OutOfRangeError: Error {}\n\n\nlet numbers = (0...10).reversed()\ncancellable = numbers.publisher\n    .tryPrefix {\n        guard $0 != 0 else {throw OutOfRangeError()}\n        return $0 <= numbers.max()!\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"10 9 8 7 6 5 4 3 2 1 completion: failure(OutOfRangeError()) \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryReduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/tryreduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nAn error-throwing closure that takes the previously-accumulated value and the next element from the upstream publisher to produce a new value.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes.\n\nDiscussion\n\nUse tryReduce(_:_:) to collect a stream of elements and produce an accumulated value based on an error-throwing closure you provide. If the closure throws an error, the publisher fails and passes the error to its subscriber.\n\nIn the example below, the publisher\u2019s 0 element causes the myDivide(_:_:) function to throw an error and publish the doc://com.apple.documentation/documentation/Swift/Double/1641611-nan result:\n\nstruct DivisionByZeroError: Error {}\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n    guard divisor != 0 else { throw DivisionByZeroError() }\n    return dividend / divisor\n}\n\n\nvar numbers: [Double] = [5, 4, 3, 2, 1, 0]\nnumbers.publisher\n    .tryReduce(numbers.first!, { accum, next in try myDivide(accum, next) })\n    .catch({ _ in Just(Double.nan) })\n    .sink { print(\"\\($0)\") }\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "tryScan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/tryscan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse tryScan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value. If your accumulator closure throws an error, the publisher terminates with the error.\n\nIn the example below, tryScan(_:_:) calls a division function on elements of a collection publisher. The Publishers.TryScan publisher publishes each result until the function encounters a DivisionByZeroError, which terminates the publisher.\n\nstruct DivisionByZeroError: Error {}\n\n\n/// A function that throws a DivisionByZeroError if `current` provided by the TryScan publisher is zero.\nfunc myThrowingFunction(_ lastValue: Int, _ currentValue: Int) throws -> Int {\n    guard currentValue != 0 else { throw DivisionByZeroError() }\n    return (lastValue + currentValue) / currentValue\n }\n\n\nlet numbers = [1,2,3,4,5,0,6,7,8,9]\ncancellable = numbers.publisher\n    .tryScan(10) { try myThrowingFunction($0, $1) }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"11 6 3 1 1 -1 failure(DivisionByZeroError())\".\n\n\nIf the closure throws an error, the publisher fails with the error.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "tryMax(by:)",
        "url": "https://developer.apple.com/documentation/combine/future/trymax(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMax(by:) to determine the maximum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMax(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\ncancellable = numbers.publisher\n    .tryMax { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first > second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: completion: failure(IllegalValueError())\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "tryMin(by:)",
        "url": "https://developer.apple.com/documentation/combine/future/trymin(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMin(by:) to determine the minimum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMin(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\nnumbers.publisher\n    .tryMin { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first < second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes."
    },
    {
        "title": "tryRemoveDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/future/tryremoveduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first. If this closure throws an error, the publisher terminates with the thrown error.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse tryRemoveDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of elements using an error-throwing closure you provide. If your closure throws an error, the publisher terminates with the error.\n\nIn the example below, the closure provided to tryRemoveDuplicates(by:) returns true when two consecutive elements are equal, thereby filtering out 0, 1, 2, and 3. However, the closure throws an error when it encounters 4. The publisher then terminates with this error.\n\nstruct BadValuesError: Error {}\nlet numbers = [0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\ncancellable = numbers.publisher\n    .tryRemoveDuplicates { first, second -> Bool in\n        if (first == 4 && second == 4) {\n            throw BadValuesError()\n        }\n        return first == second\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n // Prints: \"0 1 2 3 4 failure(BadValuesError()\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryContains(where:)",
        "url": "https://developer.apple.com/documentation/combine/future/trycontains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse tryContains(where:) to find the first element in an upstream that satisfies the error-throwing closure you provide.\n\nThis operator consumes elements produced from the upstream publisher until the upstream publisher either:\n\nProduces a matching element, after which it emits true and the publisher finishes normally.\n\nEmits false if no matching element is found and the publisher finishes normally.\n\nIf the predicate throws an error, the publisher fails, passing the error to its downstream.\n\nIn the example below, the tryContains(where:) operator tests values to find an element less than 10; when the closure finds an odd number, like 3, the publisher terminates with an IllegalValueError.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers = [3, 2, 10, 5, 0, 9]\nnumbers.publisher\n    .tryContains {\n        if ($0 % 2 != 0) {\n            throw IllegalValueError()\n        }\n       return $0 < 10\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "tryMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/trymap(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element. If the closure throws an error, the publisher fails with the thrown error.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s tryMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use tryMap(_:) to transform from one kind of element to another, and to terminate publishing when the map\u2019s closure throws an error.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A tryMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the tryMap(_:)\u2019s closure fails to look up a Roman numeral, it throws an error. The tryMap(_:) operator catches this error and terminates publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from:Int) throws -> String {\n    let romanNumeralDict: [Int : String] =\n        [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\n    guard let numeral = romanNumeralDict[from] else {\n        throw ParseError()\n    }\n    return numeral\n}\nlet numbers = [5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryMap { try romanNumeral(from: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"V IV III II I completion: failure(ParseError())\"\n\n\nIf your closure doesn\u2019t throw, use map(_:) instead.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "tryDrop(while:)",
        "url": "https://developer.apple.com/documentation/combine/future/trydrop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false, and then republishes all remaining elements. If the predicate closure throws, the publisher fails with an error.\n\nDiscussion\n\nUse tryDrop(while:) to omit elements from an upstream until an error-throwing closure you provide returns false, after which the remaining items in the stream are published. If the closure throws, no elements are emitted and the publisher fails with an error.\n\nIn the example below, elements are ignored until -1 is encountered in the stream and the closure returns false. The publisher then republishes the remaining elements and finishes normally. Conversely, if the guard value in the closure had been encountered, the closure would throw and the publisher would fail with an error.\n\nstruct RangeError: Error {}\nvar numbers = [1, 2, 3, 4, 5, 6, -1, 7, 8, 9, 10]\nlet range: CountableClosedRange<Int> = (1...100)\ncancellable = numbers.publisher\n    .tryDrop {\n        guard $0 != 0 else { throw RangeError() }\n        return range.contains($0)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"-1 7 8 9 10 completion: finished\"\n// If instead numbers was [1, 2, 3, 4, 5, 6, 0, -1, 7, 8, 9, 10], tryDrop(while:) would fail with a RangeError.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/zip(_:_:)-6yf60",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two additional publishers to publish a tuple to the downstream. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject; zip(_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:          emojiPub:        zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"      emojiPub: \"\ud83d\ude00\"   zip output: (1, \"A\", \"\ud83d\ude00\")\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:          emojiPub:        zip output: (2, \"B\", \"\ud83e\udd70\")\n\n\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\")\n//  (2, \"B\", \"\ud83e\udd70\")\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "receive(_:)",
        "url": "https://developer.apple.com/documentation/combine/record/recording-swift.struct/receive(_:)",
        "html": "Discussion\n\nA fatalError will be raised if output is added after adding completion."
    },
    {
        "title": "merge(with:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/merge(with:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:). To combine elements from multiple upstream publishers, use zip(_:_:).\n\nIn this example, as merge(with:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubA.send(2)\npubB.send(50)\npubC.send(100)\n\n\n// Prints: \"1 40 90 2 50 100\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "receive(completion:)",
        "url": "https://developer.apple.com/documentation/combine/record/recording-swift.struct/receive(completion:)",
        "html": "Discussion\n\nA fatalError will be raised if more than one completion is added."
    },
    {
        "title": "merge(with:)",
        "url": "https://developer.apple.com/documentation/combine/future/merge(with:)",
        "html": "Parameters\nother\n\nAnother publisher of this publisher\u2019s type.\n\nReturn Value\n\nA publisher that emits an event when either upstream publisher emits an event.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "measureInterval(using:options:)",
        "url": "https://developer.apple.com/documentation/combine/future/measureinterval(using:options:)",
        "html": "Parameters\nscheduler\n\nA scheduler to use for tracking the timing of events.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher that emits elements representing the time interval between the elements it receives.\n\nDiscussion\n\nUse measureInterval(using:options:) to measure the time between events delivered from an upstream publisher.\n\nIn the example below, a 1-second Timer is used as the data source for an event publisher; the measureInterval(using:options:) operator reports the elapsed time between the reception of events on the main run loop:\n\ncancellable = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .measureInterval(using: RunLoop.main)\n    .sink { print(\"\\($0)\", terminator: \"\\n\") }\n\n\n// Prints:\n//      Stride(magnitude: 1.0013610124588013)\n//      Stride(magnitude: 0.9992760419845581)\n\n\nThe output type of the returned publisher is the time interval of the provided scheduler.\n\nThis operator uses the provided scheduler\u2019s now property to measure intervals between events.\n\nSee Also\nControlling Timing\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "map(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/map(_:_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of a second property on Output.\n\nkeyPath2\n\nThe key path of a third property on Output.\n\nReturn Value\n\nA publisher that publishes the values of three key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:_:) operator uses the Swift key path syntax to access the die1, die2, and die3 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these three values (as an (Int, Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n    let die3: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6),\n                            die3: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2, \\.die3)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1), \\(values.2) (total \\(values.0 + values.1 + values.2))\")\n    }\n// Prints \"Rolled: 5, 4, 2 (total 11)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple."
    },
    {
        "title": "max(by:)",
        "url": "https://developer.apple.com/documentation/combine/future/max(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max(by:) to determine the maximum value of elements received from the upstream publisher based on an ordering closure you specify.\n\nIn the example below, an array publishes enumeration elements representing playing card ranks. The max(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the maximum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .jack]\ncancellable = cards.publisher\n    .max {\n        return  $0.rawValue > $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"queen\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "ignoreOutput()",
        "url": "https://developer.apple.com/documentation/combine/future/ignoreoutput()",
        "html": "Return Value\n\nA publisher that ignores all upstream elements.\n\nDiscussion\n\nUse the ignoreOutput() operator to determine if a publisher is able to complete successfully or would fail.\n\nIn the example below, the array publisher (numbers) delivers the first five of its elements successfully, as indicated by the ignoreOutput() operator. The operator consumes, but doesn\u2019t republish the elements downstream. However, the sixth element, 0, causes the error throwing closure to catch a NoZeroValuesAllowedError that terminates the stream.\n\nstruct NoZeroValuesAllowedError: Error {}\nlet numbers = [1, 2, 3, 4, 5, 0, 6, 7, 8, 9]\ncancellable = numbers.publisher\n    .tryFilter({ anInt in\n        guard anInt != 0 else { throw NoZeroValuesAllowedError() }\n        return anInt < 20\n    })\n    .ignoreOutput()\n    .sink(receiveCompletion: {print(\"completion: \\($0)\")},\n          receiveValue: {print(\"value \\($0)\")})\n\n\n// Prints: \"completion: failure(NoZeroValuesAllowedError())\"\n\n\nThe output type of this publisher is Never.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/flatmap(maxpublishers:_:)-79ahh",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "makeConnectable()",
        "url": "https://developer.apple.com/documentation/combine/future/makeconnectable()",
        "html": "Return Value\n\nA ConnectablePublisher wrapping this publisher.\n\nDiscussion\n\nIn the following example, makeConnectable() wraps its upstream publisher (an instance of Publishers.Share) with a ConnectablePublisher. Without this, the first sink subscriber would receive all the elements from the sequence publisher and cause it to complete before the second subscriber attaches. By making the publisher connectable, the publisher doesn\u2019t produce any elements until after the connect() call.\n\n let subject = Just<String>(\"Sent\")\n let pub = subject\n     .share()\n     .makeConnectable()\n cancellable1 = pub.sink { print (\"Stream 1 received: \\($0)\")  }\n\n\n // For example purposes, use DispatchQueue to add a second subscriber\n // a second later, and then connect to the publisher a second after that.\n DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n     self.cancellable2 = pub.sink { print (\"Stream 2 received: \\($0)\") }\n }\n DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     self.connectable = pub.connect()\n }\n // Prints:\n // Stream 2 received: Sent\n // Stream 1 received: Sent\n\n\nNote\n\nThe connect() operator returns a Cancellable instance that you must retain. You can also use this instance to cancel publishing."
    },
    {
        "title": "last(where:)",
        "url": "https://developer.apple.com/documentation/combine/future/last(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse last(where:) when you need to republish only the last element of a stream that satisfies a closure you specify.\n\nIn the example below, a range publisher emits the last element that satisfies the closure\u2019s criteria, then finishes normally:\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last { $0 < 6 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"5\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "first(where:)",
        "url": "https://developer.apple.com/documentation/combine/future/first(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse first(where:) to republish only the first element of a stream that satisfies a closure you specify. The publisher ignores all elements after the first element that satisfies the closure and finishes normally. If this publisher doesn\u2019t receive any elements, it finishes without publishing.\n\nIn the example below, the provided closure causes the Publishers.FirstWhere publisher to republish the first received element that\u2019s greater than 0, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first { $0 > 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"1\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "last()",
        "url": "https://developer.apple.com/documentation/combine/future/last()",
        "html": "Return Value\n\nA publisher that only publishes the last element of a stream.\n\nDiscussion\n\nUse last() when you need to emit only the last element from an upstream publisher.\n\nIn the example below, the range publisher only emits the last element from the sequence publisher, 10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/flatmap(maxpublishers:_:)-nd14",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "mapError(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/maperror(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes the upstream failure as a parameter and returns a new error for the publisher to terminate with.\n\nReturn Value\n\nA publisher that replaces any upstream failure with a new error produced by the transform closure.\n\nDiscussion\n\nUse the mapError(_:) operator when you need to replace one error type with another, or where a downstream operator needs the error types of its inputs to match.\n\nThe following example uses a tryMap(_:) operator to divide 1 by each element produced by a sequence publisher. When the publisher produces a 0, the tryMap(_:) fails with a DivisionByZeroError. The mapError(_:) operator converts this into a MyGenericError.\n\nstruct DivisionByZeroError: Error {}\nstruct MyGenericError: Error { var wrappedError: Error }\n\n\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n       guard divisor != 0 else { throw DivisionByZeroError() }\n       return dividend / divisor\n   }\n\n\nlet divisors: [Double] = [5, 4, 3, 2, 1, 0]\ndivisors.publisher\n    .tryMap { try myDivide(1, $0) }\n    .mapError { MyGenericError(wrappedError: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") ,\n        receiveValue: { print (\"value: \\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"0.2 0.25 0.3333333333333333 0.5 1.0 completion: failure(MyGenericError(wrappedError: DivisionByZeroError()))\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "map(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/map(_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of another property on Output.\n\nReturn Value\n\nA publisher that publishes the values of two key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:) operator uses the Swift key path syntax to access the die1 and die2 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these two values (as an (Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1) (total: \\(values.0 + values.1))\")\n    }\n// Prints \"Rolled: 6, 4 (total: 10)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)",
        "url": "https://developer.apple.com/documentation/combine/future/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)",
        "html": "Parameters\nreceiveSubscription\n\nAn optional closure that executes when the publisher receives the subscription from the upstream publisher. This value defaults to nil.\n\nreceiveOutput\n\nAn optional closure that executes when the publisher receives a value from the upstream publisher. This value defaults to nil.\n\nreceiveCompletion\n\nAn optional closure that executes when the upstream publisher finishes normally or terminates with an error. This value defaults to nil.\n\nreceiveCancel\n\nAn optional closure that executes when the downstream receiver cancels publishing. This value defaults to nil.\n\nreceiveRequest\n\nAn optional closure that executes when the publisher receives a request for more elements. This value defaults to nil.\n\nReturn Value\n\nA publisher that performs the specified closures when publisher events occur.\n\nDiscussion\n\nUse handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:) when you want to examine elements as they progress through the stages of the publisher\u2019s lifecycle.\n\nIn the example below, a publisher of integers shows the effect of printing debugging information at each stage of the element-processing lifecycle:\n\nlet integers = (0...2)\ncancellable = integers.publisher\n    .handleEvents(receiveSubscription: { subs in\n        print(\"Subscription: \\(subs.combineIdentifier)\")\n    }, receiveOutput: { anInt in\n        print(\"in output handler, received \\(anInt)\")\n    }, receiveCompletion: { _ in\n        print(\"in completion handler\")\n    }, receiveCancel: {\n        print(\"received cancel\")\n    }, receiveRequest: { (demand) in\n        print(\"received demand: \\(demand.description)\")\n    })\n    .sink { _ in return }\n\n\n// Prints:\n//   received demand: unlimited\n//   Subscription: 0x7f81284734c0\n//   in output handler, received 0\n//   in output handler, received 1\n//   in output handler, received 2\n//   in completion handler\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/flatmap(maxpublishers:_:)-156rj",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/map(_:)-8i3no",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s map(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use map(_:) to transform from one kind of element to another.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A map(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the map(_:)\u2019s closure fails to look up a Roman numeral, it returns the string (unknown).\n\nlet numbers = [5, 4, 3, 2, 1, 0]\nlet romanNumeralDict: [Int : String] =\n   [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\ncancellable = numbers.publisher\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"V IV III II I (unknown)\"\n\n\nIf your closure can throw an error, use Combine\u2019s tryMap(_:) operator instead.\n\nSee Also\nMapping Elements\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "first()",
        "url": "https://developer.apple.com/documentation/combine/future/first()",
        "html": "Return Value\n\nA publisher that only publishes the first element of a stream.\n\nDiscussion\n\nUse first() to publish just the first element from an upstream publisher, then finish normally. The first() operator requests unlimited from its upstream as soon as downstream requests at least one element. If the upstream completes before first() receives any elements, it completes without emitting any values.\n\nIn this example, the first() publisher republishes the first element received from the sequence publisher, -10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first()\n    .sink { print(\"\\($0)\") }\n\n\n// Print: \"-10\"\n\nSee Also\nSelecting Specific Elements\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "filter(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/filter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value indicating whether to republish the element.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nCombine\u2019s filter(_:) operator performs an operation similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018365-filter in the Swift Standard Library: it uses a closure to test each element to determine whether to republish the element to the downstream subscriber.\n\nThe following example, uses a filter operation that receives an Int and only republishes a value if it\u2019s even.\n\nlet numbers: [Int] = [1, 2, 3, 4, 5]\ncancellable = numbers.publisher\n    .filter { $0 % 2 == 0 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 4\"\n\nSee Also\nFiltering Elements\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/combinelatest(_:_:_:)-3rce",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, combineLatest(_:_:_:) receives input from any of the publishers, combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n//\n// Prints:\n//  Result: (2, 2, 9, 1).\n//  Result: (3, 2, 9, 1).\n//  Result: (3, 12, 9, 1).\n//  Result: (13, 12, 9, 1).\n//  Result: (13, 12, 19, 1).\n\n\nIf any individual publisher of the combined set terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers."
    },
    {
        "title": "drop(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/future/drop(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA publisher to monitor for its first emitted element.\n\nReturn Value\n\nA publisher that drops elements from the upstream publisher until the other publisher produces a value.\n\nDiscussion\n\nUse drop(untilOutputFrom:) to ignore elements from the upstream publisher until another, second, publisher delivers its first element. This publisher requests a single value from the second publisher, and it ignores (drops) all elements from the upstream publisher until the second publisher produces a value. After the second publisher produces an element, drop(untilOutputFrom:) cancels its subscription to the second publisher, and allows events from the upstream publisher to pass through.\n\nAfter this publisher receives a subscription from the upstream publisher, it passes through backpressure requests from downstream to the upstream publisher. If the upstream publisher acts on those requests before the other publisher produces an item, this publisher drops the elements it receives from the upstream publisher.\n\nIn the example below, the pub1 publisher defers publishing its elements until the pub2 publisher delivers its first element:\n\nlet upstream = PassthroughSubject<Int,Never>()\nlet second = PassthroughSubject<String,Never>()\ncancellable = upstream\n    .drop(untilOutputFrom: second)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\nupstream.send(1)\nupstream.send(2)\nsecond.send(\"A\")\nupstream.send(3)\nupstream.send(4)\n// Prints \"3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "encode(encoder:)",
        "url": "https://developer.apple.com/documentation/combine/future/encode(encoder:)",
        "html": "Parameters\nencoder\n\nAn encoder that implements the TopLevelEncoder protocol.\n\nReturn Value\n\nA publisher that encodes received elements using a specified encoder, and publishes the resulting data.\n\nDiscussion\n\nUse encode(encoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to encode an Encodable struct into Data that could be used to make a JSON string (or written to disk as a binary plist in the case of property lists).\n\nIn this example, a PassthroughSubject publishes an Article. The encode(encoder:) operator encodes the properties of the Article struct into a new JSON string according to the Codable protocol adopted by Article. The operator publishes the resulting JSON string to the downstream subscriber. If the encoding operation fails, which can happen in the case of complex properties that can\u2019t be directly transformed into JSON, the stream terminates and the error is passed to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Article, Never>()\nlet cancellable = dataProvider\n    .encode(encoder: JSONEncoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\") },\n          receiveValue: {  data in\n            guard let stringRepresentation = String(data: data, encoding: .utf8) else { return }\n            print(\"Data received \\(data) string representation: \\(stringRepresentation)\")\n    })\n\n\ndataProvider.send(Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: Date()))\n\n\n// Prints: \"Data received 86 bytes string representation: {\"title\":\"My First Article\",\"author\":\"Gita Kumar\",\"pubDate\":606211803.279603}\"\n\nSee Also\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder."
    },
    {
        "title": "delay(for:tolerance:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/future/delay(for:tolerance:scheduler:options:)",
        "html": "Parameters\ninterval\n\nThe amount of time to delay.\n\ntolerance\n\nThe allowed tolerance in delivering delayed events. The Delay publisher may deliver elements this much sooner or later than the interval specifies.\n\nscheduler\n\nThe scheduler to deliver the delayed events.\n\noptions\n\nOptions relevant to the scheduler\u2019s behavior.\n\nReturn Value\n\nA publisher that delays delivery of elements and completion to the downstream receiver.\n\nDiscussion\n\nUse delay(for:tolerance:scheduler:options:) when you need to delay the delivery of elements to a downstream by a specified amount of time.\n\nIn this example, a Timer publishes an event every second. The delay(for:tolerance:scheduler:options:) operator holds the delivery of the initial element for 3 seconds (\u00b10.5 seconds), after which each element is delivered to the downstream on the main run loop after the specified delay:\n\nlet df = DateFormatter()\ndf.dateStyle = .none\ndf.timeStyle = .long\ncancellable = Timer.publish(every: 1.0, on: .main, in: .default)\n    .autoconnect()\n    .handleEvents(receiveOutput: { date in\n        print (\"Sending Timestamp \\'\\(df.string(from: date))\\' to delay()\")\n    })\n    .delay(for: .seconds(3), scheduler: RunLoop.main, options: .none)\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \"\\n\") },\n        receiveValue: { value in\n            let now = Date()\n            print (\"At \\(df.string(from: now)) received  Timestamp \\'\\(df.string(from: value))\\' sent: \\(String(format: \"%.2f\", now.timeIntervalSince(value))) secs ago\", terminator: \"\\n\")\n        }\n    )\n\n\n// Prints:\n//    Sending Timestamp '5:02:33 PM PDT' to delay()\n//    Sending Timestamp '5:02:34 PM PDT' to delay()\n//    Sending Timestamp '5:02:35 PM PDT' to delay()\n//    Sending Timestamp '5:02:36 PM PDT' to delay()\n//    At 5:02:36 PM PDT received  Timestamp '5:02:33 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:37 PM PDT' to delay()\n//    At 5:02:37 PM PDT received  Timestamp '5:02:34 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:38 PM PDT' to delay()\n//    At 5:02:38 PM PDT received  Timestamp '5:02:35 PM PDT' sent: 3.00 secs ago\n\n\nThe delay affects the delivery of elements and completion, but not of the original subscription.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "contains(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/contains(_:)",
        "html": "Parameters\noutput\n\nAn element to match against.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(_:) to find the first element in an upstream that\u2019s equal to the supplied argument. The contains publisher consumes all received elements until the upstream publisher produces a matching element. Upon finding the first match, it emits true and finishes normally. If the upstream finishes normally without producing a matching element, this publisher emits false and finishes.\n\nIn the example below, the contains(_:) operator emits true the first time it receives the value 5 from the numbers.publisher, and then finishes normally.\n\nlet numbers = [-1, 5, 10, 5]\nnumbers.publisher\n    .contains(5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/combinelatest(_:_:_:)-12ibn",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest<P, Q>(_:,_:) to combine the current and two additional publishers and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer. All upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nIn the example below, combineLatest() receives the most-recent values published by three publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3) { firstValue, secondValue, thirdValue in\n        return firstValue * secondValue * thirdValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(10)\n\n\npub.send(9)\npub3.send(4)\npub2.send(12)\n\n\n// Prints:\n//  Result: 40.     // pub = 2, pub2 = 2, pub3 = 10\n//  Result: 180.    // pub = 9, pub2 = 2, pub3 = 10\n//  Result: 72.     // pub = 9, pub2 = 2, pub3 = 4\n//  Result: 432.    // pub = 9, pub2 = 12, pub3 = 4\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "drop(while:)",
        "url": "https://developer.apple.com/documentation/combine/future/drop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an upstream publisher until the element received meets a condition you specify.\n\nIn the example below, the operator omits all elements in the stream until the first element arrives that\u2019s a positive integer, after which the operator publishes all remaining elements:\n\nlet numbers = [-62, -1, 0, 10, 0, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .drop { $0 <= 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10 0, 22 41 -1 5\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "dropFirst(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/dropfirst(_:)",
        "html": "Parameters\ncount\n\nThe number of elements to omit. The default is 1.\n\nReturn Value\n\nA publisher that doesn\u2019t republish the first count elements.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the upstream publisher, and republish the remaining elements.\n\nThe example below drops the first five elements from the stream:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncancellable = numbers.publisher\n    .dropFirst(5)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"6 7 8 9 10 \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "count()",
        "url": "https://developer.apple.com/documentation/combine/future/count()",
        "html": "Return Value\n\nA publisher that consumes all elements until the upstream publisher finishes, then emits a single value with the total number of elements received.\n\nDiscussion\n\nUse count() to determine the number of elements received from the upstream publisher before it completes:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .count()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"11\"\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/combinelatest(_:_:)-3u26b",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn this example, three instances of PassthroughSubject emit values; as combineLatest(_:_:) receives input from any of the upstream publishers, it combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: (2, 2, 9).\n//  Result: (3, 2, 9).\n//  Result: (3, 12, 9).\n//  Result: (13, 12, 9).\n//  Result: (13, 12, 19).\n\n\nIf any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "buffer(size:prefetch:whenFull:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/buffer(size:prefetch:whenfull:)",
        "html": "Parameters\nsize\n\nThe maximum number of elements to store.\n\nprefetch\n\nThe strategy to initially populate the buffer.\n\nwhenFull\n\nThe action to take when the buffer becomes full.\n\nReturn Value\n\nA publisher that buffers elements received from an upstream publisher.\n\nDiscussion\n\nUse buffer(size:prefetch:whenFull:) to collect a specific number of elements from an upstream publisher before republishing them to the downstream subscriber according to the Publishers.BufferingStrategy and Publishers.PrefetchStrategy strategy you specify.\n\nIf the publisher completes before reaching the size threshold, it buffers the elements and publishes them downstream prior to completion."
    },
    {
        "title": "tryCompactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/trycompactmap(_:)",
        "html": "Parameters\ntransform\n\nAn error-throwing closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of calling the supplied closure.\n\nDiscussion\n\nUse tryCompactMap(_:) to remove nil elements from a publisher\u2019s stream based on an error-throwing closure you provide. If the closure throws an error, the publisher cancels the upstream publisher and sends the thrown error to the downstream subscriber as a Failure.\n\nThe following example uses an array of numbers as the source for a collection-based publisher. A tryCompactMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform the numbers from its Arabic to Roman numerals, as an optional String.\n\nIf the closure called by tryCompactMap(_:) fails to look up a Roman numeral, it returns the optional String (unknown).\n\nIf the closure called by tryCompactMap(_:) determines the input is 0, it throws an error. The tryCompactMap(_:) operator catches this error and stops publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from: Int) throws -> String? {\n    let romanNumeralDict: [Int : String] =\n        [1: \"I\", 2: \"II\", 3: \"III\", 4: \"IV\", 5: \"V\"]\n    guard from != 0 else { throw ParseError() }\n    return romanNumeralDict[from]\n}\nlet numbers = [6, 5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryCompactMap { try romanNumeral(from: $0) }\n    .sink(\n          receiveCompletion: { print (\"\\($0)\") },\n          receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"(Unknown) V IV III II I failure(ParseError())\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryAllSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/tryallsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete. The closure may throw an error, in which case the publisher cancels the upstream publisher and fails with the thrown error.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the tryAllSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria in an error-throwing predicate you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes. If the predicate throws an error, the publisher fails and passes the error to its downstream subscriber.\n\nIn the example below, an error-throwing predicate tests if each of an integer array publisher\u2019s elements fall into the targetRange; the predicate throws an error if an element is zero and terminates the stream.\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 10, 5, 0]\n\n\nnumbers.publisher\n    .tryAllSatisfy { anInt in\n        guard anInt != 0 else { throw RangeError() }\n        return targetRange.contains(anInt)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(RangeError())\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate."
    },
    {
        "title": "retry(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/retry(_:)",
        "html": "Parameters\nretries\n\nThe number of times to attempt to recreate the subscription.\n\nReturn Value\n\nA publisher that attempts to recreate its subscription to a failed upstream publisher.\n\nDiscussion\n\nUse retry(_:) to try a connecting to an upstream publisher after a failed connection attempt.\n\nIn the example below, a URLSession.DataTaskPublisher attempts to connect to a remote URL. If the connection attempt succeeds, it publishes the remote service\u2019s HTML to the downstream publisher and completes normally. Otherwise, the retry operator attempts to reestablish the connection. If after three attempts the publisher still can\u2019t connect to the remote URL, the catch(_:) operator replaces the error with a new publisher that publishes a \u201cconnection timed out\u201d HTML page. After the downstream subscriber receives the timed out message, the stream completes normally.\n\nstruct WebSiteData: Codable {\n    var rawHTML: String\n}\n\n\nlet myURL = URL(string: \"https://www.example.com\")\n\n\ncancellable = URLSession.shared.dataTaskPublisher(for: myURL!)\n    .retry(3)\n    .map({ (page) -> WebSiteData in\n        return WebSiteData(rawHTML: String(decoding: page.data, as: UTF8.self))\n    })\n    .catch { error in\n        return Just(WebSiteData(rawHTML: \"<HTML>Unable to load page - timed out.</HTML>\"))\n}\n.sink(receiveCompletion: { print (\"completion: \\($0)\") },\n      receiveValue: { print (\"value: \\($0)\") }\n )\n\n\n// Prints: The HTML content from the remote URL upon a successful connection,\n//         or returns \"<HTML>Unable to load page - timed out.</HTML>\" if the number of retries exceeds the specified value.\n\n\nAfter exceeding the specified number of retries, the publisher passes the failure to the downstream receiver.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/subscribe(_:)-53j37",
        "html": "Parameters\nsubject\n\nThe subject to attach to this publisher.\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher."
    },
    {
        "title": "share()",
        "url": "https://developer.apple.com/documentation/combine/future/share()",
        "html": "Return Value\n\nA class instance that shares elements received from its upstream to multiple subscribers.\n\nDiscussion\n\nThe publisher returned by this operator supports multiple subscribers, all of whom receive unchanged elements and completion states from the upstream publisher.\n\nTip\n\nPublishers.Share is effectively a combination of the Publishers.Multicast and PassthroughSubject publishers, with an implicit autoconnect().\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a share() operator to share the same random number to each of two subscribers. This example uses a delay(for:tolerance:scheduler:options:) operator only to prevent the first subscriber from exhausting the sequence publisher immediately; an asynchronous publisher wouldn\u2019t need this.\n\nlet pub = (1...3).publisher\n    .delay(for: 1, scheduler: DispatchQueue.main)\n    .map( { _ in return Int.random(in: 0...100) } )\n    .print(\"Random\")\n    .share()\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\n\n\n// Prints:\n// Random: receive value: (20)\n// Stream 1 received: 20\n// Stream 2 received: 20\n// Random: receive value: (85)\n// Stream 1 received: 85\n// Stream 2 received: 85\n// Random: receive value: (98)\n// Stream 1 received: 98\n// Stream 2 received: 98\n\n\nWithout the share() operator, stream 1 receives three random values, followed by stream 2 receiving three different random values.\n\nAlso note that Publishers.Share is a class rather than a structure like most other publishers. This means you can use this operator to create a publisher instance that uses reference semantics.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers."
    },
    {
        "title": "prefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/future/prefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate indicates publishing should finish.\n\nDiscussion\n\nUse prefix(while:) to emit values while elements from the upstream publisher meet a condition you specify. The publisher finishes when the closure returns false.\n\nIn the example below, the prefix(while:) operator emits values while the element it receives is less than five:\n\nlet numbers = (0...10)\nnumbers.publisher\n    .prefix { $0 < 5 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "merge(with:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/merge(with:_:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nh\n\nAn eighth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\nlet pubH = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF, pubG, pubH)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\npubH.send(1000)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\npubH.send(1001)\n\n\n//Prints: \"1 40 90 -1 33 44 54 1000 2 50 100 -2 33 33 54 1001\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "output(at:)",
        "url": "https://developer.apple.com/documentation/combine/future/output(at:)",
        "html": "Parameters\nindex\n\nThe index that indicates the element to publish.\n\nReturn Value\n\nA publisher that publishes a specific indexed element.\n\nDiscussion\n\nUse output(at:) when you need to republish a specific element specified by its position in the stream. If the publisher completes normally or with an error before publishing the specified element, then the publisher doesn\u2019t produce any elements.\n\nIn the example below, the array publisher emits the fifth element in the sequence of published elements:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.publisher\n    .output(at: 5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"6\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "multicast(subject:)",
        "url": "https://developer.apple.com/documentation/combine/future/multicast(subject:)",
        "html": "Parameters\nsubject\n\nA subject to deliver elements to downstream subscribers.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(_:), this method produces a publisher that shares the provided Subject among all the downstream subscribers.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(subject:) operator with a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast(subject: PassthroughSubject<(String, Int), Never>())\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 78))\n// Stream 2 received: (\"First\", 78)\n// Stream 1 received: (\"First\", 78)\n// Random: receive value: ((\"Second\", 98))\n// Stream 2 received: (\"Second\", 98)\n// Stream 1 received: (\"Second\", 98)\n// Random: receive value: ((\"Third\", 61))\n// Stream 2 received: (\"Third\", 61)\n// Stream 1 received: (\"Third\", 61)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "min()",
        "url": "https://developer.apple.com/documentation/combine/future/min()",
        "html": "Return Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to find the minimum value in a stream of elements from an upstream publisher.\n\nIn the example below, the min(by:) operator emits a value when the publisher finishes, that value is the minimum of the values received from upstream, which is -1.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .min()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"-1\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "multicast(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/multicast(_:)",
        "html": "Parameters\ncreateSubject\n\nA closure to create a new Subject each time a subscriber attaches to the multicast publisher.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(subject:), this method produces a publisher that creates a separate Subject for each subscriber.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(_:) operator whose closure creates a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast { PassthroughSubject<(String, Int), Never>() }\n\n\ncancellable1 = pub\n   .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n   .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 9))\n// Stream 2 received: (\"First\", 9)\n// Stream 1 received: (\"First\", 9)\n// Random: receive value: ((\"Second\", 46))\n// Stream 2 received: (\"Second\", 46)\n// Stream 1 received: (\"Second\", 46)\n// Random: receive value: ((\"Third\", 26))\n// Stream 2 received: (\"Third\", 26)\n// Stream 1 received: (\"Third\", 26)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "merge(with:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/merge(with:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\n\n\n//Prints: \"1 40 90 -1 33 44 2 50 100 -2 33 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "min(by:)",
        "url": "https://developer.apple.com/documentation/combine/future/min(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to determine the minimum value in the stream of elements from an upstream publisher using a comparison operation you specify.\n\nThis operator is useful when the value received from the upstream publisher isn\u2019t Comparable.\n\nIn the example below an array publishes enumeration elements representing playing card ranks. The min(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the minimum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .king]\ncancellable = cards.publisher\n    .min {\n        return  $0.rawValue < $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"ace\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "merge(with:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/merge(with:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\n let pubA = PassthroughSubject<Int, Never>()\n let pubB = PassthroughSubject<Int, Never>()\n let pubC = PassthroughSubject<Int, Never>()\n let pubD = PassthroughSubject<Int, Never>()\n let pubE = PassthroughSubject<Int, Never>()\n\n\n cancellable = pubA\n     .merge(with: pubB, pubC, pubD, pubE)\n     .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\n pubA.send(1)\n pubB.send(40)\n pubC.send(90)\n pubD.send(-1)\n pubE.send(33)\n pubA.send(2)\n pubB.send(50)\n pubC.send(100)\n pubD.send(-2)\n pubE.send(33)\n\n\n // Prints: \"1 40 90 -1 33 2 50 100 -2 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "prefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/prefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate indicates publishing should finish.\n\nDiscussion\n\nUse prefix(while:) to emit values while elements from the upstream publisher meet a condition you specify. The publisher finishes when the closure returns false.\n\nIn the example below, the prefix(while:) operator emits values while the element it receives is less than five:\n\nlet numbers = (0...10)\nnumbers.publisher\n    .prefix { $0 < 5 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "reduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/reduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nA closure that produces a new value by taking the previously-accumulated value and the next element it receives from the upstream publisher.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes. If reduce(_:_:) receives an error from the upstream publisher, the operator delivers it to the downstream subscriber, the publisher terminates and publishes no value.\n\nDiscussion\n\nUse reduce(_:_:) to collect a stream of elements and produce an accumulated value based on a closure you provide.\n\nIn the following example, the reduce(_:_:) operator collects all the integer values it receives from its upstream publisher:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .reduce(0, { accum, next in accum + next })\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"55\"\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "switchToLatest()",
        "url": "https://developer.apple.com/documentation/combine/deferred/switchtolatest()",
        "html": "Discussion\n\nThis operator works with an upstream publisher of publishers, flattening the stream of elements to appear as if they were coming from a single stream of elements. It switches the inner publisher as new ones arrive but keeps the outer publisher constant for downstream subscribers.\n\nWhen this operator receives a new publisher from the upstream publisher, it cancels its previous subscription. Use this feature to prevent earlier publishers from performing unnecessary work, such as creating network request publishers from frequently updating user interface publishers.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/combinelatest(_:_:_:)-8edp6",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, combineLatest(_:_:_:) receives input from any of the publishers, combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n//\n// Prints:\n//  Result: (2, 2, 9, 1).\n//  Result: (3, 2, 9, 1).\n//  Result: (3, 12, 9, 1).\n//  Result: (13, 12, 9, 1).\n//  Result: (13, 12, 19, 1).\n\n\nIf any individual publisher of the combined set terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/combinelatest(_:_:_:)-5ijc7",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest<P, Q>(_:,_:) to combine the current and two additional publishers and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer. All upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nIn the example below, combineLatest() receives the most-recent values published by three publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3) { firstValue, secondValue, thirdValue in\n        return firstValue * secondValue * thirdValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(10)\n\n\npub.send(9)\npub3.send(4)\npub2.send(12)\n\n\n// Prints:\n//  Result: 40.     // pub = 2, pub2 = 2, pub3 = 10\n//  Result: 180.    // pub = 9, pub2 = 2, pub3 = 10\n//  Result: 72.     // pub = 9, pub2 = 2, pub3 = 4\n//  Result: 432.    // pub = 9, pub2 = 12, pub3 = 4\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "setFailureType(to:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/setfailuretype(to:)",
        "html": "Parameters\nfailureType\n\nThe Failure type presented by this publisher.\n\nReturn Value\n\nA publisher that appears to send the specified failure type.\n\nDiscussion\n\nUse setFailureType(to:) when you need set the error type of a publisher that cannot fail.\n\nConversely, if the upstream can fail, you would use mapError(_:) to provide instructions on converting the error types to needed by the downstream publisher\u2019s inputs.\n\nThe following example has two publishers with mismatched error types: pub1\u2019s error type is Never, and pub2\u2019s error type is Error. Because of the mismatch, the combineLatest(_:) operator requires that pub1 use setFailureType(to:) to make it appear that pub1 can produce the Error type, like pub2 can.\n\nlet pub1 = [0, 1, 2, 3, 4, 5].publisher\nlet pub2 = CurrentValueSubject<Int, Error>(0)\nlet cancellable = pub1\n    .setFailureType(to: Error.self)\n    .combineLatest(pub2)\n    .sink(\n        receiveCompletion: { print (\"completed: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\")}\n     )\n\n\n// Prints: \"value: (5, 0)\".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure."
    },
    {
        "title": "collect()",
        "url": "https://developer.apple.com/documentation/combine/future/collect()",
        "html": "Return Value\n\nA publisher that collects all received items and returns them as an array upon completion.\n\nDiscussion\n\nUse collect() to gather elements into an array that the operator emits after the upstream publisher finishes.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThis publisher requests an unlimited number of elements from the upstream publisher and uses an unbounded amount of memory to store the received values. The publisher may exert memory pressure on the system for very large sets of elements.\n\nThe collect() operator only sends the collected array to its downstream receiver after a request whose demand is greater than 0 items. Otherwise, collect() waits until it receives a non-zero request.\n\nIn the example below, an Integer range is a publisher that emits an array of integers:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\nSee Also\nReducing Elements\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/combinelatest(_:_:)-6bp2w",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn this example, three instances of PassthroughSubject emit values; as combineLatest(_:_:) receives input from any of the upstream publishers, it combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: (2, 2, 9).\n//  Result: (3, 2, 9).\n//  Result: (3, 12, 9).\n//  Result: (13, 12, 9).\n//  Result: (13, 12, 19).\n\n\nIf any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/combinelatest(_:_:)-3578x",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest<P,T>(_:) to combine the current and one additional publisher and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn the example below, combineLatest() receives the most-recent values published by the two publishers, it multiplies them together, and republishes the result:\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2) { (first, second) in\n        return first * second\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(9)\npub1.send(3)\npub2.send(12)\npub1.send(13)\n//\n// Prints:\n//Result: 4.    (pub1 latest = 2, pub2 latest = 2)\n//Result: 18.   (pub1 latest = 9, pub2 latest = 2)\n//Result: 6.    (pub1 latest = 3, pub2 latest = 2)\n//Result: 36.   (pub1 latest = 3, pub2 latest = 12)\n//Result: 156.  (pub1 latest = 13, pub2 latest = 12)\n\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/subscribe(_:)-2c714",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this publisher. After attaching, the subscriber can start to receive values.\n\nDiscussion\n\nAlways call this function instead of receive(subscriber:). Adopters of Publisher must implement receive(subscriber:). The implementation of subscribe(_:) provided by Publisher calls through to receive(subscriber:).\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "allSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/allsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the allSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes.\n\nIn the example below, the allSatisfy(_:) operator tests if each an integer array publisher\u2019s elements fall into the targetRange:\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .allSatisfy { targetRange.contains($0) }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "combineLatest(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/combinelatest(_:)",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest(_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To pair elements from multiple publishers, use zip(_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn this example, PassthroughSubject pub1 and also pub2 emit values; as combineLatest(_:) receives input from either upstream publisher, it combines the latest value from each publisher into a tuple and publishes it.\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(3)\npub1.send(45)\npub2.send(22)\n\n\n// Prints:\n//    Result: (2, 2).    // pub1 latest = 2, pub2 latest = 2\n//    Result: (3, 2).    // pub1 latest = 3, pub2 latest = 2\n//    Result: (45, 2).   // pub1 latest = 45, pub2 latest = 2\n//    Result: (45, 22).  // pub1 latest = 45, pub2 latest = 22\n\n\nWhen all upstream publishers finish, this publisher finishes. If an upstream publisher never publishes a value, this publisher never finishes.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)",
        "url": "https://developer.apple.com/documentation/combine/future/breakpoint(receivesubscription:receiveoutput:receivecompletion:)",
        "html": "Parameters\nreceiveSubscription\n\nA closure that executes when the publisher receives a subscription. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveOutput\n\nA closure that executes when the publisher receives a value. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveCompletion\n\nA closure that executes when the publisher receives a completion. Return true from this closure to raise SIGTRAP, or false to continue.\n\nReturn Value\n\nA publisher that raises a debugger signal when one of the provided closures returns true.\n\nDiscussion\n\nUse breakpoint(receiveSubscription:receiveOutput:receiveCompletion:) to examine one or more stages of the subscribe/publish/completion process and stop in the debugger, based on conditions you specify. When any of the provided closures returns true, this operator raises the SIGTRAP signal to stop the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn the example below, a PassthroughSubject publishes strings to a breakpoint republisher. When the breakpoint receives the string \u201cDEBUGGER\u201d, it returns true, which stops the app in the debugger.\n\nlet publisher = PassthroughSubject<String?, Never>()\ncancellable = publisher\n    .breakpoint(\n        receiveOutput: { value in return value == \"DEBUGGER\" }\n    )\n    .sink { print(\"\\(String(describing: $0))\" , terminator: \" \") }\n\n\npublisher.send(\"DEBUGGER\")\n\n\n// Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n// Depending on your specific environment, the console messages may\n// also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "assign(to:)",
        "url": "https://developer.apple.com/documentation/combine/future/assign(to:)",
        "html": "Parameters\npublished\n\nA property marked with the @Published attribute, which receives and republishes all elements received from the upstream publisher.\n\nDiscussion\n\nUse this operator when you want to receive elements from a publisher and republish them through a property marked with the @Published attribute. The assign(to:) operator manages the life cycle of the subscription, canceling the subscription automatically when the Published instance deinitializes. Because of this, the assign(to:) operator doesn\u2019t return an AnyCancellable that you\u2019re responsible for like assign(to:on:) does.\n\nThe example below shows a model class that receives elements from an internal Timer.TimerPublisher, and assigns them to a @Published property called lastUpdated. Because the to parameter has the inout keyword, you need to use the & operator when calling this method.\n\nclass MyModel: ObservableObject {\n    @Published var lastUpdated: Date = Date()\n    init() {\n         Timer.publish(every: 1.0, on: .main, in: .common)\n             .autoconnect()\n             .assign(to: &$lastUpdated)\n    }\n}\n\n\nIf you instead implemented MyModel with assign(to: lastUpdated, on: self), storing the returned AnyCancellable instance could cause a reference cycle, because the Subscribers.Assign subscriber would hold a strong reference to self. Using assign(to:) solves this problem.\n\nWhile the to parameter uses the inout keyword, this method doesn\u2019t replace a reference type passed to it. Instead, this notation indicates that the operator may modify members of the assigned object, as seen in the following example:\n\n    class MyModel2: ObservableObject {\n        @Published var id: Int = 0\n    }\n    let model2 = MyModel2()\n    Just(100).assign(to: &model2.$id)\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "collect(_:options:)",
        "url": "https://developer.apple.com/documentation/combine/future/collect(_:options:)",
        "html": "Parameters\nstrategy\n\nThe timing group strategy used by the operator to collect and publish elements.\n\noptions\n\nScheduler options to use for the strategy.\n\nReturn Value\n\nA publisher that collects elements by a given strategy, and emits a single array of the collection.\n\nDiscussion\n\nUse collect(_:options:) to emit arrays of elements on a schedule specified by a Scheduler and Stride that you provide. At the end of each scheduled interval, the publisher sends an array that contains the items it collected. If the upstream publisher finishes before filling the buffer, the publisher sends an array that contains items it received. This may be fewer than the number of elements specified in the requested Stride.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThe example above collects timestamps generated on a one-second Timer in groups (Stride) of five.\n\nlet sub = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .collect(.byTime(RunLoop.main, .seconds(5)))\n    .sink { print(\"\\($0)\", terminator: \"\\n\\n\") }\n\n\n// Prints: \"[2020-01-24 00:54:46 +0000, 2020-01-24 00:54:47 +0000,\n//          2020-01-24 00:54:48 +0000, 2020-01-24 00:54:49 +0000,\n//          2020-01-24 00:54:50 +0000]\"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "collect(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/collect(_:)",
        "html": "Parameters\ncount\n\nThe maximum number of received elements to buffer before publishing.\n\nReturn Value\n\nA publisher that collects up to the specified number of elements, and then publishes them as an array.\n\nDiscussion\n\nUse collect(_:) to emit arrays of at most count elements from an upstream publisher. If the upstream publisher finishes before collecting the specified number of elements, the publisher sends an array of only the items it received. This may be fewer than count elements.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nIn the example below, the collect(_:) operator emits one partial and two full arrays based on the requested collection size of 5:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect(5)\n    .sink { print(\"\\($0), terminator: \" \"\") }\n\n\n// Prints \"[0, 1, 2, 3, 4] [5, 6, 7, 8, 9] [10] \"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "values",
        "url": "https://developer.apple.com/documentation/combine/future/values",
        "html": "Discussion\n\nThis property provides an AsyncThrowingPublisher, which allows you to use the Swift async-await syntax to receive the publisher\u2019s elements. Because AsyncPublisher conforms to AsyncSequence, you iterate over its elements with a for-await-in loop, rather than attaching a subscriber. If the publisher terminates with an error, the awaiting caller receives the error as a throw.\n\nThe following example shows how to use the values property to receive elements asynchronously. The example adapts a code snippet from the tryFilter(_:) operator\u2019s documentation, which filters a sequence to only emit even integers, and terminate with an error on a 0. This example replaces the Subscribers.Sink subscriber with a for-await-in loop that iterates over the AsyncPublisher provided by the values property. With this approach, the error handling previously provided in the sink subscriber\u2019s receiveCompletion closure goes instead in a catch block.\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\nlet filterPublisher = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n\n\ndo {\n    for try await number in filterPublisher.values {\n        print (\"\\(number)\", terminator: \" \")\n    }\n} catch {\n    print (\"\\(error)\")\n}\n"
    },
    {
        "title": "zip(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/zip(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from four upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:_:) to return a new publisher that combines the elements from three other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, the PassthroughSubject publishers, numbersPub, fractionsPub, lettersPub, and emojiPub emit values. The zip(_:_:_:_:) operator receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times and prints out the value in fractionsPub.\n\nlet numbersPub = PassthroughSubject<Int, Never>()      // first publisher\nlet lettersPub = PassthroughSubject<String, Never>()   // second\nlet emojiPub = PassthroughSubject<String, Never>()     // third\nlet fractionsPub  = PassthroughSubject<Double, Never>()// fourth\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub) { anInt, aLetter, anEmoji, aFraction  in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt)) \\(aFraction)\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:          emojiPub:          zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:\"\ud83d\ude00\"      zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"      emojiPub:          zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"      emojiPub:          zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n// Prints:\n//1 \ud83d\ude00 A 0.1\n//2 \ud83e\udd70\ud83e\udd70 BB 0.8\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples."
    },
    {
        "title": "Decodable Implementations",
        "url": "https://developer.apple.com/documentation/combine/record/recording-swift.struct/decodable-implementations",
        "html": "Topics\nInitializers\ninit(from: Decoder) throws\nCreates a new instance by decoding from the given decoder.\nAvailable when Output conforms to Decodable, Output conforms to Encodable, Failure conforms to Decodable, Failure conforms to Encodable, and Failure conforms to Error."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/zip(_:_:_:)-2fqcw",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from three other publishers to publish a tuple to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, several PassthroughSubject instances emit values; zip(_:_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\nlet fractionsPub  = PassthroughSubject<Double, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 2,3     lettersPub: \"A\"    emojiPub: \"\ud83d\ude00\"  fractionsPub: 0.1     zip output: (1, \"A\", \"\ud83d\ude00\", 0.1)\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: (2, \"B\", \"\ud83e\udd70\", 0.8)\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\", 0.1)\n//  (2, \"B\", \"\ud83e\udd70\", 0.8)\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "init(from:)",
        "url": "https://developer.apple.com/documentation/combine/record/init(from:)",
        "html": "Parameters\ndecoder\n\nThe decoder to read data from.\n\nDiscussion\n\nThis initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid."
    },
    {
        "title": "receive(subscriber:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/receive(subscriber:)",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this Publisher, after which it can receive values.\n\nDiscussion\n\nImplementations of Publisher must implement this method.\n\nThe provided implementation of subscribe(_:)calls this method.\n\nSee Also\nWorking with Subscribers\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/zip(_:_:_:)-1r37h",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from three upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from two other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject that emit values; zip(_:_:_:) receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(letters, emoji) { anInt, aLetter, anEmoji in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt))\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:        emojiPub:            zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"    emojiPub:\"\ud83d\ude00\"        zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:        emojiPub:\"\ud83d\ude00\", \"\ud83e\udd70\"  zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n\n\n// Prints:\n// \ud83d\ude00 A\n// \ud83e\udd70\ud83e\udd70 BB\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/zip(_:_:)-2vu8s",
        "html": "Parameters\nother\n\nAnother publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from two upstream publishers.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two publishers using a transformation you specify to publish a new value to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, PassthroughSubject instances numbersPub and lettersPub emit values; zip(_:_:) receives the oldest value from each publisher, uses the Int from numbersPub and publishes a string that repeats the String from lettersPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\ncancellable = numbersPub\n    .zip(lettersPub) { anInt, aLetter in\n        String(repeating: aLetter, count: anInt)\n    }\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:       zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:       zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:       zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"   zip output: \"A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"   zip output: \"BB\"\n// Prints:\n//  A\n//  BB\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "merge(with:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/merge(with:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\n\n\n// Prints: \"1 40 90 -1 2 50 100 -2 \"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "zip(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/zip(_:)",
        "html": "Parameters\nother\n\nAnother publisher.\n\nReturn Value\n\nA publisher that emits pairs of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:) to combine the latest elements from two publishers and emit a tuple to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together as a tuple to the subscriber.\n\nMuch like a zipper or zip fastener on a piece of clothing pulls together rows of teeth to link the two sides, zip(_:) combines streams from two different publishers by linking pairs of elements from each side.\n\nIn this example, numbers and letters are PassthroughSubjects that emit values; once zip(_:) receives one value from each, it publishes the pair as a tuple to the downstream subscriber. It then waits for the next pair of values.\n\n let numbersPub = PassthroughSubject<Int, Never>()\n let lettersPub = PassthroughSubject<String, Never>()\n\n\n cancellable = numbersPub\n     .zip(lettersPub)\n     .sink { print(\"\\($0)\") }\n numbersPub.send(1)    // numbersPub: 1      lettersPub:        zip output: <none>\n numbersPub.send(2)    // numbersPub: 1,2    lettersPub:        zip output: <none>\n letters.send(\"A\")     // numbers: 1,2       letters:\"A\"        zip output: <none>\n numbers.send(3)       // numbers: 1,2,3     letters:           zip output: (1,\"A\")\n letters.send(\"B\")     // numbers: 1,2,3     letters: \"B\"       zip output: (2,\"B\")\n\n\n // Prints:\n //  (1, \"A\")\n //  (2, \"B\")\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "tryPrefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/tryprefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value indicating whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate throws or indicates publishing should finish.\n\nDiscussion\n\nUse tryPrefix(while:) to emit values from the upstream publisher that meet a condition you specify in an error-throwing closure. The publisher finishes when the closure returns false. If the closure throws an error, the publisher fails with that error.\n\nstruct OutOfRangeError: Error {}\n\n\nlet numbers = (0...10).reversed()\ncancellable = numbers.publisher\n    .tryPrefix {\n        guard $0 != 0 else {throw OutOfRangeError()}\n        return $0 <= numbers.max()!\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"10 9 8 7 6 5 4 3 2 1 completion: failure(OutOfRangeError()) \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryMin(by:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/trymin(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMin(by:) to determine the minimum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMin(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\nnumbers.publisher\n    .tryMin { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first < second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes."
    },
    {
        "title": "tryMax(by:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/trymax(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMax(by:) to determine the maximum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMax(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\ncancellable = numbers.publisher\n    .tryMax { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first > second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: completion: failure(IllegalValueError())\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "tryReduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/tryreduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nAn error-throwing closure that takes the previously-accumulated value and the next element from the upstream publisher to produce a new value.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes.\n\nDiscussion\n\nUse tryReduce(_:_:) to collect a stream of elements and produce an accumulated value based on an error-throwing closure you provide. If the closure throws an error, the publisher fails and passes the error to its subscriber.\n\nIn the example below, the publisher\u2019s 0 element causes the myDivide(_:_:) function to throw an error and publish the doc://com.apple.documentation/documentation/Swift/Double/1641611-nan result:\n\nstruct DivisionByZeroError: Error {}\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n    guard divisor != 0 else { throw DivisionByZeroError() }\n    return dividend / divisor\n}\n\n\nvar numbers: [Double] = [5, 4, 3, 2, 1, 0]\nnumbers.publisher\n    .tryReduce(numbers.first!, { accum, next in try myDivide(accum, next) })\n    .catch({ _ in Just(Double.nan) })\n    .sink { print(\"\\($0)\") }\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "tryRemoveDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/tryremoveduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first. If this closure throws an error, the publisher terminates with the thrown error.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse tryRemoveDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of elements using an error-throwing closure you provide. If your closure throws an error, the publisher terminates with the error.\n\nIn the example below, the closure provided to tryRemoveDuplicates(by:) returns true when two consecutive elements are equal, thereby filtering out 0, 1, 2, and 3. However, the closure throws an error when it encounters 4. The publisher then terminates with this error.\n\nstruct BadValuesError: Error {}\nlet numbers = [0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\ncancellable = numbers.publisher\n    .tryRemoveDuplicates { first, second -> Bool in\n        if (first == 4 && second == 4) {\n            throw BadValuesError()\n        }\n        return first == second\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n // Prints: \"0 1 2 3 4 failure(BadValuesError()\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryFirst(where:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/tryfirst(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse tryFirst(where:) when you need to republish only the first element of a stream that satisfies an error-throwing closure you specify. The publisher ignores all elements after the first. If this publisher doesn\u2019t receive any elements, it finishes without publishing. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a range publisher emits the first element in the range then finishes normally:\n\nlet numberRange: ClosedRange<Int> = (-1...50)\nnumberRange.publisher\n    .tryFirst {\n        guard $0 < 99 else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"-1 completion: finished\"\n// If instead the number range were ClosedRange<Int> = (100...200), the tryFirst operator would terminate publishing with a RangeError.\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "tryMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/trymap(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element. If the closure throws an error, the publisher fails with the thrown error.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s tryMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use tryMap(_:) to transform from one kind of element to another, and to terminate publishing when the map\u2019s closure throws an error.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A tryMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the tryMap(_:)\u2019s closure fails to look up a Roman numeral, it throws an error. The tryMap(_:) operator catches this error and terminates publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from:Int) throws -> String {\n    let romanNumeralDict: [Int : String] =\n        [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\n    guard let numeral = romanNumeralDict[from] else {\n        throw ParseError()\n    }\n    return numeral\n}\nlet numbers = [5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryMap { try romanNumeral(from: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"V IV III II I completion: failure(ParseError())\"\n\n\nIf your closure doesn\u2019t throw, use map(_:) instead.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "tryScan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/tryscan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse tryScan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value. If your accumulator closure throws an error, the publisher terminates with the error.\n\nIn the example below, tryScan(_:_:) calls a division function on elements of a collection publisher. The Publishers.TryScan publisher publishes each result until the function encounters a DivisionByZeroError, which terminates the publisher.\n\nstruct DivisionByZeroError: Error {}\n\n\n/// A function that throws a DivisionByZeroError if `current` provided by the TryScan publisher is zero.\nfunc myThrowingFunction(_ lastValue: Int, _ currentValue: Int) throws -> Int {\n    guard currentValue != 0 else { throw DivisionByZeroError() }\n    return (lastValue + currentValue) / currentValue\n }\n\n\nlet numbers = [1,2,3,4,5,0,6,7,8,9]\ncancellable = numbers.publisher\n    .tryScan(10) { try myThrowingFunction($0, $1) }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"11 6 3 1 1 -1 failure(DivisionByZeroError())\".\n\n\nIf the closure throws an error, the publisher fails with the error.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "tryFilter(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/tryfilter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value that indicated whether to republish the element or throws an error.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nUse tryFilter(_:) to filter elements evaluated in an error-throwing closure. If the isIncluded closure throws an error, the publisher fails with that error.\n\nIn the example below, tryFilter(_:) checks to see if the element provided by the publisher is zero, and throws a ZeroError before terminating the publisher with the thrown error. Otherwise, it republishes the element only if it\u2019s even:\n\nstruct ZeroError: Error {}\n\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\ncancellable = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"2 4 failure(DivisionByZeroError())\".\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "max()",
        "url": "https://developer.apple.com/documentation/combine/future/max()",
        "html": "Return Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max() to determine the maximum value in the stream of elements from an upstream publisher.\n\nIn the example below, the max() operator emits a value when the publisher finishes, that value is the maximum of the values received from upstream, which is 10.\n\nlet numbers = [0, 10, 5]\ncancellable = numbers.publisher\n    .max()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "combineLatest(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/future/combinelatest(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:_:) when you need to combine the current and 3 additional publishers and transform the values using a closure in which you specify the published elements, to publish a new element.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, as combineLatest(_:_:_:_:) receives the most-recent values published by four publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4) { firstValue, secondValue, thirdValue, fourthValue in\n        return firstValue * secondValue * thirdValue * fourthValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: 36.     // pub = 2,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 54.     // pub = 3,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 324.    // pub = 3,  pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 1404.   // pub = 13, pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 2964.   // pub = 13, pub2 = 12,  pub3 = 19, pub4 = 1\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "contains(where:)",
        "url": "https://developer.apple.com/documentation/combine/future/contains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(where:) to find the first element in an upstream that satisfies the closure you provide. This operator consumes elements produced from the upstream publisher until the upstream publisher produces a matching element.\n\nThis operator is useful when the upstream publisher produces elements that don\u2019t conform to Equatable.\n\nIn the example below, the contains(where:) operator tests elements against the supplied closure and emits true for the first elements that\u2019s greater than 4, and then finishes normally.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .contains {$0 > 4}\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "decode(type:decoder:)",
        "url": "https://developer.apple.com/documentation/combine/future/decode(type:decoder:)",
        "html": "Parameters\ntype\n\nThe encoded data to decode into a struct that conforms to the Decodable protocol.\n\ndecoder\n\nA decoder that implements the TopLevelDecoder protocol.\n\nReturn Value\n\nA publisher that decodes a given type using a specified decoder and publishes the result.\n\nDiscussion\n\nUse decode(type:decoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to decode data received from a URLSession.DataTaskPublisher or other data source using the Decodable protocol.\n\nIn this example, a PassthroughSubject publishes a JSON string. The JSON decoder parses the string, converting its fields according to the Decodable protocol implemented by Article, and successfully populating a new Article. The Publishers.Decode publisher then publishes the Article to the downstream. If a decoding operation fails, which happens in the case of missing or malformed data in the source JSON string, the stream terminates and passes the error to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Data, Never>()\ncancellable = dataProvider\n    .decode(type: Article.self, decoder: JSONDecoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\")},\n          receiveValue: { print (\"value: \\($0)\") })\n\n\ndataProvider.send(Data(\"{\\\"pubDate\\\":1574273638.575666, \\\"title\\\" : \\\"My First Article\\\", \\\"author\\\" : \\\"Gita Kumar\\\" }\".utf8))\n\n\n// Prints: \".sink() data received Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: 2050-11-20 18:13:58 +0000)\"\n\nSee Also\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable."
    },
    {
        "title": "debounce(for:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/future/debounce(for:scheduler:options:)",
        "html": "Parameters\ndueTime\n\nThe time the publisher should wait before publishing an element.\n\nscheduler\n\nThe scheduler on which this publisher delivers elements\n\noptions\n\nScheduler options that customize this publisher\u2019s delivery of elements.\n\nReturn Value\n\nA publisher that publishes events only after a specified time elapses.\n\nDiscussion\n\nUse the debounce(for:scheduler:options:) operator to control the number of values and time between delivery of values from the upstream publisher. This operator is useful to process bursty or high-volume event streams where you need to reduce the number of values delivered to the downstream to a rate you specify.\n\nIn this example, a PassthroughSubject publishes elements on a schedule defined by the bounces array. The array is composed of tuples representing a value sent by the PassthroughSubject, and a TimeInterval ranging from one-quarter second up to 2 seconds that drives a delivery timer. As the queue builds, elements arriving faster than one-half second debounceInterval are discarded, while elements arriving at a rate slower than debounceInterval are passed through to the sink(receiveValue:) operator.\n\nlet bounces:[(Int,TimeInterval)] = [\n    (0, 0),\n    (1, 0.25),  // 0.25s interval since last index\n    (2, 1),     // 0.75s interval since last index\n    (3, 1.25),  // 0.25s interval since last index\n    (4, 1.5),   // 0.25s interval since last index\n    (5, 2)      // 0.5s interval since last index\n]\n\n\nlet subject = PassthroughSubject<Int, Never>()\ncancellable = subject\n    .debounce(for: .seconds(0.5), scheduler: RunLoop.main)\n    .sink { index in\n        print (\"Received index \\(index)\")\n    }\n\n\nfor bounce in bounces {\n    DispatchQueue.main.asyncAfter(deadline: .now() + bounce.1) {\n        subject.send(bounce.0)\n    }\n}\n\n\n// Prints:\n//  Received index 1\n//  Received index 4\n//  Received index 5\n\n\n//  Here is the event flow shown from the perspective of time, showing value delivery through the `debounce()` operator:\n\n\n//  Time 0: Send index 0.\n//  Time 0.25: Send index 1. Index 0 was waiting and is discarded.\n//  Time 0.75: Debounce period ends, publish index 1.\n//  Time 1: Send index 2.\n//  Time 1.25: Send index 3. Index 2 was waiting and is discarded.\n//  Time 1.5: Send index 4. Index 3 was waiting and is discarded.\n//  Time 2: Debounce period ends, publish index 4. Also, send index 5.\n//  Time 2.5: Debounce period ends, publish index 5.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/compactmap(_:)",
        "html": "Parameters\ntransform\n\nA closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of the calling the supplied closure.\n\nDiscussion\n\nCombine\u2019s compactMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/2950916-compactmap in the Swift standard library: the compactMap(_:) operator in Combine removes nil elements in a publisher\u2019s stream and republishes non-nil elements to the downstream subscriber.\n\nThe example below uses a range of numbers as the source for a collection based publisher. The compactMap(_:) operator consumes each element from the numbers publisher attempting to access the dictionary using the element as the key. If the example\u2019s dictionary returns a nil, due to a non-existent key, compactMap(_:) filters out the nil (missing) elements.\n\nlet numbers = (0...5)\nlet romanNumeralDict: [Int : String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ncancellable = numbers.publisher\n    .compactMap { romanNumeralDict[$0] }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"I II III V\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "eraseToAnyPublisher()",
        "url": "https://developer.apple.com/documentation/combine/deferred/erasetoanypublisher()",
        "html": "Return Value\n\nAn AnyPublisher wrapping this publisher.\n\nDiscussion\n\nUse eraseToAnyPublisher() to expose an instance of AnyPublisher to the downstream subscriber, rather than this publisher\u2019s actual type. This form of type erasure preserves abstraction across API boundaries, such as different modules. When you expose your publishers as the AnyPublisher type, you can change the underlying implementation over time without affecting existing clients.\n\nThe following example shows two types that each have a publisher property. TypeWithSubject exposes this property as its actual type, PassthroughSubject, while TypeWithErasedSubject uses eraseToAnyPublisher() to expose it as an AnyPublisher. As seen in the output, a caller from another module can access TypeWithSubject.publisher as its native type. This means you can\u2019t change your publisher to a different type without breaking the caller. By comparison, TypeWithErasedSubject.publisher appears to callers as an AnyPublisher, so you can change the underlying publisher type at will.\n\npublic class TypeWithSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n}\npublic class TypeWithErasedSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n        .eraseToAnyPublisher()\n}\n\n\n// In another module:\nlet nonErased = TypeWithSubject()\nif let subject = nonErased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast nonErased.publisher.\")\n}\nlet erased = TypeWithErasedSubject()\nif let subject = erased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast erased.publisher.\")\n}\n\n\n// Prints \"Successfully cast nonErased.publisher.\"\n"
    },
    {
        "title": "breakpointOnError()",
        "url": "https://developer.apple.com/documentation/combine/deferred/breakpointonerror()",
        "html": "Return Value\n\nA publisher that raises a debugger signal upon receiving a failure.\n\nDiscussion\n\nWhen the upstream publisher fails with an error, this publisher raises the SIGTRAP signal, which stops the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn this example a PassthroughSubject publishes strings, but its downstream tryMap(_:) operator throws an error. This sends the error downstream as a Subscribers.Completion.failure(_:). The breakpointOnError() operator receives this completion and stops the app in the debugger.\n\n struct CustomError : Error {}\n let publisher = PassthroughSubject<String?, Error>()\n cancellable = publisher\n     .tryMap { stringValue in\n         throw CustomError()\n     }\n     .breakpointOnError()\n     .sink(\n         receiveCompletion: { completion in print(\"Completion: \\(String(describing: completion))\") },\n         receiveValue: { aValue in print(\"Result: \\(String(describing: aValue))\") }\n     )\n\n\n publisher.send(\"TEST DATA\")\n\n\n // Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n // Depending on your specific environment, the console messages may\n // also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "count()",
        "url": "https://developer.apple.com/documentation/combine/deferred/count()",
        "html": "Return Value\n\nA publisher that consumes all elements until the upstream publisher finishes, then emits a single value with the total number of elements received.\n\nDiscussion\n\nUse count() to determine the number of elements received from the upstream publisher before it completes:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .count()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"11\"\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "tryCatch(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/trycatch(_:)",
        "html": "Parameters\nhandler\n\nA throwing closure that accepts the upstream failure as input. This closure can either replace the upstream publisher with a new one, or throw a new error to the downstream subscriber.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher, or an error.\n\nDiscussion\n\nUse tryCatch(_:) to decide how to handle from an upstream publisher by either replacing the publisher with a new publisher, or throwing a new error.\n\nIn the example below, an array publisher emits values that a tryMap(_:) operator evaluates to ensure the values are greater than zero. If the values aren\u2019t greater than zero, the operator throws an error to the downstream subscriber to let it know there was a problem. The subscriber, tryCatch(_:), replaces the error with a new publisher using Just to publish a final value before the stream ends normally.\n\nenum SimpleError: Error { case error }\nvar numbers = [5, 4, 3, 2, 1, -1, 7, 8, 9, 10]\n\n\ncancellable = numbers.publisher\n   .tryMap { v in\n        if v > 0 {\n            return v\n        } else {\n            throw SimpleError.error\n        }\n}\n  .tryCatch { error in\n      Just(0) // Send a final value before completing normally.\n              // Alternatively, throw a new error to terminate the stream.\n}\n  .sink(receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print (\"Received \\($0).\") }\n  )\n//    Received 5.\n//    Received 4.\n//    Received 3.\n//    Received 2.\n//    Received 1.\n//    Received 0.\n//    Completion: finished.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "collect()",
        "url": "https://developer.apple.com/documentation/combine/deferred/collect()",
        "html": "Return Value\n\nA publisher that collects all received items and returns them as an array upon completion.\n\nDiscussion\n\nUse collect() to gather elements into an array that the operator emits after the upstream publisher finishes.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThis publisher requests an unlimited number of elements from the upstream publisher and uses an unbounded amount of memory to store the received values. The publisher may exert memory pressure on the system for very large sets of elements.\n\nThe collect() operator only sends the collected array to its downstream receiver after a request whose demand is greater than 0 items. Otherwise, collect() waits until it receives a non-zero request.\n\nIn the example below, an Integer range is a publisher that emits an array of integers:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\nSee Also\nReducing Elements\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "tryAllSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/tryallsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete. The closure may throw an error, in which case the publisher cancels the upstream publisher and fails with the thrown error.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the tryAllSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria in an error-throwing predicate you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes. If the predicate throws an error, the publisher fails and passes the error to its downstream subscriber.\n\nIn the example below, an error-throwing predicate tests if each of an integer array publisher\u2019s elements fall into the targetRange; the predicate throws an error if an element is zero and terminates the stream.\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 10, 5, 0]\n\n\nnumbers.publisher\n    .tryAllSatisfy { anInt in\n        guard anInt != 0 else { throw RangeError() }\n        return targetRange.contains(anInt)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(RangeError())\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate."
    },
    {
        "title": "sink(receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/sink(receivevalue:)",
        "html": "Parameters\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveValue:) to observe values received by the publisher and print them to the console. This operator can only be used when the stream doesn\u2019t fail, that is, when the publisher\u2019s Failure type is Never.\n\nIn this example, a Range publisher publishes integers to a sink(receiveValue:) operator\u2019s receiveValue closure that prints them to the console:\n\nlet integers = (0...3)\nintegers.publisher\n    .sink { print(\"Received \\($0)\") }\n\n\n// Prints:\n//  Received 0\n//  Received 1\n//  Received 2\n//  Received 3\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior."
    },
    {
        "title": "sink(receiveCompletion:receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/sink(receivecompletion:receivevalue:)",
        "html": "Parameters\nreceiveComplete\n\nThe closure to execute on completion.\n\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveCompletion:receiveValue:) to observe values received by the publisher and process them using a closure you specify.\n\nIn this example, a Range publisher publishes integers to a sink(receiveCompletion:receiveValue:) operator\u2019s receiveValue closure that prints them to the console. Upon completion the sink(receiveCompletion:receiveValue:) operator\u2019s receiveCompletion closure indicates the successful termination of the stream.\n\nlet myRange = (0...3)\ncancellable = myRange.publisher\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0)\") })\n\n\n// Prints:\n//  value: 0\n//  value: 1\n//  value: 2\n//  value: 3\n//  completion: finished\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "share()",
        "url": "https://developer.apple.com/documentation/combine/deferred/share()",
        "html": "Return Value\n\nA class instance that shares elements received from its upstream to multiple subscribers.\n\nDiscussion\n\nThe publisher returned by this operator supports multiple subscribers, all of whom receive unchanged elements and completion states from the upstream publisher.\n\nTip\n\nPublishers.Share is effectively a combination of the Publishers.Multicast and PassthroughSubject publishers, with an implicit autoconnect().\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a share() operator to share the same random number to each of two subscribers. This example uses a delay(for:tolerance:scheduler:options:) operator only to prevent the first subscriber from exhausting the sequence publisher immediately; an asynchronous publisher wouldn\u2019t need this.\n\nlet pub = (1...3).publisher\n    .delay(for: 1, scheduler: DispatchQueue.main)\n    .map( { _ in return Int.random(in: 0...100) } )\n    .print(\"Random\")\n    .share()\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\n\n\n// Prints:\n// Random: receive value: (20)\n// Stream 1 received: 20\n// Stream 2 received: 20\n// Random: receive value: (85)\n// Stream 1 received: 85\n// Stream 2 received: 85\n// Random: receive value: (98)\n// Stream 1 received: 98\n// Stream 2 received: 98\n\n\nWithout the share() operator, stream 1 receives three random values, followed by stream 2 receiving three different random values.\n\nAlso note that Publishers.Share is a class rather than a structure like most other publishers. This means you can use this operator to create a publisher instance that uses reference semantics.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers."
    },
    {
        "title": "replaceNil(with:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/replacenil(with:)",
        "html": "Parameters\noutput\n\nThe element to use when replacing nil.\n\nReturn Value\n\nA publisher that replaces nil elements from the upstream publisher with the provided element.\n\nDiscussion\n\nThe replaceNil(with:) operator enables replacement of nil values in a stream with a substitute value. In the example below, a collection publisher contains a nil value. The replaceNil(with:) operator replaces this with 0.0.\n\nlet numbers: [Double?] = [1.0, 2.0, nil, 3.0]\nnumbers.publisher\n    .replaceNil(with: 0.0)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"Optional(1.0) Optional(2.0) Optional(0.0) Optional(3.0)\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "scan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/scan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nA closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse scan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value.\n\nThe following example logs a running total of all values received from the sequence publisher.\n\nlet range = (0...5)\ncancellable = range.publisher\n    .scan(0) { return $0 + $1 }\n    .sink { print (\"\\($0)\", terminator: \" \") }\n // Prints: \"0 1 3 6 10 15 \".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "replaceError(with:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/replaceerror(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher fails.\n\nReturn Value\n\nA publisher that replaces an error from the upstream publisher with the provided output element.\n\nDiscussion\n\nIf the upstream publisher fails with an error, this publisher emits the provided element, then finishes normally.\n\nIn the example below, a publisher of strings fails with a MyError instance, which sends a failure completion downstream. The replaceError(with:) operator handles the failure by publishing the string (replacement element) and completing normally.\n\nstruct MyError: Error {}\nlet fail = Fail<String, MyError>(error: MyError())\ncancellable = fail\n    .replaceError(with: \"(replacement element)\")\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"(replacement element) finished\".\n\n\nThis replaceError(with:) functionality is useful when you want to handle an error by sending a single replacement element and end the stream. Use catch(_:) to recover from an error and provide a replacement publisher to continue providing elements to the downstream subscriber.\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element."
    },
    {
        "title": "replaceEmpty(with:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/replaceempty(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher finishes without emitting any elements.\n\nReturn Value\n\nA publisher that replaces an empty stream with the provided output element.\n\nDiscussion\n\nUse replaceEmpty(with:) to provide a replacement element if the upstream publisher finishes without producing any elements.\n\nIn the example below, the empty Double array publisher doesn\u2019t produce any elements, so replaceEmpty(with:) publishes Double.nan and finishes normally.\n\nlet numbers: [Double] = []\ncancellable = numbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints \"(nan)\".\n\n\nConversely, providing a non-empty publisher publishes all elements and the publisher then terminates normally:\n\nlet otherNumbers: [Double] = [1.0, 2.0, 3.0]\ncancellable2 = otherNumbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: 1.0 2.0 3.0\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/subscribe(_:)-7btlz",
        "html": "Parameters\nsubject\n\nThe subject to attach to this publisher.\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher."
    },
    {
        "title": "receive(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/receive(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler the publisher uses for element delivery.\n\noptions\n\nScheduler options used to customize element delivery.\n\nReturn Value\n\nA publisher that delivers elements using the specified scheduler.\n\nDiscussion\n\nYou use the receive(on:options:) operator to receive results and completion on a specific scheduler, such as performing UI work on the main run loop. In contrast with subscribe(on:options:), which affects upstream messages, receive(on:options:) changes the execution context of downstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes jsonPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes labelUpdater to receive elements and completion on RunLoop.main.\n\nlet jsonPublisher = MyJSONLoaderPublisher() // Some publisher.\nlet labelUpdater = MyLabelUpdateSubscriber() // Some subscriber that updates the UI.\n\n\njsonPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(labelUpdater)\n\n\nPrefer receive(on:options:) over explicit use of dispatch queues when performing work in subscribers. For example, instead of the following pattern:\n\npub.sink {\n    DispatchQueue.main.async {\n        // Do something.\n    }\n}\n\n\nUse this pattern instead:\n\npub.receive(on: DispatchQueue.main).sink {\n    // Do something.\n}\n\n\nNote\n\nreceive(on:options:) doesn\u2019t affect the scheduler used to call the subscriber\u2019s receive(subscription:) method.\n\nSee Also\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations."
    },
    {
        "title": "prepend(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/prepend(_:)",
        "html": "Parameters\nelements\n\nThe elements to publish before this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that prefixes the specified elements prior to this publisher\u2019s elements.\n\nDiscussion\n\nUse prepend(_:) when you need to prepend specific elements before the output of a publisher.\n\nIn the example below, the prepend(_:) operator publishes the provided elements before republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .prepend(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 255 0 1 2 3 4 5 6 7 8 9 10\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "prefix(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/prefix(_:)",
        "html": "Parameters\nmaxLength\n\nThe maximum number of elements to republish.\n\nReturn Value\n\nA publisher that publishes up to the specified number of elements.\n\nDiscussion\n\nUse prefix(_:) to limit the number of elements republished to the downstream subscriber.\n\nIn the example below, the prefix(_:) operator limits its output to the first two elements before finishing normally:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .prefix(2)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "print(_:to:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/print(_:to:)",
        "html": "Parameters\nprefix\n\nA string \u2014- which defaults to empty -\u2014 with which to prefix all log messages.\n\nstream\n\nA stream for text output that receives messages, and which directs output to the console by default. A custom stream can be used to log messages to other destinations.\n\nReturn Value\n\nA publisher that prints log messages for all publishing events.\n\nDiscussion\n\nUse print(_:to:) to log messages the console.\n\nIn the example below, log messages are printed on the console:\n\nlet integers = (1...2)\ncancellable = integers.publisher\n   .print(\"Logged a message\", to: nil)\n   .sink { _ in }\n\n\n// Prints:\n//  Logged a message: receive subscription: (1..<2)\n//  Logged a message: request unlimited\n//  Logged a message: receive value: (1)\n//  Logged a message: receive finished\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur."
    },
    {
        "title": "removeDuplicates()",
        "url": "https://developer.apple.com/documentation/combine/deferred/removeduplicates()",
        "html": "Return Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates() to remove repeating elements from an upstream publisher. This operator has a two-element memory: the operator uses the current and previously published elements as the basis for its comparison.\n\nIn the example below, removeDuplicates() triggers on the doubled, tripled, and quadrupled occurrences of 1, 3, and 4 respectively. Because the two-element memory considers only the current element and the previous element, the operator prints the final 0 in the example data since its immediate predecessor is 4.\n\nlet numbers = [0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 0]\ncancellable = numbers.publisher\n    .removeDuplicates()\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 0\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "output(at:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/output(at:)",
        "html": "Parameters\nindex\n\nThe index that indicates the element to publish.\n\nReturn Value\n\nA publisher that publishes a specific indexed element.\n\nDiscussion\n\nUse output(at:) when you need to republish a specific element specified by its position in the stream. If the publisher completes normally or with an error before publishing the specified element, then the publisher doesn\u2019t produce any elements.\n\nIn the example below, the array publisher emits the fifth element in the sequence of published elements:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.publisher\n    .output(at: 5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"6\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "merge(with:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/merge(with:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\n\n\n// Prints: \"1 40 90 -1 2 50 100 -2 \"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/merge(with:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\n let pubA = PassthroughSubject<Int, Never>()\n let pubB = PassthroughSubject<Int, Never>()\n let pubC = PassthroughSubject<Int, Never>()\n let pubD = PassthroughSubject<Int, Never>()\n let pubE = PassthroughSubject<Int, Never>()\n\n\n cancellable = pubA\n     .merge(with: pubB, pubC, pubD, pubE)\n     .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\n pubA.send(1)\n pubB.send(40)\n pubC.send(90)\n pubD.send(-1)\n pubE.send(33)\n pubA.send(2)\n pubB.send(50)\n pubC.send(100)\n pubD.send(-2)\n pubE.send(33)\n\n\n // Prints: \"1 40 90 -1 33 2 50 100 -2 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/merge(with:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers; it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubE, pubG)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\n\n\n//Prints: \"1 40 90 -1 33 44 54 2 50 100 -2 33 33 54\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/merge(with:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:). To combine elements from multiple upstream publishers, use zip(_:_:).\n\nIn this example, as merge(with:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubA.send(2)\npubB.send(50)\npubC.send(100)\n\n\n// Prints: \"1 40 90 2 50 100\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "ignoreOutput()",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/ignoreoutput()",
        "html": "Return Value\n\nA publisher that ignores all upstream elements.\n\nDiscussion\n\nUse the ignoreOutput() operator to determine if a publisher is able to complete successfully or would fail.\n\nIn the example below, the array publisher (numbers) delivers the first five of its elements successfully, as indicated by the ignoreOutput() operator. The operator consumes, but doesn\u2019t republish the elements downstream. However, the sixth element, 0, causes the error throwing closure to catch a NoZeroValuesAllowedError that terminates the stream.\n\nstruct NoZeroValuesAllowedError: Error {}\nlet numbers = [1, 2, 3, 4, 5, 0, 6, 7, 8, 9]\ncancellable = numbers.publisher\n    .tryFilter({ anInt in\n        guard anInt != 0 else { throw NoZeroValuesAllowedError() }\n        return anInt < 20\n    })\n    .ignoreOutput()\n    .sink(receiveCompletion: {print(\"completion: \\($0)\")},\n          receiveValue: {print(\"value \\($0)\")})\n\n\n// Prints: \"completion: failure(NoZeroValuesAllowedError())\"\n\n\nThe output type of this publisher is Never.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "multicast(subject:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/multicast(subject:)",
        "html": "Parameters\nsubject\n\nA subject to deliver elements to downstream subscribers.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(_:), this method produces a publisher that shares the provided Subject among all the downstream subscribers.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(subject:) operator with a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast(subject: PassthroughSubject<(String, Int), Never>())\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 78))\n// Stream 2 received: (\"First\", 78)\n// Stream 1 received: (\"First\", 78)\n// Random: receive value: ((\"Second\", 98))\n// Stream 2 received: (\"Second\", 98)\n// Stream 1 received: (\"Second\", 98)\n// Random: receive value: ((\"Third\", 61))\n// Stream 2 received: (\"Third\", 61)\n// Stream 1 received: (\"Third\", 61)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "min(by:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/min(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to determine the minimum value in the stream of elements from an upstream publisher using a comparison operation you specify.\n\nThis operator is useful when the value received from the upstream publisher isn\u2019t Comparable.\n\nIn the example below an array publishes enumeration elements representing playing card ranks. The min(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the minimum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .king]\ncancellable = cards.publisher\n    .min {\n        return  $0.rawValue < $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"ace\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "multicast(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/multicast(_:)",
        "html": "Parameters\ncreateSubject\n\nA closure to create a new Subject each time a subscriber attaches to the multicast publisher.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(subject:), this method produces a publisher that creates a separate Subject for each subscriber.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(_:) operator whose closure creates a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast { PassthroughSubject<(String, Int), Never>() }\n\n\ncancellable1 = pub\n   .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n   .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 9))\n// Stream 2 received: (\"First\", 9)\n// Stream 1 received: (\"First\", 9)\n// Random: receive value: ((\"Second\", 46))\n// Stream 2 received: (\"Second\", 46)\n// Stream 1 received: (\"Second\", 46)\n// Random: receive value: ((\"Third\", 26))\n// Stream 2 received: (\"Third\", 26)\n// Stream 1 received: (\"Third\", 26)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "assign(to:on:)",
        "url": "https://developer.apple.com/documentation/combine/future/assign(to:on:)",
        "html": "Parameters\nkeyPath\n\nA key path that indicates the property to assign. See Key-Path Expression in The Swift Programming Language to learn how to use key paths to specify a property of an object.\n\nobject\n\nThe object that contains the property. The subscriber assigns the object\u2019s property every time it receives a new value.\n\nReturn Value\n\nAn AnyCancellable instance. Call cancel() on this instance when you no longer want the publisher to automatically assign the property. Deinitializing this instance will also cancel automatic assignment.\n\nDiscussion\n\nUse the assign(to:on:) subscriber when you want to set a given property each time a publisher produces a value.\n\nIn this example, the assign(to:on:) sets the value of the anInt property on an instance of MyClass:\n\nclass MyClass {\n    var anInt: Int = 0 {\n        didSet {\n            print(\"anInt was set to: \\(anInt)\", terminator: \"; \")\n        }\n    }\n}\n\n\nvar myObject = MyClass()\nlet myRange = (0...2)\ncancellable = myRange.publisher\n    .assign(to: \\.anInt, on: myObject)\n\n\n// Prints: \"anInt was set to: 0; anInt was set to: 1; anInt was set to: 2\"\n\n\nImportant\n\nThe Subscribers.Assign instance created by this operator maintains a strong reference to object, and sets it to nil when the upstream publisher completes (either normally or with an error).\n\nSee Also\nConnecting Simple Subscribers\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "breakpointOnError()",
        "url": "https://developer.apple.com/documentation/combine/future/breakpointonerror()",
        "html": "Return Value\n\nA publisher that raises a debugger signal upon receiving a failure.\n\nDiscussion\n\nWhen the upstream publisher fails with an error, this publisher raises the SIGTRAP signal, which stops the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn this example a PassthroughSubject publishes strings, but its downstream tryMap(_:) operator throws an error. This sends the error downstream as a Subscribers.Completion.failure(_:). The breakpointOnError() operator receives this completion and stops the app in the debugger.\n\n struct CustomError : Error {}\n let publisher = PassthroughSubject<String?, Error>()\n cancellable = publisher\n     .tryMap { stringValue in\n         throw CustomError()\n     }\n     .breakpointOnError()\n     .sink(\n         receiveCompletion: { completion in print(\"Completion: \\(String(describing: completion))\") },\n         receiveValue: { aValue in print(\"Result: \\(String(describing: aValue))\") }\n     )\n\n\n publisher.send(\"TEST DATA\")\n\n\n // Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n // Depending on your specific environment, the console messages may\n // also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "assertNoFailure(_:file:line:)",
        "url": "https://developer.apple.com/documentation/combine/future/assertnofailure(_:file:line:)",
        "html": "Parameters\nprefix\n\nA string used at the beginning of the fatal error message.\n\nfile\n\nA filename used in the error message. This defaults to #file.\n\nline\n\nA line number used in the error message. This defaults to #line.\n\nReturn Value\n\nA publisher that raises a fatal error when its upstream publisher fails.\n\nDiscussion\n\nUse assertNoFailure() for internal integrity checks that are active during testing. However, it is important to note that, like its Swift counterpart fatalError(_:), the assertNoFailure() operator asserts a fatal exception when triggered during development and testing, and in shipping versions of code.\n\nIn the example below, a CurrentValueSubject publishes the initial and second values successfully. The third value, containing a genericSubjectError, causes the assertNoFailure() operator to assert a fatal exception stopping the process:\n\npublic enum SubjectError: Error {\n    case genericSubjectError\n}\n\n\nlet subject = CurrentValueSubject<String, Error>(\"initial value\")\nsubject\n    .assertNoFailure()\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0).\") }\n    )\n\n\nsubject.send(\"second value\")\nsubject.send(completion: Subscribers.Completion<Error>.failure(SubjectError.genericSubjectError))\n\n\n// Prints:\n//  value: initial value.\n//  value: second value.\n//  The process then terminates in the debugger as the assertNoFailure operator catches the genericSubjectError.\n\nSee Also\nHandling Errors\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "append(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/append(_:)",
        "html": "Parameters\nelements\n\nElements to publish after this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that appends the specifiecd elements after this publisher\u2019s elements.\n\nDiscussion\n\nUse append(_:) when you need to prepend specific elements after the output of a publisher.\n\nIn the example below, the append(_:) operator publishes the provided elements after republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .append(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 5 6 7 8 9 10 0 1 255\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "buffer(size:prefetch:whenFull:)",
        "url": "https://developer.apple.com/documentation/combine/future/buffer(size:prefetch:whenfull:)",
        "html": "Parameters\nsize\n\nThe maximum number of elements to store.\n\nprefetch\n\nThe strategy to initially populate the buffer.\n\nwhenFull\n\nThe action to take when the buffer becomes full.\n\nReturn Value\n\nA publisher that buffers elements received from an upstream publisher.\n\nDiscussion\n\nUse buffer(size:prefetch:whenFull:) to collect a specific number of elements from an upstream publisher before republishing them to the downstream subscriber according to the Publishers.BufferingStrategy and Publishers.PrefetchStrategy strategy you specify.\n\nIf the publisher completes before reaching the size threshold, it buffers the elements and publishes them downstream prior to completion."
    },
    {
        "title": "catch(_:)",
        "url": "https://developer.apple.com/documentation/combine/future/catch(_:)",
        "html": "Parameters\nhandler\n\nA closure that accepts the upstream failure as input and returns a publisher to replace the upstream publisher.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\n\nDiscussion\n\nUse catch() to replace an error from an upstream publisher with a new publisher.\n\nIn the example below, the catch() operator handles the SimpleError thrown by the upstream publisher by replacing the error with a Just publisher. This continues the stream by publishing a single value and completing normally.\n\nstruct SimpleError: Error {}\nlet numbers = [5, 4, 3, 2, 1, 0, 9, 8, 7, 6]\ncancellable = numbers.publisher\n    .tryLast(where: {\n        guard $0 != 0 else {throw SimpleError()}\n        return true\n    })\n    .catch({ (error) in\n        Just(-1)\n    })\n    .sink { print(\"\\($0)\") }\n    // Prints: -1\n\n\nBackpressure note: This publisher passes through request and cancel to the upstream. After receiving an error, the publisher sends sends any unfulfilled demand to the new Publisher. SeeAlso: replaceError\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "Encodable Implementations",
        "url": "https://developer.apple.com/documentation/combine/record/recording-swift.struct/encodable-implementations",
        "html": "Topics\nInstance Methods\nfunc encode(to: Encoder) throws\nEncodes this value into the given encoder.\nAvailable when Output conforms to Decodable, Output conforms to Encodable, Failure conforms to Decodable, Failure conforms to Encodable, and Failure conforms to Error."
    },
    {
        "title": "multicast(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/multicast(_:)",
        "html": "Parameters\ncreateSubject\n\nA closure to create a new Subject each time a subscriber attaches to the multicast publisher.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(subject:), this method produces a publisher that creates a separate Subject for each subscriber.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(_:) operator whose closure creates a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast { PassthroughSubject<(String, Int), Never>() }\n\n\ncancellable1 = pub\n   .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n   .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 9))\n// Stream 2 received: (\"First\", 9)\n// Stream 1 received: (\"First\", 9)\n// Random: receive value: ((\"Second\", 46))\n// Stream 2 received: (\"Second\", 46)\n// Stream 1 received: (\"Second\", 46)\n// Random: receive value: ((\"Third\", 26))\n// Stream 2 received: (\"Third\", 26)\n// Stream 1 received: (\"Third\", 26)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "prefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/prefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate indicates publishing should finish.\n\nDiscussion\n\nUse prefix(while:) to emit values while elements from the upstream publisher meet a condition you specify. The publisher finishes when the closure returns false.\n\nIn the example below, the prefix(while:) operator emits values while the element it receives is less than five:\n\nlet numbers = (0...10)\nnumbers.publisher\n    .prefix { $0 < 5 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryReduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/tryreduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nAn error-throwing closure that takes the previously-accumulated value and the next element from the upstream publisher to produce a new value.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes.\n\nDiscussion\n\nUse tryReduce(_:_:) to collect a stream of elements and produce an accumulated value based on an error-throwing closure you provide. If the closure throws an error, the publisher fails and passes the error to its subscriber.\n\nIn the example below, the publisher\u2019s 0 element causes the myDivide(_:_:) function to throw an error and publish the doc://com.apple.documentation/documentation/Swift/Double/1641611-nan result:\n\nstruct DivisionByZeroError: Error {}\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n    guard divisor != 0 else { throw DivisionByZeroError() }\n    return dividend / divisor\n}\n\n\nvar numbers: [Double] = [5, 4, 3, 2, 1, 0]\nnumbers.publisher\n    .tryReduce(numbers.first!, { accum, next in try myDivide(accum, next) })\n    .catch({ _ in Just(Double.nan) })\n    .sink { print(\"\\($0)\") }\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "tryFirst(where:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/tryfirst(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse tryFirst(where:) when you need to republish only the first element of a stream that satisfies an error-throwing closure you specify. The publisher ignores all elements after the first. If this publisher doesn\u2019t receive any elements, it finishes without publishing. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a range publisher emits the first element in the range then finishes normally:\n\nlet numberRange: ClosedRange<Int> = (-1...50)\nnumberRange.publisher\n    .tryFirst {\n        guard $0 < 99 else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"-1 completion: finished\"\n// If instead the number range were ClosedRange<Int> = (100...200), the tryFirst operator would terminate publishing with a RangeError.\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)",
        "html": "Parameters\nreceiveSubscription\n\nAn optional closure that executes when the publisher receives the subscription from the upstream publisher. This value defaults to nil.\n\nreceiveOutput\n\nAn optional closure that executes when the publisher receives a value from the upstream publisher. This value defaults to nil.\n\nreceiveCompletion\n\nAn optional closure that executes when the upstream publisher finishes normally or terminates with an error. This value defaults to nil.\n\nreceiveCancel\n\nAn optional closure that executes when the downstream receiver cancels publishing. This value defaults to nil.\n\nreceiveRequest\n\nAn optional closure that executes when the publisher receives a request for more elements. This value defaults to nil.\n\nReturn Value\n\nA publisher that performs the specified closures when publisher events occur.\n\nDiscussion\n\nUse handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:) when you want to examine elements as they progress through the stages of the publisher\u2019s lifecycle.\n\nIn the example below, a publisher of integers shows the effect of printing debugging information at each stage of the element-processing lifecycle:\n\nlet integers = (0...2)\ncancellable = integers.publisher\n    .handleEvents(receiveSubscription: { subs in\n        print(\"Subscription: \\(subs.combineIdentifier)\")\n    }, receiveOutput: { anInt in\n        print(\"in output handler, received \\(anInt)\")\n    }, receiveCompletion: { _ in\n        print(\"in completion handler\")\n    }, receiveCancel: {\n        print(\"received cancel\")\n    }, receiveRequest: { (demand) in\n        print(\"received demand: \\(demand.description)\")\n    })\n    .sink { _ in return }\n\n\n// Prints:\n//   received demand: unlimited\n//   Subscription: 0x7f81284734c0\n//   in output handler, received 0\n//   in output handler, received 1\n//   in output handler, received 2\n//   in completion handler\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "mapError(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/maperror(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes the upstream failure as a parameter and returns a new error for the publisher to terminate with.\n\nReturn Value\n\nA publisher that replaces any upstream failure with a new error produced by the transform closure.\n\nDiscussion\n\nUse the mapError(_:) operator when you need to replace one error type with another, or where a downstream operator needs the error types of its inputs to match.\n\nThe following example uses a tryMap(_:) operator to divide 1 by each element produced by a sequence publisher. When the publisher produces a 0, the tryMap(_:) fails with a DivisionByZeroError. The mapError(_:) operator converts this into a MyGenericError.\n\nstruct DivisionByZeroError: Error {}\nstruct MyGenericError: Error { var wrappedError: Error }\n\n\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n       guard divisor != 0 else { throw DivisionByZeroError() }\n       return dividend / divisor\n   }\n\n\nlet divisors: [Double] = [5, 4, 3, 2, 1, 0]\ndivisors.publisher\n    .tryMap { try myDivide(1, $0) }\n    .mapError { MyGenericError(wrappedError: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") ,\n        receiveValue: { print (\"value: \\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"0.2 0.25 0.3333333333333333 0.5 1.0 completion: failure(MyGenericError(wrappedError: DivisionByZeroError()))\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "encode(encoder:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/encode(encoder:)",
        "html": "Parameters\nencoder\n\nAn encoder that implements the TopLevelEncoder protocol.\n\nReturn Value\n\nA publisher that encodes received elements using a specified encoder, and publishes the resulting data.\n\nDiscussion\n\nUse encode(encoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to encode an Encodable struct into Data that could be used to make a JSON string (or written to disk as a binary plist in the case of property lists).\n\nIn this example, a PassthroughSubject publishes an Article. The encode(encoder:) operator encodes the properties of the Article struct into a new JSON string according to the Codable protocol adopted by Article. The operator publishes the resulting JSON string to the downstream subscriber. If the encoding operation fails, which can happen in the case of complex properties that can\u2019t be directly transformed into JSON, the stream terminates and the error is passed to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Article, Never>()\nlet cancellable = dataProvider\n    .encode(encoder: JSONEncoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\") },\n          receiveValue: {  data in\n            guard let stringRepresentation = String(data: data, encoding: .utf8) else { return }\n            print(\"Data received \\(data) string representation: \\(stringRepresentation)\")\n    })\n\n\ndataProvider.send(Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: Date()))\n\n\n// Prints: \"Data received 86 bytes string representation: {\"title\":\"My First Article\",\"author\":\"Gita Kumar\",\"pubDate\":606211803.279603}\"\n\nSee Also\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/flatmap(maxpublishers:_:)-5xdfr",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/flatmap(maxpublishers:_:)-4ig0u",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nDiscussion\n\nCombine\u2018s flatMap(maxPublishers:_:) operator performs a similar function to the doc://com.apple.documentation/documentation/Swift/Sequence/2905332-flatmap operator in the Swift standard library, but turns the elements from one kind of publisher into a new publisher that is sent to subscribers. Use flatMap(maxPublishers:_:) when you want to create a new series of events for downstream subscribers based on the received value. The closure creates the new Publisher based on the received value. The new Publisher can emit more than one event, and successful completion of the new Publisher does not complete the overall stream. Failure of the new Publisher causes the overall stream to fail.\n\nIn the example below, a PassthroughSubject publishes WeatherStation elements. The flatMap(maxPublishers:_:) receives each element, creates a URL from it, and produces a new URLSession.DataTaskPublisher, which will publish the data loaded from that URL.\n\npublic struct WeatherStation {\n    public let stationID: String\n}\n\n\nvar weatherPublisher = PassthroughSubject<WeatherStation, URLError>()\n\n\ncancellable = weatherPublisher.flatMap { station -> URLSession.DataTaskPublisher in\n    let url = URL(string:\"https://weatherapi.example.com/stations/\\(station.stationID)/observations/latest\")!\n    return URLSession.shared.dataTaskPublisher(for: url)\n}\n.sink(\n    receiveCompletion: { completion in\n        // Handle publisher completion (normal or error).\n    },\n    receiveValue: {\n        // Process the received data.\n    }\n )\n\n\nweatherPublisher.send(WeatherStation(stationID: \"KSFO\")) // San Francisco, CA\nweatherPublisher.send(WeatherStation(stationID: \"EGLC\")) // London, UK\nweatherPublisher.send(WeatherStation(stationID: \"ZBBB\")) // Beijing, CN\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/flatmap(maxpublishers:_:)-1zr77",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/flatmap(maxpublishers:_:)-19mw3",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "first()",
        "url": "https://developer.apple.com/documentation/combine/deferred/first()",
        "html": "Return Value\n\nA publisher that only publishes the first element of a stream.\n\nDiscussion\n\nUse first() to publish just the first element from an upstream publisher, then finish normally. The first() operator requests unlimited from its upstream as soon as downstream requests at least one element. If the upstream completes before first() receives any elements, it completes without emitting any values.\n\nIn this example, the first() publisher republishes the first element received from the sequence publisher, -10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first()\n    .sink { print(\"\\($0)\") }\n\n\n// Print: \"-10\"\n\nSee Also\nSelecting Specific Elements\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "dropFirst(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/dropfirst(_:)",
        "html": "Parameters\ncount\n\nThe number of elements to omit. The default is 1.\n\nReturn Value\n\nA publisher that doesn\u2019t republish the first count elements.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the upstream publisher, and republish the remaining elements.\n\nThe example below drops the first five elements from the stream:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncancellable = numbers.publisher\n    .dropFirst(5)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"6 7 8 9 10 \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "first(where:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/first(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse first(where:) to republish only the first element of a stream that satisfies a closure you specify. The publisher ignores all elements after the first element that satisfies the closure and finishes normally. If this publisher doesn\u2019t receive any elements, it finishes without publishing.\n\nIn the example below, the provided closure causes the Publishers.FirstWhere publisher to republish the first received element that\u2019s greater than 0, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first { $0 > 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"1\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "drop(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/drop(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA publisher to monitor for its first emitted element.\n\nReturn Value\n\nA publisher that drops elements from the upstream publisher until the other publisher produces a value.\n\nDiscussion\n\nUse drop(untilOutputFrom:) to ignore elements from the upstream publisher until another, second, publisher delivers its first element. This publisher requests a single value from the second publisher, and it ignores (drops) all elements from the upstream publisher until the second publisher produces a value. After the second publisher produces an element, drop(untilOutputFrom:) cancels its subscription to the second publisher, and allows events from the upstream publisher to pass through.\n\nAfter this publisher receives a subscription from the upstream publisher, it passes through backpressure requests from downstream to the upstream publisher. If the upstream publisher acts on those requests before the other publisher produces an item, this publisher drops the elements it receives from the upstream publisher.\n\nIn the example below, the pub1 publisher defers publishing its elements until the pub2 publisher delivers its first element:\n\nlet upstream = PassthroughSubject<Int,Never>()\nlet second = PassthroughSubject<String,Never>()\ncancellable = upstream\n    .drop(untilOutputFrom: second)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\nupstream.send(1)\nupstream.send(2)\nsecond.send(\"A\")\nupstream.send(3)\nupstream.send(4)\n// Prints \"3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "drop(while:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/drop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an upstream publisher until the element received meets a condition you specify.\n\nIn the example below, the operator omits all elements in the stream until the first element arrives that\u2019s a positive integer, after which the operator publishes all remaining elements:\n\nlet numbers = [-62, -1, 0, 10, 0, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .drop { $0 <= 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10 0, 22 41 -1 5\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "delay(for:tolerance:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/delay(for:tolerance:scheduler:options:)",
        "html": "Parameters\ninterval\n\nThe amount of time to delay.\n\ntolerance\n\nThe allowed tolerance in delivering delayed events. The Delay publisher may deliver elements this much sooner or later than the interval specifies.\n\nscheduler\n\nThe scheduler to deliver the delayed events.\n\noptions\n\nOptions relevant to the scheduler\u2019s behavior.\n\nReturn Value\n\nA publisher that delays delivery of elements and completion to the downstream receiver.\n\nDiscussion\n\nUse delay(for:tolerance:scheduler:options:) when you need to delay the delivery of elements to a downstream by a specified amount of time.\n\nIn this example, a Timer publishes an event every second. The delay(for:tolerance:scheduler:options:) operator holds the delivery of the initial element for 3 seconds (\u00b10.5 seconds), after which each element is delivered to the downstream on the main run loop after the specified delay:\n\nlet df = DateFormatter()\ndf.dateStyle = .none\ndf.timeStyle = .long\ncancellable = Timer.publish(every: 1.0, on: .main, in: .default)\n    .autoconnect()\n    .handleEvents(receiveOutput: { date in\n        print (\"Sending Timestamp \\'\\(df.string(from: date))\\' to delay()\")\n    })\n    .delay(for: .seconds(3), scheduler: RunLoop.main, options: .none)\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \"\\n\") },\n        receiveValue: { value in\n            let now = Date()\n            print (\"At \\(df.string(from: now)) received  Timestamp \\'\\(df.string(from: value))\\' sent: \\(String(format: \"%.2f\", now.timeIntervalSince(value))) secs ago\", terminator: \"\\n\")\n        }\n    )\n\n\n// Prints:\n//    Sending Timestamp '5:02:33 PM PDT' to delay()\n//    Sending Timestamp '5:02:34 PM PDT' to delay()\n//    Sending Timestamp '5:02:35 PM PDT' to delay()\n//    Sending Timestamp '5:02:36 PM PDT' to delay()\n//    At 5:02:36 PM PDT received  Timestamp '5:02:33 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:37 PM PDT' to delay()\n//    At 5:02:37 PM PDT received  Timestamp '5:02:34 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:38 PM PDT' to delay()\n//    At 5:02:38 PM PDT received  Timestamp '5:02:35 PM PDT' sent: 3.00 secs ago\n\n\nThe delay affects the delivery of elements and completion, but not of the original subscription.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "decode(type:decoder:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/decode(type:decoder:)",
        "html": "Parameters\ntype\n\nThe encoded data to decode into a struct that conforms to the Decodable protocol.\n\ndecoder\n\nA decoder that implements the TopLevelDecoder protocol.\n\nReturn Value\n\nA publisher that decodes a given type using a specified decoder and publishes the result.\n\nDiscussion\n\nUse decode(type:decoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to decode data received from a URLSession.DataTaskPublisher or other data source using the Decodable protocol.\n\nIn this example, a PassthroughSubject publishes a JSON string. The JSON decoder parses the string, converting its fields according to the Decodable protocol implemented by Article, and successfully populating a new Article. The Publishers.Decode publisher then publishes the Article to the downstream. If a decoding operation fails, which happens in the case of missing or malformed data in the source JSON string, the stream terminates and passes the error to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Data, Never>()\ncancellable = dataProvider\n    .decode(type: Article.self, decoder: JSONDecoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\")},\n          receiveValue: { print (\"value: \\($0)\") })\n\n\ndataProvider.send(Data(\"{\\\"pubDate\\\":1574273638.575666, \\\"title\\\" : \\\"My First Article\\\", \\\"author\\\" : \\\"Gita Kumar\\\" }\".utf8))\n\n\n// Prints: \".sink() data received Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: 2050-11-20 18:13:58 +0000)\"\n\nSee Also\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable."
    },
    {
        "title": "debounce(for:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/debounce(for:scheduler:options:)",
        "html": "Parameters\ndueTime\n\nThe time the publisher should wait before publishing an element.\n\nscheduler\n\nThe scheduler on which this publisher delivers elements\n\noptions\n\nScheduler options that customize this publisher\u2019s delivery of elements.\n\nReturn Value\n\nA publisher that publishes events only after a specified time elapses.\n\nDiscussion\n\nUse the debounce(for:scheduler:options:) operator to control the number of values and time between delivery of values from the upstream publisher. This operator is useful to process bursty or high-volume event streams where you need to reduce the number of values delivered to the downstream to a rate you specify.\n\nIn this example, a PassthroughSubject publishes elements on a schedule defined by the bounces array. The array is composed of tuples representing a value sent by the PassthroughSubject, and a TimeInterval ranging from one-quarter second up to 2 seconds that drives a delivery timer. As the queue builds, elements arriving faster than one-half second debounceInterval are discarded, while elements arriving at a rate slower than debounceInterval are passed through to the sink(receiveValue:) operator.\n\nlet bounces:[(Int,TimeInterval)] = [\n    (0, 0),\n    (1, 0.25),  // 0.25s interval since last index\n    (2, 1),     // 0.75s interval since last index\n    (3, 1.25),  // 0.25s interval since last index\n    (4, 1.5),   // 0.25s interval since last index\n    (5, 2)      // 0.5s interval since last index\n]\n\n\nlet subject = PassthroughSubject<Int, Never>()\ncancellable = subject\n    .debounce(for: .seconds(0.5), scheduler: RunLoop.main)\n    .sink { index in\n        print (\"Received index \\(index)\")\n    }\n\n\nfor bounce in bounces {\n    DispatchQueue.main.asyncAfter(deadline: .now() + bounce.1) {\n        subject.send(bounce.0)\n    }\n}\n\n\n// Prints:\n//  Received index 1\n//  Received index 4\n//  Received index 5\n\n\n//  Here is the event flow shown from the perspective of time, showing value delivery through the `debounce()` operator:\n\n\n//  Time 0: Send index 0.\n//  Time 0.25: Send index 1. Index 0 was waiting and is discarded.\n//  Time 0.75: Debounce period ends, publish index 1.\n//  Time 1: Send index 2.\n//  Time 1.25: Send index 3. Index 2 was waiting and is discarded.\n//  Time 1.5: Send index 4. Index 3 was waiting and is discarded.\n//  Time 2: Debounce period ends, publish index 4. Also, send index 5.\n//  Time 2.5: Debounce period ends, publish index 5.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "combineLatest(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/combinelatest(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:_:) when you need to combine the current and 3 additional publishers and transform the values using a closure in which you specify the published elements, to publish a new element.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, as combineLatest(_:_:_:_:) receives the most-recent values published by four publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4) { firstValue, secondValue, thirdValue, fourthValue in\n        return firstValue * secondValue * thirdValue * fourthValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: 36.     // pub = 2,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 54.     // pub = 3,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 324.    // pub = 3,  pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 1404.   // pub = 13, pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 2964.   // pub = 13, pub2 = 12,  pub3 = 19, pub4 = 1\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "encode(encoder:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/encode(encoder:)",
        "html": "Parameters\nencoder\n\nAn encoder that implements the TopLevelEncoder protocol.\n\nReturn Value\n\nA publisher that encodes received elements using a specified encoder, and publishes the resulting data.\n\nDiscussion\n\nUse encode(encoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to encode an Encodable struct into Data that could be used to make a JSON string (or written to disk as a binary plist in the case of property lists).\n\nIn this example, a PassthroughSubject publishes an Article. The encode(encoder:) operator encodes the properties of the Article struct into a new JSON string according to the Codable protocol adopted by Article. The operator publishes the resulting JSON string to the downstream subscriber. If the encoding operation fails, which can happen in the case of complex properties that can\u2019t be directly transformed into JSON, the stream terminates and the error is passed to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Article, Never>()\nlet cancellable = dataProvider\n    .encode(encoder: JSONEncoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\") },\n          receiveValue: {  data in\n            guard let stringRepresentation = String(data: data, encoding: .utf8) else { return }\n            print(\"Data received \\(data) string representation: \\(stringRepresentation)\")\n    })\n\n\ndataProvider.send(Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: Date()))\n\n\n// Prints: \"Data received 86 bytes string representation: {\"title\":\"My First Article\",\"author\":\"Gita Kumar\",\"pubDate\":606211803.279603}\"\n\nSee Also\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder."
    },
    {
        "title": "filter(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/filter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value indicating whether to republish the element.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nCombine\u2019s filter(_:) operator performs an operation similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018365-filter in the Swift Standard Library: it uses a closure to test each element to determine whether to republish the element to the downstream subscriber.\n\nThe following example, uses a filter operation that receives an Int and only republishes a value if it\u2019s even.\n\nlet numbers: [Int] = [1, 2, 3, 4, 5]\ncancellable = numbers.publisher\n    .filter { $0 % 2 == 0 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 4\"\n\nSee Also\nFiltering Elements\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "contains(where:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/contains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(where:) to find the first element in an upstream that satisfies the closure you provide. This operator consumes elements produced from the upstream publisher until the upstream publisher produces a matching element.\n\nThis operator is useful when the upstream publisher produces elements that don\u2019t conform to Equatable.\n\nIn the example below, the contains(where:) operator tests elements against the supplied closure and emits true for the first elements that\u2019s greater than 4, and then finishes normally.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .contains {$0 > 4}\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "contains(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/contains(_:)",
        "html": "Parameters\noutput\n\nAn element to match against.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(_:) to find the first element in an upstream that\u2019s equal to the supplied argument. The contains publisher consumes all received elements until the upstream publisher produces a matching element. Upon finding the first match, it emits true and finishes normally. If the upstream finishes normally without producing a matching element, this publisher emits false and finishes.\n\nIn the example below, the contains(_:) operator emits true the first time it receives the value 5 from the numbers.publisher, and then finishes normally.\n\nlet numbers = [-1, 5, 10, 5]\nnumbers.publisher\n    .contains(5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/compactmap(_:)",
        "html": "Parameters\ntransform\n\nA closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of the calling the supplied closure.\n\nDiscussion\n\nCombine\u2019s compactMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/2950916-compactmap in the Swift standard library: the compactMap(_:) operator in Combine removes nil elements in a publisher\u2019s stream and republishes non-nil elements to the downstream subscriber.\n\nThe example below uses a range of numbers as the source for a collection based publisher. The compactMap(_:) operator consumes each element from the numbers publisher attempting to access the dictionary using the element as the key. If the example\u2019s dictionary returns a nil, due to a non-existent key, compactMap(_:) filters out the nil (missing) elements.\n\nlet numbers = (0...5)\nlet romanNumeralDict: [Int : String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ncancellable = numbers.publisher\n    .compactMap { romanNumeralDict[$0] }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"I II III V\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "combineLatest(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/combinelatest(_:)",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest(_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To pair elements from multiple publishers, use zip(_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn this example, PassthroughSubject pub1 and also pub2 emit values; as combineLatest(_:) receives input from either upstream publisher, it combines the latest value from each publisher into a tuple and publishes it.\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(3)\npub1.send(45)\npub2.send(22)\n\n\n// Prints:\n//    Result: (2, 2).    // pub1 latest = 2, pub2 latest = 2\n//    Result: (3, 2).    // pub1 latest = 3, pub2 latest = 2\n//    Result: (45, 2).   // pub1 latest = 45, pub2 latest = 2\n//    Result: (45, 22).  // pub1 latest = 45, pub2 latest = 22\n\n\nWhen all upstream publishers finish, this publisher finishes. If an upstream publisher never publishes a value, this publisher never finishes.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/combinelatest(_:_:)-66jpm",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest<P,T>(_:) to combine the current and one additional publisher and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn the example below, combineLatest() receives the most-recent values published by the two publishers, it multiplies them together, and republishes the result:\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2) { (first, second) in\n        return first * second\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(9)\npub1.send(3)\npub2.send(12)\npub1.send(13)\n//\n// Prints:\n//Result: 4.    (pub1 latest = 2, pub2 latest = 2)\n//Result: 18.   (pub1 latest = 9, pub2 latest = 2)\n//Result: 6.    (pub1 latest = 3, pub2 latest = 2)\n//Result: 36.   (pub1 latest = 3, pub2 latest = 12)\n//Result: 156.  (pub1 latest = 13, pub2 latest = 12)\n\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/flatmap(maxpublishers:_:)-6tj09",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "allSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/allsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the allSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes.\n\nIn the example below, the allSatisfy(_:) operator tests if each an integer array publisher\u2019s elements fall into the targetRange:\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .allSatisfy { targetRange.contains($0) }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "collect(_:options:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/collect(_:options:)",
        "html": "Parameters\nstrategy\n\nThe timing group strategy used by the operator to collect and publish elements.\n\noptions\n\nScheduler options to use for the strategy.\n\nReturn Value\n\nA publisher that collects elements by a given strategy, and emits a single array of the collection.\n\nDiscussion\n\nUse collect(_:options:) to emit arrays of elements on a schedule specified by a Scheduler and Stride that you provide. At the end of each scheduled interval, the publisher sends an array that contains the items it collected. If the upstream publisher finishes before filling the buffer, the publisher sends an array that contains items it received. This may be fewer than the number of elements specified in the requested Stride.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThe example above collects timestamps generated on a one-second Timer in groups (Stride) of five.\n\nlet sub = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .collect(.byTime(RunLoop.main, .seconds(5)))\n    .sink { print(\"\\($0)\", terminator: \"\\n\\n\") }\n\n\n// Prints: \"[2020-01-24 00:54:46 +0000, 2020-01-24 00:54:47 +0000,\n//          2020-01-24 00:54:48 +0000, 2020-01-24 00:54:49 +0000,\n//          2020-01-24 00:54:50 +0000]\"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "collect(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/collect(_:)",
        "html": "Parameters\ncount\n\nThe maximum number of received elements to buffer before publishing.\n\nReturn Value\n\nA publisher that collects up to the specified number of elements, and then publishes them as an array.\n\nDiscussion\n\nUse collect(_:) to emit arrays of at most count elements from an upstream publisher. If the upstream publisher finishes before collecting the specified number of elements, the publisher sends an array of only the items it received. This may be fewer than count elements.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nIn the example below, the collect(_:) operator emits one partial and two full arrays based on the requested collection size of 5:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect(5)\n    .sink { print(\"\\($0), terminator: \" \"\") }\n\n\n// Prints \"[0, 1, 2, 3, 4] [5, 6, 7, 8, 9] [10] \"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "tryDrop(while:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/trydrop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false, and then republishes all remaining elements. If the predicate closure throws, the publisher fails with an error.\n\nDiscussion\n\nUse tryDrop(while:) to omit elements from an upstream until an error-throwing closure you provide returns false, after which the remaining items in the stream are published. If the closure throws, no elements are emitted and the publisher fails with an error.\n\nIn the example below, elements are ignored until -1 is encountered in the stream and the closure returns false. The publisher then republishes the remaining elements and finishes normally. Conversely, if the guard value in the closure had been encountered, the closure would throw and the publisher would fail with an error.\n\nstruct RangeError: Error {}\nvar numbers = [1, 2, 3, 4, 5, 6, -1, 7, 8, 9, 10]\nlet range: CountableClosedRange<Int> = (1...100)\ncancellable = numbers.publisher\n    .tryDrop {\n        guard $0 != 0 else { throw RangeError() }\n        return range.contains($0)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"-1 7 8 9 10 completion: finished\"\n// If instead numbers was [1, 2, 3, 4, 5, 6, 0, -1, 7, 8, 9, 10], tryDrop(while:) would fail with a RangeError.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryContains(where:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/trycontains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse tryContains(where:) to find the first element in an upstream that satisfies the error-throwing closure you provide.\n\nThis operator consumes elements produced from the upstream publisher until the upstream publisher either:\n\nProduces a matching element, after which it emits true and the publisher finishes normally.\n\nEmits false if no matching element is found and the publisher finishes normally.\n\nIf the predicate throws an error, the publisher fails, passing the error to its downstream.\n\nIn the example below, the tryContains(where:) operator tests values to find an element less than 10; when the closure finds an odd number, like 3, the publisher terminates with an IllegalValueError.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers = [3, 2, 10, 5, 0, 9]\nnumbers.publisher\n    .tryContains {\n        if ($0 % 2 != 0) {\n            throw IllegalValueError()\n        }\n       return $0 < 10\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "timeout(_:scheduler:options:customError:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/timeout(_:scheduler:options:customerror:)",
        "html": "Parameters\ninterval\n\nThe maximum time interval the publisher can go without emitting an element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to deliver events.\n\noptions\n\nScheduler options that customize the delivery of elements.\n\ncustomError\n\nA closure that executes if the publisher times out. The publisher sends the failure returned by this closure to the subscriber as the reason for termination.\n\nReturn Value\n\nA publisher that terminates if the specified interval elapses with no events received from the upstream publisher.\n\nDiscussion\n\nUse timeout(_:scheduler:options:customError:) to terminate a publisher if an element isn\u2019t delivered within a timeout interval you specify.\n\nIn the example below, a PassthroughSubject publishes String elements and is configured to time out if no new elements are received within its TIME_OUT window of 5 seconds. A single value is published after the specified 2-second WAIT_TIME, after which no more elements are available; the publisher then times out and completes normally.\n\nvar WAIT_TIME : Int = 2\nvar TIMEOUT_TIME : Int = 5\n\n\nlet subject = PassthroughSubject<String, Never>()\nlet cancellable = subject\n    .timeout(.seconds(TIMEOUT_TIME), scheduler: DispatchQueue.main, options: nil, customError:nil)\n    .sink(\n          receiveCompletion: { print (\"completion: \\($0) at \\(Date())\") },\n          receiveValue: { print (\"value: \\($0) at \\(Date())\") }\n     )\n\n\nDispatchQueue.main.asyncAfter(deadline: .now() + .seconds(WAIT_TIME),\n                              execute: { subject.send(\"Some data - sent after a delay of \\(WAIT_TIME) seconds\") } )\n\n\n// Prints: value: Some data - sent after a delay of 2 seconds at 2020-03-10 23:47:59 +0000\n//         completion: finished at 2020-03-10 23:48:04 +0000\n\n\nIf customError is nil, the publisher completes normally; if you provide a closure for the customError argument, the upstream publisher is instead terminated upon timeout, and the error is delivered to the downstream.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval."
    },
    {
        "title": "throttle(for:scheduler:latest:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/throttle(for:scheduler:latest:)",
        "html": "Parameters\ninterval\n\nThe interval at which to find and emit either the most recent or the first element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to publish elements.\n\nlatest\n\nA Boolean value that indicates whether to publish the most recent element. If false, the publisher emits the first element received during the interval.\n\nReturn Value\n\nA publisher that emits either the most-recent or first element received during the specified interval.\n\nDiscussion\n\nUse throttle(for:scheduler:latest:) to selectively republish elements from an upstream publisher during an interval you specify. Other elements received from the upstream in the throttling interval aren\u2019t republished.\n\nIn the example below, a Timer.TimerPublisher produces elements on one-second intervals; the throttle(for:scheduler:latest:) operator delivers the first event, then republishes only the latest event in the following ten second intervals:\n\ncancellable = Timer.publish(every: 3.0, on: .main, in: .default)\n    .autoconnect()\n    .print(\"\\(Date().description)\")\n    .throttle(for: 10.0, scheduler: RunLoop.main, latest: true)\n    .sink(\n        receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print(\"Received Timestamp \\($0).\") }\n     )\n\n\n// Prints:\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:26:57 +0000)\n //    Received Timestamp 2020-03-19 18:26:57 +0000.\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:00 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:03 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:06 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:09 +0000)\n //    Received Timestamp 2020-03-19 18:27:09 +0000.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "catch(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/catch(_:)",
        "html": "Parameters\nhandler\n\nA closure that accepts the upstream failure as input and returns a publisher to replace the upstream publisher.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\n\nDiscussion\n\nUse catch() to replace an error from an upstream publisher with a new publisher.\n\nIn the example below, the catch() operator handles the SimpleError thrown by the upstream publisher by replacing the error with a Just publisher. This continues the stream by publishing a single value and completing normally.\n\nstruct SimpleError: Error {}\nlet numbers = [5, 4, 3, 2, 1, 0, 9, 8, 7, 6]\ncancellable = numbers.publisher\n    .tryLast(where: {\n        guard $0 != 0 else {throw SimpleError()}\n        return true\n    })\n    .catch({ (error) in\n        Just(-1)\n    })\n    .sink { print(\"\\($0)\") }\n    // Prints: -1\n\n\nBackpressure note: This publisher passes through request and cancel to the upstream. After receiving an error, the publisher sends sends any unfulfilled demand to the new Publisher. SeeAlso: replaceError\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "tryCompactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/trycompactmap(_:)",
        "html": "Parameters\ntransform\n\nAn error-throwing closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of calling the supplied closure.\n\nDiscussion\n\nUse tryCompactMap(_:) to remove nil elements from a publisher\u2019s stream based on an error-throwing closure you provide. If the closure throws an error, the publisher cancels the upstream publisher and sends the thrown error to the downstream subscriber as a Failure.\n\nThe following example uses an array of numbers as the source for a collection-based publisher. A tryCompactMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform the numbers from its Arabic to Roman numerals, as an optional String.\n\nIf the closure called by tryCompactMap(_:) fails to look up a Roman numeral, it returns the optional String (unknown).\n\nIf the closure called by tryCompactMap(_:) determines the input is 0, it throws an error. The tryCompactMap(_:) operator catches this error and stops publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from: Int) throws -> String? {\n    let romanNumeralDict: [Int : String] =\n        [1: \"I\", 2: \"II\", 3: \"III\", 4: \"IV\", 5: \"V\"]\n    guard from != 0 else { throw ParseError() }\n    return romanNumeralDict[from]\n}\nlet numbers = [6, 5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryCompactMap { try romanNumeral(from: $0) }\n    .sink(\n          receiveCompletion: { print (\"\\($0)\") },\n          receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"(Unknown) V IV III II I failure(ParseError())\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "output(in:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/output(in:)",
        "html": "Parameters\nrange\n\nA range that indicates which elements to publish.\n\nReturn Value\n\nA publisher that publishes elements specified by a range.\n\nDiscussion\n\nUse output(in:) to republish a range indices you specify in the published stream. After publishing all elements, the publisher finishes normally. If the publisher completes normally or with an error before producing all the elements in the range, it doesn\u2019t publish the remaining elements.\n\nIn the example below, an array publisher emits the subset of elements at the indices in the specified range:\n\nlet numbers = [1, 1, 2, 2, 2, 3, 4, 5, 6]\nnumbers.publisher\n    .output(in: (3...5))\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 2 3\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements."
    },
    {
        "title": "merge(with:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/merge(with:_:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nh\n\nAn eighth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\nlet pubH = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF, pubG, pubH)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\npubH.send(1000)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\npubH.send(1001)\n\n\n//Prints: \"1 40 90 -1 33 44 54 1000 2 50 100 -2 33 33 54 1001\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/merge(with:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\n\n\n//Prints: \"1 40 90 -1 33 44 2 50 100 -2 33 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "min()",
        "url": "https://developer.apple.com/documentation/combine/deferred/min()",
        "html": "Return Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to find the minimum value in a stream of elements from an upstream publisher.\n\nIn the example below, the min(by:) operator emits a value when the publisher finishes, that value is the minimum of the values received from upstream, which is -1.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .min()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"-1\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "max(by:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/max(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max(by:) to determine the maximum value of elements received from the upstream publisher based on an ordering closure you specify.\n\nIn the example below, an array publishes enumeration elements representing playing card ranks. The max(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the maximum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .jack]\ncancellable = cards.publisher\n    .max {\n        return  $0.rawValue > $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"queen\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "measureInterval(using:options:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/measureinterval(using:options:)",
        "html": "Parameters\nscheduler\n\nA scheduler to use for tracking the timing of events.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher that emits elements representing the time interval between the elements it receives.\n\nDiscussion\n\nUse measureInterval(using:options:) to measure the time between events delivered from an upstream publisher.\n\nIn the example below, a 1-second Timer is used as the data source for an event publisher; the measureInterval(using:options:) operator reports the elapsed time between the reception of events on the main run loop:\n\ncancellable = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .measureInterval(using: RunLoop.main)\n    .sink { print(\"\\($0)\", terminator: \"\\n\") }\n\n\n// Prints:\n//      Stride(magnitude: 1.0013610124588013)\n//      Stride(magnitude: 0.9992760419845581)\n\n\nThe output type of the returned publisher is the time interval of the provided scheduler.\n\nThis operator uses the provided scheduler\u2019s now property to measure intervals between events.\n\nSee Also\nControlling Timing\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "max()",
        "url": "https://developer.apple.com/documentation/combine/deferred/max()",
        "html": "Return Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max() to determine the maximum value in the stream of elements from an upstream publisher.\n\nIn the example below, the max() operator emits a value when the publisher finishes, that value is the maximum of the values received from upstream, which is 10.\n\nlet numbers = [0, 10, 5]\ncancellable = numbers.publisher\n    .max()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "merge(with:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/merge(with:)",
        "html": "Parameters\nother\n\nAnother publisher of this publisher\u2019s type.\n\nReturn Value\n\nA publisher that emits an event when either upstream publisher emits an event.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "mapError(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/maperror(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes the upstream failure as a parameter and returns a new error for the publisher to terminate with.\n\nReturn Value\n\nA publisher that replaces any upstream failure with a new error produced by the transform closure.\n\nDiscussion\n\nUse the mapError(_:) operator when you need to replace one error type with another, or where a downstream operator needs the error types of its inputs to match.\n\nThe following example uses a tryMap(_:) operator to divide 1 by each element produced by a sequence publisher. When the publisher produces a 0, the tryMap(_:) fails with a DivisionByZeroError. The mapError(_:) operator converts this into a MyGenericError.\n\nstruct DivisionByZeroError: Error {}\nstruct MyGenericError: Error { var wrappedError: Error }\n\n\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n       guard divisor != 0 else { throw DivisionByZeroError() }\n       return dividend / divisor\n   }\n\n\nlet divisors: [Double] = [5, 4, 3, 2, 1, 0]\ndivisors.publisher\n    .tryMap { try myDivide(1, $0) }\n    .mapError { MyGenericError(wrappedError: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") ,\n        receiveValue: { print (\"value: \\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"0.2 0.25 0.3333333333333333 0.5 1.0 completion: failure(MyGenericError(wrappedError: DivisionByZeroError()))\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/zip(_:_:_:)-1rq8b",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from three other publishers to publish a tuple to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, several PassthroughSubject instances emit values; zip(_:_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\nlet fractionsPub  = PassthroughSubject<Double, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 2,3     lettersPub: \"A\"    emojiPub: \"\ud83d\ude00\"  fractionsPub: 0.1     zip output: (1, \"A\", \"\ud83d\ude00\", 0.1)\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: (2, \"B\", \"\ud83e\udd70\", 0.8)\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\", 0.1)\n//  (2, \"B\", \"\ud83e\udd70\", 0.8)\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/breakpoint(receivesubscription:receiveoutput:receivecompletion:)",
        "html": "Parameters\nreceiveSubscription\n\nA closure that executes when the publisher receives a subscription. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveOutput\n\nA closure that executes when the publisher receives a value. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveCompletion\n\nA closure that executes when the publisher receives a completion. Return true from this closure to raise SIGTRAP, or false to continue.\n\nReturn Value\n\nA publisher that raises a debugger signal when one of the provided closures returns true.\n\nDiscussion\n\nUse breakpoint(receiveSubscription:receiveOutput:receiveCompletion:) to examine one or more stages of the subscribe/publish/completion process and stop in the debugger, based on conditions you specify. When any of the provided closures returns true, this operator raises the SIGTRAP signal to stop the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn the example below, a PassthroughSubject publishes strings to a breakpoint republisher. When the breakpoint receives the string \u201cDEBUGGER\u201d, it returns true, which stops the app in the debugger.\n\nlet publisher = PassthroughSubject<String?, Never>()\ncancellable = publisher\n    .breakpoint(\n        receiveOutput: { value in return value == \"DEBUGGER\" }\n    )\n    .sink { print(\"\\(String(describing: $0))\" , terminator: \" \") }\n\n\npublisher.send(\"DEBUGGER\")\n\n\n// Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n// Depending on your specific environment, the console messages may\n// also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/zip(_:_:)-339hc",
        "html": "Parameters\nother\n\nAnother publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from two upstream publishers.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two publishers using a transformation you specify to publish a new value to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, PassthroughSubject instances numbersPub and lettersPub emit values; zip(_:_:) receives the oldest value from each publisher, uses the Int from numbersPub and publishes a string that repeats the String from lettersPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\ncancellable = numbersPub\n    .zip(lettersPub) { anInt, aLetter in\n        String(repeating: aLetter, count: anInt)\n    }\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:       zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:       zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:       zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"   zip output: \"A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"   zip output: \"BB\"\n// Prints:\n//  A\n//  BB\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "assign(to:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/assign(to:)",
        "html": "Parameters\npublished\n\nA property marked with the @Published attribute, which receives and republishes all elements received from the upstream publisher.\n\nDiscussion\n\nUse this operator when you want to receive elements from a publisher and republish them through a property marked with the @Published attribute. The assign(to:) operator manages the life cycle of the subscription, canceling the subscription automatically when the Published instance deinitializes. Because of this, the assign(to:) operator doesn\u2019t return an AnyCancellable that you\u2019re responsible for like assign(to:on:) does.\n\nThe example below shows a model class that receives elements from an internal Timer.TimerPublisher, and assigns them to a @Published property called lastUpdated. Because the to parameter has the inout keyword, you need to use the & operator when calling this method.\n\nclass MyModel: ObservableObject {\n    @Published var lastUpdated: Date = Date()\n    init() {\n         Timer.publish(every: 1.0, on: .main, in: .common)\n             .autoconnect()\n             .assign(to: &$lastUpdated)\n    }\n}\n\n\nIf you instead implemented MyModel with assign(to: lastUpdated, on: self), storing the returned AnyCancellable instance could cause a reference cycle, because the Subscribers.Assign subscriber would hold a strong reference to self. Using assign(to:) solves this problem.\n\nWhile the to parameter uses the inout keyword, this method doesn\u2019t replace a reference type passed to it. Instead, this notation indicates that the operator may modify members of the assigned object, as seen in the following example:\n\n    class MyModel2: ObservableObject {\n        @Published var id: Int = 0\n    }\n    let model2 = MyModel2()\n    Just(100).assign(to: &model2.$id)\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/zip(_:_:)-6qsv3",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two additional publishers to publish a tuple to the downstream. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject; zip(_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:          emojiPub:        zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"      emojiPub: \"\ud83d\ude00\"   zip output: (1, \"A\", \"\ud83d\ude00\")\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:          emojiPub:        zip output: (2, \"B\", \"\ud83e\udd70\")\n\n\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\")\n//  (2, \"B\", \"\ud83e\udd70\")\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "tryScan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/tryscan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse tryScan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value. If your accumulator closure throws an error, the publisher terminates with the error.\n\nIn the example below, tryScan(_:_:) calls a division function on elements of a collection publisher. The Publishers.TryScan publisher publishes each result until the function encounters a DivisionByZeroError, which terminates the publisher.\n\nstruct DivisionByZeroError: Error {}\n\n\n/// A function that throws a DivisionByZeroError if `current` provided by the TryScan publisher is zero.\nfunc myThrowingFunction(_ lastValue: Int, _ currentValue: Int) throws -> Int {\n    guard currentValue != 0 else { throw DivisionByZeroError() }\n    return (lastValue + currentValue) / currentValue\n }\n\n\nlet numbers = [1,2,3,4,5,0,6,7,8,9]\ncancellable = numbers.publisher\n    .tryScan(10) { try myThrowingFunction($0, $1) }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"11 6 3 1 1 -1 failure(DivisionByZeroError())\".\n\n\nIf the closure throws an error, the publisher fails with the error.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "zip(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/zip(_:)",
        "html": "Parameters\nother\n\nAnother publisher.\n\nReturn Value\n\nA publisher that emits pairs of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:) to combine the latest elements from two publishers and emit a tuple to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together as a tuple to the subscriber.\n\nMuch like a zipper or zip fastener on a piece of clothing pulls together rows of teeth to link the two sides, zip(_:) combines streams from two different publishers by linking pairs of elements from each side.\n\nIn this example, numbers and letters are PassthroughSubjects that emit values; once zip(_:) receives one value from each, it publishes the pair as a tuple to the downstream subscriber. It then waits for the next pair of values.\n\n let numbersPub = PassthroughSubject<Int, Never>()\n let lettersPub = PassthroughSubject<String, Never>()\n\n\n cancellable = numbersPub\n     .zip(lettersPub)\n     .sink { print(\"\\($0)\") }\n numbersPub.send(1)    // numbersPub: 1      lettersPub:        zip output: <none>\n numbersPub.send(2)    // numbersPub: 1,2    lettersPub:        zip output: <none>\n letters.send(\"A\")     // numbers: 1,2       letters:\"A\"        zip output: <none>\n numbers.send(3)       // numbers: 1,2,3     letters:           zip output: (1,\"A\")\n letters.send(\"B\")     // numbers: 1,2,3     letters: \"B\"       zip output: (2,\"B\")\n\n\n // Prints:\n //  (1, \"A\")\n //  (2, \"B\")\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "tryMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/trymap(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element. If the closure throws an error, the publisher fails with the thrown error.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s tryMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use tryMap(_:) to transform from one kind of element to another, and to terminate publishing when the map\u2019s closure throws an error.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A tryMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the tryMap(_:)\u2019s closure fails to look up a Roman numeral, it throws an error. The tryMap(_:) operator catches this error and terminates publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from:Int) throws -> String {\n    let romanNumeralDict: [Int : String] =\n        [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\n    guard let numeral = romanNumeralDict[from] else {\n        throw ParseError()\n    }\n    return numeral\n}\nlet numbers = [5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryMap { try romanNumeral(from: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"V IV III II I completion: failure(ParseError())\"\n\n\nIf your closure doesn\u2019t throw, use map(_:) instead.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "tryRemoveDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/tryremoveduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first. If this closure throws an error, the publisher terminates with the thrown error.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse tryRemoveDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of elements using an error-throwing closure you provide. If your closure throws an error, the publisher terminates with the error.\n\nIn the example below, the closure provided to tryRemoveDuplicates(by:) returns true when two consecutive elements are equal, thereby filtering out 0, 1, 2, and 3. However, the closure throws an error when it encounters 4. The publisher then terminates with this error.\n\nstruct BadValuesError: Error {}\nlet numbers = [0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\ncancellable = numbers.publisher\n    .tryRemoveDuplicates { first, second -> Bool in\n        if (first == 4 && second == 4) {\n            throw BadValuesError()\n        }\n        return first == second\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n // Prints: \"0 1 2 3 4 failure(BadValuesError()\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryCompactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/trycompactmap(_:)",
        "html": "Parameters\ntransform\n\nAn error-throwing closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of calling the supplied closure.\n\nDiscussion\n\nUse tryCompactMap(_:) to remove nil elements from a publisher\u2019s stream based on an error-throwing closure you provide. If the closure throws an error, the publisher cancels the upstream publisher and sends the thrown error to the downstream subscriber as a Failure.\n\nThe following example uses an array of numbers as the source for a collection-based publisher. A tryCompactMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform the numbers from its Arabic to Roman numerals, as an optional String.\n\nIf the closure called by tryCompactMap(_:) fails to look up a Roman numeral, it returns the optional String (unknown).\n\nIf the closure called by tryCompactMap(_:) determines the input is 0, it throws an error. The tryCompactMap(_:) operator catches this error and stops publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from: Int) throws -> String? {\n    let romanNumeralDict: [Int : String] =\n        [1: \"I\", 2: \"II\", 3: \"III\", 4: \"IV\", 5: \"V\"]\n    guard from != 0 else { throw ParseError() }\n    return romanNumeralDict[from]\n}\nlet numbers = [6, 5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryCompactMap { try romanNumeral(from: $0) }\n    .sink(\n          receiveCompletion: { print (\"\\($0)\") },\n          receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"(Unknown) V IV III II I failure(ParseError())\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryLast(where:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/trylast(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse tryLast(where:) when you need to republish the last element that satisfies an error-throwing closure you specify. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a publisher emits the last element that satisfies the error-throwing closure, then finishes normally:\n\nstruct RangeError: Error {}\n\n\nlet numbers = [-62, 1, 6, 10, 9, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .tryLast {\n        guard 0 != 0  else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n// Prints: \"5 completion: finished\"\n// If instead the numbers array had contained a `0`, the `tryLast` operator would terminate publishing with a RangeError.\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "tryFilter(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/tryfilter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value that indicated whether to republish the element or throws an error.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nUse tryFilter(_:) to filter elements evaluated in an error-throwing closure. If the isIncluded closure throws an error, the publisher fails with that error.\n\nIn the example below, tryFilter(_:) checks to see if the element provided by the publisher is zero, and throws a ZeroError before terminating the publisher with the thrown error. Otherwise, it republishes the element only if it\u2019s even:\n\nstruct ZeroError: Error {}\n\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\ncancellable = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"2 4 failure(DivisionByZeroError())\".\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryDrop(while:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/trydrop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false, and then republishes all remaining elements. If the predicate closure throws, the publisher fails with an error.\n\nDiscussion\n\nUse tryDrop(while:) to omit elements from an upstream until an error-throwing closure you provide returns false, after which the remaining items in the stream are published. If the closure throws, no elements are emitted and the publisher fails with an error.\n\nIn the example below, elements are ignored until -1 is encountered in the stream and the closure returns false. The publisher then republishes the remaining elements and finishes normally. Conversely, if the guard value in the closure had been encountered, the closure would throw and the publisher would fail with an error.\n\nstruct RangeError: Error {}\nvar numbers = [1, 2, 3, 4, 5, 6, -1, 7, 8, 9, 10]\nlet range: CountableClosedRange<Int> = (1...100)\ncancellable = numbers.publisher\n    .tryDrop {\n        guard $0 != 0 else { throw RangeError() }\n        return range.contains($0)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"-1 7 8 9 10 completion: finished\"\n// If instead numbers was [1, 2, 3, 4, 5, 6, 0, -1, 7, 8, 9, 10], tryDrop(while:) would fail with a RangeError.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryCatch(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/trycatch(_:)",
        "html": "Parameters\nhandler\n\nA throwing closure that accepts the upstream failure as input. This closure can either replace the upstream publisher with a new one, or throw a new error to the downstream subscriber.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher, or an error.\n\nDiscussion\n\nUse tryCatch(_:) to decide how to handle from an upstream publisher by either replacing the publisher with a new publisher, or throwing a new error.\n\nIn the example below, an array publisher emits values that a tryMap(_:) operator evaluates to ensure the values are greater than zero. If the values aren\u2019t greater than zero, the operator throws an error to the downstream subscriber to let it know there was a problem. The subscriber, tryCatch(_:), replaces the error with a new publisher using Just to publish a final value before the stream ends normally.\n\nenum SimpleError: Error { case error }\nvar numbers = [5, 4, 3, 2, 1, -1, 7, 8, 9, 10]\n\n\ncancellable = numbers.publisher\n   .tryMap { v in\n        if v > 0 {\n            return v\n        } else {\n            throw SimpleError.error\n        }\n}\n  .tryCatch { error in\n      Just(0) // Send a final value before completing normally.\n              // Alternatively, throw a new error to terminate the stream.\n}\n  .sink(receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print (\"Received \\($0).\") }\n  )\n//    Received 5.\n//    Received 4.\n//    Received 3.\n//    Received 2.\n//    Received 1.\n//    Received 0.\n//    Completion: finished.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "replaceError(with:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/replaceerror(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher fails.\n\nReturn Value\n\nA publisher that replaces an error from the upstream publisher with the provided output element.\n\nDiscussion\n\nIf the upstream publisher fails with an error, this publisher emits the provided element, then finishes normally.\n\nIn the example below, a publisher of strings fails with a MyError instance, which sends a failure completion downstream. The replaceError(with:) operator handles the failure by publishing the string (replacement element) and completing normally.\n\nstruct MyError: Error {}\nlet fail = Fail<String, MyError>(error: MyError())\ncancellable = fail\n    .replaceError(with: \"(replacement element)\")\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"(replacement element) finished\".\n\n\nThis replaceError(with:) functionality is useful when you want to handle an error by sending a single replacement element and end the stream. Use catch(_:) to recover from an error and provide a replacement publisher to continue providing elements to the downstream subscriber.\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element."
    },
    {
        "title": "prepend(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/prepend(_:)",
        "html": "Parameters\nelements\n\nThe elements to publish before this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that prefixes the specified elements prior to this publisher\u2019s elements.\n\nDiscussion\n\nUse prepend(_:) when you need to prepend specific elements before the output of a publisher.\n\nIn the example below, the prepend(_:) operator publishes the provided elements before republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .prepend(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 255 0 1 2 3 4 5 6 7 8 9 10\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "replaceEmpty(with:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/replaceempty(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher finishes without emitting any elements.\n\nReturn Value\n\nA publisher that replaces an empty stream with the provided output element.\n\nDiscussion\n\nUse replaceEmpty(with:) to provide a replacement element if the upstream publisher finishes without producing any elements.\n\nIn the example below, the empty Double array publisher doesn\u2019t produce any elements, so replaceEmpty(with:) publishes Double.nan and finishes normally.\n\nlet numbers: [Double] = []\ncancellable = numbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints \"(nan)\".\n\n\nConversely, providing a non-empty publisher publishes all elements and the publisher then terminates normally:\n\nlet otherNumbers: [Double] = [1.0, 2.0, 3.0]\ncancellable2 = otherNumbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: 1.0 2.0 3.0\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "removeDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/removeduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of the current and previously published elements using a closure you provide.\n\nUse the removeDuplicates(by:) operator when comparing types that don\u2019t themselves implement Equatable, or if you need to compare values differently than the type\u2019s Equatable implementation.\n\nIn the example below, the removeDuplicates(by:) functionality triggers when the x property of the current and previous elements are equal, otherwise the operator publishes the current Point to the downstream subscriber:\n\nstruct Point {\n    let x: Int\n    let y: Int\n}\n\n\nlet points = [Point(x: 0, y: 0), Point(x: 0, y: 1),\n              Point(x: 1, y: 1), Point(x: 2, y: 1)]\ncancellable = points.publisher\n    .removeDuplicates { prev, current in\n        // Considers points to be duplicate if the x coordinate\n        // is equal, and ignores the y coordinate\n        prev.x == current.x\n    }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: Point(x: 0, y: 0) Point(x: 1, y: 1) Point(x: 2, y: 1)\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "reduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/reduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nA closure that produces a new value by taking the previously-accumulated value and the next element it receives from the upstream publisher.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes. If reduce(_:_:) receives an error from the upstream publisher, the operator delivers it to the downstream subscriber, the publisher terminates and publishes no value.\n\nDiscussion\n\nUse reduce(_:_:) to collect a stream of elements and produce an accumulated value based on a closure you provide.\n\nIn the following example, the reduce(_:_:) operator collects all the integer values it receives from its upstream publisher:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .reduce(0, { accum, next in accum + next })\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"55\"\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "receive(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/receive(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler the publisher uses for element delivery.\n\noptions\n\nScheduler options used to customize element delivery.\n\nReturn Value\n\nA publisher that delivers elements using the specified scheduler.\n\nDiscussion\n\nYou use the receive(on:options:) operator to receive results and completion on a specific scheduler, such as performing UI work on the main run loop. In contrast with subscribe(on:options:), which affects upstream messages, receive(on:options:) changes the execution context of downstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes jsonPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes labelUpdater to receive elements and completion on RunLoop.main.\n\nlet jsonPublisher = MyJSONLoaderPublisher() // Some publisher.\nlet labelUpdater = MyLabelUpdateSubscriber() // Some subscriber that updates the UI.\n\n\njsonPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(labelUpdater)\n\n\nPrefer receive(on:options:) over explicit use of dispatch queues when performing work in subscribers. For example, instead of the following pattern:\n\npub.sink {\n    DispatchQueue.main.async {\n        // Do something.\n    }\n}\n\n\nUse this pattern instead:\n\npub.receive(on: DispatchQueue.main).sink {\n    // Do something.\n}\n\n\nNote\n\nreceive(on:options:) doesn\u2019t affect the scheduler used to call the subscriber\u2019s receive(subscription:) method.\n\nSee Also\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations."
    },
    {
        "title": "prefix(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/prefix(_:)",
        "html": "Parameters\nmaxLength\n\nThe maximum number of elements to republish.\n\nReturn Value\n\nA publisher that publishes up to the specified number of elements.\n\nDiscussion\n\nUse prefix(_:) to limit the number of elements republished to the downstream subscriber.\n\nIn the example below, the prefix(_:) operator limits its output to the first two elements before finishing normally:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .prefix(2)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "min(by:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/min(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to determine the minimum value in the stream of elements from an upstream publisher using a comparison operation you specify.\n\nThis operator is useful when the value received from the upstream publisher isn\u2019t Comparable.\n\nIn the example below an array publishes enumeration elements representing playing card ranks. The min(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the minimum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .king]\ncancellable = cards.publisher\n    .min {\n        return  $0.rawValue < $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"ace\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "output(in:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/output(in:)",
        "html": "Parameters\nrange\n\nA range that indicates which elements to publish.\n\nReturn Value\n\nA publisher that publishes elements specified by a range.\n\nDiscussion\n\nUse output(in:) to republish a range indices you specify in the published stream. After publishing all elements, the publisher finishes normally. If the publisher completes normally or with an error before producing all the elements in the range, it doesn\u2019t publish the remaining elements.\n\nIn the example below, an array publisher emits the subset of elements at the indices in the specified range:\n\nlet numbers = [1, 1, 2, 2, 2, 3, 4, 5, 6]\nnumbers.publisher\n    .output(in: (3...5))\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 2 3\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements."
    },
    {
        "title": "output(at:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/output(at:)",
        "html": "Parameters\nindex\n\nThe index that indicates the element to publish.\n\nReturn Value\n\nA publisher that publishes a specific indexed element.\n\nDiscussion\n\nUse output(at:) when you need to republish a specific element specified by its position in the stream. If the publisher completes normally or with an error before publishing the specified element, then the publisher doesn\u2019t produce any elements.\n\nIn the example below, the array publisher emits the fifth element in the sequence of published elements:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.publisher\n    .output(at: 5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"6\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "multicast(subject:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/multicast(subject:)",
        "html": "Parameters\nsubject\n\nA subject to deliver elements to downstream subscribers.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(_:), this method produces a publisher that shares the provided Subject among all the downstream subscribers.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(subject:) operator with a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast(subject: PassthroughSubject<(String, Int), Never>())\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 78))\n// Stream 2 received: (\"First\", 78)\n// Stream 1 received: (\"First\", 78)\n// Random: receive value: ((\"Second\", 98))\n// Stream 2 received: (\"Second\", 98)\n// Stream 1 received: (\"Second\", 98)\n// Random: receive value: ((\"Third\", 61))\n// Stream 2 received: (\"Third\", 61)\n// Stream 1 received: (\"Third\", 61)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "last(where:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/last(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse last(where:) when you need to republish only the last element of a stream that satisfies a closure you specify.\n\nIn the example below, a range publisher emits the last element that satisfies the closure\u2019s criteria, then finishes normally:\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last { $0 < 6 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"5\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "map(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/map(_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of another property on Output.\n\nReturn Value\n\nA publisher that publishes the values of two key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:) operator uses the Swift key path syntax to access the die1 and die2 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these two values (as an (Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1) (total: \\(values.0 + values.1))\")\n    }\n// Prints \"Rolled: 6, 4 (total: 10)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "map(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/map(_:_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of a second property on Output.\n\nkeyPath2\n\nThe key path of a third property on Output.\n\nReturn Value\n\nA publisher that publishes the values of three key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:_:) operator uses the Swift key path syntax to access the die1, die2, and die3 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these three values (as an (Int, Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n    let die3: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6),\n                            die3: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2, \\.die3)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1), \\(values.2) (total \\(values.0 + values.1 + values.2))\")\n    }\n// Prints \"Rolled: 5, 4, 2 (total 11)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple."
    },
    {
        "title": "makeConnectable()",
        "url": "https://developer.apple.com/documentation/combine/deferred/makeconnectable()",
        "html": "Return Value\n\nA ConnectablePublisher wrapping this publisher.\n\nDiscussion\n\nIn the following example, makeConnectable() wraps its upstream publisher (an instance of Publishers.Share) with a ConnectablePublisher. Without this, the first sink subscriber would receive all the elements from the sequence publisher and cause it to complete before the second subscriber attaches. By making the publisher connectable, the publisher doesn\u2019t produce any elements until after the connect() call.\n\n let subject = Just<String>(\"Sent\")\n let pub = subject\n     .share()\n     .makeConnectable()\n cancellable1 = pub.sink { print (\"Stream 1 received: \\($0)\")  }\n\n\n // For example purposes, use DispatchQueue to add a second subscriber\n // a second later, and then connect to the publisher a second after that.\n DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n     self.cancellable2 = pub.sink { print (\"Stream 2 received: \\($0)\") }\n }\n DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     self.connectable = pub.connect()\n }\n // Prints:\n // Stream 2 received: Sent\n // Stream 1 received: Sent\n\n\nNote\n\nThe connect() operator returns a Cancellable instance that you must retain. You can also use this instance to cancel publishing."
    },
    {
        "title": "last()",
        "url": "https://developer.apple.com/documentation/combine/deferred/last()",
        "html": "Return Value\n\nA publisher that only publishes the last element of a stream.\n\nDiscussion\n\nUse last() when you need to emit only the last element from an upstream publisher.\n\nIn the example below, the range publisher only emits the last element from the sequence publisher, 10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/map(_:)-88ylt",
        "html": "Parameters\nkeyPath\n\nThe key path of a property on Output.\n\nReturn Value\n\nA publisher that publishes the value of the key path.\n\nDiscussion\n\nIn the following example, the map(_:) operator uses the Swift key path syntax to access the die member of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only the value of this Int, not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die: Int\n}\n\n\ncancellable = Just(DiceRoll(die:Int.random(in:1...6)))\n    .map(\\.die)\n    .sink {\n        print (\"Rolled: \\($0)\")\n    }\n// Prints \"Rolled: 3\" (or some other random value).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "ignoreOutput()",
        "url": "https://developer.apple.com/documentation/combine/deferred/ignoreoutput()",
        "html": "Return Value\n\nA publisher that ignores all upstream elements.\n\nDiscussion\n\nUse the ignoreOutput() operator to determine if a publisher is able to complete successfully or would fail.\n\nIn the example below, the array publisher (numbers) delivers the first five of its elements successfully, as indicated by the ignoreOutput() operator. The operator consumes, but doesn\u2019t republish the elements downstream. However, the sixth element, 0, causes the error throwing closure to catch a NoZeroValuesAllowedError that terminates the stream.\n\nstruct NoZeroValuesAllowedError: Error {}\nlet numbers = [1, 2, 3, 4, 5, 0, 6, 7, 8, 9]\ncancellable = numbers.publisher\n    .tryFilter({ anInt in\n        guard anInt != 0 else { throw NoZeroValuesAllowedError() }\n        return anInt < 20\n    })\n    .ignoreOutput()\n    .sink(receiveCompletion: {print(\"completion: \\($0)\")},\n          receiveValue: {print(\"value \\($0)\")})\n\n\n// Prints: \"completion: failure(NoZeroValuesAllowedError())\"\n\n\nThe output type of this publisher is Never.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/map(_:)-8dmlp",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s map(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use map(_:) to transform from one kind of element to another.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A map(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the map(_:)\u2019s closure fails to look up a Roman numeral, it returns the string (unknown).\n\nlet numbers = [5, 4, 3, 2, 1, 0]\nlet romanNumeralDict: [Int : String] =\n   [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\ncancellable = numbers.publisher\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"V IV III II I (unknown)\"\n\n\nIf your closure can throw an error, use Combine\u2019s tryMap(_:) operator instead.\n\nSee Also\nMapping Elements\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/breakpoint(receivesubscription:receiveoutput:receivecompletion:)",
        "html": "Parameters\nreceiveSubscription\n\nA closure that executes when the publisher receives a subscription. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveOutput\n\nA closure that executes when the publisher receives a value. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveCompletion\n\nA closure that executes when the publisher receives a completion. Return true from this closure to raise SIGTRAP, or false to continue.\n\nReturn Value\n\nA publisher that raises a debugger signal when one of the provided closures returns true.\n\nDiscussion\n\nUse breakpoint(receiveSubscription:receiveOutput:receiveCompletion:) to examine one or more stages of the subscribe/publish/completion process and stop in the debugger, based on conditions you specify. When any of the provided closures returns true, this operator raises the SIGTRAP signal to stop the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn the example below, a PassthroughSubject publishes strings to a breakpoint republisher. When the breakpoint receives the string \u201cDEBUGGER\u201d, it returns true, which stops the app in the debugger.\n\nlet publisher = PassthroughSubject<String?, Never>()\ncancellable = publisher\n    .breakpoint(\n        receiveOutput: { value in return value == \"DEBUGGER\" }\n    )\n    .sink { print(\"\\(String(describing: $0))\" , terminator: \" \") }\n\n\npublisher.send(\"DEBUGGER\")\n\n\n// Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n// Depending on your specific environment, the console messages may\n// also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "assign(to:on:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/assign(to:on:)",
        "html": "Parameters\nkeyPath\n\nA key path that indicates the property to assign. See Key-Path Expression in The Swift Programming Language to learn how to use key paths to specify a property of an object.\n\nobject\n\nThe object that contains the property. The subscriber assigns the object\u2019s property every time it receives a new value.\n\nReturn Value\n\nAn AnyCancellable instance. Call cancel() on this instance when you no longer want the publisher to automatically assign the property. Deinitializing this instance will also cancel automatic assignment.\n\nDiscussion\n\nUse the assign(to:on:) subscriber when you want to set a given property each time a publisher produces a value.\n\nIn this example, the assign(to:on:) sets the value of the anInt property on an instance of MyClass:\n\nclass MyClass {\n    var anInt: Int = 0 {\n        didSet {\n            print(\"anInt was set to: \\(anInt)\", terminator: \"; \")\n        }\n    }\n}\n\n\nvar myObject = MyClass()\nlet myRange = (0...2)\ncancellable = myRange.publisher\n    .assign(to: \\.anInt, on: myObject)\n\n\n// Prints: \"anInt was set to: 0; anInt was set to: 1; anInt was set to: 2\"\n\n\nImportant\n\nThe Subscribers.Assign instance created by this operator maintains a strong reference to object, and sets it to nil when the upstream publisher completes (either normally or with an error).\n\nSee Also\nConnecting Simple Subscribers\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "assign(to:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/assign(to:)",
        "html": "Parameters\npublished\n\nA property marked with the @Published attribute, which receives and republishes all elements received from the upstream publisher.\n\nDiscussion\n\nUse this operator when you want to receive elements from a publisher and republish them through a property marked with the @Published attribute. The assign(to:) operator manages the life cycle of the subscription, canceling the subscription automatically when the Published instance deinitializes. Because of this, the assign(to:) operator doesn\u2019t return an AnyCancellable that you\u2019re responsible for like assign(to:on:) does.\n\nThe example below shows a model class that receives elements from an internal Timer.TimerPublisher, and assigns them to a @Published property called lastUpdated. Because the to parameter has the inout keyword, you need to use the & operator when calling this method.\n\nclass MyModel: ObservableObject {\n    @Published var lastUpdated: Date = Date()\n    init() {\n         Timer.publish(every: 1.0, on: .main, in: .common)\n             .autoconnect()\n             .assign(to: &$lastUpdated)\n    }\n}\n\n\nIf you instead implemented MyModel with assign(to: lastUpdated, on: self), storing the returned AnyCancellable instance could cause a reference cycle, because the Subscribers.Assign subscriber would hold a strong reference to self. Using assign(to:) solves this problem.\n\nWhile the to parameter uses the inout keyword, this method doesn\u2019t replace a reference type passed to it. Instead, this notation indicates that the operator may modify members of the assigned object, as seen in the following example:\n\n    class MyModel2: ObservableObject {\n        @Published var id: Int = 0\n    }\n    let model2 = MyModel2()\n    Just(100).assign(to: &model2.$id)\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "append(_:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/append(_:)",
        "html": "Parameters\nelements\n\nElements to publish after this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that appends the specifiecd elements after this publisher\u2019s elements.\n\nDiscussion\n\nUse append(_:) when you need to prepend specific elements after the output of a publisher.\n\nIn the example below, the append(_:) operator publishes the provided elements after republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .append(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 5 6 7 8 9 10 0 1 255\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "merge(with:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/merge(with:_:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nh\n\nAn eighth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\nlet pubH = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF, pubG, pubH)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\npubH.send(1000)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\npubH.send(1001)\n\n\n//Prints: \"1 40 90 -1 33 44 54 1000 2 50 100 -2 33 33 54 1001\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "assertNoFailure(_:file:line:)",
        "url": "https://developer.apple.com/documentation/combine/deferred/assertnofailure(_:file:line:)",
        "html": "Parameters\nprefix\n\nA string used at the beginning of the fatal error message.\n\nfile\n\nA filename used in the error message. This defaults to #file.\n\nline\n\nA line number used in the error message. This defaults to #line.\n\nReturn Value\n\nA publisher that raises a fatal error when its upstream publisher fails.\n\nDiscussion\n\nUse assertNoFailure() for internal integrity checks that are active during testing. However, it is important to note that, like its Swift counterpart fatalError(_:), the assertNoFailure() operator asserts a fatal exception when triggered during development and testing, and in shipping versions of code.\n\nIn the example below, a CurrentValueSubject publishes the initial and second values successfully. The third value, containing a genericSubjectError, causes the assertNoFailure() operator to assert a fatal exception stopping the process:\n\npublic enum SubjectError: Error {\n    case genericSubjectError\n}\n\n\nlet subject = CurrentValueSubject<String, Error>(\"initial value\")\nsubject\n    .assertNoFailure()\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0).\") }\n    )\n\n\nsubject.send(\"second value\")\nsubject.send(completion: Subscribers.Completion<Error>.failure(SubjectError.genericSubjectError))\n\n\n// Prints:\n//  value: initial value.\n//  value: second value.\n//  The process then terminates in the debugger as the assertNoFailure operator catches the genericSubjectError.\n\nSee Also\nHandling Errors\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "zip(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/zip(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from four upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:_:) to return a new publisher that combines the elements from three other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, the PassthroughSubject publishers, numbersPub, fractionsPub, lettersPub, and emojiPub emit values. The zip(_:_:_:_:) operator receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times and prints out the value in fractionsPub.\n\nlet numbersPub = PassthroughSubject<Int, Never>()      // first publisher\nlet lettersPub = PassthroughSubject<String, Never>()   // second\nlet emojiPub = PassthroughSubject<String, Never>()     // third\nlet fractionsPub  = PassthroughSubject<Double, Never>()// fourth\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub) { anInt, aLetter, anEmoji, aFraction  in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt)) \\(aFraction)\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:          emojiPub:          zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:\"\ud83d\ude00\"      zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"      emojiPub:          zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"      emojiPub:          zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n// Prints:\n//1 \ud83d\ude00 A 0.1\n//2 \ud83e\udd70\ud83e\udd70 BB 0.8\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/zip(_:_:_:)-4nzo7",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from three upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from two other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject that emit values; zip(_:_:_:) receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(letters, emoji) { anInt, aLetter, anEmoji in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt))\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:        emojiPub:            zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"    emojiPub:\"\ud83d\ude00\"        zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:        emojiPub:\"\ud83d\ude00\", \"\ud83e\udd70\"  zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n\n\n// Prints:\n// \ud83d\ude00 A\n// \ud83e\udd70\ud83e\udd70 BB\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "merge(with:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/merge(with:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers; it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubE, pubG)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\n\n\n//Prints: \"1 40 90 -1 33 44 54 2 50 100 -2 33 33 54\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/merge(with:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\n let pubA = PassthroughSubject<Int, Never>()\n let pubB = PassthroughSubject<Int, Never>()\n let pubC = PassthroughSubject<Int, Never>()\n let pubD = PassthroughSubject<Int, Never>()\n let pubE = PassthroughSubject<Int, Never>()\n\n\n cancellable = pubA\n     .merge(with: pubB, pubC, pubD, pubE)\n     .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\n pubA.send(1)\n pubB.send(40)\n pubC.send(90)\n pubD.send(-1)\n pubE.send(33)\n pubA.send(2)\n pubB.send(50)\n pubC.send(100)\n pubD.send(-2)\n pubE.send(33)\n\n\n // Prints: \"1 40 90 -1 33 2 50 100 -2 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "tryPrefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/tryprefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value indicating whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate throws or indicates publishing should finish.\n\nDiscussion\n\nUse tryPrefix(while:) to emit values from the upstream publisher that meet a condition you specify in an error-throwing closure. The publisher finishes when the closure returns false. If the closure throws an error, the publisher fails with that error.\n\nstruct OutOfRangeError: Error {}\n\n\nlet numbers = (0...10).reversed()\ncancellable = numbers.publisher\n    .tryPrefix {\n        guard $0 != 0 else {throw OutOfRangeError()}\n        return $0 <= numbers.max()!\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"10 9 8 7 6 5 4 3 2 1 completion: failure(OutOfRangeError()) \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "decode(type:decoder:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/decode(type:decoder:)",
        "html": "Parameters\ntype\n\nThe encoded data to decode into a struct that conforms to the Decodable protocol.\n\ndecoder\n\nA decoder that implements the TopLevelDecoder protocol.\n\nReturn Value\n\nA publisher that decodes a given type using a specified decoder and publishes the result.\n\nDiscussion\n\nUse decode(type:decoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to decode data received from a URLSession.DataTaskPublisher or other data source using the Decodable protocol.\n\nIn this example, a PassthroughSubject publishes a JSON string. The JSON decoder parses the string, converting its fields according to the Decodable protocol implemented by Article, and successfully populating a new Article. The Publishers.Decode publisher then publishes the Article to the downstream. If a decoding operation fails, which happens in the case of missing or malformed data in the source JSON string, the stream terminates and passes the error to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Data, Never>()\ncancellable = dataProvider\n    .decode(type: Article.self, decoder: JSONDecoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\")},\n          receiveValue: { print (\"value: \\($0)\") })\n\n\ndataProvider.send(Data(\"{\\\"pubDate\\\":1574273638.575666, \\\"title\\\" : \\\"My First Article\\\", \\\"author\\\" : \\\"Gita Kumar\\\" }\".utf8))\n\n\n// Prints: \".sink() data received Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: 2050-11-20 18:13:58 +0000)\"\n\nSee Also\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable."
    },
    {
        "title": "values",
        "url": "https://developer.apple.com/documentation/combine/deferred/values",
        "html": "Discussion\n\nThis property provides an AsyncThrowingPublisher, which allows you to use the Swift async-await syntax to receive the publisher\u2019s elements. Because AsyncPublisher conforms to AsyncSequence, you iterate over its elements with a for-await-in loop, rather than attaching a subscriber. If the publisher terminates with an error, the awaiting caller receives the error as a throw.\n\nThe following example shows how to use the values property to receive elements asynchronously. The example adapts a code snippet from the tryFilter(_:) operator\u2019s documentation, which filters a sequence to only emit even integers, and terminate with an error on a 0. This example replaces the Subscribers.Sink subscriber with a for-await-in loop that iterates over the AsyncPublisher provided by the values property. With this approach, the error handling previously provided in the sink subscriber\u2019s receiveCompletion closure goes instead in a catch block.\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\nlet filterPublisher = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n\n\ndo {\n    for try await number in filterPublisher.values {\n        print (\"\\(number)\", terminator: \" \")\n    }\n} catch {\n    print (\"\\(error)\")\n}\n"
    },
    {
        "title": "Publishers.TryDropWhile.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/trydropwhile/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/map(_:)-hyaf",
        "html": "Parameters\nkeyPath\n\nThe key path of a property on Output.\n\nReturn Value\n\nA publisher that publishes the value of the key path.\n\nDiscussion\n\nIn the following example, the map(_:) operator uses the Swift key path syntax to access the die member of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only the value of this Int, not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die: Int\n}\n\n\ncancellable = Just(DiceRoll(die:Int.random(in:1...6)))\n    .map(\\.die)\n    .sink {\n        print (\"Rolled: \\($0)\")\n    }\n// Prints \"Rolled: 3\" (or some other random value).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "last()",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/last()",
        "html": "Return Value\n\nA publisher that only publishes the last element of a stream.\n\nDiscussion\n\nUse last() when you need to emit only the last element from an upstream publisher.\n\nIn the example below, the range publisher only emits the last element from the sequence publisher, 10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/map(_:)-762uk",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s map(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use map(_:) to transform from one kind of element to another.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A map(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the map(_:)\u2019s closure fails to look up a Roman numeral, it returns the string (unknown).\n\nlet numbers = [5, 4, 3, 2, 1, 0]\nlet romanNumeralDict: [Int : String] =\n   [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\ncancellable = numbers.publisher\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"V IV III II I (unknown)\"\n\n\nIf your closure can throw an error, use Combine\u2019s tryMap(_:) operator instead.\n\nSee Also\nMapping Elements\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "last(where:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/last(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse last(where:) when you need to republish only the last element of a stream that satisfies a closure you specify.\n\nIn the example below, a range publisher emits the last element that satisfies the closure\u2019s criteria, then finishes normally:\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last { $0 < 6 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"5\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)",
        "html": "Parameters\nreceiveSubscription\n\nAn optional closure that executes when the publisher receives the subscription from the upstream publisher. This value defaults to nil.\n\nreceiveOutput\n\nAn optional closure that executes when the publisher receives a value from the upstream publisher. This value defaults to nil.\n\nreceiveCompletion\n\nAn optional closure that executes when the upstream publisher finishes normally or terminates with an error. This value defaults to nil.\n\nreceiveCancel\n\nAn optional closure that executes when the downstream receiver cancels publishing. This value defaults to nil.\n\nreceiveRequest\n\nAn optional closure that executes when the publisher receives a request for more elements. This value defaults to nil.\n\nReturn Value\n\nA publisher that performs the specified closures when publisher events occur.\n\nDiscussion\n\nUse handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:) when you want to examine elements as they progress through the stages of the publisher\u2019s lifecycle.\n\nIn the example below, a publisher of integers shows the effect of printing debugging information at each stage of the element-processing lifecycle:\n\nlet integers = (0...2)\ncancellable = integers.publisher\n    .handleEvents(receiveSubscription: { subs in\n        print(\"Subscription: \\(subs.combineIdentifier)\")\n    }, receiveOutput: { anInt in\n        print(\"in output handler, received \\(anInt)\")\n    }, receiveCompletion: { _ in\n        print(\"in completion handler\")\n    }, receiveCancel: {\n        print(\"received cancel\")\n    }, receiveRequest: { (demand) in\n        print(\"received demand: \\(demand.description)\")\n    })\n    .sink { _ in return }\n\n\n// Prints:\n//   received demand: unlimited\n//   Subscription: 0x7f81284734c0\n//   in output handler, received 0\n//   in output handler, received 1\n//   in output handler, received 2\n//   in completion handler\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "makeConnectable()",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/makeconnectable()",
        "html": "Return Value\n\nA ConnectablePublisher wrapping this publisher.\n\nDiscussion\n\nIn the following example, makeConnectable() wraps its upstream publisher (an instance of Publishers.Share) with a ConnectablePublisher. Without this, the first sink subscriber would receive all the elements from the sequence publisher and cause it to complete before the second subscriber attaches. By making the publisher connectable, the publisher doesn\u2019t produce any elements until after the connect() call.\n\n let subject = Just<String>(\"Sent\")\n let pub = subject\n     .share()\n     .makeConnectable()\n cancellable1 = pub.sink { print (\"Stream 1 received: \\($0)\")  }\n\n\n // For example purposes, use DispatchQueue to add a second subscriber\n // a second later, and then connect to the publisher a second after that.\n DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n     self.cancellable2 = pub.sink { print (\"Stream 2 received: \\($0)\") }\n }\n DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     self.connectable = pub.connect()\n }\n // Prints:\n // Stream 2 received: Sent\n // Stream 1 received: Sent\n\n\nNote\n\nThe connect() operator returns a Cancellable instance that you must retain. You can also use this instance to cancel publishing."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/flatmap(maxpublishers:_:)-4djtb",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nDiscussion\n\nCombine\u2018s flatMap(maxPublishers:_:) operator performs a similar function to the doc://com.apple.documentation/documentation/Swift/Sequence/2905332-flatmap operator in the Swift standard library, but turns the elements from one kind of publisher into a new publisher that is sent to subscribers. Use flatMap(maxPublishers:_:) when you want to create a new series of events for downstream subscribers based on the received value. The closure creates the new Publisher based on the received value. The new Publisher can emit more than one event, and successful completion of the new Publisher does not complete the overall stream. Failure of the new Publisher causes the overall stream to fail.\n\nIn the example below, a PassthroughSubject publishes WeatherStation elements. The flatMap(maxPublishers:_:) receives each element, creates a URL from it, and produces a new URLSession.DataTaskPublisher, which will publish the data loaded from that URL.\n\npublic struct WeatherStation {\n    public let stationID: String\n}\n\n\nvar weatherPublisher = PassthroughSubject<WeatherStation, URLError>()\n\n\ncancellable = weatherPublisher.flatMap { station -> URLSession.DataTaskPublisher in\n    let url = URL(string:\"https://weatherapi.example.com/stations/\\(station.stationID)/observations/latest\")!\n    return URLSession.shared.dataTaskPublisher(for: url)\n}\n.sink(\n    receiveCompletion: { completion in\n        // Handle publisher completion (normal or error).\n    },\n    receiveValue: {\n        // Process the received data.\n    }\n )\n\n\nweatherPublisher.send(WeatherStation(stationID: \"KSFO\")) // San Francisco, CA\nweatherPublisher.send(WeatherStation(stationID: \"EGLC\")) // London, UK\nweatherPublisher.send(WeatherStation(stationID: \"ZBBB\")) // Beijing, CN\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/flatmap(maxpublishers:_:)-38nry",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "first(where:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/first(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse first(where:) to republish only the first element of a stream that satisfies a closure you specify. The publisher ignores all elements after the first element that satisfies the closure and finishes normally. If this publisher doesn\u2019t receive any elements, it finishes without publishing.\n\nIn the example below, the provided closure causes the Publishers.FirstWhere publisher to republish the first received element that\u2019s greater than 0, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first { $0 > 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"1\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/flatmap(maxpublishers:_:)-17ono",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "filter(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/filter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value indicating whether to republish the element.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nCombine\u2019s filter(_:) operator performs an operation similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018365-filter in the Swift Standard Library: it uses a closure to test each element to determine whether to republish the element to the downstream subscriber.\n\nThe following example, uses a filter operation that receives an Int and only republishes a value if it\u2019s even.\n\nlet numbers: [Int] = [1, 2, 3, 4, 5]\ncancellable = numbers.publisher\n    .filter { $0 % 2 == 0 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 4\"\n\nSee Also\nFiltering Elements\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "first()",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/first()",
        "html": "Return Value\n\nA publisher that only publishes the first element of a stream.\n\nDiscussion\n\nUse first() to publish just the first element from an upstream publisher, then finish normally. The first() operator requests unlimited from its upstream as soon as downstream requests at least one element. If the upstream completes before first() receives any elements, it completes without emitting any values.\n\nIn this example, the first() publisher republishes the first element received from the sequence publisher, -10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first()\n    .sink { print(\"\\($0)\") }\n\n\n// Print: \"-10\"\n\nSee Also\nSelecting Specific Elements\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "assertNoFailure(_:file:line:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/assertnofailure(_:file:line:)",
        "html": "Parameters\nprefix\n\nA string used at the beginning of the fatal error message.\n\nfile\n\nA filename used in the error message. This defaults to #file.\n\nline\n\nA line number used in the error message. This defaults to #line.\n\nReturn Value\n\nA publisher that raises a fatal error when its upstream publisher fails.\n\nDiscussion\n\nUse assertNoFailure() for internal integrity checks that are active during testing. However, it is important to note that, like its Swift counterpart fatalError(_:), the assertNoFailure() operator asserts a fatal exception when triggered during development and testing, and in shipping versions of code.\n\nIn the example below, a CurrentValueSubject publishes the initial and second values successfully. The third value, containing a genericSubjectError, causes the assertNoFailure() operator to assert a fatal exception stopping the process:\n\npublic enum SubjectError: Error {\n    case genericSubjectError\n}\n\n\nlet subject = CurrentValueSubject<String, Error>(\"initial value\")\nsubject\n    .assertNoFailure()\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0).\") }\n    )\n\n\nsubject.send(\"second value\")\nsubject.send(completion: Subscribers.Completion<Error>.failure(SubjectError.genericSubjectError))\n\n\n// Prints:\n//  value: initial value.\n//  value: second value.\n//  The process then terminates in the debugger as the assertNoFailure operator catches the genericSubjectError.\n\nSee Also\nHandling Errors\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "append(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/append(_:)",
        "html": "Parameters\nelements\n\nElements to publish after this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that appends the specifiecd elements after this publisher\u2019s elements.\n\nDiscussion\n\nUse append(_:) when you need to prepend specific elements after the output of a publisher.\n\nIn the example below, the append(_:) operator publishes the provided elements after republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .append(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 5 6 7 8 9 10 0 1 255\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "breakpointOnError()",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/breakpointonerror()",
        "html": "Return Value\n\nA publisher that raises a debugger signal upon receiving a failure.\n\nDiscussion\n\nWhen the upstream publisher fails with an error, this publisher raises the SIGTRAP signal, which stops the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn this example a PassthroughSubject publishes strings, but its downstream tryMap(_:) operator throws an error. This sends the error downstream as a Subscribers.Completion.failure(_:). The breakpointOnError() operator receives this completion and stops the app in the debugger.\n\n struct CustomError : Error {}\n let publisher = PassthroughSubject<String?, Error>()\n cancellable = publisher\n     .tryMap { stringValue in\n         throw CustomError()\n     }\n     .breakpointOnError()\n     .sink(\n         receiveCompletion: { completion in print(\"Completion: \\(String(describing: completion))\") },\n         receiveValue: { aValue in print(\"Result: \\(String(describing: aValue))\") }\n     )\n\n\n publisher.send(\"TEST DATA\")\n\n\n // Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n // Depending on your specific environment, the console messages may\n // also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "tryMax(by:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/trymax(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMax(by:) to determine the maximum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMax(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\ncancellable = numbers.publisher\n    .tryMax { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first > second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: completion: failure(IllegalValueError())\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "allSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/allsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the allSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes.\n\nIn the example below, the allSatisfy(_:) operator tests if each an integer array publisher\u2019s elements fall into the targetRange:\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .allSatisfy { targetRange.contains($0) }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "tryMin(by:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/trymin(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMin(by:) to determine the minimum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMin(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\nnumbers.publisher\n    .tryMin { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first < second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes."
    },
    {
        "title": "values",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/values",
        "html": "Discussion\n\nThis property provides an AsyncThrowingPublisher, which allows you to use the Swift async-await syntax to receive the publisher\u2019s elements. Because AsyncPublisher conforms to AsyncSequence, you iterate over its elements with a for-await-in loop, rather than attaching a subscriber. If the publisher terminates with an error, the awaiting caller receives the error as a throw.\n\nThe following example shows how to use the values property to receive elements asynchronously. The example adapts a code snippet from the tryFilter(_:) operator\u2019s documentation, which filters a sequence to only emit even integers, and terminate with an error on a 0. This example replaces the Subscribers.Sink subscriber with a for-await-in loop that iterates over the AsyncPublisher provided by the values property. With this approach, the error handling previously provided in the sink subscriber\u2019s receiveCompletion closure goes instead in a catch block.\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\nlet filterPublisher = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n\n\ndo {\n    for try await number in filterPublisher.values {\n        print (\"\\(number)\", terminator: \" \")\n    }\n} catch {\n    print (\"\\(error)\")\n}\n"
    },
    {
        "title": "tryPrefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/tryprefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value indicating whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate throws or indicates publishing should finish.\n\nDiscussion\n\nUse tryPrefix(while:) to emit values from the upstream publisher that meet a condition you specify in an error-throwing closure. The publisher finishes when the closure returns false. If the closure throws an error, the publisher fails with that error.\n\nstruct OutOfRangeError: Error {}\n\n\nlet numbers = (0...10).reversed()\ncancellable = numbers.publisher\n    .tryPrefix {\n        guard $0 != 0 else {throw OutOfRangeError()}\n        return $0 <= numbers.max()!\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"10 9 8 7 6 5 4 3 2 1 completion: failure(OutOfRangeError()) \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "assign(to:on:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/assign(to:on:)",
        "html": "Parameters\nkeyPath\n\nA key path that indicates the property to assign. See Key-Path Expression in The Swift Programming Language to learn how to use key paths to specify a property of an object.\n\nobject\n\nThe object that contains the property. The subscriber assigns the object\u2019s property every time it receives a new value.\n\nReturn Value\n\nAn AnyCancellable instance. Call cancel() on this instance when you no longer want the publisher to automatically assign the property. Deinitializing this instance will also cancel automatic assignment.\n\nDiscussion\n\nUse the assign(to:on:) subscriber when you want to set a given property each time a publisher produces a value.\n\nIn this example, the assign(to:on:) sets the value of the anInt property on an instance of MyClass:\n\nclass MyClass {\n    var anInt: Int = 0 {\n        didSet {\n            print(\"anInt was set to: \\(anInt)\", terminator: \"; \")\n        }\n    }\n}\n\n\nvar myObject = MyClass()\nlet myRange = (0...2)\ncancellable = myRange.publisher\n    .assign(to: \\.anInt, on: myObject)\n\n\n// Prints: \"anInt was set to: 0; anInt was set to: 1; anInt was set to: 2\"\n\n\nImportant\n\nThe Subscribers.Assign instance created by this operator maintains a strong reference to object, and sets it to nil when the upstream publisher completes (either normally or with an error).\n\nSee Also\nConnecting Simple Subscribers\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "catch(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/catch(_:)",
        "html": "Parameters\nhandler\n\nA closure that accepts the upstream failure as input and returns a publisher to replace the upstream publisher.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\n\nDiscussion\n\nUse catch() to replace an error from an upstream publisher with a new publisher.\n\nIn the example below, the catch() operator handles the SimpleError thrown by the upstream publisher by replacing the error with a Just publisher. This continues the stream by publishing a single value and completing normally.\n\nstruct SimpleError: Error {}\nlet numbers = [5, 4, 3, 2, 1, 0, 9, 8, 7, 6]\ncancellable = numbers.publisher\n    .tryLast(where: {\n        guard $0 != 0 else {throw SimpleError()}\n        return true\n    })\n    .catch({ (error) in\n        Just(-1)\n    })\n    .sink { print(\"\\($0)\") }\n    // Prints: -1\n\n\nBackpressure note: This publisher passes through request and cancel to the upstream. After receiving an error, the publisher sends sends any unfulfilled demand to the new Publisher. SeeAlso: replaceError\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "buffer(size:prefetch:whenFull:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/buffer(size:prefetch:whenfull:)",
        "html": "Parameters\nsize\n\nThe maximum number of elements to store.\n\nprefetch\n\nThe strategy to initially populate the buffer.\n\nwhenFull\n\nThe action to take when the buffer becomes full.\n\nReturn Value\n\nA publisher that buffers elements received from an upstream publisher.\n\nDiscussion\n\nUse buffer(size:prefetch:whenFull:) to collect a specific number of elements from an upstream publisher before republishing them to the downstream subscriber according to the Publishers.BufferingStrategy and Publishers.PrefetchStrategy strategy you specify.\n\nIf the publisher completes before reaching the size threshold, it buffers the elements and publishes them downstream prior to completion."
    },
    {
        "title": "tryContains(where:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/trycontains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse tryContains(where:) to find the first element in an upstream that satisfies the error-throwing closure you provide.\n\nThis operator consumes elements produced from the upstream publisher until the upstream publisher either:\n\nProduces a matching element, after which it emits true and the publisher finishes normally.\n\nEmits false if no matching element is found and the publisher finishes normally.\n\nIf the predicate throws an error, the publisher fails, passing the error to its downstream.\n\nIn the example below, the tryContains(where:) operator tests values to find an element less than 10; when the closure finds an odd number, like 3, the publisher terminates with an IllegalValueError.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers = [3, 2, 10, 5, 0, 9]\nnumbers.publisher\n    .tryContains {\n        if ($0 % 2 != 0) {\n            throw IllegalValueError()\n        }\n       return $0 < 10\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "scan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/scan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nA closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse scan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value.\n\nThe following example logs a running total of all values received from the sequence publisher.\n\nlet range = (0...5)\ncancellable = range.publisher\n    .scan(0) { return $0 + $1 }\n    .sink { print (\"\\($0)\", terminator: \" \") }\n // Prints: \"0 1 3 6 10 15 \".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "timeout(_:scheduler:options:customError:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/timeout(_:scheduler:options:customerror:)",
        "html": "Parameters\ninterval\n\nThe maximum time interval the publisher can go without emitting an element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to deliver events.\n\noptions\n\nScheduler options that customize the delivery of elements.\n\ncustomError\n\nA closure that executes if the publisher times out. The publisher sends the failure returned by this closure to the subscriber as the reason for termination.\n\nReturn Value\n\nA publisher that terminates if the specified interval elapses with no events received from the upstream publisher.\n\nDiscussion\n\nUse timeout(_:scheduler:options:customError:) to terminate a publisher if an element isn\u2019t delivered within a timeout interval you specify.\n\nIn the example below, a PassthroughSubject publishes String elements and is configured to time out if no new elements are received within its TIME_OUT window of 5 seconds. A single value is published after the specified 2-second WAIT_TIME, after which no more elements are available; the publisher then times out and completes normally.\n\nvar WAIT_TIME : Int = 2\nvar TIMEOUT_TIME : Int = 5\n\n\nlet subject = PassthroughSubject<String, Never>()\nlet cancellable = subject\n    .timeout(.seconds(TIMEOUT_TIME), scheduler: DispatchQueue.main, options: nil, customError:nil)\n    .sink(\n          receiveCompletion: { print (\"completion: \\($0) at \\(Date())\") },\n          receiveValue: { print (\"value: \\($0) at \\(Date())\") }\n     )\n\n\nDispatchQueue.main.asyncAfter(deadline: .now() + .seconds(WAIT_TIME),\n                              execute: { subject.send(\"Some data - sent after a delay of \\(WAIT_TIME) seconds\") } )\n\n\n// Prints: value: Some data - sent after a delay of 2 seconds at 2020-03-10 23:47:59 +0000\n//         completion: finished at 2020-03-10 23:48:04 +0000\n\n\nIf customError is nil, the publisher completes normally; if you provide a closure for the customError argument, the upstream publisher is instead terminated upon timeout, and the error is delivered to the downstream.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/subscribe(_:)-6p0z8",
        "html": "Parameters\nsubject\n\nThe subject to attach to this publisher.\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/subscribe(_:)-2v9p8",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this publisher. After attaching, the subscriber can start to receive values.\n\nDiscussion\n\nAlways call this function instead of receive(subscriber:). Adopters of Publisher must implement receive(subscriber:). The implementation of subscribe(_:) provided by Publisher calls through to receive(subscriber:).\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "throttle(for:scheduler:latest:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/throttle(for:scheduler:latest:)",
        "html": "Parameters\ninterval\n\nThe interval at which to find and emit either the most recent or the first element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to publish elements.\n\nlatest\n\nA Boolean value that indicates whether to publish the most recent element. If false, the publisher emits the first element received during the interval.\n\nReturn Value\n\nA publisher that emits either the most-recent or first element received during the specified interval.\n\nDiscussion\n\nUse throttle(for:scheduler:latest:) to selectively republish elements from an upstream publisher during an interval you specify. Other elements received from the upstream in the throttling interval aren\u2019t republished.\n\nIn the example below, a Timer.TimerPublisher produces elements on one-second intervals; the throttle(for:scheduler:latest:) operator delivers the first event, then republishes only the latest event in the following ten second intervals:\n\ncancellable = Timer.publish(every: 3.0, on: .main, in: .default)\n    .autoconnect()\n    .print(\"\\(Date().description)\")\n    .throttle(for: 10.0, scheduler: RunLoop.main, latest: true)\n    .sink(\n        receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print(\"Received Timestamp \\($0).\") }\n     )\n\n\n// Prints:\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:26:57 +0000)\n //    Received Timestamp 2020-03-19 18:26:57 +0000.\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:00 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:03 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:06 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:09 +0000)\n //    Received Timestamp 2020-03-19 18:27:09 +0000.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "replaceNil(with:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/replacenil(with:)",
        "html": "Parameters\noutput\n\nThe element to use when replacing nil.\n\nReturn Value\n\nA publisher that replaces nil elements from the upstream publisher with the provided element.\n\nDiscussion\n\nThe replaceNil(with:) operator enables replacement of nil values in a stream with a substitute value. In the example below, a collection publisher contains a nil value. The replaceNil(with:) operator replaces this with 0.0.\n\nlet numbers: [Double?] = [1.0, 2.0, nil, 3.0]\nnumbers.publisher\n    .replaceNil(with: 0.0)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"Optional(1.0) Optional(2.0) Optional(0.0) Optional(3.0)\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "sink(receiveCompletion:receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/sink(receivecompletion:receivevalue:)",
        "html": "Parameters\nreceiveComplete\n\nThe closure to execute on completion.\n\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveCompletion:receiveValue:) to observe values received by the publisher and process them using a closure you specify.\n\nIn this example, a Range publisher publishes integers to a sink(receiveCompletion:receiveValue:) operator\u2019s receiveValue closure that prints them to the console. Upon completion the sink(receiveCompletion:receiveValue:) operator\u2019s receiveCompletion closure indicates the successful termination of the stream.\n\nlet myRange = (0...3)\ncancellable = myRange.publisher\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0)\") })\n\n\n// Prints:\n//  value: 0\n//  value: 1\n//  value: 2\n//  value: 3\n//  completion: finished\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "setFailureType(to:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/setfailuretype(to:)",
        "html": "Parameters\nfailureType\n\nThe Failure type presented by this publisher.\n\nReturn Value\n\nA publisher that appears to send the specified failure type.\n\nDiscussion\n\nUse setFailureType(to:) when you need set the error type of a publisher that cannot fail.\n\nConversely, if the upstream can fail, you would use mapError(_:) to provide instructions on converting the error types to needed by the downstream publisher\u2019s inputs.\n\nThe following example has two publishers with mismatched error types: pub1\u2019s error type is Never, and pub2\u2019s error type is Error. Because of the mismatch, the combineLatest(_:) operator requires that pub1 use setFailureType(to:) to make it appear that pub1 can produce the Error type, like pub2 can.\n\nlet pub1 = [0, 1, 2, 3, 4, 5].publisher\nlet pub2 = CurrentValueSubject<Int, Error>(0)\nlet cancellable = pub1\n    .setFailureType(to: Error.self)\n    .combineLatest(pub2)\n    .sink(\n        receiveCompletion: { print (\"completed: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\")}\n     )\n\n\n// Prints: \"value: (5, 0)\".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure."
    },
    {
        "title": "switchToLatest()",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/switchtolatest()",
        "html": "Discussion\n\nThis operator works with an upstream publisher of publishers, flattening the stream of elements to appear as if they were coming from a single stream of elements. It switches the inner publisher as new ones arrive but keeps the outer publisher constant for downstream subscribers.\n\nWhen this operator receives a new publisher from the upstream publisher, it cancels its previous subscription. Use this feature to prevent earlier publishers from performing unnecessary work, such as creating network request publishers from frequently updating user interface publishers.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify."
    },
    {
        "title": "tryAllSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/tryallsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete. The closure may throw an error, in which case the publisher cancels the upstream publisher and fails with the thrown error.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the tryAllSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria in an error-throwing predicate you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes. If the predicate throws an error, the publisher fails and passes the error to its downstream subscriber.\n\nIn the example below, an error-throwing predicate tests if each of an integer array publisher\u2019s elements fall into the targetRange; the predicate throws an error if an element is zero and terminates the stream.\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 10, 5, 0]\n\n\nnumbers.publisher\n    .tryAllSatisfy { anInt in\n        guard anInt != 0 else { throw RangeError() }\n        return targetRange.contains(anInt)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(RangeError())\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate."
    },
    {
        "title": "sink(receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/sink(receivevalue:)",
        "html": "Parameters\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveValue:) to observe values received by the publisher and print them to the console. This operator can only be used when the stream doesn\u2019t fail, that is, when the publisher\u2019s Failure type is Never.\n\nIn this example, a Range publisher publishes integers to a sink(receiveValue:) operator\u2019s receiveValue closure that prints them to the console:\n\nlet integers = (0...3)\nintegers.publisher\n    .sink { print(\"Received \\($0)\") }\n\n\n// Prints:\n//  Received 0\n//  Received 1\n//  Received 2\n//  Received 3\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior."
    },
    {
        "title": "share()",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/share()",
        "html": "Return Value\n\nA class instance that shares elements received from its upstream to multiple subscribers.\n\nDiscussion\n\nThe publisher returned by this operator supports multiple subscribers, all of whom receive unchanged elements and completion states from the upstream publisher.\n\nTip\n\nPublishers.Share is effectively a combination of the Publishers.Multicast and PassthroughSubject publishers, with an implicit autoconnect().\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a share() operator to share the same random number to each of two subscribers. This example uses a delay(for:tolerance:scheduler:options:) operator only to prevent the first subscriber from exhausting the sequence publisher immediately; an asynchronous publisher wouldn\u2019t need this.\n\nlet pub = (1...3).publisher\n    .delay(for: 1, scheduler: DispatchQueue.main)\n    .map( { _ in return Int.random(in: 0...100) } )\n    .print(\"Random\")\n    .share()\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\n\n\n// Prints:\n// Random: receive value: (20)\n// Stream 1 received: 20\n// Stream 2 received: 20\n// Random: receive value: (85)\n// Stream 1 received: 85\n// Stream 2 received: 85\n// Random: receive value: (98)\n// Stream 1 received: 98\n// Stream 2 received: 98\n\n\nWithout the share() operator, stream 1 receives three random values, followed by stream 2 receiving three different random values.\n\nAlso note that Publishers.Share is a class rather than a structure like most other publishers. This means you can use this operator to create a publisher instance that uses reference semantics.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers."
    },
    {
        "title": "retry(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/retry(_:)",
        "html": "Parameters\nretries\n\nThe number of times to attempt to recreate the subscription.\n\nReturn Value\n\nA publisher that attempts to recreate its subscription to a failed upstream publisher.\n\nDiscussion\n\nUse retry(_:) to try a connecting to an upstream publisher after a failed connection attempt.\n\nIn the example below, a URLSession.DataTaskPublisher attempts to connect to a remote URL. If the connection attempt succeeds, it publishes the remote service\u2019s HTML to the downstream publisher and completes normally. Otherwise, the retry operator attempts to reestablish the connection. If after three attempts the publisher still can\u2019t connect to the remote URL, the catch(_:) operator replaces the error with a new publisher that publishes a \u201cconnection timed out\u201d HTML page. After the downstream subscriber receives the timed out message, the stream completes normally.\n\nstruct WebSiteData: Codable {\n    var rawHTML: String\n}\n\n\nlet myURL = URL(string: \"https://www.example.com\")\n\n\ncancellable = URLSession.shared.dataTaskPublisher(for: myURL!)\n    .retry(3)\n    .map({ (page) -> WebSiteData in\n        return WebSiteData(rawHTML: String(decoding: page.data, as: UTF8.self))\n    })\n    .catch { error in\n        return Just(WebSiteData(rawHTML: \"<HTML>Unable to load page - timed out.</HTML>\"))\n}\n.sink(receiveCompletion: { print (\"completion: \\($0)\") },\n      receiveValue: { print (\"value: \\($0)\") }\n )\n\n\n// Prints: The HTML content from the remote URL upon a successful connection,\n//         or returns \"<HTML>Unable to load page - timed out.</HTML>\" if the number of retries exceeds the specified value.\n\n\nAfter exceeding the specified number of retries, the publisher passes the failure to the downstream receiver.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error."
    },
    {
        "title": "subscribe(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/subscribe(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler used to send messages to upstream publishers.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher which performs upstream operations on the specified scheduler.\n\nDiscussion\n\nIn contrast with receive(on:options:), which affects downstream messages, subscribe(on:options:) changes the execution context of upstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes ioPerformingPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes uiUpdatingSubscriber to receive elements and completion on RunLoop.main.\n\nlet ioPerformingPublisher == // Some publisher.\nlet uiUpdatingSubscriber == // Some subscriber that updates the UI.\n\n\nioPerformingPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(uiUpdatingSubscriber)\n\n\nUsing subscribe(on:options:) also causes the upstream publisher to perform cancel() using the specfied scheduler.\n\nSee Also\nSpecifying Schedulers\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher."
    },
    {
        "title": "removeDuplicates()",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/removeduplicates()",
        "html": "Return Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates() to remove repeating elements from an upstream publisher. This operator has a two-element memory: the operator uses the current and previously published elements as the basis for its comparison.\n\nIn the example below, removeDuplicates() triggers on the doubled, tripled, and quadrupled occurrences of 1, 3, and 4 respectively. Because the two-element memory considers only the current element and the previous element, the operator prints the final 0 in the example data since its immediate predecessor is 4.\n\nlet numbers = [0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 0]\ncancellable = numbers.publisher\n    .removeDuplicates()\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 0\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "print(_:to:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/print(_:to:)",
        "html": "Parameters\nprefix\n\nA string \u2014- which defaults to empty -\u2014 with which to prefix all log messages.\n\nstream\n\nA stream for text output that receives messages, and which directs output to the console by default. A custom stream can be used to log messages to other destinations.\n\nReturn Value\n\nA publisher that prints log messages for all publishing events.\n\nDiscussion\n\nUse print(_:to:) to log messages the console.\n\nIn the example below, log messages are printed on the console:\n\nlet integers = (1...2)\ncancellable = integers.publisher\n   .print(\"Logged a message\", to: nil)\n   .sink { _ in }\n\n\n// Prints:\n//  Logged a message: receive subscription: (1..<2)\n//  Logged a message: request unlimited\n//  Logged a message: receive value: (1)\n//  Logged a message: receive finished\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur."
    },
    {
        "title": "prefix(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/prefix(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA second publisher.\n\nReturn Value\n\nA publisher that republishes elements until the second publisher publishes an element.\n\nDiscussion\n\nAfter the second publisher publishes an element, the publisher returned by this method finishes.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/flatmap(maxpublishers:_:)-75f96",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never."
    },
    {
        "title": "min()",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/min()",
        "html": "Return Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to find the minimum value in a stream of elements from an upstream publisher.\n\nIn the example below, the min(by:) operator emits a value when the publisher finishes, that value is the minimum of the values received from upstream, which is -1.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .min()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"-1\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "map(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/map(_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of another property on Output.\n\nReturn Value\n\nA publisher that publishes the values of two key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:) operator uses the Swift key path syntax to access the die1 and die2 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these two values (as an (Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1) (total: \\(values.0 + values.1))\")\n    }\n// Prints \"Rolled: 6, 4 (total: 10)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/compactmap(_:)",
        "html": "Parameters\ntransform\n\nA closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of the calling the supplied closure.\n\nDiscussion\n\nCombine\u2019s compactMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/2950916-compactmap in the Swift standard library: the compactMap(_:) operator in Combine removes nil elements in a publisher\u2019s stream and republishes non-nil elements to the downstream subscriber.\n\nThe example below uses a range of numbers as the source for a collection based publisher. The compactMap(_:) operator consumes each element from the numbers publisher attempting to access the dictionary using the element as the key. If the example\u2019s dictionary returns a nil, due to a non-existent key, compactMap(_:) filters out the nil (missing) elements.\n\nlet numbers = (0...5)\nlet romanNumeralDict: [Int : String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ncancellable = numbers.publisher\n    .compactMap { romanNumeralDict[$0] }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"I II III V\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "prepend(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/prepend(_:)",
        "html": "Parameters\nelements\n\nThe elements to publish before this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that prefixes the specified elements prior to this publisher\u2019s elements.\n\nDiscussion\n\nUse prepend(_:) when you need to prepend specific elements before the output of a publisher.\n\nIn the example below, the prepend(_:) operator publishes the provided elements before republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .prepend(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 255 0 1 2 3 4 5 6 7 8 9 10\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "retry(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/retry(_:)",
        "html": "Parameters\nretries\n\nThe number of times to attempt to recreate the subscription.\n\nReturn Value\n\nA publisher that attempts to recreate its subscription to a failed upstream publisher.\n\nDiscussion\n\nUse retry(_:) to try a connecting to an upstream publisher after a failed connection attempt.\n\nIn the example below, a URLSession.DataTaskPublisher attempts to connect to a remote URL. If the connection attempt succeeds, it publishes the remote service\u2019s HTML to the downstream publisher and completes normally. Otherwise, the retry operator attempts to reestablish the connection. If after three attempts the publisher still can\u2019t connect to the remote URL, the catch(_:) operator replaces the error with a new publisher that publishes a \u201cconnection timed out\u201d HTML page. After the downstream subscriber receives the timed out message, the stream completes normally.\n\nstruct WebSiteData: Codable {\n    var rawHTML: String\n}\n\n\nlet myURL = URL(string: \"https://www.example.com\")\n\n\ncancellable = URLSession.shared.dataTaskPublisher(for: myURL!)\n    .retry(3)\n    .map({ (page) -> WebSiteData in\n        return WebSiteData(rawHTML: String(decoding: page.data, as: UTF8.self))\n    })\n    .catch { error in\n        return Just(WebSiteData(rawHTML: \"<HTML>Unable to load page - timed out.</HTML>\"))\n}\n.sink(receiveCompletion: { print (\"completion: \\($0)\") },\n      receiveValue: { print (\"value: \\($0)\") }\n )\n\n\n// Prints: The HTML content from the remote URL upon a successful connection,\n//         or returns \"<HTML>Unable to load page - timed out.</HTML>\" if the number of retries exceeds the specified value.\n\n\nAfter exceeding the specified number of retries, the publisher passes the failure to the downstream receiver.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error."
    },
    {
        "title": "breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/breakpoint(receivesubscription:receiveoutput:receivecompletion:)",
        "html": "Parameters\nreceiveSubscription\n\nA closure that executes when the publisher receives a subscription. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveOutput\n\nA closure that executes when the publisher receives a value. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveCompletion\n\nA closure that executes when the publisher receives a completion. Return true from this closure to raise SIGTRAP, or false to continue.\n\nReturn Value\n\nA publisher that raises a debugger signal when one of the provided closures returns true.\n\nDiscussion\n\nUse breakpoint(receiveSubscription:receiveOutput:receiveCompletion:) to examine one or more stages of the subscribe/publish/completion process and stop in the debugger, based on conditions you specify. When any of the provided closures returns true, this operator raises the SIGTRAP signal to stop the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn the example below, a PassthroughSubject publishes strings to a breakpoint republisher. When the breakpoint receives the string \u201cDEBUGGER\u201d, it returns true, which stops the app in the debugger.\n\nlet publisher = PassthroughSubject<String?, Never>()\ncancellable = publisher\n    .breakpoint(\n        receiveOutput: { value in return value == \"DEBUGGER\" }\n    )\n    .sink { print(\"\\(String(describing: $0))\" , terminator: \" \") }\n\n\npublisher.send(\"DEBUGGER\")\n\n\n// Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n// Depending on your specific environment, the console messages may\n// also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "buffer(size:prefetch:whenFull:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/buffer(size:prefetch:whenfull:)",
        "html": "Parameters\nsize\n\nThe maximum number of elements to store.\n\nprefetch\n\nThe strategy to initially populate the buffer.\n\nwhenFull\n\nThe action to take when the buffer becomes full.\n\nReturn Value\n\nA publisher that buffers elements received from an upstream publisher.\n\nDiscussion\n\nUse buffer(size:prefetch:whenFull:) to collect a specific number of elements from an upstream publisher before republishing them to the downstream subscriber according to the Publishers.BufferingStrategy and Publishers.PrefetchStrategy strategy you specify.\n\nIf the publisher completes before reaching the size threshold, it buffers the elements and publishes them downstream prior to completion."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/combinelatest(_:_:_:)-4u36w",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest<P, Q>(_:,_:) to combine the current and two additional publishers and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer. All upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nIn the example below, combineLatest() receives the most-recent values published by three publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3) { firstValue, secondValue, thirdValue in\n        return firstValue * secondValue * thirdValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(10)\n\n\npub.send(9)\npub3.send(4)\npub2.send(12)\n\n\n// Prints:\n//  Result: 40.     // pub = 2, pub2 = 2, pub3 = 10\n//  Result: 180.    // pub = 9, pub2 = 2, pub3 = 10\n//  Result: 72.     // pub = 9, pub2 = 2, pub3 = 4\n//  Result: 432.    // pub = 9, pub2 = 12, pub3 = 4\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/combinelatest(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:_:) when you need to combine the current and 3 additional publishers and transform the values using a closure in which you specify the published elements, to publish a new element.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, as combineLatest(_:_:_:_:) receives the most-recent values published by four publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4) { firstValue, secondValue, thirdValue, fourthValue in\n        return firstValue * secondValue * thirdValue * fourthValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: 36.     // pub = 2,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 54.     // pub = 3,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 324.    // pub = 3,  pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 1404.   // pub = 13, pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 2964.   // pub = 13, pub2 = 12,  pub3 = 19, pub4 = 1\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/combinelatest(_:_:_:)-9b93j",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, combineLatest(_:_:_:) receives input from any of the publishers, combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n//\n// Prints:\n//  Result: (2, 2, 9, 1).\n//  Result: (3, 2, 9, 1).\n//  Result: (3, 12, 9, 1).\n//  Result: (13, 12, 9, 1).\n//  Result: (13, 12, 19, 1).\n\n\nIf any individual publisher of the combined set terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/trydropwhile/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-trydropwhile-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nConnecting Simple Subscribers\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "debounce(for:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/debounce(for:scheduler:options:)",
        "html": "Parameters\ndueTime\n\nThe time the publisher should wait before publishing an element.\n\nscheduler\n\nThe scheduler on which this publisher delivers elements\n\noptions\n\nScheduler options that customize this publisher\u2019s delivery of elements.\n\nReturn Value\n\nA publisher that publishes events only after a specified time elapses.\n\nDiscussion\n\nUse the debounce(for:scheduler:options:) operator to control the number of values and time between delivery of values from the upstream publisher. This operator is useful to process bursty or high-volume event streams where you need to reduce the number of values delivered to the downstream to a rate you specify.\n\nIn this example, a PassthroughSubject publishes elements on a schedule defined by the bounces array. The array is composed of tuples representing a value sent by the PassthroughSubject, and a TimeInterval ranging from one-quarter second up to 2 seconds that drives a delivery timer. As the queue builds, elements arriving faster than one-half second debounceInterval are discarded, while elements arriving at a rate slower than debounceInterval are passed through to the sink(receiveValue:) operator.\n\nlet bounces:[(Int,TimeInterval)] = [\n    (0, 0),\n    (1, 0.25),  // 0.25s interval since last index\n    (2, 1),     // 0.75s interval since last index\n    (3, 1.25),  // 0.25s interval since last index\n    (4, 1.5),   // 0.25s interval since last index\n    (5, 2)      // 0.5s interval since last index\n]\n\n\nlet subject = PassthroughSubject<Int, Never>()\ncancellable = subject\n    .debounce(for: .seconds(0.5), scheduler: RunLoop.main)\n    .sink { index in\n        print (\"Received index \\(index)\")\n    }\n\n\nfor bounce in bounces {\n    DispatchQueue.main.asyncAfter(deadline: .now() + bounce.1) {\n        subject.send(bounce.0)\n    }\n}\n\n\n// Prints:\n//  Received index 1\n//  Received index 4\n//  Received index 5\n\n\n//  Here is the event flow shown from the perspective of time, showing value delivery through the `debounce()` operator:\n\n\n//  Time 0: Send index 0.\n//  Time 0.25: Send index 1. Index 0 was waiting and is discarded.\n//  Time 0.75: Debounce period ends, publish index 1.\n//  Time 1: Send index 2.\n//  Time 1.25: Send index 3. Index 2 was waiting and is discarded.\n//  Time 1.5: Send index 4. Index 3 was waiting and is discarded.\n//  Time 2: Debounce period ends, publish index 4. Also, send index 5.\n//  Time 2.5: Debounce period ends, publish index 5.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "drop(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/drop(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA publisher to monitor for its first emitted element.\n\nReturn Value\n\nA publisher that drops elements from the upstream publisher until the other publisher produces a value.\n\nDiscussion\n\nUse drop(untilOutputFrom:) to ignore elements from the upstream publisher until another, second, publisher delivers its first element. This publisher requests a single value from the second publisher, and it ignores (drops) all elements from the upstream publisher until the second publisher produces a value. After the second publisher produces an element, drop(untilOutputFrom:) cancels its subscription to the second publisher, and allows events from the upstream publisher to pass through.\n\nAfter this publisher receives a subscription from the upstream publisher, it passes through backpressure requests from downstream to the upstream publisher. If the upstream publisher acts on those requests before the other publisher produces an item, this publisher drops the elements it receives from the upstream publisher.\n\nIn the example below, the pub1 publisher defers publishing its elements until the pub2 publisher delivers its first element:\n\nlet upstream = PassthroughSubject<Int,Never>()\nlet second = PassthroughSubject<String,Never>()\ncancellable = upstream\n    .drop(untilOutputFrom: second)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\nupstream.send(1)\nupstream.send(2)\nsecond.send(\"A\")\nupstream.send(3)\nupstream.send(4)\n// Prints \"3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "contains(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/contains(_:)",
        "html": "Parameters\noutput\n\nAn element to match against.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(_:) to find the first element in an upstream that\u2019s equal to the supplied argument. The contains publisher consumes all received elements until the upstream publisher produces a matching element. Upon finding the first match, it emits true and finishes normally. If the upstream finishes normally without producing a matching element, this publisher emits false and finishes.\n\nIn the example below, the contains(_:) operator emits true the first time it receives the value 5 from the numbers.publisher, and then finishes normally.\n\nlet numbers = [-1, 5, 10, 5]\nnumbers.publisher\n    .contains(5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "count()",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/count()",
        "html": "Return Value\n\nA publisher that consumes all elements until the upstream publisher finishes, then emits a single value with the total number of elements received.\n\nDiscussion\n\nUse count() to determine the number of elements received from the upstream publisher before it completes:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .count()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"11\"\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "drop(while:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/drop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an upstream publisher until the element received meets a condition you specify.\n\nIn the example below, the operator omits all elements in the stream until the first element arrives that\u2019s a positive integer, after which the operator publishes all remaining elements:\n\nlet numbers = [-62, -1, 0, 10, 0, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .drop { $0 <= 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10 0, 22 41 -1 5\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "dropFirst(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/dropfirst(_:)",
        "html": "Parameters\ncount\n\nThe number of elements to omit. The default is 1.\n\nReturn Value\n\nA publisher that doesn\u2019t republish the first count elements.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the upstream publisher, and republish the remaining elements.\n\nThe example below drops the first five elements from the stream:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncancellable = numbers.publisher\n    .dropFirst(5)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"6 7 8 9 10 \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "eraseToAnyPublisher()",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/erasetoanypublisher()",
        "html": "Return Value\n\nAn AnyPublisher wrapping this publisher.\n\nDiscussion\n\nUse eraseToAnyPublisher() to expose an instance of AnyPublisher to the downstream subscriber, rather than this publisher\u2019s actual type. This form of type erasure preserves abstraction across API boundaries, such as different modules. When you expose your publishers as the AnyPublisher type, you can change the underlying implementation over time without affecting existing clients.\n\nThe following example shows two types that each have a publisher property. TypeWithSubject exposes this property as its actual type, PassthroughSubject, while TypeWithErasedSubject uses eraseToAnyPublisher() to expose it as an AnyPublisher. As seen in the output, a caller from another module can access TypeWithSubject.publisher as its native type. This means you can\u2019t change your publisher to a different type without breaking the caller. By comparison, TypeWithErasedSubject.publisher appears to callers as an AnyPublisher, so you can change the underlying publisher type at will.\n\npublic class TypeWithSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n}\npublic class TypeWithErasedSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n        .eraseToAnyPublisher()\n}\n\n\n// In another module:\nlet nonErased = TypeWithSubject()\nif let subject = nonErased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast nonErased.publisher.\")\n}\nlet erased = TypeWithErasedSubject()\nif let subject = erased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast erased.publisher.\")\n}\n\n\n// Prints \"Successfully cast nonErased.publisher.\"\n"
    },
    {
        "title": "init(upstream:predicate:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/trydropwhile/init(upstream:predicate:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\npredicate\n\nThe error-throwing closure that indicates whether to drop the element."
    },
    {
        "title": "zip(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/zip(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from four upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:_:) to return a new publisher that combines the elements from three other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, the PassthroughSubject publishers, numbersPub, fractionsPub, lettersPub, and emojiPub emit values. The zip(_:_:_:_:) operator receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times and prints out the value in fractionsPub.\n\nlet numbersPub = PassthroughSubject<Int, Never>()      // first publisher\nlet lettersPub = PassthroughSubject<String, Never>()   // second\nlet emojiPub = PassthroughSubject<String, Never>()     // third\nlet fractionsPub  = PassthroughSubject<Double, Never>()// fourth\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub) { anInt, aLetter, anEmoji, aFraction  in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt)) \\(aFraction)\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:          emojiPub:          zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:\"\ud83d\ude00\"      zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"      emojiPub:          zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"      emojiPub:          zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n// Prints:\n//1 \ud83d\ude00 A 0.1\n//2 \ud83e\udd70\ud83e\udd70 BB 0.8\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples."
    },
    {
        "title": "Publishers.TryDropWhile.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/trydropwhile/failure",
        "html": "Discussion\n\nThis publisher produces the Swift Error type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/zip(_:_:_:)-3c16i",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from three upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from two other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject that emit values; zip(_:_:_:) receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(letters, emoji) { anInt, aLetter, anEmoji in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt))\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:        emojiPub:            zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"    emojiPub:\"\ud83d\ude00\"        zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:        emojiPub:\"\ud83d\ude00\", \"\ud83e\udd70\"  zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n\n\n// Prints:\n// \ud83d\ude00 A\n// \ud83e\udd70\ud83e\udd70 BB\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "predicate",
        "url": "https://developer.apple.com/documentation/combine/publishers/trydropwhile/predicate",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "receive(subscriber:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/receive(subscriber:)",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this Publisher, after which it can receive values.\n\nDiscussion\n\nImplementations of Publisher must implement this method.\n\nThe provided implementation of subscribe(_:)calls this method.\n\nSee Also\nWorking with Subscribers\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "zip(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/zip(_:)",
        "html": "Parameters\nother\n\nAnother publisher.\n\nReturn Value\n\nA publisher that emits pairs of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:) to combine the latest elements from two publishers and emit a tuple to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together as a tuple to the subscriber.\n\nMuch like a zipper or zip fastener on a piece of clothing pulls together rows of teeth to link the two sides, zip(_:) combines streams from two different publishers by linking pairs of elements from each side.\n\nIn this example, numbers and letters are PassthroughSubjects that emit values; once zip(_:) receives one value from each, it publishes the pair as a tuple to the downstream subscriber. It then waits for the next pair of values.\n\n let numbersPub = PassthroughSubject<Int, Never>()\n let lettersPub = PassthroughSubject<String, Never>()\n\n\n cancellable = numbersPub\n     .zip(lettersPub)\n     .sink { print(\"\\($0)\") }\n numbersPub.send(1)    // numbersPub: 1      lettersPub:        zip output: <none>\n numbersPub.send(2)    // numbersPub: 1,2    lettersPub:        zip output: <none>\n letters.send(\"A\")     // numbers: 1,2       letters:\"A\"        zip output: <none>\n numbers.send(3)       // numbers: 1,2,3     letters:           zip output: (1,\"A\")\n letters.send(\"B\")     // numbers: 1,2,3     letters: \"B\"       zip output: (2,\"B\")\n\n\n // Prints:\n //  (1, \"A\")\n //  (2, \"B\")\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/zip(_:_:)-2rtcx",
        "html": "Parameters\nother\n\nAnother publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from two upstream publishers.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two publishers using a transformation you specify to publish a new value to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, PassthroughSubject instances numbersPub and lettersPub emit values; zip(_:_:) receives the oldest value from each publisher, uses the Int from numbersPub and publishes a string that repeats the String from lettersPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\ncancellable = numbersPub\n    .zip(lettersPub) { anInt, aLetter in\n        String(repeating: aLetter, count: anInt)\n    }\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:       zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:       zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:       zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"   zip output: \"A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"   zip output: \"BB\"\n// Prints:\n//  A\n//  BB\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "tryScan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/tryscan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse tryScan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value. If your accumulator closure throws an error, the publisher terminates with the error.\n\nIn the example below, tryScan(_:_:) calls a division function on elements of a collection publisher. The Publishers.TryScan publisher publishes each result until the function encounters a DivisionByZeroError, which terminates the publisher.\n\nstruct DivisionByZeroError: Error {}\n\n\n/// A function that throws a DivisionByZeroError if `current` provided by the TryScan publisher is zero.\nfunc myThrowingFunction(_ lastValue: Int, _ currentValue: Int) throws -> Int {\n    guard currentValue != 0 else { throw DivisionByZeroError() }\n    return (lastValue + currentValue) / currentValue\n }\n\n\nlet numbers = [1,2,3,4,5,0,6,7,8,9]\ncancellable = numbers.publisher\n    .tryScan(10) { try myThrowingFunction($0, $1) }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"11 6 3 1 1 -1 failure(DivisionByZeroError())\".\n\n\nIf the closure throws an error, the publisher fails with the error.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/zip(_:_:)-1phmb",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two additional publishers to publish a tuple to the downstream. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject; zip(_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:          emojiPub:        zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"      emojiPub: \"\ud83d\ude00\"   zip output: (1, \"A\", \"\ud83d\ude00\")\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:          emojiPub:        zip output: (2, \"B\", \"\ud83e\udd70\")\n\n\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\")\n//  (2, \"B\", \"\ud83e\udd70\")\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "tryMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/trymap(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element. If the closure throws an error, the publisher fails with the thrown error.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s tryMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use tryMap(_:) to transform from one kind of element to another, and to terminate publishing when the map\u2019s closure throws an error.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A tryMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the tryMap(_:)\u2019s closure fails to look up a Roman numeral, it throws an error. The tryMap(_:) operator catches this error and terminates publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from:Int) throws -> String {\n    let romanNumeralDict: [Int : String] =\n        [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\n    guard let numeral = romanNumeralDict[from] else {\n        throw ParseError()\n    }\n    return numeral\n}\nlet numbers = [5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryMap { try romanNumeral(from: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"V IV III II I completion: failure(ParseError())\"\n\n\nIf your closure doesn\u2019t throw, use map(_:) instead.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "tryMax(by:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/trymax(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMax(by:) to determine the maximum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMax(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\ncancellable = numbers.publisher\n    .tryMax { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first > second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: completion: failure(IllegalValueError())\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "tryReduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/tryreduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nAn error-throwing closure that takes the previously-accumulated value and the next element from the upstream publisher to produce a new value.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes.\n\nDiscussion\n\nUse tryReduce(_:_:) to collect a stream of elements and produce an accumulated value based on an error-throwing closure you provide. If the closure throws an error, the publisher fails and passes the error to its subscriber.\n\nIn the example below, the publisher\u2019s 0 element causes the myDivide(_:_:) function to throw an error and publish the doc://com.apple.documentation/documentation/Swift/Double/1641611-nan result:\n\nstruct DivisionByZeroError: Error {}\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n    guard divisor != 0 else { throw DivisionByZeroError() }\n    return dividend / divisor\n}\n\n\nvar numbers: [Double] = [5, 4, 3, 2, 1, 0]\nnumbers.publisher\n    .tryReduce(numbers.first!, { accum, next in try myDivide(accum, next) })\n    .catch({ _ in Just(Double.nan) })\n    .sink { print(\"\\($0)\") }\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "tryMin(by:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/trymin(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMin(by:) to determine the minimum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMin(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\nnumbers.publisher\n    .tryMin { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first < second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes."
    },
    {
        "title": "merge(with:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/merge(with:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\n\n\n//Prints: \"1 40 90 -1 33 44 2 50 100 -2 33 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "max(by:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/max(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max(by:) to determine the maximum value of elements received from the upstream publisher based on an ordering closure you specify.\n\nIn the example below, an array publishes enumeration elements representing playing card ranks. The max(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the maximum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .jack]\ncancellable = cards.publisher\n    .max {\n        return  $0.rawValue > $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"queen\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "merge(with:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/merge(with:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\n\n\n// Prints: \"1 40 90 -1 2 50 100 -2 \"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "init(upstream:createSubject:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/multicast/init(upstream:createsubject:)",
        "html": "Parameters\ncreateSubject\n\nA closure that returns a Subject each time a subscriber attaches to the multicast publisher."
    },
    {
        "title": "merge(with:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/merge(with:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:). To combine elements from multiple upstream publishers, use zip(_:_:).\n\nIn this example, as merge(with:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubA.send(2)\npubB.send(50)\npubC.send(100)\n\n\n// Prints: \"1 40 90 2 50 100\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "map(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/map(_:_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of a second property on Output.\n\nkeyPath2\n\nThe key path of a third property on Output.\n\nReturn Value\n\nA publisher that publishes the values of three key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:_:) operator uses the Swift key path syntax to access the die1, die2, and die3 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these three values (as an (Int, Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n    let die3: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6),\n                            die3: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2, \\.die3)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1), \\(values.2) (total \\(values.0 + values.1 + values.2))\")\n    }\n// Prints \"Rolled: 5, 4, 2 (total 11)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple."
    },
    {
        "title": "max()",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/max()",
        "html": "Return Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max() to determine the maximum value in the stream of elements from an upstream publisher.\n\nIn the example below, the max() operator emits a value when the publisher finishes, that value is the maximum of the values received from upstream, which is 10.\n\nlet numbers = [0, 10, 5]\ncancellable = numbers.publisher\n    .max()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "measureInterval(using:options:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/measureinterval(using:options:)",
        "html": "Parameters\nscheduler\n\nA scheduler to use for tracking the timing of events.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher that emits elements representing the time interval between the elements it receives.\n\nDiscussion\n\nUse measureInterval(using:options:) to measure the time between events delivered from an upstream publisher.\n\nIn the example below, a 1-second Timer is used as the data source for an event publisher; the measureInterval(using:options:) operator reports the elapsed time between the reception of events on the main run loop:\n\ncancellable = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .measureInterval(using: RunLoop.main)\n    .sink { print(\"\\($0)\", terminator: \"\\n\") }\n\n\n// Prints:\n//      Stride(magnitude: 1.0013610124588013)\n//      Stride(magnitude: 0.9992760419845581)\n\n\nThe output type of the returned publisher is the time interval of the provided scheduler.\n\nThis operator uses the provided scheduler\u2019s now property to measure intervals between events.\n\nSee Also\nControlling Timing\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "map(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/map(_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of another property on Output.\n\nReturn Value\n\nA publisher that publishes the values of two key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:) operator uses the Swift key path syntax to access the die1 and die2 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these two values (as an (Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1) (total: \\(values.0 + values.1))\")\n    }\n// Prints \"Rolled: 6, 4 (total: 10)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "combineLatest(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/combinelatest(_:)",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest(_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To pair elements from multiple publishers, use zip(_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn this example, PassthroughSubject pub1 and also pub2 emit values; as combineLatest(_:) receives input from either upstream publisher, it combines the latest value from each publisher into a tuple and publishes it.\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(3)\npub1.send(45)\npub2.send(22)\n\n\n// Prints:\n//    Result: (2, 2).    // pub1 latest = 2, pub2 latest = 2\n//    Result: (3, 2).    // pub1 latest = 3, pub2 latest = 2\n//    Result: (45, 2).   // pub1 latest = 45, pub2 latest = 2\n//    Result: (45, 22).  // pub1 latest = 45, pub2 latest = 22\n\n\nWhen all upstream publishers finish, this publisher finishes. If an upstream publisher never publishes a value, this publisher never finishes.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "collect(_:options:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/collect(_:options:)",
        "html": "Parameters\nstrategy\n\nThe timing group strategy used by the operator to collect and publish elements.\n\noptions\n\nScheduler options to use for the strategy.\n\nReturn Value\n\nA publisher that collects elements by a given strategy, and emits a single array of the collection.\n\nDiscussion\n\nUse collect(_:options:) to emit arrays of elements on a schedule specified by a Scheduler and Stride that you provide. At the end of each scheduled interval, the publisher sends an array that contains the items it collected. If the upstream publisher finishes before filling the buffer, the publisher sends an array that contains items it received. This may be fewer than the number of elements specified in the requested Stride.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThe example above collects timestamps generated on a one-second Timer in groups (Stride) of five.\n\nlet sub = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .collect(.byTime(RunLoop.main, .seconds(5)))\n    .sink { print(\"\\($0)\", terminator: \"\\n\\n\") }\n\n\n// Prints: \"[2020-01-24 00:54:46 +0000, 2020-01-24 00:54:47 +0000,\n//          2020-01-24 00:54:48 +0000, 2020-01-24 00:54:49 +0000,\n//          2020-01-24 00:54:50 +0000]\"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "collect()",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/collect()",
        "html": "Return Value\n\nA publisher that collects all received items and returns them as an array upon completion.\n\nDiscussion\n\nUse collect() to gather elements into an array that the operator emits after the upstream publisher finishes.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThis publisher requests an unlimited number of elements from the upstream publisher and uses an unbounded amount of memory to store the received values. The publisher may exert memory pressure on the system for very large sets of elements.\n\nThe collect() operator only sends the collected array to its downstream receiver after a request whose demand is greater than 0 items. Otherwise, collect() waits until it receives a non-zero request.\n\nIn the example below, an Integer range is a publisher that emits an array of integers:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\nSee Also\nReducing Elements\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "collect(_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/collect(_:)",
        "html": "Parameters\ncount\n\nThe maximum number of received elements to buffer before publishing.\n\nReturn Value\n\nA publisher that collects up to the specified number of elements, and then publishes them as an array.\n\nDiscussion\n\nUse collect(_:) to emit arrays of at most count elements from an upstream publisher. If the upstream publisher finishes before collecting the specified number of elements, the publisher sends an array of only the items it received. This may be fewer than count elements.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nIn the example below, the collect(_:) operator emits one partial and two full arrays based on the requested collection size of 5:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect(5)\n    .sink { print(\"\\($0), terminator: \" \"\") }\n\n\n// Prints \"[0, 1, 2, 3, 4] [5, 6, 7, 8, 9] [10] \"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "append(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/append(_:)",
        "html": "Parameters\nelements\n\nElements to publish after this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that appends the specifiecd elements after this publisher\u2019s elements.\n\nDiscussion\n\nUse append(_:) when you need to prepend specific elements after the output of a publisher.\n\nIn the example below, the append(_:) operator publishes the provided elements after republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .append(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 5 6 7 8 9 10 0 1 255\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "merge(with:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/merge(with:)",
        "html": "Parameters\nother\n\nAnother publisher of this publisher\u2019s type.\n\nReturn Value\n\nA publisher that emits an event when either upstream publisher emits an event.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "measureInterval(using:options:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/measureinterval(using:options:)",
        "html": "Parameters\nscheduler\n\nA scheduler to use for tracking the timing of events.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher that emits elements representing the time interval between the elements it receives.\n\nDiscussion\n\nUse measureInterval(using:options:) to measure the time between events delivered from an upstream publisher.\n\nIn the example below, a 1-second Timer is used as the data source for an event publisher; the measureInterval(using:options:) operator reports the elapsed time between the reception of events on the main run loop:\n\ncancellable = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .measureInterval(using: RunLoop.main)\n    .sink { print(\"\\($0)\", terminator: \"\\n\") }\n\n\n// Prints:\n//      Stride(magnitude: 1.0013610124588013)\n//      Stride(magnitude: 0.9992760419845581)\n\n\nThe output type of the returned publisher is the time interval of the provided scheduler.\n\nThis operator uses the provided scheduler\u2019s now property to measure intervals between events.\n\nSee Also\nControlling Timing\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "map(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/map(_:_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of a second property on Output.\n\nkeyPath2\n\nThe key path of a third property on Output.\n\nReturn Value\n\nA publisher that publishes the values of three key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:_:) operator uses the Swift key path syntax to access the die1, die2, and die3 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these three values (as an (Int, Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n    let die3: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6),\n                            die3: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2, \\.die3)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1), \\(values.2) (total \\(values.0 + values.1 + values.2))\")\n    }\n// Prints \"Rolled: 5, 4, 2 (total 11)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple."
    },
    {
        "title": "allSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/allsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the allSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes.\n\nIn the example below, the allSatisfy(_:) operator tests if each an integer array publisher\u2019s elements fall into the targetRange:\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .allSatisfy { targetRange.contains($0) }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "tryContains(where:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/trycontains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse tryContains(where:) to find the first element in an upstream that satisfies the error-throwing closure you provide.\n\nThis operator consumes elements produced from the upstream publisher until the upstream publisher either:\n\nProduces a matching element, after which it emits true and the publisher finishes normally.\n\nEmits false if no matching element is found and the publisher finishes normally.\n\nIf the predicate throws an error, the publisher fails, passing the error to its downstream.\n\nIn the example below, the tryContains(where:) operator tests values to find an element less than 10; when the closure finds an odd number, like 3, the publisher terminates with an IllegalValueError.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers = [3, 2, 10, 5, 0, 9]\nnumbers.publisher\n    .tryContains {\n        if ($0 % 2 != 0) {\n            throw IllegalValueError()\n        }\n       return $0 < 10\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "tryCompactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/trycompactmap(_:)",
        "html": "Parameters\ntransform\n\nAn error-throwing closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of calling the supplied closure.\n\nDiscussion\n\nUse tryCompactMap(_:) to remove nil elements from a publisher\u2019s stream based on an error-throwing closure you provide. If the closure throws an error, the publisher cancels the upstream publisher and sends the thrown error to the downstream subscriber as a Failure.\n\nThe following example uses an array of numbers as the source for a collection-based publisher. A tryCompactMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform the numbers from its Arabic to Roman numerals, as an optional String.\n\nIf the closure called by tryCompactMap(_:) fails to look up a Roman numeral, it returns the optional String (unknown).\n\nIf the closure called by tryCompactMap(_:) determines the input is 0, it throws an error. The tryCompactMap(_:) operator catches this error and stops publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from: Int) throws -> String? {\n    let romanNumeralDict: [Int : String] =\n        [1: \"I\", 2: \"II\", 3: \"III\", 4: \"IV\", 5: \"V\"]\n    guard from != 0 else { throw ParseError() }\n    return romanNumeralDict[from]\n}\nlet numbers = [6, 5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryCompactMap { try romanNumeral(from: $0) }\n    .sink(\n          receiveCompletion: { print (\"\\($0)\") },\n          receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"(Unknown) V IV III II I failure(ParseError())\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryCatch(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/trycatch(_:)",
        "html": "Parameters\nhandler\n\nA throwing closure that accepts the upstream failure as input. This closure can either replace the upstream publisher with a new one, or throw a new error to the downstream subscriber.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher, or an error.\n\nDiscussion\n\nUse tryCatch(_:) to decide how to handle from an upstream publisher by either replacing the publisher with a new publisher, or throwing a new error.\n\nIn the example below, an array publisher emits values that a tryMap(_:) operator evaluates to ensure the values are greater than zero. If the values aren\u2019t greater than zero, the operator throws an error to the downstream subscriber to let it know there was a problem. The subscriber, tryCatch(_:), replaces the error with a new publisher using Just to publish a final value before the stream ends normally.\n\nenum SimpleError: Error { case error }\nvar numbers = [5, 4, 3, 2, 1, -1, 7, 8, 9, 10]\n\n\ncancellable = numbers.publisher\n   .tryMap { v in\n        if v > 0 {\n            return v\n        } else {\n            throw SimpleError.error\n        }\n}\n  .tryCatch { error in\n      Just(0) // Send a final value before completing normally.\n              // Alternatively, throw a new error to terminate the stream.\n}\n  .sink(receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print (\"Received \\($0).\") }\n  )\n//    Received 5.\n//    Received 4.\n//    Received 3.\n//    Received 2.\n//    Received 1.\n//    Received 0.\n//    Completion: finished.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "setFailureType(to:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/setfailuretype(to:)",
        "html": "Parameters\nfailureType\n\nThe Failure type presented by this publisher.\n\nReturn Value\n\nA publisher that appears to send the specified failure type.\n\nDiscussion\n\nUse setFailureType(to:) when you need set the error type of a publisher that cannot fail.\n\nConversely, if the upstream can fail, you would use mapError(_:) to provide instructions on converting the error types to needed by the downstream publisher\u2019s inputs.\n\nThe following example has two publishers with mismatched error types: pub1\u2019s error type is Never, and pub2\u2019s error type is Error. Because of the mismatch, the combineLatest(_:) operator requires that pub1 use setFailureType(to:) to make it appear that pub1 can produce the Error type, like pub2 can.\n\nlet pub1 = [0, 1, 2, 3, 4, 5].publisher\nlet pub2 = CurrentValueSubject<Int, Error>(0)\nlet cancellable = pub1\n    .setFailureType(to: Error.self)\n    .combineLatest(pub2)\n    .sink(\n        receiveCompletion: { print (\"completed: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\")}\n     )\n\n\n// Prints: \"value: (5, 0)\".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure."
    },
    {
        "title": "timeout(_:scheduler:options:customError:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/timeout(_:scheduler:options:customerror:)",
        "html": "Parameters\ninterval\n\nThe maximum time interval the publisher can go without emitting an element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to deliver events.\n\noptions\n\nScheduler options that customize the delivery of elements.\n\ncustomError\n\nA closure that executes if the publisher times out. The publisher sends the failure returned by this closure to the subscriber as the reason for termination.\n\nReturn Value\n\nA publisher that terminates if the specified interval elapses with no events received from the upstream publisher.\n\nDiscussion\n\nUse timeout(_:scheduler:options:customError:) to terminate a publisher if an element isn\u2019t delivered within a timeout interval you specify.\n\nIn the example below, a PassthroughSubject publishes String elements and is configured to time out if no new elements are received within its TIME_OUT window of 5 seconds. A single value is published after the specified 2-second WAIT_TIME, after which no more elements are available; the publisher then times out and completes normally.\n\nvar WAIT_TIME : Int = 2\nvar TIMEOUT_TIME : Int = 5\n\n\nlet subject = PassthroughSubject<String, Never>()\nlet cancellable = subject\n    .timeout(.seconds(TIMEOUT_TIME), scheduler: DispatchQueue.main, options: nil, customError:nil)\n    .sink(\n          receiveCompletion: { print (\"completion: \\($0) at \\(Date())\") },\n          receiveValue: { print (\"value: \\($0) at \\(Date())\") }\n     )\n\n\nDispatchQueue.main.asyncAfter(deadline: .now() + .seconds(WAIT_TIME),\n                              execute: { subject.send(\"Some data - sent after a delay of \\(WAIT_TIME) seconds\") } )\n\n\n// Prints: value: Some data - sent after a delay of 2 seconds at 2020-03-10 23:47:59 +0000\n//         completion: finished at 2020-03-10 23:48:04 +0000\n\n\nIf customError is nil, the publisher completes normally; if you provide a closure for the customError argument, the upstream publisher is instead terminated upon timeout, and the error is delivered to the downstream.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval."
    },
    {
        "title": "throttle(for:scheduler:latest:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/throttle(for:scheduler:latest:)",
        "html": "Parameters\ninterval\n\nThe interval at which to find and emit either the most recent or the first element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to publish elements.\n\nlatest\n\nA Boolean value that indicates whether to publish the most recent element. If false, the publisher emits the first element received during the interval.\n\nReturn Value\n\nA publisher that emits either the most-recent or first element received during the specified interval.\n\nDiscussion\n\nUse throttle(for:scheduler:latest:) to selectively republish elements from an upstream publisher during an interval you specify. Other elements received from the upstream in the throttling interval aren\u2019t republished.\n\nIn the example below, a Timer.TimerPublisher produces elements on one-second intervals; the throttle(for:scheduler:latest:) operator delivers the first event, then republishes only the latest event in the following ten second intervals:\n\ncancellable = Timer.publish(every: 3.0, on: .main, in: .default)\n    .autoconnect()\n    .print(\"\\(Date().description)\")\n    .throttle(for: 10.0, scheduler: RunLoop.main, latest: true)\n    .sink(\n        receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print(\"Received Timestamp \\($0).\") }\n     )\n\n\n// Prints:\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:26:57 +0000)\n //    Received Timestamp 2020-03-19 18:26:57 +0000.\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:00 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:03 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:06 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:09 +0000)\n //    Received Timestamp 2020-03-19 18:27:09 +0000.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "sink(receiveCompletion:receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/sink(receivecompletion:receivevalue:)",
        "html": "Parameters\nreceiveComplete\n\nThe closure to execute on completion.\n\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveCompletion:receiveValue:) to observe values received by the publisher and process them using a closure you specify.\n\nIn this example, a Range publisher publishes integers to a sink(receiveCompletion:receiveValue:) operator\u2019s receiveValue closure that prints them to the console. Upon completion the sink(receiveCompletion:receiveValue:) operator\u2019s receiveCompletion closure indicates the successful termination of the stream.\n\nlet myRange = (0...3)\ncancellable = myRange.publisher\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0)\") })\n\n\n// Prints:\n//  value: 0\n//  value: 1\n//  value: 2\n//  value: 3\n//  completion: finished\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "subscribe(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/subscribe(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler used to send messages to upstream publishers.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher which performs upstream operations on the specified scheduler.\n\nDiscussion\n\nIn contrast with receive(on:options:), which affects downstream messages, subscribe(on:options:) changes the execution context of upstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes ioPerformingPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes uiUpdatingSubscriber to receive elements and completion on RunLoop.main.\n\nlet ioPerformingPublisher == // Some publisher.\nlet uiUpdatingSubscriber == // Some subscriber that updates the UI.\n\n\nioPerformingPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(uiUpdatingSubscriber)\n\n\nUsing subscribe(on:options:) also causes the upstream publisher to perform cancel() using the specfied scheduler.\n\nSee Also\nSpecifying Schedulers\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher."
    },
    {
        "title": "sink(receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/sink(receivevalue:)",
        "html": "Parameters\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveValue:) to observe values received by the publisher and print them to the console. This operator can only be used when the stream doesn\u2019t fail, that is, when the publisher\u2019s Failure type is Never.\n\nIn this example, a Range publisher publishes integers to a sink(receiveValue:) operator\u2019s receiveValue closure that prints them to the console:\n\nlet integers = (0...3)\nintegers.publisher\n    .sink { print(\"Received \\($0)\") }\n\n\n// Prints:\n//  Received 0\n//  Received 1\n//  Received 2\n//  Received 3\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/subscribe(_:)-31ega",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this publisher. After attaching, the subscriber can start to receive values.\n\nDiscussion\n\nAlways call this function instead of receive(subscriber:). Adopters of Publisher must implement receive(subscriber:). The implementation of subscribe(_:) provided by Publisher calls through to receive(subscriber:).\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "replaceNil(with:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/replacenil(with:)",
        "html": "Parameters\noutput\n\nThe element to use when replacing nil.\n\nReturn Value\n\nA publisher that replaces nil elements from the upstream publisher with the provided element.\n\nDiscussion\n\nThe replaceNil(with:) operator enables replacement of nil values in a stream with a substitute value. In the example below, a collection publisher contains a nil value. The replaceNil(with:) operator replaces this with 0.0.\n\nlet numbers: [Double?] = [1.0, 2.0, nil, 3.0]\nnumbers.publisher\n    .replaceNil(with: 0.0)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"Optional(1.0) Optional(2.0) Optional(0.0) Optional(3.0)\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "share()",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/share()",
        "html": "Return Value\n\nA class instance that shares elements received from its upstream to multiple subscribers.\n\nDiscussion\n\nThe publisher returned by this operator supports multiple subscribers, all of whom receive unchanged elements and completion states from the upstream publisher.\n\nTip\n\nPublishers.Share is effectively a combination of the Publishers.Multicast and PassthroughSubject publishers, with an implicit autoconnect().\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a share() operator to share the same random number to each of two subscribers. This example uses a delay(for:tolerance:scheduler:options:) operator only to prevent the first subscriber from exhausting the sequence publisher immediately; an asynchronous publisher wouldn\u2019t need this.\n\nlet pub = (1...3).publisher\n    .delay(for: 1, scheduler: DispatchQueue.main)\n    .map( { _ in return Int.random(in: 0...100) } )\n    .print(\"Random\")\n    .share()\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\n\n\n// Prints:\n// Random: receive value: (20)\n// Stream 1 received: 20\n// Stream 2 received: 20\n// Random: receive value: (85)\n// Stream 1 received: 85\n// Stream 2 received: 85\n// Random: receive value: (98)\n// Stream 1 received: 98\n// Stream 2 received: 98\n\n\nWithout the share() operator, stream 1 receives three random values, followed by stream 2 receiving three different random values.\n\nAlso note that Publishers.Share is a class rather than a structure like most other publishers. This means you can use this operator to create a publisher instance that uses reference semantics.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers."
    },
    {
        "title": "scan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/scan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nA closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse scan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value.\n\nThe following example logs a running total of all values received from the sequence publisher.\n\nlet range = (0...5)\ncancellable = range.publisher\n    .scan(0) { return $0 + $1 }\n    .sink { print (\"\\($0)\", terminator: \" \") }\n // Prints: \"0 1 3 6 10 15 \".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/subscribe(_:)-8rx8x",
        "html": "Parameters\nsubject\n\nThe subject to attach to this publisher.\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher."
    },
    {
        "title": "replaceError(with:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/replaceerror(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher fails.\n\nReturn Value\n\nA publisher that replaces an error from the upstream publisher with the provided output element.\n\nDiscussion\n\nIf the upstream publisher fails with an error, this publisher emits the provided element, then finishes normally.\n\nIn the example below, a publisher of strings fails with a MyError instance, which sends a failure completion downstream. The replaceError(with:) operator handles the failure by publishing the string (replacement element) and completing normally.\n\nstruct MyError: Error {}\nlet fail = Fail<String, MyError>(error: MyError())\ncancellable = fail\n    .replaceError(with: \"(replacement element)\")\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"(replacement element) finished\".\n\n\nThis replaceError(with:) functionality is useful when you want to handle an error by sending a single replacement element and end the stream. Use catch(_:) to recover from an error and provide a replacement publisher to continue providing elements to the downstream subscriber.\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element."
    },
    {
        "title": "removeDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/removeduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of the current and previously published elements using a closure you provide.\n\nUse the removeDuplicates(by:) operator when comparing types that don\u2019t themselves implement Equatable, or if you need to compare values differently than the type\u2019s Equatable implementation.\n\nIn the example below, the removeDuplicates(by:) functionality triggers when the x property of the current and previous elements are equal, otherwise the operator publishes the current Point to the downstream subscriber:\n\nstruct Point {\n    let x: Int\n    let y: Int\n}\n\n\nlet points = [Point(x: 0, y: 0), Point(x: 0, y: 1),\n              Point(x: 1, y: 1), Point(x: 2, y: 1)]\ncancellable = points.publisher\n    .removeDuplicates { prev, current in\n        // Considers points to be duplicate if the x coordinate\n        // is equal, and ignores the y coordinate\n        prev.x == current.x\n    }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: Point(x: 0, y: 0) Point(x: 1, y: 1) Point(x: 2, y: 1)\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "reduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/reduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nA closure that produces a new value by taking the previously-accumulated value and the next element it receives from the upstream publisher.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes. If reduce(_:_:) receives an error from the upstream publisher, the operator delivers it to the downstream subscriber, the publisher terminates and publishes no value.\n\nDiscussion\n\nUse reduce(_:_:) to collect a stream of elements and produce an accumulated value based on a closure you provide.\n\nIn the following example, the reduce(_:_:) operator collects all the integer values it receives from its upstream publisher:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .reduce(0, { accum, next in accum + next })\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"55\"\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "print(_:to:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/print(_:to:)",
        "html": "Parameters\nprefix\n\nA string \u2014- which defaults to empty -\u2014 with which to prefix all log messages.\n\nstream\n\nA stream for text output that receives messages, and which directs output to the console by default. A custom stream can be used to log messages to other destinations.\n\nReturn Value\n\nA publisher that prints log messages for all publishing events.\n\nDiscussion\n\nUse print(_:to:) to log messages the console.\n\nIn the example below, log messages are printed on the console:\n\nlet integers = (1...2)\ncancellable = integers.publisher\n   .print(\"Logged a message\", to: nil)\n   .sink { _ in }\n\n\n// Prints:\n//  Logged a message: receive subscription: (1..<2)\n//  Logged a message: request unlimited\n//  Logged a message: receive value: (1)\n//  Logged a message: receive finished\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur."
    },
    {
        "title": "prefix(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/prefix(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA second publisher.\n\nReturn Value\n\nA publisher that republishes elements until the second publisher publishes an element.\n\nDiscussion\n\nAfter the second publisher publishes an element, the publisher returned by this method finishes.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue."
    },
    {
        "title": "merge(with:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/merge(with:_:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nh\n\nAn eighth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\nlet pubH = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF, pubG, pubH)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\npubH.send(1000)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\npubH.send(1001)\n\n\n//Prints: \"1 40 90 -1 33 44 54 1000 2 50 100 -2 33 33 54 1001\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "output(at:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/output(at:)",
        "html": "Parameters\nindex\n\nThe index that indicates the element to publish.\n\nReturn Value\n\nA publisher that publishes a specific indexed element.\n\nDiscussion\n\nUse output(at:) when you need to republish a specific element specified by its position in the stream. If the publisher completes normally or with an error before publishing the specified element, then the publisher doesn\u2019t produce any elements.\n\nIn the example below, the array publisher emits the fifth element in the sequence of published elements:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.publisher\n    .output(at: 5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"6\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "receive(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/receive(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler the publisher uses for element delivery.\n\noptions\n\nScheduler options used to customize element delivery.\n\nReturn Value\n\nA publisher that delivers elements using the specified scheduler.\n\nDiscussion\n\nYou use the receive(on:options:) operator to receive results and completion on a specific scheduler, such as performing UI work on the main run loop. In contrast with subscribe(on:options:), which affects upstream messages, receive(on:options:) changes the execution context of downstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes jsonPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes labelUpdater to receive elements and completion on RunLoop.main.\n\nlet jsonPublisher = MyJSONLoaderPublisher() // Some publisher.\nlet labelUpdater = MyLabelUpdateSubscriber() // Some subscriber that updates the UI.\n\n\njsonPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(labelUpdater)\n\n\nPrefer receive(on:options:) over explicit use of dispatch queues when performing work in subscribers. For example, instead of the following pattern:\n\npub.sink {\n    DispatchQueue.main.async {\n        // Do something.\n    }\n}\n\n\nUse this pattern instead:\n\npub.receive(on: DispatchQueue.main).sink {\n    // Do something.\n}\n\n\nNote\n\nreceive(on:options:) doesn\u2019t affect the scheduler used to call the subscriber\u2019s receive(subscription:) method.\n\nSee Also\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations."
    },
    {
        "title": "merge(with:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/merge(with:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\n let pubA = PassthroughSubject<Int, Never>()\n let pubB = PassthroughSubject<Int, Never>()\n let pubC = PassthroughSubject<Int, Never>()\n let pubD = PassthroughSubject<Int, Never>()\n let pubE = PassthroughSubject<Int, Never>()\n\n\n cancellable = pubA\n     .merge(with: pubB, pubC, pubD, pubE)\n     .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\n pubA.send(1)\n pubB.send(40)\n pubC.send(90)\n pubD.send(-1)\n pubE.send(33)\n pubA.send(2)\n pubB.send(50)\n pubC.send(100)\n pubD.send(-2)\n pubE.send(33)\n\n\n // Prints: \"1 40 90 -1 33 2 50 100 -2 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "prefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/prefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate indicates publishing should finish.\n\nDiscussion\n\nUse prefix(while:) to emit values while elements from the upstream publisher meet a condition you specify. The publisher finishes when the closure returns false.\n\nIn the example below, the prefix(while:) operator emits values while the element it receives is less than five:\n\nlet numbers = (0...10)\nnumbers.publisher\n    .prefix { $0 < 5 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/combinelatest(_:_:)-7grcc",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn this example, three instances of PassthroughSubject emit values; as combineLatest(_:_:) receives input from any of the upstream publishers, it combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: (2, 2, 9).\n//  Result: (3, 2, 9).\n//  Result: (3, 12, 9).\n//  Result: (13, 12, 9).\n//  Result: (13, 12, 19).\n\n\nIf any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "output(in:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/output(in:)",
        "html": "Parameters\nrange\n\nA range that indicates which elements to publish.\n\nReturn Value\n\nA publisher that publishes elements specified by a range.\n\nDiscussion\n\nUse output(in:) to republish a range indices you specify in the published stream. After publishing all elements, the publisher finishes normally. If the publisher completes normally or with an error before producing all the elements in the range, it doesn\u2019t publish the remaining elements.\n\nIn the example below, an array publisher emits the subset of elements at the indices in the specified range:\n\nlet numbers = [1, 1, 2, 2, 2, 3, 4, 5, 6]\nnumbers.publisher\n    .output(in: (3...5))\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 2 3\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/combinelatest(_:_:)-1pkm7",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest<P,T>(_:) to combine the current and one additional publisher and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn the example below, combineLatest() receives the most-recent values published by the two publishers, it multiplies them together, and republishes the result:\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2) { (first, second) in\n        return first * second\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(9)\npub1.send(3)\npub2.send(12)\npub1.send(13)\n//\n// Prints:\n//Result: 4.    (pub1 latest = 2, pub2 latest = 2)\n//Result: 18.   (pub1 latest = 9, pub2 latest = 2)\n//Result: 6.    (pub1 latest = 3, pub2 latest = 2)\n//Result: 36.   (pub1 latest = 3, pub2 latest = 12)\n//Result: 156.  (pub1 latest = 13, pub2 latest = 12)\n\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "multicast(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/multicast(_:)",
        "html": "Parameters\ncreateSubject\n\nA closure to create a new Subject each time a subscriber attaches to the multicast publisher.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(subject:), this method produces a publisher that creates a separate Subject for each subscriber.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(_:) operator whose closure creates a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast { PassthroughSubject<(String, Int), Never>() }\n\n\ncancellable1 = pub\n   .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n   .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 9))\n// Stream 2 received: (\"First\", 9)\n// Stream 1 received: (\"First\", 9)\n// Random: receive value: ((\"Second\", 46))\n// Stream 2 received: (\"Second\", 46)\n// Stream 1 received: (\"Second\", 46)\n// Random: receive value: ((\"Third\", 26))\n// Stream 2 received: (\"Third\", 26)\n// Stream 1 received: (\"Third\", 26)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "c",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge7/c",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge.\nlet g: G\nAn seventh publisher to merge."
    },
    {
        "title": "contains(where:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/contains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(where:) to find the first element in an upstream that satisfies the closure you provide. This operator consumes elements produced from the upstream publisher until the upstream publisher produces a matching element.\n\nThis operator is useful when the upstream publisher produces elements that don\u2019t conform to Equatable.\n\nIn the example below, the contains(where:) operator tests elements against the supplied closure and emits true for the first elements that\u2019s greater than 4, and then finishes normally.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .contains {$0 > 4}\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "delay(for:tolerance:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/currentvaluesubject/delay(for:tolerance:scheduler:options:)",
        "html": "Parameters\ninterval\n\nThe amount of time to delay.\n\ntolerance\n\nThe allowed tolerance in delivering delayed events. The Delay publisher may deliver elements this much sooner or later than the interval specifies.\n\nscheduler\n\nThe scheduler to deliver the delayed events.\n\noptions\n\nOptions relevant to the scheduler\u2019s behavior.\n\nReturn Value\n\nA publisher that delays delivery of elements and completion to the downstream receiver.\n\nDiscussion\n\nUse delay(for:tolerance:scheduler:options:) when you need to delay the delivery of elements to a downstream by a specified amount of time.\n\nIn this example, a Timer publishes an event every second. The delay(for:tolerance:scheduler:options:) operator holds the delivery of the initial element for 3 seconds (\u00b10.5 seconds), after which each element is delivered to the downstream on the main run loop after the specified delay:\n\nlet df = DateFormatter()\ndf.dateStyle = .none\ndf.timeStyle = .long\ncancellable = Timer.publish(every: 1.0, on: .main, in: .default)\n    .autoconnect()\n    .handleEvents(receiveOutput: { date in\n        print (\"Sending Timestamp \\'\\(df.string(from: date))\\' to delay()\")\n    })\n    .delay(for: .seconds(3), scheduler: RunLoop.main, options: .none)\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \"\\n\") },\n        receiveValue: { value in\n            let now = Date()\n            print (\"At \\(df.string(from: now)) received  Timestamp \\'\\(df.string(from: value))\\' sent: \\(String(format: \"%.2f\", now.timeIntervalSince(value))) secs ago\", terminator: \"\\n\")\n        }\n    )\n\n\n// Prints:\n//    Sending Timestamp '5:02:33 PM PDT' to delay()\n//    Sending Timestamp '5:02:34 PM PDT' to delay()\n//    Sending Timestamp '5:02:35 PM PDT' to delay()\n//    Sending Timestamp '5:02:36 PM PDT' to delay()\n//    At 5:02:36 PM PDT received  Timestamp '5:02:33 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:37 PM PDT' to delay()\n//    At 5:02:37 PM PDT received  Timestamp '5:02:34 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:38 PM PDT' to delay()\n//    At 5:02:38 PM PDT received  Timestamp '5:02:35 PM PDT' sent: 3.00 secs ago\n\n\nThe delay affects the delivery of elements and completion, but not of the original subscription.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/trydropwhile/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet predicate: (Publishers.TryDropWhile<Upstream>.Output) throws -> Bool\nThe error-throwing closure that indicates whether to drop the element."
    },
    {
        "title": "tryRemoveDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/tryremoveduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first. If this closure throws an error, the publisher terminates with the thrown error.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse tryRemoveDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of elements using an error-throwing closure you provide. If your closure throws an error, the publisher terminates with the error.\n\nIn the example below, the closure provided to tryRemoveDuplicates(by:) returns true when two consecutive elements are equal, thereby filtering out 0, 1, 2, and 3. However, the closure throws an error when it encounters 4. The publisher then terminates with this error.\n\nstruct BadValuesError: Error {}\nlet numbers = [0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\ncancellable = numbers.publisher\n    .tryRemoveDuplicates { first, second -> Bool in\n        if (first == 4 && second == 4) {\n            throw BadValuesError()\n        }\n        return first == second\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n // Prints: \"0 1 2 3 4 failure(BadValuesError()\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/zip(_:_:_:)-wpmi",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from three other publishers to publish a tuple to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, several PassthroughSubject instances emit values; zip(_:_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\nlet fractionsPub  = PassthroughSubject<Double, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 2,3     lettersPub: \"A\"    emojiPub: \"\ud83d\ude00\"  fractionsPub: 0.1     zip output: (1, \"A\", \"\ud83d\ude00\", 0.1)\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: (2, \"B\", \"\ud83e\udd70\", 0.8)\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\", 0.1)\n//  (2, \"B\", \"\ud83e\udd70\", 0.8)\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "tryFilter(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/tryfilter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value that indicated whether to republish the element or throws an error.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nUse tryFilter(_:) to filter elements evaluated in an error-throwing closure. If the isIncluded closure throws an error, the publisher fails with that error.\n\nIn the example below, tryFilter(_:) checks to see if the element provided by the publisher is zero, and throws a ZeroError before terminating the publisher with the thrown error. Otherwise, it republishes the element only if it\u2019s even:\n\nstruct ZeroError: Error {}\n\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\ncancellable = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"2 4 failure(DivisionByZeroError())\".\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge6/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "tryFirst(where:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/tryfirst(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse tryFirst(where:) when you need to republish only the first element of a stream that satisfies an error-throwing closure you specify. The publisher ignores all elements after the first. If this publisher doesn\u2019t receive any elements, it finishes without publishing. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a range publisher emits the first element in the range then finishes normally:\n\nlet numberRange: ClosedRange<Int> = (-1...50)\nnumberRange.publisher\n    .tryFirst {\n        guard $0 < 99 else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"-1 completion: finished\"\n// If instead the number range were ClosedRange<Int> = (100...200), the tryFirst operator would terminate publishing with a RangeError.\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "tryDrop(while:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/trydrop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false, and then republishes all remaining elements. If the predicate closure throws, the publisher fails with an error.\n\nDiscussion\n\nUse tryDrop(while:) to omit elements from an upstream until an error-throwing closure you provide returns false, after which the remaining items in the stream are published. If the closure throws, no elements are emitted and the publisher fails with an error.\n\nIn the example below, elements are ignored until -1 is encountered in the stream and the closure returns false. The publisher then republishes the remaining elements and finishes normally. Conversely, if the guard value in the closure had been encountered, the closure would throw and the publisher would fail with an error.\n\nstruct RangeError: Error {}\nvar numbers = [1, 2, 3, 4, 5, 6, -1, 7, 8, 9, 10]\nlet range: CountableClosedRange<Int> = (1...100)\ncancellable = numbers.publisher\n    .tryDrop {\n        guard $0 != 0 else { throw RangeError() }\n        return range.contains($0)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"-1 7 8 9 10 completion: finished\"\n// If instead numbers was [1, 2, 3, 4, 5, 6, 0, -1, 7, 8, 9, 10], tryDrop(while:) would fail with a RangeError.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/combinelatest(_:_:)-4c824",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest<P,T>(_:) to combine the current and one additional publisher and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn the example below, combineLatest() receives the most-recent values published by the two publishers, it multiplies them together, and republishes the result:\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2) { (first, second) in\n        return first * second\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(9)\npub1.send(3)\npub2.send(12)\npub1.send(13)\n//\n// Prints:\n//Result: 4.    (pub1 latest = 2, pub2 latest = 2)\n//Result: 18.   (pub1 latest = 9, pub2 latest = 2)\n//Result: 6.    (pub1 latest = 3, pub2 latest = 2)\n//Result: 36.   (pub1 latest = 3, pub2 latest = 12)\n//Result: 156.  (pub1 latest = 13, pub2 latest = 12)\n\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/combinelatest(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:_:) when you need to combine the current and 3 additional publishers and transform the values using a closure in which you specify the published elements, to publish a new element.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, as combineLatest(_:_:_:_:) receives the most-recent values published by four publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4) { firstValue, secondValue, thirdValue, fourthValue in\n        return firstValue * secondValue * thirdValue * fourthValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: 36.     // pub = 2,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 54.     // pub = 3,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 324.    // pub = 3,  pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 1404.   // pub = 13, pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 2964.   // pub = 13, pub2 = 12,  pub3 = 19, pub4 = 1\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "debounce(for:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/debounce(for:scheduler:options:)",
        "html": "Parameters\ndueTime\n\nThe time the publisher should wait before publishing an element.\n\nscheduler\n\nThe scheduler on which this publisher delivers elements\n\noptions\n\nScheduler options that customize this publisher\u2019s delivery of elements.\n\nReturn Value\n\nA publisher that publishes events only after a specified time elapses.\n\nDiscussion\n\nUse the debounce(for:scheduler:options:) operator to control the number of values and time between delivery of values from the upstream publisher. This operator is useful to process bursty or high-volume event streams where you need to reduce the number of values delivered to the downstream to a rate you specify.\n\nIn this example, a PassthroughSubject publishes elements on a schedule defined by the bounces array. The array is composed of tuples representing a value sent by the PassthroughSubject, and a TimeInterval ranging from one-quarter second up to 2 seconds that drives a delivery timer. As the queue builds, elements arriving faster than one-half second debounceInterval are discarded, while elements arriving at a rate slower than debounceInterval are passed through to the sink(receiveValue:) operator.\n\nlet bounces:[(Int,TimeInterval)] = [\n    (0, 0),\n    (1, 0.25),  // 0.25s interval since last index\n    (2, 1),     // 0.75s interval since last index\n    (3, 1.25),  // 0.25s interval since last index\n    (4, 1.5),   // 0.25s interval since last index\n    (5, 2)      // 0.5s interval since last index\n]\n\n\nlet subject = PassthroughSubject<Int, Never>()\ncancellable = subject\n    .debounce(for: .seconds(0.5), scheduler: RunLoop.main)\n    .sink { index in\n        print (\"Received index \\(index)\")\n    }\n\n\nfor bounce in bounces {\n    DispatchQueue.main.asyncAfter(deadline: .now() + bounce.1) {\n        subject.send(bounce.0)\n    }\n}\n\n\n// Prints:\n//  Received index 1\n//  Received index 4\n//  Received index 5\n\n\n//  Here is the event flow shown from the perspective of time, showing value delivery through the `debounce()` operator:\n\n\n//  Time 0: Send index 0.\n//  Time 0.25: Send index 1. Index 0 was waiting and is discarded.\n//  Time 0.75: Debounce period ends, publish index 1.\n//  Time 1: Send index 2.\n//  Time 1.25: Send index 3. Index 2 was waiting and is discarded.\n//  Time 1.5: Send index 4. Index 3 was waiting and is discarded.\n//  Time 2: Debounce period ends, publish index 4. Also, send index 5.\n//  Time 2.5: Debounce period ends, publish index 5.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "tryLast(where:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/trylast(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse tryLast(where:) when you need to republish the last element that satisfies an error-throwing closure you specify. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a publisher emits the last element that satisfies the error-throwing closure, then finishes normally:\n\nstruct RangeError: Error {}\n\n\nlet numbers = [-62, 1, 6, 10, 9, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .tryLast {\n        guard 0 != 0  else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n// Prints: \"5 completion: finished\"\n// If instead the numbers array had contained a `0`, the `tryLast` operator would terminate publishing with a RangeError.\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-merge6-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<P>(with: P) -> Publishers.Merge7<A, B, C, D, E, F, P>\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<Z, Y>(with: Z, Y) -> Publishers.Merge8<A, B, C, D, E, F, Z, Y>\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "delay(for:tolerance:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/delay(for:tolerance:scheduler:options:)",
        "html": "Parameters\ninterval\n\nThe amount of time to delay.\n\ntolerance\n\nThe allowed tolerance in delivering delayed events. The Delay publisher may deliver elements this much sooner or later than the interval specifies.\n\nscheduler\n\nThe scheduler to deliver the delayed events.\n\noptions\n\nOptions relevant to the scheduler\u2019s behavior.\n\nReturn Value\n\nA publisher that delays delivery of elements and completion to the downstream receiver.\n\nDiscussion\n\nUse delay(for:tolerance:scheduler:options:) when you need to delay the delivery of elements to a downstream by a specified amount of time.\n\nIn this example, a Timer publishes an event every second. The delay(for:tolerance:scheduler:options:) operator holds the delivery of the initial element for 3 seconds (\u00b10.5 seconds), after which each element is delivered to the downstream on the main run loop after the specified delay:\n\nlet df = DateFormatter()\ndf.dateStyle = .none\ndf.timeStyle = .long\ncancellable = Timer.publish(every: 1.0, on: .main, in: .default)\n    .autoconnect()\n    .handleEvents(receiveOutput: { date in\n        print (\"Sending Timestamp \\'\\(df.string(from: date))\\' to delay()\")\n    })\n    .delay(for: .seconds(3), scheduler: RunLoop.main, options: .none)\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \"\\n\") },\n        receiveValue: { value in\n            let now = Date()\n            print (\"At \\(df.string(from: now)) received  Timestamp \\'\\(df.string(from: value))\\' sent: \\(String(format: \"%.2f\", now.timeIntervalSince(value))) secs ago\", terminator: \"\\n\")\n        }\n    )\n\n\n// Prints:\n//    Sending Timestamp '5:02:33 PM PDT' to delay()\n//    Sending Timestamp '5:02:34 PM PDT' to delay()\n//    Sending Timestamp '5:02:35 PM PDT' to delay()\n//    Sending Timestamp '5:02:36 PM PDT' to delay()\n//    At 5:02:36 PM PDT received  Timestamp '5:02:33 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:37 PM PDT' to delay()\n//    At 5:02:37 PM PDT received  Timestamp '5:02:34 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:38 PM PDT' to delay()\n//    At 5:02:38 PM PDT received  Timestamp '5:02:35 PM PDT' sent: 3.00 secs ago\n\n\nThe delay affects the delivery of elements and completion, but not of the original subscription.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/retry/==(_:_:)",
        "html": "Parameters\nlhs\n\nA Retry publisher to compare for equality.\n\nrhs\n\nAnother Retry publisher to compare for equality.\n\nReturn Value\n\ntrue if the publishers have equal upstream and retries properties; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "init(_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge6/init(_:_:_:_:_:_:)",
        "html": "Parameters\na\n\nA publisher to merge\n\nb\n\nA second publisher to merge.\n\nc\n\nA third publisher to merge.\n\nd\n\nA fourth publisher to merge.\n\ne\n\nA fifth publisher to merge.\n\nf\n\nA sixth publisher to merge."
    },
    {
        "title": "drop(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/drop(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA publisher to monitor for its first emitted element.\n\nReturn Value\n\nA publisher that drops elements from the upstream publisher until the other publisher produces a value.\n\nDiscussion\n\nUse drop(untilOutputFrom:) to ignore elements from the upstream publisher until another, second, publisher delivers its first element. This publisher requests a single value from the second publisher, and it ignores (drops) all elements from the upstream publisher until the second publisher produces a value. After the second publisher produces an element, drop(untilOutputFrom:) cancels its subscription to the second publisher, and allows events from the upstream publisher to pass through.\n\nAfter this publisher receives a subscription from the upstream publisher, it passes through backpressure requests from downstream to the upstream publisher. If the upstream publisher acts on those requests before the other publisher produces an item, this publisher drops the elements it receives from the upstream publisher.\n\nIn the example below, the pub1 publisher defers publishing its elements until the pub2 publisher delivers its first element:\n\nlet upstream = PassthroughSubject<Int,Never>()\nlet second = PassthroughSubject<String,Never>()\ncancellable = upstream\n    .drop(untilOutputFrom: second)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\nupstream.send(1)\nupstream.send(2)\nsecond.send(\"A\")\nupstream.send(3)\nupstream.send(4)\n// Prints \"3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge6/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Merge6<A, B, C, D, E, F>, Publishers.Merge6<A, B, C, D, E, F>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, E conforms to Publisher, E conforms to Equatable, F conforms to Publisher, F conforms to Equatable, A.Failure is B.Failure, A.Output is B.Output, B.Failure is C.Failure, B.Output is C.Output, C.Failure is D.Failure, C.Output is D.Output, D.Failure is E.Failure, D.Output is E.Output, E.Failure is F.Failure, and E.Output is F.Output."
    },
    {
        "title": "b",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge6/b",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge."
    },
    {
        "title": "max(by:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/max(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max(by:) to determine the maximum value of elements received from the upstream publisher based on an ordering closure you specify.\n\nIn the example below, an array publishes enumeration elements representing playing card ranks. The max(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the maximum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .jack]\ncancellable = cards.publisher\n    .max {\n        return  $0.rawValue > $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"queen\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge6/==(_:_:)",
        "html": "Parameters\nlhs\n\nA merging publisher to compare for equality.\n\nrhs\n\nAnother merging publisher to compare for equality.\n\nReturn Value\n\ntrue if the two merging publishers have equal source publishers; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "Publishers.Merge6.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge6/output",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/map(_:)-4p01",
        "html": "Parameters\nkeyPath\n\nThe key path of a property on Output.\n\nReturn Value\n\nA publisher that publishes the value of the key path.\n\nDiscussion\n\nIn the following example, the map(_:) operator uses the Swift key path syntax to access the die member of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only the value of this Int, not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die: Int\n}\n\n\ncancellable = Just(DiceRoll(die:Int.random(in:1...6)))\n    .map(\\.die)\n    .sink {\n        print (\"Rolled: \\($0)\")\n    }\n// Prints \"Rolled: 3\" (or some other random value).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "Publishers.Merge6.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge6/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.TryComparison.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycomparison/failure",
        "html": "Discussion\n\nThis publisher produces the Swift Error type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "last(where:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/last(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse last(where:) when you need to republish only the last element of a stream that satisfies a closure you specify.\n\nIn the example below, a range publisher emits the last element that satisfies the closure\u2019s criteria, then finishes normally:\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last { $0 < 6 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"5\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "makeConnectable()",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/makeconnectable()",
        "html": "Return Value\n\nA ConnectablePublisher wrapping this publisher.\n\nDiscussion\n\nIn the following example, makeConnectable() wraps its upstream publisher (an instance of Publishers.Share) with a ConnectablePublisher. Without this, the first sink subscriber would receive all the elements from the sequence publisher and cause it to complete before the second subscriber attaches. By making the publisher connectable, the publisher doesn\u2019t produce any elements until after the connect() call.\n\n let subject = Just<String>(\"Sent\")\n let pub = subject\n     .share()\n     .makeConnectable()\n cancellable1 = pub.sink { print (\"Stream 1 received: \\($0)\")  }\n\n\n // For example purposes, use DispatchQueue to add a second subscriber\n // a second later, and then connect to the publisher a second after that.\n DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n     self.cancellable2 = pub.sink { print (\"Stream 2 received: \\($0)\") }\n }\n DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     self.connectable = pub.connect()\n }\n // Prints:\n // Stream 2 received: Sent\n // Stream 1 received: Sent\n\n\nNote\n\nThe connect() operator returns a Cancellable instance that you must retain. You can also use this instance to cancel publishing."
    },
    {
        "title": "last()",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/last()",
        "html": "Return Value\n\nA publisher that only publishes the last element of a stream.\n\nDiscussion\n\nUse last() when you need to emit only the last element from an upstream publisher.\n\nIn the example below, the range publisher only emits the last element from the sequence publisher, 10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "Publishers.TryComparison.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycomparison/output",
        "html": "Discussion\n\nThis publisher uses its upsteam publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "mapError(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/maperror(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes the upstream failure as a parameter and returns a new error for the publisher to terminate with.\n\nReturn Value\n\nA publisher that replaces any upstream failure with a new error produced by the transform closure.\n\nDiscussion\n\nUse the mapError(_:) operator when you need to replace one error type with another, or where a downstream operator needs the error types of its inputs to match.\n\nThe following example uses a tryMap(_:) operator to divide 1 by each element produced by a sequence publisher. When the publisher produces a 0, the tryMap(_:) fails with a DivisionByZeroError. The mapError(_:) operator converts this into a MyGenericError.\n\nstruct DivisionByZeroError: Error {}\nstruct MyGenericError: Error { var wrappedError: Error }\n\n\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n       guard divisor != 0 else { throw DivisionByZeroError() }\n       return dividend / divisor\n   }\n\n\nlet divisors: [Double] = [5, 4, 3, 2, 1, 0]\ndivisors.publisher\n    .tryMap { try myDivide(1, $0) }\n    .mapError { MyGenericError(wrappedError: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") ,\n        receiveValue: { print (\"value: \\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"0.2 0.25 0.3333333333333333 0.5 1.0 completion: failure(MyGenericError(wrappedError: DivisionByZeroError()))\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/map(_:)-5me29",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s map(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use map(_:) to transform from one kind of element to another.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A map(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the map(_:)\u2019s closure fails to look up a Roman numeral, it returns the string (unknown).\n\nlet numbers = [5, 4, 3, 2, 1, 0]\nlet romanNumeralDict: [Int : String] =\n   [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\ncancellable = numbers.publisher\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"V IV III II I (unknown)\"\n\n\nIf your closure can throw an error, use Combine\u2019s tryMap(_:) operator instead.\n\nSee Also\nMapping Elements\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)",
        "html": "Parameters\nreceiveSubscription\n\nAn optional closure that executes when the publisher receives the subscription from the upstream publisher. This value defaults to nil.\n\nreceiveOutput\n\nAn optional closure that executes when the publisher receives a value from the upstream publisher. This value defaults to nil.\n\nreceiveCompletion\n\nAn optional closure that executes when the upstream publisher finishes normally or terminates with an error. This value defaults to nil.\n\nreceiveCancel\n\nAn optional closure that executes when the downstream receiver cancels publishing. This value defaults to nil.\n\nreceiveRequest\n\nAn optional closure that executes when the publisher receives a request for more elements. This value defaults to nil.\n\nReturn Value\n\nA publisher that performs the specified closures when publisher events occur.\n\nDiscussion\n\nUse handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:) when you want to examine elements as they progress through the stages of the publisher\u2019s lifecycle.\n\nIn the example below, a publisher of integers shows the effect of printing debugging information at each stage of the element-processing lifecycle:\n\nlet integers = (0...2)\ncancellable = integers.publisher\n    .handleEvents(receiveSubscription: { subs in\n        print(\"Subscription: \\(subs.combineIdentifier)\")\n    }, receiveOutput: { anInt in\n        print(\"in output handler, received \\(anInt)\")\n    }, receiveCompletion: { _ in\n        print(\"in completion handler\")\n    }, receiveCancel: {\n        print(\"received cancel\")\n    }, receiveRequest: { (demand) in\n        print(\"received demand: \\(demand.description)\")\n    })\n    .sink { _ in return }\n\n\n// Prints:\n//   received demand: unlimited\n//   Subscription: 0x7f81284734c0\n//   in output handler, received 0\n//   in output handler, received 1\n//   in output handler, received 2\n//   in completion handler\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/flatmap(maxpublishers:_:)-2cxcr",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify."
    },
    {
        "title": "ignoreOutput()",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/ignoreoutput()",
        "html": "Return Value\n\nA publisher that ignores all upstream elements.\n\nDiscussion\n\nUse the ignoreOutput() operator to determine if a publisher is able to complete successfully or would fail.\n\nIn the example below, the array publisher (numbers) delivers the first five of its elements successfully, as indicated by the ignoreOutput() operator. The operator consumes, but doesn\u2019t republish the elements downstream. However, the sixth element, 0, causes the error throwing closure to catch a NoZeroValuesAllowedError that terminates the stream.\n\nstruct NoZeroValuesAllowedError: Error {}\nlet numbers = [1, 2, 3, 4, 5, 0, 6, 7, 8, 9]\ncancellable = numbers.publisher\n    .tryFilter({ anInt in\n        guard anInt != 0 else { throw NoZeroValuesAllowedError() }\n        return anInt < 20\n    })\n    .ignoreOutput()\n    .sink(receiveCompletion: {print(\"completion: \\($0)\")},\n          receiveValue: {print(\"value \\($0)\")})\n\n\n// Prints: \"completion: failure(NoZeroValuesAllowedError())\"\n\n\nThe output type of this publisher is Never.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/flatmap(maxpublishers:_:)-1ohl0",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nDiscussion\n\nCombine\u2018s flatMap(maxPublishers:_:) operator performs a similar function to the doc://com.apple.documentation/documentation/Swift/Sequence/2905332-flatmap operator in the Swift standard library, but turns the elements from one kind of publisher into a new publisher that is sent to subscribers. Use flatMap(maxPublishers:_:) when you want to create a new series of events for downstream subscribers based on the received value. The closure creates the new Publisher based on the received value. The new Publisher can emit more than one event, and successful completion of the new Publisher does not complete the overall stream. Failure of the new Publisher causes the overall stream to fail.\n\nIn the example below, a PassthroughSubject publishes WeatherStation elements. The flatMap(maxPublishers:_:) receives each element, creates a URL from it, and produces a new URLSession.DataTaskPublisher, which will publish the data loaded from that URL.\n\npublic struct WeatherStation {\n    public let stationID: String\n}\n\n\nvar weatherPublisher = PassthroughSubject<WeatherStation, URLError>()\n\n\ncancellable = weatherPublisher.flatMap { station -> URLSession.DataTaskPublisher in\n    let url = URL(string:\"https://weatherapi.example.com/stations/\\(station.stationID)/observations/latest\")!\n    return URLSession.shared.dataTaskPublisher(for: url)\n}\n.sink(\n    receiveCompletion: { completion in\n        // Handle publisher completion (normal or error).\n    },\n    receiveValue: {\n        // Process the received data.\n    }\n )\n\n\nweatherPublisher.send(WeatherStation(stationID: \"KSFO\")) // San Francisco, CA\nweatherPublisher.send(WeatherStation(stationID: \"EGLC\")) // London, UK\nweatherPublisher.send(WeatherStation(stationID: \"ZBBB\")) // Beijing, CN\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify."
    },
    {
        "title": "first(where:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/first(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse first(where:) to republish only the first element of a stream that satisfies a closure you specify. The publisher ignores all elements after the first element that satisfies the closure and finishes normally. If this publisher doesn\u2019t receive any elements, it finishes without publishing.\n\nIn the example below, the provided closure causes the Publishers.FirstWhere publisher to republish the first received element that\u2019s greater than 0, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first { $0 > 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"1\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "assign(to:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/assign(to:)",
        "html": "Parameters\npublished\n\nA property marked with the @Published attribute, which receives and republishes all elements received from the upstream publisher.\n\nDiscussion\n\nUse this operator when you want to receive elements from a publisher and republish them through a property marked with the @Published attribute. The assign(to:) operator manages the life cycle of the subscription, canceling the subscription automatically when the Published instance deinitializes. Because of this, the assign(to:) operator doesn\u2019t return an AnyCancellable that you\u2019re responsible for like assign(to:on:) does.\n\nThe example below shows a model class that receives elements from an internal Timer.TimerPublisher, and assigns them to a @Published property called lastUpdated. Because the to parameter has the inout keyword, you need to use the & operator when calling this method.\n\nclass MyModel: ObservableObject {\n    @Published var lastUpdated: Date = Date()\n    init() {\n         Timer.publish(every: 1.0, on: .main, in: .common)\n             .autoconnect()\n             .assign(to: &$lastUpdated)\n    }\n}\n\n\nIf you instead implemented MyModel with assign(to: lastUpdated, on: self), storing the returned AnyCancellable instance could cause a reference cycle, because the Subscribers.Assign subscriber would hold a strong reference to self. Using assign(to:) solves this problem.\n\nWhile the to parameter uses the inout keyword, this method doesn\u2019t replace a reference type passed to it. Instead, this notation indicates that the operator may modify members of the assigned object, as seen in the following example:\n\n    class MyModel2: ObservableObject {\n        @Published var id: Int = 0\n    }\n    let model2 = MyModel2()\n    Just(100).assign(to: &model2.$id)\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "assertNoFailure(_:file:line:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/assertnofailure(_:file:line:)",
        "html": "Parameters\nprefix\n\nA string used at the beginning of the fatal error message.\n\nfile\n\nA filename used in the error message. This defaults to #file.\n\nline\n\nA line number used in the error message. This defaults to #line.\n\nReturn Value\n\nA publisher that raises a fatal error when its upstream publisher fails.\n\nDiscussion\n\nUse assertNoFailure() for internal integrity checks that are active during testing. However, it is important to note that, like its Swift counterpart fatalError(_:), the assertNoFailure() operator asserts a fatal exception when triggered during development and testing, and in shipping versions of code.\n\nIn the example below, a CurrentValueSubject publishes the initial and second values successfully. The third value, containing a genericSubjectError, causes the assertNoFailure() operator to assert a fatal exception stopping the process:\n\npublic enum SubjectError: Error {\n    case genericSubjectError\n}\n\n\nlet subject = CurrentValueSubject<String, Error>(\"initial value\")\nsubject\n    .assertNoFailure()\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0).\") }\n    )\n\n\nsubject.send(\"second value\")\nsubject.send(completion: Subscribers.Completion<Error>.failure(SubjectError.genericSubjectError))\n\n\n// Prints:\n//  value: initial value.\n//  value: second value.\n//  The process then terminates in the debugger as the assertNoFailure operator catches the genericSubjectError.\n\nSee Also\nHandling Errors\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "breakpointOnError()",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/breakpointonerror()",
        "html": "Return Value\n\nA publisher that raises a debugger signal upon receiving a failure.\n\nDiscussion\n\nWhen the upstream publisher fails with an error, this publisher raises the SIGTRAP signal, which stops the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn this example a PassthroughSubject publishes strings, but its downstream tryMap(_:) operator throws an error. This sends the error downstream as a Subscribers.Completion.failure(_:). The breakpointOnError() operator receives this completion and stops the app in the debugger.\n\n struct CustomError : Error {}\n let publisher = PassthroughSubject<String?, Error>()\n cancellable = publisher\n     .tryMap { stringValue in\n         throw CustomError()\n     }\n     .breakpointOnError()\n     .sink(\n         receiveCompletion: { completion in print(\"Completion: \\(String(describing: completion))\") },\n         receiveValue: { aValue in print(\"Result: \\(String(describing: aValue))\") }\n     )\n\n\n publisher.send(\"TEST DATA\")\n\n\n // Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n // Depending on your specific environment, the console messages may\n // also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "catch(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/catch(_:)",
        "html": "Parameters\nhandler\n\nA closure that accepts the upstream failure as input and returns a publisher to replace the upstream publisher.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\n\nDiscussion\n\nUse catch() to replace an error from an upstream publisher with a new publisher.\n\nIn the example below, the catch() operator handles the SimpleError thrown by the upstream publisher by replacing the error with a Just publisher. This continues the stream by publishing a single value and completing normally.\n\nstruct SimpleError: Error {}\nlet numbers = [5, 4, 3, 2, 1, 0, 9, 8, 7, 6]\ncancellable = numbers.publisher\n    .tryLast(where: {\n        guard $0 != 0 else {throw SimpleError()}\n        return true\n    })\n    .catch({ (error) in\n        Just(-1)\n    })\n    .sink { print(\"\\($0)\") }\n    // Prints: -1\n\n\nBackpressure note: This publisher passes through request and cancel to the upstream. After receiving an error, the publisher sends sends any unfulfilled demand to the new Publisher. SeeAlso: replaceError\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "assign(to:on:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/assign(to:on:)",
        "html": "Parameters\nkeyPath\n\nA key path that indicates the property to assign. See Key-Path Expression in The Swift Programming Language to learn how to use key paths to specify a property of an object.\n\nobject\n\nThe object that contains the property. The subscriber assigns the object\u2019s property every time it receives a new value.\n\nReturn Value\n\nAn AnyCancellable instance. Call cancel() on this instance when you no longer want the publisher to automatically assign the property. Deinitializing this instance will also cancel automatic assignment.\n\nDiscussion\n\nUse the assign(to:on:) subscriber when you want to set a given property each time a publisher produces a value.\n\nIn this example, the assign(to:on:) sets the value of the anInt property on an instance of MyClass:\n\nclass MyClass {\n    var anInt: Int = 0 {\n        didSet {\n            print(\"anInt was set to: \\(anInt)\", terminator: \"; \")\n        }\n    }\n}\n\n\nvar myObject = MyClass()\nlet myRange = (0...2)\ncancellable = myRange.publisher\n    .assign(to: \\.anInt, on: myObject)\n\n\n// Prints: \"anInt was set to: 0; anInt was set to: 1; anInt was set to: 2\"\n\n\nImportant\n\nThe Subscribers.Assign instance created by this operator maintains a strong reference to object, and sets it to nil when the upstream publisher completes (either normally or with an error).\n\nSee Also\nConnecting Simple Subscribers\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "tryAllSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/tryallsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete. The closure may throw an error, in which case the publisher cancels the upstream publisher and fails with the thrown error.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the tryAllSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria in an error-throwing predicate you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes. If the predicate throws an error, the publisher fails and passes the error to its downstream subscriber.\n\nIn the example below, an error-throwing predicate tests if each of an integer array publisher\u2019s elements fall into the targetRange; the predicate throws an error if an element is zero and terminates the stream.\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 10, 5, 0]\n\n\nnumbers.publisher\n    .tryAllSatisfy { anInt in\n        guard anInt != 0 else { throw RangeError() }\n        return targetRange.contains(anInt)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(RangeError())\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate."
    },
    {
        "title": "replaceEmpty(with:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/replaceempty(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher finishes without emitting any elements.\n\nReturn Value\n\nA publisher that replaces an empty stream with the provided output element.\n\nDiscussion\n\nUse replaceEmpty(with:) to provide a replacement element if the upstream publisher finishes without producing any elements.\n\nIn the example below, the empty Double array publisher doesn\u2019t produce any elements, so replaceEmpty(with:) publishes Double.nan and finishes normally.\n\nlet numbers: [Double] = []\ncancellable = numbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints \"(nan)\".\n\n\nConversely, providing a non-empty publisher publishes all elements and the publisher then terminates normally:\n\nlet otherNumbers: [Double] = [1.0, 2.0, 3.0]\ncancellable2 = otherNumbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: 1.0 2.0 3.0\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycontainswhere/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge7/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "prefix(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/prefix(_:)",
        "html": "Parameters\nmaxLength\n\nThe maximum number of elements to republish.\n\nReturn Value\n\nA publisher that publishes up to the specified number of elements.\n\nDiscussion\n\nUse prefix(_:) to limit the number of elements republished to the downstream subscriber.\n\nIn the example below, the prefix(_:) operator limits its output to the first two elements before finishing normally:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .prefix(2)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "merge(with:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/merge(with:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\n\n\n//Prints: \"1 40 90 -1 33 44 2 50 100 -2 33 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/merge(with:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers; it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubE, pubG)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\n\n\n//Prints: \"1 40 90 -1 33 44 54 2 50 100 -2 33 33 54\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/merge(with:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\n\n\n// Prints: \"1 40 90 -1 2 50 100 -2 \"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/merge(with:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:). To combine elements from multiple upstream publishers, use zip(_:_:).\n\nIn this example, as merge(with:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubA.send(2)\npubB.send(50)\npubC.send(100)\n\n\n// Prints: \"1 40 90 2 50 100\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "multicast(subject:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/multicast(subject:)",
        "html": "Parameters\nsubject\n\nA subject to deliver elements to downstream subscribers.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(_:), this method produces a publisher that shares the provided Subject among all the downstream subscribers.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(subject:) operator with a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast(subject: PassthroughSubject<(String, Int), Never>())\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 78))\n// Stream 2 received: (\"First\", 78)\n// Stream 1 received: (\"First\", 78)\n// Random: receive value: ((\"Second\", 98))\n// Stream 2 received: (\"Second\", 98)\n// Stream 1 received: (\"Second\", 98)\n// Random: receive value: ((\"Third\", 61))\n// Stream 2 received: (\"Third\", 61)\n// Stream 1 received: (\"Third\", 61)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "min(by:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/min(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to determine the minimum value in the stream of elements from an upstream publisher using a comparison operation you specify.\n\nThis operator is useful when the value received from the upstream publisher isn\u2019t Comparable.\n\nIn the example below an array publishes enumeration elements representing playing card ranks. The min(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the minimum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .king]\ncancellable = cards.publisher\n    .min {\n        return  $0.rawValue < $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"ace\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-retry-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/retry/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge7/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Merge7<A, B, C, D, E, F, G>, Publishers.Merge7<A, B, C, D, E, F, G>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, E conforms to Publisher, E conforms to Equatable, F conforms to Publisher, F conforms to Equatable, G conforms to Publisher, G conforms to Equatable, A.Failure is B.Failure, A.Output is B.Output, B.Failure is C.Failure, B.Output is C.Output, C.Failure is D.Failure, C.Output is D.Output, D.Failure is E.Failure, D.Output is E.Output, E.Failure is F.Failure, E.Output is F.Output, F.Failure is G.Failure, and F.Output is G.Output."
    },
    {
        "title": "combineLatest(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/combinelatest(_:)",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest(_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To pair elements from multiple publishers, use zip(_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn this example, PassthroughSubject pub1 and also pub2 emit values; as combineLatest(_:) receives input from either upstream publisher, it combines the latest value from each publisher into a tuple and publishes it.\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(3)\npub1.send(45)\npub2.send(22)\n\n\n// Prints:\n//    Result: (2, 2).    // pub1 latest = 2, pub2 latest = 2\n//    Result: (3, 2).    // pub1 latest = 3, pub2 latest = 2\n//    Result: (45, 2).   // pub1 latest = 45, pub2 latest = 2\n//    Result: (45, 22).  // pub1 latest = 45, pub2 latest = 22\n\n\nWhen all upstream publishers finish, this publisher finishes. If an upstream publisher never publishes a value, this publisher never finishes.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "decode(type:decoder:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/decode(type:decoder:)",
        "html": "Parameters\ntype\n\nThe encoded data to decode into a struct that conforms to the Decodable protocol.\n\ndecoder\n\nA decoder that implements the TopLevelDecoder protocol.\n\nReturn Value\n\nA publisher that decodes a given type using a specified decoder and publishes the result.\n\nDiscussion\n\nUse decode(type:decoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to decode data received from a URLSession.DataTaskPublisher or other data source using the Decodable protocol.\n\nIn this example, a PassthroughSubject publishes a JSON string. The JSON decoder parses the string, converting its fields according to the Decodable protocol implemented by Article, and successfully populating a new Article. The Publishers.Decode publisher then publishes the Article to the downstream. If a decoding operation fails, which happens in the case of missing or malformed data in the source JSON string, the stream terminates and passes the error to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Data, Never>()\ncancellable = dataProvider\n    .decode(type: Article.self, decoder: JSONDecoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\")},\n          receiveValue: { print (\"value: \\($0)\") })\n\n\ndataProvider.send(Data(\"{\\\"pubDate\\\":1574273638.575666, \\\"title\\\" : \\\"My First Article\\\", \\\"author\\\" : \\\"Gita Kumar\\\" }\".utf8))\n\n\n// Prints: \".sink() data received Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: 2050-11-20 18:13:58 +0000)\"\n"
    },
    {
        "title": "Publishers.Retry.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/retry/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "dropFirst(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/dropfirst(_:)",
        "html": "Parameters\ncount\n\nThe number of elements to omit. The default is 1.\n\nReturn Value\n\nA publisher that doesn\u2019t republish the first count elements.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the upstream publisher, and republish the remaining elements.\n\nThe example below drops the first five elements from the stream:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncancellable = numbers.publisher\n    .dropFirst(5)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"6 7 8 9 10 \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/combinelatest(_:_:_:)-47ygh",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, combineLatest(_:_:_:) receives input from any of the publishers, combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n//\n// Prints:\n//  Result: (2, 2, 9, 1).\n//  Result: (3, 2, 9, 1).\n//  Result: (3, 12, 9, 1).\n//  Result: (13, 12, 9, 1).\n//  Result: (13, 12, 19, 1).\n\n\nIf any individual publisher of the combined set terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/combinelatest(_:_:)-gkoj",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn this example, three instances of PassthroughSubject emit values; as combineLatest(_:_:) receives input from any of the upstream publishers, it combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: (2, 2, 9).\n//  Result: (3, 2, 9).\n//  Result: (3, 12, 9).\n//  Result: (13, 12, 9).\n//  Result: (13, 12, 19).\n\n\nIf any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/retry/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Retry<Upstream>, Publishers.Retry<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/combinelatest(_:_:_:)-2onsh",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest<P, Q>(_:,_:) to combine the current and two additional publishers and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer. All upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nIn the example below, combineLatest() receives the most-recent values published by three publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3) { firstValue, secondValue, thirdValue in\n        return firstValue * secondValue * thirdValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(10)\n\n\npub.send(9)\npub3.send(4)\npub2.send(12)\n\n\n// Prints:\n//  Result: 40.     // pub = 2, pub2 = 2, pub3 = 10\n//  Result: 180.    // pub = 9, pub2 = 2, pub3 = 10\n//  Result: 72.     // pub = 9, pub2 = 2, pub3 = 4\n//  Result: 432.    // pub = 9, pub2 = 12, pub3 = 4\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "eraseToAnyPublisher()",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/erasetoanypublisher()",
        "html": "Return Value\n\nAn AnyPublisher wrapping this publisher.\n\nDiscussion\n\nUse eraseToAnyPublisher() to expose an instance of AnyPublisher to the downstream subscriber, rather than this publisher\u2019s actual type. This form of type erasure preserves abstraction across API boundaries, such as different modules. When you expose your publishers as the AnyPublisher type, you can change the underlying implementation over time without affecting existing clients.\n\nThe following example shows two types that each have a publisher property. TypeWithSubject exposes this property as its actual type, PassthroughSubject, while TypeWithErasedSubject uses eraseToAnyPublisher() to expose it as an AnyPublisher. As seen in the output, a caller from another module can access TypeWithSubject.publisher as its native type. This means you can\u2019t change your publisher to a different type without breaking the caller. By comparison, TypeWithErasedSubject.publisher appears to callers as an AnyPublisher, so you can change the underlying publisher type at will.\n\npublic class TypeWithSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n}\npublic class TypeWithErasedSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n        .eraseToAnyPublisher()\n}\n\n\n// In another module:\nlet nonErased = TypeWithSubject()\nif let subject = nonErased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast nonErased.publisher.\")\n}\nlet erased = TypeWithErasedSubject()\nif let subject = erased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast erased.publisher.\")\n}\n\n\n// Prints \"Successfully cast nonErased.publisher.\"\n"
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/compactmap(_:)",
        "html": "Parameters\ntransform\n\nA closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of the calling the supplied closure.\n\nDiscussion\n\nCombine\u2019s compactMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/2950916-compactmap in the Swift standard library: the compactMap(_:) operator in Combine removes nil elements in a publisher\u2019s stream and republishes non-nil elements to the downstream subscriber.\n\nThe example below uses a range of numbers as the source for a collection based publisher. The compactMap(_:) operator consumes each element from the numbers publisher attempting to access the dictionary using the element as the key. If the example\u2019s dictionary returns a nil, due to a non-existent key, compactMap(_:) filters out the nil (missing) elements.\n\nlet numbers = (0...5)\nlet romanNumeralDict: [Int : String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ncancellable = numbers.publisher\n    .compactMap { romanNumeralDict[$0] }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"I II III V\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "first()",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/first()",
        "html": "Return Value\n\nA publisher that only publishes the first element of a stream.\n\nDiscussion\n\nUse first() to publish just the first element from an upstream publisher, then finish normally. The first() operator requests unlimited from its upstream as soon as downstream requests at least one element. If the upstream completes before first() receives any elements, it completes without emitting any values.\n\nIn this example, the first() publisher republishes the first element received from the sequence publisher, -10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first()\n    .sink { print(\"\\($0)\") }\n\n\n// Print: \"-10\"\n\nSee Also\nSelecting Specific Elements\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "filter(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/filter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value indicating whether to republish the element.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nCombine\u2019s filter(_:) operator performs an operation similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018365-filter in the Swift Standard Library: it uses a closure to test each element to determine whether to republish the element to the downstream subscriber.\n\nThe following example, uses a filter operation that receives an Int and only republishes a value if it\u2019s even.\n\nlet numbers: [Int] = [1, 2, 3, 4, 5]\ncancellable = numbers.publisher\n    .filter { $0 % 2 == 0 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 4\"\n\nSee Also\nFiltering Elements\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "retries",
        "url": "https://developer.apple.com/documentation/combine/publishers/retry/retries",
        "html": "Discussion\n\nIf nil, this publisher attempts to reconnect with the upstream publisher an unlimited number of times.\n\nSee Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publishers.Retry.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/retry/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/retry/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Retry<Upstream>, Publishers.Retry<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/retry/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet retries: Int?\nThe maximum number of retry attempts to perform."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-trycomparison-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nConnecting Simple Subscribers\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycomparison/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "f",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge6/f",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge."
    },
    {
        "title": "d",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge6/d",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge."
    },
    {
        "title": "e",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge6/e",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet f: F\nA sixth publisher to merge."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycomparison/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet areInIncreasingOrder: (Upstream.Output, Upstream.Output) throws -> Bool\nA closure that receives two elements and returns true if they are in increasing order."
    },
    {
        "title": "init(upstream:areInIncreasingOrder:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycomparison/init(upstream:areinincreasingorder:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives its elements.\n\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they are in increasing order."
    },
    {
        "title": "areInIncreasingOrder",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycomparison/areinincreasingorder",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements."
    },
    {
        "title": "Publishers.Multicast.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/multicast/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "connect()",
        "url": "https://developer.apple.com/documentation/combine/publishers/multicast/connect()",
        "html": "Return Value\n\nA Cancellable instance that you use to cancel publishing."
    },
    {
        "title": "createSubject",
        "url": "https://developer.apple.com/documentation/combine/publishers/multicast/createsubject",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements."
    },
    {
        "title": "autoconnect()",
        "url": "https://developer.apple.com/documentation/combine/publishers/multicast/autoconnect()",
        "html": "Return Value\n\nA publisher which automatically connects to its upstream connectable publisher.\n\nDiscussion\n\nUse autoconnect() to simplify working with ConnectablePublisher instances, such as Timer.TimerPublisher in the Foundation framework.\n\nIn the following example, the publish(every:tolerance:on:in:options:) operator creates a Timer.TimerPublisher, which is a ConnectablePublisher. As a result, subscribers don\u2019t receive any values until after a call to connect(). For convenience when working with a single subscriber, the autoconnect() operator performs the connect() call when attached to by the subscriber.\n\ncancellable = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .sink { date in\n        print (\"Date now: \\(date)\")\n    }\n"
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/flatmap(maxpublishers:_:)-485dz",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify."
    },
    {
        "title": "values",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/values",
        "html": "Discussion\n\nThis property provides an AsyncPublisher, which allows you to use the Swift async-await syntax to receive the publisher\u2019s elements. Because AsyncPublisher conforms to AsyncSequence, you iterate over its elements with a for-await-in loop, rather than attaching a subscriber.\n\nThe following example shows how to use the values property to receive elements asynchronously. The example adapts a code snippet from the filter(_:) operator\u2019s documentation, which filters a sequence to only emit even integers. This example replaces the Subscribers.Sink subscriber with a for-await-in loop that iterates over the AsyncPublisher provided by the values property.\n\nlet numbers: [Int] = [1, 2, 3, 4, 5]\nlet filtered = numbers.publisher\n    .filter { $0 % 2 == 0 }\n\n\nfor await number in filtered.values\n{\n    print(\"\\(number)\", terminator: \" \")\n}\n"
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-multicast-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-trycontainswhere-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nConnecting Simple Subscribers\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "tryLast(where:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/trylast(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse tryLast(where:) when you need to republish the last element that satisfies an error-throwing closure you specify. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a publisher emits the last element that satisfies the error-throwing closure, then finishes normally:\n\nstruct RangeError: Error {}\n\n\nlet numbers = [-62, 1, 6, 10, 9, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .tryLast {\n        guard 0 != 0  else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n// Prints: \"5 completion: finished\"\n// If instead the numbers array had contained a `0`, the `tryLast` operator would terminate publishing with a RangeError.\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/output/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Output<Upstream>, Publishers.Output<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "output(at:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/output(at:)",
        "html": "Parameters\nindex\n\nThe index that indicates the element to publish.\n\nReturn Value\n\nA publisher that publishes a specific indexed element.\n\nDiscussion\n\nUse output(at:) when you need to republish a specific element specified by its position in the stream. If the publisher completes normally or with an error before publishing the specified element, then the publisher doesn\u2019t produce any elements.\n\nIn the example below, the array publisher emits the fifth element in the sequence of published elements:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.publisher\n    .output(at: 5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"6\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "multicast(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/multicast(_:)",
        "html": "Parameters\ncreateSubject\n\nA closure to create a new Subject each time a subscriber attaches to the multicast publisher.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(subject:), this method produces a publisher that creates a separate Subject for each subscriber.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(_:) operator whose closure creates a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast { PassthroughSubject<(String, Int), Never>() }\n\n\ncancellable1 = pub\n   .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n   .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 9))\n// Stream 2 received: (\"First\", 9)\n// Stream 1 received: (\"First\", 9)\n// Random: receive value: ((\"Second\", 46))\n// Stream 2 received: (\"Second\", 46)\n// Stream 1 received: (\"Second\", 46)\n// Random: receive value: ((\"Third\", 26))\n// Stream 2 received: (\"Third\", 26)\n// Stream 1 received: (\"Third\", 26)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/output/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Output<Upstream>, Publishers.Output<Upstream>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Upstream conforms to Publisher and Equatable."
    },
    {
        "title": "tryFirst(where:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/tryfirst(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse tryFirst(where:) when you need to republish only the first element of a stream that satisfies an error-throwing closure you specify. The publisher ignores all elements after the first. If this publisher doesn\u2019t receive any elements, it finishes without publishing. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a range publisher emits the first element in the range then finishes normally:\n\nlet numberRange: ClosedRange<Int> = (-1...50)\nnumberRange.publisher\n    .tryFirst {\n        guard $0 < 99 else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"-1 completion: finished\"\n// If instead the number range were ClosedRange<Int> = (100...200), the tryFirst operator would terminate publishing with a RangeError.\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "tryCompactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/trycompactmap(_:)",
        "html": "Parameters\ntransform\n\nAn error-throwing closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of calling the supplied closure.\n\nDiscussion\n\nUse tryCompactMap(_:) to remove nil elements from a publisher\u2019s stream based on an error-throwing closure you provide. If the closure throws an error, the publisher cancels the upstream publisher and sends the thrown error to the downstream subscriber as a Failure.\n\nThe following example uses an array of numbers as the source for a collection-based publisher. A tryCompactMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform the numbers from its Arabic to Roman numerals, as an optional String.\n\nIf the closure called by tryCompactMap(_:) fails to look up a Roman numeral, it returns the optional String (unknown).\n\nIf the closure called by tryCompactMap(_:) determines the input is 0, it throws an error. The tryCompactMap(_:) operator catches this error and stops publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from: Int) throws -> String? {\n    let romanNumeralDict: [Int : String] =\n        [1: \"I\", 2: \"II\", 3: \"III\", 4: \"IV\", 5: \"V\"]\n    guard from != 0 else { throw ParseError() }\n    return romanNumeralDict[from]\n}\nlet numbers = [6, 5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryCompactMap { try romanNumeral(from: $0) }\n    .sink(\n          receiveCompletion: { print (\"\\($0)\") },\n          receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"(Unknown) V IV III II I failure(ParseError())\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "Publishers.Merge7.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge7/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "init(_:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge7/init(_:_:_:_:_:_:_:)",
        "html": "Parameters\na\n\nA publisher to merge\n\nb\n\nA second publisher to merge.\n\nc\n\nA third publisher to merge.\n\nd\n\nA fourth publisher to merge.\n\ne\n\nA fifth publisher to merge.\n\nf\n\nA sixth publisher to merge.\n\ng\n\nAn seventh publisher to merge."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-merge7-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<P>(with: P) -> Publishers.Merge8<A, B, C, D, E, F, G, P>\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "predicate",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycontainswhere/predicate",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "init(upstream:predicate:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycontainswhere/init(upstream:predicate:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\npredicate\n\nThe error-throwing closure that determines whether this publisher should emit a Boolean true element."
    },
    {
        "title": "ConnectablePublisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/multicast/connectablepublisher-implementations",
        "html": "Topics\nInstance Methods\nfunc autoconnect() -> Publishers.Autoconnect<Self>\nAutomates the process of connecting or disconnecting from this connectable publisher."
    },
    {
        "title": "g",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge7/g",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge."
    },
    {
        "title": "b",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge7/b",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge.\nlet g: G\nAn seventh publisher to merge."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge7/==(_:_:)",
        "html": "Parameters\nlhs\n\nA merging publisher to compare for equality.\n\nrhs\n\nAnother merging publisher to compare for equality.\n\nReturn Value\n\ntrue if the two merging publishers have equal source publishers; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "e",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge7/e",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet f: F\nA sixth publisher to merge.\nlet g: G\nAn seventh publisher to merge."
    },
    {
        "title": "d",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge7/d",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge.\nlet g: G\nAn seventh publisher to merge."
    },
    {
        "title": "f",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge7/f",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge.\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet g: G\nAn seventh publisher to merge."
    },
    {
        "title": "init(upstream:range:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/output/init(upstream:range:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives its elements.\n\nrange\n\nThe range of elements to publish."
    },
    {
        "title": "range",
        "url": "https://developer.apple.com/documentation/combine/publishers/output/range",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives its elements."
    },
    {
        "title": "Publishers.Output.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/output/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "collect(_:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/collect(_:)",
        "html": "Parameters\ncount\n\nThe maximum number of received elements to buffer before publishing.\n\nReturn Value\n\nA publisher that collects up to the specified number of elements, and then publishes them as an array.\n\nDiscussion\n\nUse collect(_:) to emit arrays of at most count elements from an upstream publisher. If the upstream publisher finishes before collecting the specified number of elements, the publisher sends an array of only the items it received. This may be fewer than count elements.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nIn the example below, the collect(_:) operator emits one partial and two full arrays based on the requested collection size of 5:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect(5)\n    .sink { print(\"\\($0), terminator: \" \"\") }\n\n\n// Prints \"[0, 1, 2, 3, 4] [5, 6, 7, 8, 9] [10] \"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "collect()",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/collect()",
        "html": "Return Value\n\nA publisher that collects all received items and returns them as an array upon completion.\n\nDiscussion\n\nUse collect() to gather elements into an array that the operator emits after the upstream publisher finishes.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThis publisher requests an unlimited number of elements from the upstream publisher and uses an unbounded amount of memory to store the received values. The publisher may exert memory pressure on the system for very large sets of elements.\n\nThe collect() operator only sends the collected array to its downstream receiver after a request whose demand is greater than 0 items. Otherwise, collect() waits until it receives a non-zero request.\n\nIn the example below, an Integer range is a publisher that emits an array of integers:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\nSee Also\nReducing Elements\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "Publishers.Output.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/output/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "drop(while:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/drop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an upstream publisher until the element received meets a condition you specify.\n\nIn the example below, the operator omits all elements in the stream until the first element arrives that\u2019s a positive integer, after which the operator publishes all remaining elements:\n\nlet numbers = [-62, -1, 0, 10, 0, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .drop { $0 <= 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10 0, 22 41 -1 5\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/output/==(_:_:)",
        "html": "Parameters\nlhs\n\nAn Output publisher to compare for equality.\n\nrhs\n\nAnother Output publisher to compare for equality.\n\nReturn Value\n\ntrue if the publishers have equal upstream and range properties; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "collect(_:options:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/collect(_:options:)",
        "html": "Parameters\nstrategy\n\nThe timing group strategy used by the operator to collect and publish elements.\n\noptions\n\nScheduler options to use for the strategy.\n\nReturn Value\n\nA publisher that collects elements by a given strategy, and emits a single array of the collection.\n\nDiscussion\n\nUse collect(_:options:) to emit arrays of elements on a schedule specified by a Scheduler and Stride that you provide. At the end of each scheduled interval, the publisher sends an array that contains the items it collected. If the upstream publisher finishes before filling the buffer, the publisher sends an array that contains items it received. This may be fewer than the number of elements specified in the requested Stride.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThe example above collects timestamps generated on a one-second Timer in groups (Stride) of five.\n\nlet sub = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .collect(.byTime(RunLoop.main, .seconds(5)))\n    .sink { print(\"\\($0)\", terminator: \"\\n\\n\") }\n\n\n// Prints: \"[2020-01-24 00:54:46 +0000, 2020-01-24 00:54:47 +0000,\n//          2020-01-24 00:54:48 +0000, 2020-01-24 00:54:49 +0000,\n//          2020-01-24 00:54:50 +0000]\"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "count()",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/count()",
        "html": "Return Value\n\nA publisher that consumes all elements until the upstream publisher finishes, then emits a single value with the total number of elements received.\n\nDiscussion\n\nUse count() to determine the number of elements received from the upstream publisher before it completes:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .count()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"11\"\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "contains(where:)",
        "url": "https://developer.apple.com/documentation/combine/observableobjectpublisher/contains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(where:) to find the first element in an upstream that satisfies the closure you provide. This operator consumes elements produced from the upstream publisher until the upstream publisher produces a matching element.\n\nThis operator is useful when the upstream publisher produces elements that don\u2019t conform to Equatable.\n\nIn the example below, the contains(where:) operator tests elements against the supplied closure and emits true for the first elements that\u2019s greater than 4, and then finishes normally.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .contains {$0 > 4}\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "init(upstream:retries:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/retry/init(upstream:retries:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives its elements.\n\nretries\n\nThe maximum number of retry attempts to perform. If nil, this publisher attempts to reconnect with the upstream publisher an unlimited number of times."
    },
    {
        "title": "a",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge6/a",
        "html": "See Also\nInspecting Publisher Properties\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/output/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-output-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/sequence/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Sequence<Elements, Failure>, Publishers.Sequence<Elements, Failure>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Elements conforms to Equatable, Elements conforms to Sequence, and Failure conforms to Error."
    },
    {
        "title": "receive(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/receive(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler the publisher uses for element delivery.\n\noptions\n\nScheduler options used to customize element delivery.\n\nReturn Value\n\nA publisher that delivers elements using the specified scheduler.\n\nDiscussion\n\nYou use the receive(on:options:) operator to receive results and completion on a specific scheduler, such as performing UI work on the main run loop. In contrast with subscribe(on:options:), which affects upstream messages, receive(on:options:) changes the execution context of downstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes jsonPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes labelUpdater to receive elements and completion on RunLoop.main.\n\nlet jsonPublisher = MyJSONLoaderPublisher() // Some publisher.\nlet labelUpdater = MyLabelUpdateSubscriber() // Some subscriber that updates the UI.\n\n\njsonPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(labelUpdater)\n\n\nPrefer receive(on:options:) over explicit use of dispatch queues when performing work in subscribers. For example, instead of the following pattern:\n\npub.sink {\n    DispatchQueue.main.async {\n        // Do something.\n    }\n}\n\n\nUse this pattern instead:\n\npub.receive(on: DispatchQueue.main).sink {\n    // Do something.\n}\n\n\nNote\n\nreceive(on:options:) doesn\u2019t affect the scheduler used to call the subscriber\u2019s receive(subscription:) method.\n\nSee Also\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations."
    },
    {
        "title": "print(_:to:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/print(_:to:)",
        "html": "Parameters\nprefix\n\nA string \u2014- which defaults to empty -\u2014 with which to prefix all log messages.\n\nstream\n\nA stream for text output that receives messages, and which directs output to the console by default. A custom stream can be used to log messages to other destinations.\n\nReturn Value\n\nA publisher that prints log messages for all publishing events.\n\nDiscussion\n\nUse print(_:to:) to log messages the console.\n\nIn the example below, log messages are printed on the console:\n\nlet integers = (1...2)\ncancellable = integers.publisher\n   .print(\"Logged a message\", to: nil)\n   .sink { _ in }\n\n\n// Prints:\n//  Logged a message: receive subscription: (1..<2)\n//  Logged a message: request unlimited\n//  Logged a message: receive value: (1)\n//  Logged a message: receive finished\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/zip(_:_:_:)-3htt3",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from three upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from two other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject that emit values; zip(_:_:_:) receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(letters, emoji) { anInt, aLetter, anEmoji in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt))\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:        emojiPub:            zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"    emojiPub:\"\ud83d\ude00\"        zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:        emojiPub:\"\ud83d\ude00\", \"\ud83e\udd70\"  zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n\n\n// Prints:\n// \ud83d\ude00 A\n// \ud83e\udd70\ud83e\udd70 BB\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/zip(_:_:)-2jj3l",
        "html": "Parameters\nother\n\nAnother publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from two upstream publishers.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two publishers using a transformation you specify to publish a new value to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, PassthroughSubject instances numbersPub and lettersPub emit values; zip(_:_:) receives the oldest value from each publisher, uses the Int from numbersPub and publishes a string that repeats the String from lettersPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\ncancellable = numbersPub\n    .zip(lettersPub) { anInt, aLetter in\n        String(repeating: aLetter, count: anInt)\n    }\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:       zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:       zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:       zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"   zip output: \"A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"   zip output: \"BB\"\n// Prints:\n//  A\n//  BB\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/zip(_:_:_:)-1itsc",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from three other publishers to publish a tuple to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, several PassthroughSubject instances emit values; zip(_:_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\nlet fractionsPub  = PassthroughSubject<Double, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 2,3     lettersPub: \"A\"    emojiPub: \"\ud83d\ude00\"  fractionsPub: 0.1     zip output: (1, \"A\", \"\ud83d\ude00\", 0.1)\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: (2, \"B\", \"\ud83e\udd70\", 0.8)\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\", 0.1)\n//  (2, \"B\", \"\ud83e\udd70\", 0.8)\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "zip(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/zip(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from four upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:_:) to return a new publisher that combines the elements from three other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, the PassthroughSubject publishers, numbersPub, fractionsPub, lettersPub, and emojiPub emit values. The zip(_:_:_:_:) operator receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times and prints out the value in fractionsPub.\n\nlet numbersPub = PassthroughSubject<Int, Never>()      // first publisher\nlet lettersPub = PassthroughSubject<String, Never>()   // second\nlet emojiPub = PassthroughSubject<String, Never>()     // third\nlet fractionsPub  = PassthroughSubject<Double, Never>()// fourth\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub) { anInt, aLetter, anEmoji, aFraction  in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt)) \\(aFraction)\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:          emojiPub:          zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:\"\ud83d\ude00\"      zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"      emojiPub:          zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"      emojiPub:          zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n// Prints:\n//1 \ud83d\ude00 A 0.1\n//2 \ud83e\udd70\ud83e\udd70 BB 0.8\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/zip(_:_:)-1adwv",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two additional publishers to publish a tuple to the downstream. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject; zip(_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:          emojiPub:        zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"      emojiPub: \"\ud83d\ude00\"   zip output: (1, \"A\", \"\ud83d\ude00\")\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:          emojiPub:        zip output: (2, \"B\", \"\ud83e\udd70\")\n\n\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\")\n//  (2, \"B\", \"\ud83e\udd70\")\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "zip(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/zip(_:)",
        "html": "Parameters\nother\n\nAnother publisher.\n\nReturn Value\n\nA publisher that emits pairs of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:) to combine the latest elements from two publishers and emit a tuple to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together as a tuple to the subscriber.\n\nMuch like a zipper or zip fastener on a piece of clothing pulls together rows of teeth to link the two sides, zip(_:) combines streams from two different publishers by linking pairs of elements from each side.\n\nIn this example, numbers and letters are PassthroughSubjects that emit values; once zip(_:) receives one value from each, it publishes the pair as a tuple to the downstream subscriber. It then waits for the next pair of values.\n\n let numbersPub = PassthroughSubject<Int, Never>()\n let lettersPub = PassthroughSubject<String, Never>()\n\n\n cancellable = numbersPub\n     .zip(lettersPub)\n     .sink { print(\"\\($0)\") }\n numbersPub.send(1)    // numbersPub: 1      lettersPub:        zip output: <none>\n numbersPub.send(2)    // numbersPub: 1,2    lettersPub:        zip output: <none>\n letters.send(\"A\")     // numbers: 1,2       letters:\"A\"        zip output: <none>\n numbers.send(3)       // numbers: 1,2,3     letters:           zip output: (1,\"A\")\n letters.send(\"B\")     // numbers: 1,2,3     letters: \"B\"       zip output: (2,\"B\")\n\n\n // Prints:\n //  (1, \"A\")\n //  (2, \"B\")\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "tryReduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/tryreduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nAn error-throwing closure that takes the previously-accumulated value and the next element from the upstream publisher to produce a new value.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes.\n\nDiscussion\n\nUse tryReduce(_:_:) to collect a stream of elements and produce an accumulated value based on an error-throwing closure you provide. If the closure throws an error, the publisher fails and passes the error to its subscriber.\n\nIn the example below, the publisher\u2019s 0 element causes the myDivide(_:_:) function to throw an error and publish the doc://com.apple.documentation/documentation/Swift/Double/1641611-nan result:\n\nstruct DivisionByZeroError: Error {}\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n    guard divisor != 0 else { throw DivisionByZeroError() }\n    return dividend / divisor\n}\n\n\nvar numbers: [Double] = [5, 4, 3, 2, 1, 0]\nnumbers.publisher\n    .tryReduce(numbers.first!, { accum, next in try myDivide(accum, next) })\n    .catch({ _ in Just(Double.nan) })\n    .sink { print(\"\\($0)\") }\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "tryScan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/tryscan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse tryScan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value. If your accumulator closure throws an error, the publisher terminates with the error.\n\nIn the example below, tryScan(_:_:) calls a division function on elements of a collection publisher. The Publishers.TryScan publisher publishes each result until the function encounters a DivisionByZeroError, which terminates the publisher.\n\nstruct DivisionByZeroError: Error {}\n\n\n/// A function that throws a DivisionByZeroError if `current` provided by the TryScan publisher is zero.\nfunc myThrowingFunction(_ lastValue: Int, _ currentValue: Int) throws -> Int {\n    guard currentValue != 0 else { throw DivisionByZeroError() }\n    return (lastValue + currentValue) / currentValue\n }\n\n\nlet numbers = [1,2,3,4,5,0,6,7,8,9]\ncancellable = numbers.publisher\n    .tryScan(10) { try myThrowingFunction($0, $1) }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"11 6 3 1 1 -1 failure(DivisionByZeroError())\".\n\n\nIf the closure throws an error, the publisher fails with the error.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "tryMax(by:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/trymax(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMax(by:) to determine the maximum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMax(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\ncancellable = numbers.publisher\n    .tryMax { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first > second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: completion: failure(IllegalValueError())\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "tryMin(by:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/trymin(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMin(by:) to determine the minimum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMin(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\nnumbers.publisher\n    .tryMin { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first < second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/multicast/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "tryPrefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/tryprefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value indicating whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate throws or indicates publishing should finish.\n\nDiscussion\n\nUse tryPrefix(while:) to emit values from the upstream publisher that meet a condition you specify in an error-throwing closure. The publisher finishes when the closure returns false. If the closure throws an error, the publisher fails with that error.\n\nstruct OutOfRangeError: Error {}\n\n\nlet numbers = (0...10).reversed()\ncancellable = numbers.publisher\n    .tryPrefix {\n        guard $0 != 0 else {throw OutOfRangeError()}\n        return $0 <= numbers.max()!\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"10 9 8 7 6 5 4 3 2 1 completion: failure(OutOfRangeError()) \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "timeout(_:scheduler:options:customError:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/timeout(_:scheduler:options:customerror:)",
        "html": "Parameters\ninterval\n\nThe maximum time interval the publisher can go without emitting an element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to deliver events.\n\noptions\n\nScheduler options that customize the delivery of elements.\n\ncustomError\n\nA closure that executes if the publisher times out. The publisher sends the failure returned by this closure to the subscriber as the reason for termination.\n\nReturn Value\n\nA publisher that terminates if the specified interval elapses with no events received from the upstream publisher.\n\nDiscussion\n\nUse timeout(_:scheduler:options:customError:) to terminate a publisher if an element isn\u2019t delivered within a timeout interval you specify.\n\nIn the example below, a PassthroughSubject publishes String elements and is configured to time out if no new elements are received within its TIME_OUT window of 5 seconds. A single value is published after the specified 2-second WAIT_TIME, after which no more elements are available; the publisher then times out and completes normally.\n\nvar WAIT_TIME : Int = 2\nvar TIMEOUT_TIME : Int = 5\n\n\nlet subject = PassthroughSubject<String, Never>()\nlet cancellable = subject\n    .timeout(.seconds(TIMEOUT_TIME), scheduler: DispatchQueue.main, options: nil, customError:nil)\n    .sink(\n          receiveCompletion: { print (\"completion: \\($0) at \\(Date())\") },\n          receiveValue: { print (\"value: \\($0) at \\(Date())\") }\n     )\n\n\nDispatchQueue.main.asyncAfter(deadline: .now() + .seconds(WAIT_TIME),\n                              execute: { subject.send(\"Some data - sent after a delay of \\(WAIT_TIME) seconds\") } )\n\n\n// Prints: value: Some data - sent after a delay of 2 seconds at 2020-03-10 23:47:59 +0000\n//         completion: finished at 2020-03-10 23:48:04 +0000\n\n\nIf customError is nil, the publisher completes normally; if you provide a closure for the customError argument, the upstream publisher is instead terminated upon timeout, and the error is delivered to the downstream.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval."
    },
    {
        "title": "tryDrop(while:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/trydrop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false, and then republishes all remaining elements. If the predicate closure throws, the publisher fails with an error.\n\nDiscussion\n\nUse tryDrop(while:) to omit elements from an upstream until an error-throwing closure you provide returns false, after which the remaining items in the stream are published. If the closure throws, no elements are emitted and the publisher fails with an error.\n\nIn the example below, elements are ignored until -1 is encountered in the stream and the closure returns false. The publisher then republishes the remaining elements and finishes normally. Conversely, if the guard value in the closure had been encountered, the closure would throw and the publisher would fail with an error.\n\nstruct RangeError: Error {}\nvar numbers = [1, 2, 3, 4, 5, 6, -1, 7, 8, 9, 10]\nlet range: CountableClosedRange<Int> = (1...100)\ncancellable = numbers.publisher\n    .tryDrop {\n        guard $0 != 0 else { throw RangeError() }\n        return range.contains($0)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"-1 7 8 9 10 completion: finished\"\n// If instead numbers was [1, 2, 3, 4, 5, 6, 0, -1, 7, 8, 9, 10], tryDrop(while:) would fail with a RangeError.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryFilter(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/tryfilter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value that indicated whether to republish the element or throws an error.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nUse tryFilter(_:) to filter elements evaluated in an error-throwing closure. If the isIncluded closure throws an error, the publisher fails with that error.\n\nIn the example below, tryFilter(_:) checks to see if the element provided by the publisher is zero, and throws a ZeroError before terminating the publisher with the thrown error. Otherwise, it republishes the element only if it\u2019s even:\n\nstruct ZeroError: Error {}\n\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\ncancellable = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"2 4 failure(DivisionByZeroError())\".\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "switchToLatest()",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/switchtolatest()",
        "html": "Discussion\n\nThis operator works with an upstream publisher of publishers, flattening the stream of elements to appear as if they were coming from a single stream of elements. It switches the inner publisher as new ones arrive but keeps the outer publisher constant for downstream subscribers.\n\nWhen this operator receives a new publisher from the upstream publisher, it cancels its previous subscription. Use this feature to prevent earlier publishers from performing unnecessary work, such as creating network request publishers from frequently updating user interface publishers.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify."
    },
    {
        "title": "subscribe(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/subscribe(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler used to send messages to upstream publishers.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher which performs upstream operations on the specified scheduler.\n\nDiscussion\n\nIn contrast with receive(on:options:), which affects downstream messages, subscribe(on:options:) changes the execution context of upstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes ioPerformingPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes uiUpdatingSubscriber to receive elements and completion on RunLoop.main.\n\nlet ioPerformingPublisher == // Some publisher.\nlet uiUpdatingSubscriber == // Some subscriber that updates the UI.\n\n\nioPerformingPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(uiUpdatingSubscriber)\n\n\nUsing subscribe(on:options:) also causes the upstream publisher to perform cancel() using the specfied scheduler.\n\nSee Also\nSpecifying Schedulers\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher."
    },
    {
        "title": "throttle(for:scheduler:latest:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/throttle(for:scheduler:latest:)",
        "html": "Parameters\ninterval\n\nThe interval at which to find and emit either the most recent or the first element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to publish elements.\n\nlatest\n\nA Boolean value that indicates whether to publish the most recent element. If false, the publisher emits the first element received during the interval.\n\nReturn Value\n\nA publisher that emits either the most-recent or first element received during the specified interval.\n\nDiscussion\n\nUse throttle(for:scheduler:latest:) to selectively republish elements from an upstream publisher during an interval you specify. Other elements received from the upstream in the throttling interval aren\u2019t republished.\n\nIn the example below, a Timer.TimerPublisher produces elements on one-second intervals; the throttle(for:scheduler:latest:) operator delivers the first event, then republishes only the latest event in the following ten second intervals:\n\ncancellable = Timer.publish(every: 3.0, on: .main, in: .default)\n    .autoconnect()\n    .print(\"\\(Date().description)\")\n    .throttle(for: 10.0, scheduler: RunLoop.main, latest: true)\n    .sink(\n        receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print(\"Received Timestamp \\($0).\") }\n     )\n\n\n// Prints:\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:26:57 +0000)\n //    Received Timestamp 2020-03-19 18:26:57 +0000.\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:00 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:03 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:06 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:09 +0000)\n //    Received Timestamp 2020-03-19 18:27:09 +0000.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "tryAllSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/tryallsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete. The closure may throw an error, in which case the publisher cancels the upstream publisher and fails with the thrown error.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the tryAllSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria in an error-throwing predicate you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes. If the predicate throws an error, the publisher fails and passes the error to its downstream subscriber.\n\nIn the example below, an error-throwing predicate tests if each of an integer array publisher\u2019s elements fall into the targetRange; the predicate throws an error if an element is zero and terminates the stream.\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 10, 5, 0]\n\n\nnumbers.publisher\n    .tryAllSatisfy { anInt in\n        guard anInt != 0 else { throw RangeError() }\n        return targetRange.contains(anInt)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(RangeError())\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate."
    },
    {
        "title": "sink(receiveCompletion:receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/sink(receivecompletion:receivevalue:)",
        "html": "Parameters\nreceiveComplete\n\nThe closure to execute on completion.\n\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveCompletion:receiveValue:) to observe values received by the publisher and process them using a closure you specify.\n\nIn this example, a Range publisher publishes integers to a sink(receiveCompletion:receiveValue:) operator\u2019s receiveValue closure that prints them to the console. Upon completion the sink(receiveCompletion:receiveValue:) operator\u2019s receiveCompletion closure indicates the successful termination of the stream.\n\nlet myRange = (0...3)\ncancellable = myRange.publisher\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0)\") })\n\n\n// Prints:\n//  value: 0\n//  value: 1\n//  value: 2\n//  value: 3\n//  completion: finished\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "sink(receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/sink(receivevalue:)",
        "html": "Parameters\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveValue:) to observe values received by the publisher and print them to the console. This operator can only be used when the stream doesn\u2019t fail, that is, when the publisher\u2019s Failure type is Never.\n\nIn this example, a Range publisher publishes integers to a sink(receiveValue:) operator\u2019s receiveValue closure that prints them to the console:\n\nlet integers = (0...3)\nintegers.publisher\n    .sink { print(\"Received \\($0)\") }\n\n\n// Prints:\n//  Received 0\n//  Received 1\n//  Received 2\n//  Received 3\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior."
    },
    {
        "title": "Publishers.Merge7.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge7/output",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "a",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge7/a",
        "html": "See Also\nInspecting Publisher Properties\nlet b: B\nA second publisher to merge.\nlet c: C\nA third publisher to merge.\nlet d: D\nA fourth publisher to merge.\nlet e: E\nA fifth publisher to merge.\nlet f: F\nA sixth publisher to merge.\nlet g: G\nAn seventh publisher to merge."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/subscribe(_:)-3um57",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this publisher. After attaching, the subscriber can start to receive values.\n\nDiscussion\n\nAlways call this function instead of receive(subscriber:). Adopters of Publisher must implement receive(subscriber:). The implementation of subscribe(_:) provided by Publisher calls through to receive(subscriber:).\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nAvailable when Failure conforms to Error.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "Publishers.TryContainsWhere.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycontainswhere/output",
        "html": "Discussion\n\nThis publisher produces Boolean elements.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/subscribe(_:)-3enm5",
        "html": "Parameters\nsubject\n\nThe subject to attach to this publisher.\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nAvailable when Failure conforms to Error.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher."
    },
    {
        "title": "Publishers.TryContainsWhere.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycontainswhere/failure",
        "html": "Discussion\n\nThis publisher produces the Swift Error type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/trycontainswhere/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet predicate: (Upstream.Output) throws -> Bool\nThe error-throwing closure that determines whether this publisher should emit a Boolean true element."
    },
    {
        "title": "setFailureType(to:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/setfailuretype(to:)",
        "html": "Parameters\nfailureType\n\nThe Failure type presented by this publisher.\n\nReturn Value\n\nA publisher that appears to send the specified failure type.\n\nDiscussion\n\nUse setFailureType(to:) when you need set the error type of a publisher that cannot fail.\n\nConversely, if the upstream can fail, you would use mapError(_:) to provide instructions on converting the error types to needed by the downstream publisher\u2019s inputs.\n\nThe following example has two publishers with mismatched error types: pub1\u2019s error type is Never, and pub2\u2019s error type is Error. Because of the mismatch, the combineLatest(_:) operator requires that pub1 use setFailureType(to:) to make it appear that pub1 can produce the Error type, like pub2 can.\n\nlet pub1 = [0, 1, 2, 3, 4, 5].publisher\nlet pub2 = CurrentValueSubject<Int, Error>(0)\nlet cancellable = pub1\n    .setFailureType(to: Error.self)\n    .combineLatest(pub2)\n    .sink(\n        receiveCompletion: { print (\"completed: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\")}\n     )\n\n\n// Prints: \"value: (5, 0)\".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge7/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Merge7<A, B, C, D, E, F, G>, Publishers.Merge7<A, B, C, D, E, F, G>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, E conforms to Publisher, E conforms to Equatable, F conforms to Publisher, F conforms to Equatable, G conforms to Publisher, G conforms to Equatable, A.Failure is B.Failure, A.Output is B.Output, B.Failure is C.Failure, B.Output is C.Output, C.Failure is D.Failure, C.Output is D.Output, D.Failure is E.Failure, D.Output is E.Output, E.Failure is F.Failure, E.Output is F.Output, F.Failure is G.Failure, and F.Output is G.Output."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/output/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet range: CountableRange<Int>\nThe range of elements to publish."
    },
    {
        "title": "min()",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/min()",
        "html": "Return Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to find the minimum value in a stream of elements from an upstream publisher.\n\nIn the example below, the min(by:) operator emits a value when the publisher finishes, that value is the minimum of the values received from upstream, which is -1.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .min()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"-1\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/sequence/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "retry(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/retry(_:)",
        "html": "Parameters\nretries\n\nThe number of times to attempt to recreate the subscription.\n\nReturn Value\n\nA publisher that attempts to recreate its subscription to a failed upstream publisher.\n\nDiscussion\n\nUse retry(_:) to try a connecting to an upstream publisher after a failed connection attempt.\n\nIn the example below, a URLSession.DataTaskPublisher attempts to connect to a remote URL. If the connection attempt succeeds, it publishes the remote service\u2019s HTML to the downstream publisher and completes normally. Otherwise, the retry operator attempts to reestablish the connection. If after three attempts the publisher still can\u2019t connect to the remote URL, the catch(_:) operator replaces the error with a new publisher that publishes a \u201cconnection timed out\u201d HTML page. After the downstream subscriber receives the timed out message, the stream completes normally.\n\nstruct WebSiteData: Codable {\n    var rawHTML: String\n}\n\n\nlet myURL = URL(string: \"https://www.example.com\")\n\n\ncancellable = URLSession.shared.dataTaskPublisher(for: myURL!)\n    .retry(3)\n    .map({ (page) -> WebSiteData in\n        return WebSiteData(rawHTML: String(decoding: page.data, as: UTF8.self))\n    })\n    .catch { error in\n        return Just(WebSiteData(rawHTML: \"<HTML>Unable to load page - timed out.</HTML>\"))\n}\n.sink(receiveCompletion: { print (\"completion: \\($0)\") },\n      receiveValue: { print (\"value: \\($0)\") }\n )\n\n\n// Prints: The HTML content from the remote URL upon a successful connection,\n//         or returns \"<HTML>Unable to load page - timed out.</HTML>\" if the number of retries exceeds the specified value.\n\n\nAfter exceeding the specified number of retries, the publisher passes the failure to the downstream receiver.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error."
    },
    {
        "title": "replaceError(with:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/replaceerror(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher fails.\n\nReturn Value\n\nA publisher that replaces an error from the upstream publisher with the provided output element.\n\nDiscussion\n\nIf the upstream publisher fails with an error, this publisher emits the provided element, then finishes normally.\n\nIn the example below, a publisher of strings fails with a MyError instance, which sends a failure completion downstream. The replaceError(with:) operator handles the failure by publishing the string (replacement element) and completing normally.\n\nstruct MyError: Error {}\nlet fail = Fail<String, MyError>(error: MyError())\ncancellable = fail\n    .replaceError(with: \"(replacement element)\")\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"(replacement element) finished\".\n\n\nThis replaceError(with:) functionality is useful when you want to handle an error by sending a single replacement element and end the stream. Use catch(_:) to recover from an error and provide a replacement publisher to continue providing elements to the downstream subscriber.\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element."
    },
    {
        "title": "replaceEmpty(with:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/replaceempty(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher finishes without emitting any elements.\n\nReturn Value\n\nA publisher that replaces an empty stream with the provided output element.\n\nDiscussion\n\nUse replaceEmpty(with:) to provide a replacement element if the upstream publisher finishes without producing any elements.\n\nIn the example below, the empty Double array publisher doesn\u2019t produce any elements, so replaceEmpty(with:) publishes Double.nan and finishes normally.\n\nlet numbers: [Double] = []\ncancellable = numbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints \"(nan)\".\n\n\nConversely, providing a non-empty publisher publishes all elements and the publisher then terminates normally:\n\nlet otherNumbers: [Double] = [1.0, 2.0, 3.0]\ncancellable2 = otherNumbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: 1.0 2.0 3.0\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "removeDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/removeduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of the current and previously published elements using a closure you provide.\n\nUse the removeDuplicates(by:) operator when comparing types that don\u2019t themselves implement Equatable, or if you need to compare values differently than the type\u2019s Equatable implementation.\n\nIn the example below, the removeDuplicates(by:) functionality triggers when the x property of the current and previous elements are equal, otherwise the operator publishes the current Point to the downstream subscriber:\n\nstruct Point {\n    let x: Int\n    let y: Int\n}\n\n\nlet points = [Point(x: 0, y: 0), Point(x: 0, y: 1),\n              Point(x: 1, y: 1), Point(x: 2, y: 1)]\ncancellable = points.publisher\n    .removeDuplicates { prev, current in\n        // Considers points to be duplicate if the x coordinate\n        // is equal, and ignores the y coordinate\n        prev.x == current.x\n    }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: Point(x: 0, y: 0) Point(x: 1, y: 1) Point(x: 2, y: 1)\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "replaceNil(with:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/replacenil(with:)",
        "html": "Parameters\noutput\n\nThe element to use when replacing nil.\n\nReturn Value\n\nA publisher that replaces nil elements from the upstream publisher with the provided element.\n\nDiscussion\n\nThe replaceNil(with:) operator enables replacement of nil values in a stream with a substitute value. In the example below, a collection publisher contains a nil value. The replaceNil(with:) operator replaces this with 0.0.\n\nlet numbers: [Double?] = [1.0, 2.0, nil, 3.0]\nnumbers.publisher\n    .replaceNil(with: 0.0)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"Optional(1.0) Optional(2.0) Optional(0.0) Optional(3.0)\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "prepend(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/prepend(_:)",
        "html": "Parameters\nelements\n\nThe elements to publish before this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that prefixes the specified elements prior to this publisher\u2019s elements.\n\nDiscussion\n\nUse prepend(_:) when you need to prepend specific elements before the output of a publisher.\n\nIn the example below, the prepend(_:) operator publishes the provided elements before republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .prepend(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 255 0 1 2 3 4 5 6 7 8 9 10\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "prefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/prefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate indicates publishing should finish.\n\nDiscussion\n\nUse prefix(while:) to emit values while elements from the upstream publisher meet a condition you specify. The publisher finishes when the closure returns false.\n\nIn the example below, the prefix(while:) operator emits values while the element it receives is less than five:\n\nlet numbers = (0...10)\nnumbers.publisher\n    .prefix { $0 < 5 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "prefix(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/prefix(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA second publisher.\n\nReturn Value\n\nA publisher that republishes elements until the second publisher publishes an element.\n\nDiscussion\n\nAfter the second publisher publishes an element, the publisher returned by this method finishes.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue."
    },
    {
        "title": "prefix(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/prefix(_:)",
        "html": "Parameters\nmaxLength\n\nThe maximum number of elements to republish.\n\nReturn Value\n\nA publisher that publishes up to the specified number of elements.\n\nDiscussion\n\nUse prefix(_:) to limit the number of elements republished to the downstream subscriber.\n\nIn the example below, the prefix(_:) operator limits its output to the first two elements before finishing normally:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .prefix(2)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "output(in:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/output(in:)",
        "html": "Parameters\nrange\n\nA range that indicates which elements to publish.\n\nReturn Value\n\nA publisher that publishes elements specified by a range.\n\nDiscussion\n\nUse output(in:) to republish a range indices you specify in the published stream. After publishing all elements, the publisher finishes normally. If the publisher completes normally or with an error before producing all the elements in the range, it doesn\u2019t publish the remaining elements.\n\nIn the example below, an array publisher emits the subset of elements at the indices in the specified range:\n\nlet numbers = [1, 1, 2, 2, 2, 3, 4, 5, 6]\nnumbers.publisher\n    .output(in: (3...5))\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 2 3\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements."
    },
    {
        "title": "values",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/values",
        "html": "Discussion\n\nThis property provides an AsyncThrowingPublisher, which allows you to use the Swift async-await syntax to receive the publisher\u2019s elements. Because AsyncPublisher conforms to AsyncSequence, you iterate over its elements with a for-await-in loop, rather than attaching a subscriber. If the publisher terminates with an error, the awaiting caller receives the error as a throw.\n\nThe following example shows how to use the values property to receive elements asynchronously. The example adapts a code snippet from the tryFilter(_:) operator\u2019s documentation, which filters a sequence to only emit even integers, and terminate with an error on a 0. This example replaces the Subscribers.Sink subscriber with a for-await-in loop that iterates over the AsyncPublisher provided by the values property. With this approach, the error handling previously provided in the sink subscriber\u2019s receiveCompletion closure goes instead in a catch block.\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\nlet filterPublisher = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n\n\ndo {\n    for try await number in filterPublisher.values {\n        print (\"\\(number)\", terminator: \" \")\n    }\n} catch {\n    print (\"\\(error)\")\n}\n"
    },
    {
        "title": "multicast(subject:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/multicast(subject:)",
        "html": "Parameters\nsubject\n\nA subject to deliver elements to downstream subscribers.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(_:), this method produces a publisher that shares the provided Subject among all the downstream subscribers.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(subject:) operator with a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast(subject: PassthroughSubject<(String, Int), Never>())\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 78))\n// Stream 2 received: (\"First\", 78)\n// Stream 1 received: (\"First\", 78)\n// Random: receive value: ((\"Second\", 98))\n// Stream 2 received: (\"Second\", 98)\n// Stream 1 received: (\"Second\", 98)\n// Random: receive value: ((\"Third\", 61))\n// Stream 2 received: (\"Third\", 61)\n// Stream 1 received: (\"Third\", 61)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "tryRemoveDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/tryremoveduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first. If this closure throws an error, the publisher terminates with the thrown error.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse tryRemoveDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of elements using an error-throwing closure you provide. If your closure throws an error, the publisher terminates with the error.\n\nIn the example below, the closure provided to tryRemoveDuplicates(by:) returns true when two consecutive elements are equal, thereby filtering out 0, 1, 2, and 3. However, the closure throws an error when it encounters 4. The publisher then terminates with this error.\n\nstruct BadValuesError: Error {}\nlet numbers = [0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\ncancellable = numbers.publisher\n    .tryRemoveDuplicates { first, second -> Bool in\n        if (first == 4 && second == 4) {\n            throw BadValuesError()\n        }\n        return first == second\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n // Prints: \"0 1 2 3 4 failure(BadValuesError()\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryContains(where:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/trycontains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse tryContains(where:) to find the first element in an upstream that satisfies the error-throwing closure you provide.\n\nThis operator consumes elements produced from the upstream publisher until the upstream publisher either:\n\nProduces a matching element, after which it emits true and the publisher finishes normally.\n\nEmits false if no matching element is found and the publisher finishes normally.\n\nIf the predicate throws an error, the publisher fails, passing the error to its downstream.\n\nIn the example below, the tryContains(where:) operator tests values to find an element less than 10; when the closure finds an odd number, like 3, the publisher terminates with an IllegalValueError.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers = [3, 2, 10, 5, 0, 9]\nnumbers.publisher\n    .tryContains {\n        if ($0 % 2 != 0) {\n            throw IllegalValueError()\n        }\n       return $0 < 10\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "share()",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/share()",
        "html": "Return Value\n\nA class instance that shares elements received from its upstream to multiple subscribers.\n\nDiscussion\n\nThe publisher returned by this operator supports multiple subscribers, all of whom receive unchanged elements and completion states from the upstream publisher.\n\nTip\n\nPublishers.Share is effectively a combination of the Publishers.Multicast and PassthroughSubject publishers, with an implicit autoconnect().\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a share() operator to share the same random number to each of two subscribers. This example uses a delay(for:tolerance:scheduler:options:) operator only to prevent the first subscriber from exhausting the sequence publisher immediately; an asynchronous publisher wouldn\u2019t need this.\n\nlet pub = (1...3).publisher\n    .delay(for: 1, scheduler: DispatchQueue.main)\n    .map( { _ in return Int.random(in: 0...100) } )\n    .print(\"Random\")\n    .share()\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\n\n\n// Prints:\n// Random: receive value: (20)\n// Stream 1 received: 20\n// Stream 2 received: 20\n// Random: receive value: (85)\n// Stream 1 received: 85\n// Stream 2 received: 85\n// Random: receive value: (98)\n// Stream 1 received: 98\n// Stream 2 received: 98\n\n\nWithout the share() operator, stream 1 receives three random values, followed by stream 2 receiving three different random values.\n\nAlso note that Publishers.Share is a class rather than a structure like most other publishers. This means you can use this operator to create a publisher instance that uses reference semantics.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers."
    },
    {
        "title": "breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/breakpoint(receivesubscription:receiveoutput:receivecompletion:)",
        "html": "Parameters\nreceiveSubscription\n\nA closure that executes when the publisher receives a subscription. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveOutput\n\nA closure that executes when the publisher receives a value. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveCompletion\n\nA closure that executes when the publisher receives a completion. Return true from this closure to raise SIGTRAP, or false to continue.\n\nReturn Value\n\nA publisher that raises a debugger signal when one of the provided closures returns true.\n\nDiscussion\n\nUse breakpoint(receiveSubscription:receiveOutput:receiveCompletion:) to examine one or more stages of the subscribe/publish/completion process and stop in the debugger, based on conditions you specify. When any of the provided closures returns true, this operator raises the SIGTRAP signal to stop the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn the example below, a PassthroughSubject publishes strings to a breakpoint republisher. When the breakpoint receives the string \u201cDEBUGGER\u201d, it returns true, which stops the app in the debugger.\n\nlet publisher = PassthroughSubject<String?, Never>()\ncancellable = publisher\n    .breakpoint(\n        receiveOutput: { value in return value == \"DEBUGGER\" }\n    )\n    .sink { print(\"\\(String(describing: $0))\" , terminator: \" \") }\n\n\npublisher.send(\"DEBUGGER\")\n\n\n// Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n// Depending on your specific environment, the console messages may\n// also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "assign(to:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/assign(to:)",
        "html": "Parameters\npublished\n\nA property marked with the @Published attribute, which receives and republishes all elements received from the upstream publisher.\n\nDiscussion\n\nUse this operator when you want to receive elements from a publisher and republish them through a property marked with the @Published attribute. The assign(to:) operator manages the life cycle of the subscription, canceling the subscription automatically when the Published instance deinitializes. Because of this, the assign(to:) operator doesn\u2019t return an AnyCancellable that you\u2019re responsible for like assign(to:on:) does.\n\nThe example below shows a model class that receives elements from an internal Timer.TimerPublisher, and assigns them to a @Published property called lastUpdated. Because the to parameter has the inout keyword, you need to use the & operator when calling this method.\n\nclass MyModel: ObservableObject {\n    @Published var lastUpdated: Date = Date()\n    init() {\n         Timer.publish(every: 1.0, on: .main, in: .common)\n             .autoconnect()\n             .assign(to: &$lastUpdated)\n    }\n}\n\n\nIf you instead implemented MyModel with assign(to: lastUpdated, on: self), storing the returned AnyCancellable instance could cause a reference cycle, because the Subscribers.Assign subscriber would hold a strong reference to self. Using assign(to:) solves this problem.\n\nWhile the to parameter uses the inout keyword, this method doesn\u2019t replace a reference type passed to it. Instead, this notation indicates that the operator may modify members of the assigned object, as seen in the following example:\n\n    class MyModel2: ObservableObject {\n        @Published var id: Int = 0\n    }\n    let model2 = MyModel2()\n    Just(100).assign(to: &model2.$id)\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/flatmap(maxpublishers:_:)-7pzu1",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "zip(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/zip(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from four upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:_:) to return a new publisher that combines the elements from three other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, the PassthroughSubject publishers, numbersPub, fractionsPub, lettersPub, and emojiPub emit values. The zip(_:_:_:_:) operator receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times and prints out the value in fractionsPub.\n\nlet numbersPub = PassthroughSubject<Int, Never>()      // first publisher\nlet lettersPub = PassthroughSubject<String, Never>()   // second\nlet emojiPub = PassthroughSubject<String, Never>()     // third\nlet fractionsPub  = PassthroughSubject<Double, Never>()// fourth\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub) { anInt, aLetter, anEmoji, aFraction  in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt)) \\(aFraction)\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:          emojiPub:          zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:          emojiPub:          zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 1,2,3   lettersPub: \"A\"      emojiPub:\"\ud83d\ude00\"      zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"      emojiPub:          zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"A\"      emojiPub:          zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"      emojiPub:          zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n// Prints:\n//1 \ud83d\ude00 A 0.1\n//2 \ud83e\udd70\ud83e\udd70 BB 0.8\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/zip(_:_:_:)-9j6gr",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\npublisher3\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from three other publishers to publish a tuple to the downstream subscriber. The returned publisher waits until all four publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, several PassthroughSubject instances emit values; zip(_:_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\nlet fractionsPub  = PassthroughSubject<Double, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub, fractionsPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)         // numbersPub: 1       lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(2)         // numbersPub: 1,2     lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nnumbersPub.send(3)         // numbersPub: 1,2,3   lettersPub:        emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.1)     // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nlettersPub.send(\"A\")       // numbersPub: 1,2,3   lettersPub: \"A\"    emojiPub:       fractionsPub: 0.1     zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")        // numbersPub: 2,3     lettersPub: \"A\"    emojiPub: \"\ud83d\ude00\"  fractionsPub: 0.1     zip output: (1, \"A\", \"\ud83d\ude00\", 0.1)\nlettersPub.send(\"B\")       // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub:         zip output: <none>\nfractionsPub.send(0.8)     // numbersPub: 2,3     lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")        // numbersPub: 3       lettersPub: \"B\"    emojiPub:       fractionsPub: 0.8     zip output: (2, \"B\", \"\ud83e\udd70\", 0.8)\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\", 0.1)\n//  (2, \"B\", \"\ud83e\udd70\", 0.8)\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/combinelatest(_:_:_:)-3ekmr",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest<P, Q>(_:,_:) to combine the current and two additional publishers and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer. All upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nIn the example below, combineLatest() receives the most-recent values published by three publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3) { firstValue, secondValue, thirdValue in\n        return firstValue * secondValue * thirdValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(10)\n\n\npub.send(9)\npub3.send(4)\npub2.send(12)\n\n\n// Prints:\n//  Result: 40.     // pub = 2, pub2 = 2, pub3 = 10\n//  Result: 180.    // pub = 9, pub2 = 2, pub3 = 10\n//  Result: 72.     // pub = 9, pub2 = 2, pub3 = 4\n//  Result: 432.    // pub = 9, pub2 = 12, pub3 = 4\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "catch(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/catch(_:)",
        "html": "Parameters\nhandler\n\nA closure that accepts the upstream failure as input and returns a publisher to replace the upstream publisher.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\n\nDiscussion\n\nUse catch() to replace an error from an upstream publisher with a new publisher.\n\nIn the example below, the catch() operator handles the SimpleError thrown by the upstream publisher by replacing the error with a Just publisher. This continues the stream by publishing a single value and completing normally.\n\nstruct SimpleError: Error {}\nlet numbers = [5, 4, 3, 2, 1, 0, 9, 8, 7, 6]\ncancellable = numbers.publisher\n    .tryLast(where: {\n        guard $0 != 0 else {throw SimpleError()}\n        return true\n    })\n    .catch({ (error) in\n        Just(-1)\n    })\n    .sink { print(\"\\($0)\") }\n    // Prints: -1\n\n\nBackpressure note: This publisher passes through request and cancel to the upstream. After receiving an error, the publisher sends sends any unfulfilled demand to the new Publisher. SeeAlso: replaceError\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "collect(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/collect(_:)",
        "html": "Parameters\ncount\n\nThe maximum number of received elements to buffer before publishing.\n\nReturn Value\n\nA publisher that collects up to the specified number of elements, and then publishes them as an array.\n\nDiscussion\n\nUse collect(_:) to emit arrays of at most count elements from an upstream publisher. If the upstream publisher finishes before collecting the specified number of elements, the publisher sends an array of only the items it received. This may be fewer than count elements.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nIn the example below, the collect(_:) operator emits one partial and two full arrays based on the requested collection size of 5:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect(5)\n    .sink { print(\"\\($0), terminator: \" \"\") }\n\n\n// Prints \"[0, 1, 2, 3, 4] [5, 6, 7, 8, 9] [10] \"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "combineLatest(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/combinelatest(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:_:) when you need to combine the current and 3 additional publishers and transform the values using a closure in which you specify the published elements, to publish a new element.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, as combineLatest(_:_:_:_:) receives the most-recent values published by four publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4) { firstValue, secondValue, thirdValue, fourthValue in\n        return firstValue * secondValue * thirdValue * fourthValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: 36.     // pub = 2,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 54.     // pub = 3,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 324.    // pub = 3,  pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 1404.   // pub = 13, pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 2964.   // pub = 13, pub2 = 12,  pub3 = 19, pub4 = 1\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "decode(type:decoder:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/decode(type:decoder:)",
        "html": "Parameters\ntype\n\nThe encoded data to decode into a struct that conforms to the Decodable protocol.\n\ndecoder\n\nA decoder that implements the TopLevelDecoder protocol.\n\nReturn Value\n\nA publisher that decodes a given type using a specified decoder and publishes the result.\n\nDiscussion\n\nUse decode(type:decoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to decode data received from a URLSession.DataTaskPublisher or other data source using the Decodable protocol.\n\nIn this example, a PassthroughSubject publishes a JSON string. The JSON decoder parses the string, converting its fields according to the Decodable protocol implemented by Article, and successfully populating a new Article. The Publishers.Decode publisher then publishes the Article to the downstream. If a decoding operation fails, which happens in the case of missing or malformed data in the source JSON string, the stream terminates and passes the error to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Data, Never>()\ncancellable = dataProvider\n    .decode(type: Article.self, decoder: JSONDecoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\")},\n          receiveValue: { print (\"value: \\($0)\") })\n\n\ndataProvider.send(Data(\"{\\\"pubDate\\\":1574273638.575666, \\\"title\\\" : \\\"My First Article\\\", \\\"author\\\" : \\\"Gita Kumar\\\" }\".utf8))\n\n\n// Prints: \".sink() data received Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: 2050-11-20 18:13:58 +0000)\"\n\nSee Also\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable."
    },
    {
        "title": "assertNoFailure(_:file:line:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/assertnofailure(_:file:line:)",
        "html": "Parameters\nprefix\n\nA string used at the beginning of the fatal error message.\n\nfile\n\nA filename used in the error message. This defaults to #file.\n\nline\n\nA line number used in the error message. This defaults to #line.\n\nReturn Value\n\nA publisher that raises a fatal error when its upstream publisher fails.\n\nDiscussion\n\nUse assertNoFailure() for internal integrity checks that are active during testing. However, it is important to note that, like its Swift counterpart fatalError(_:), the assertNoFailure() operator asserts a fatal exception when triggered during development and testing, and in shipping versions of code.\n\nIn the example below, a CurrentValueSubject publishes the initial and second values successfully. The third value, containing a genericSubjectError, causes the assertNoFailure() operator to assert a fatal exception stopping the process:\n\npublic enum SubjectError: Error {\n    case genericSubjectError\n}\n\n\nlet subject = CurrentValueSubject<String, Error>(\"initial value\")\nsubject\n    .assertNoFailure()\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0).\") }\n    )\n\n\nsubject.send(\"second value\")\nsubject.send(completion: Subscribers.Completion<Error>.failure(SubjectError.genericSubjectError))\n\n\n// Prints:\n//  value: initial value.\n//  value: second value.\n//  The process then terminates in the debugger as the assertNoFailure operator catches the genericSubjectError.\n\nSee Also\nHandling Errors\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "buffer(size:prefetch:whenFull:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/buffer(size:prefetch:whenfull:)",
        "html": "Parameters\nsize\n\nThe maximum number of elements to store.\n\nprefetch\n\nThe strategy to initially populate the buffer.\n\nwhenFull\n\nThe action to take when the buffer becomes full.\n\nReturn Value\n\nA publisher that buffers elements received from an upstream publisher.\n\nDiscussion\n\nUse buffer(size:prefetch:whenFull:) to collect a specific number of elements from an upstream publisher before republishing them to the downstream subscriber according to the Publishers.BufferingStrategy and Publishers.PrefetchStrategy strategy you specify.\n\nIf the publisher completes before reaching the size threshold, it buffers the elements and publishes them downstream prior to completion."
    },
    {
        "title": "assign(to:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/assign(to:)",
        "html": "Parameters\npublished\n\nA property marked with the @Published attribute, which receives and republishes all elements received from the upstream publisher.\n\nDiscussion\n\nUse this operator when you want to receive elements from a publisher and republish them through a property marked with the @Published attribute. The assign(to:) operator manages the life cycle of the subscription, canceling the subscription automatically when the Published instance deinitializes. Because of this, the assign(to:) operator doesn\u2019t return an AnyCancellable that you\u2019re responsible for like assign(to:on:) does.\n\nThe example below shows a model class that receives elements from an internal Timer.TimerPublisher, and assigns them to a @Published property called lastUpdated. Because the to parameter has the inout keyword, you need to use the & operator when calling this method.\n\nclass MyModel: ObservableObject {\n    @Published var lastUpdated: Date = Date()\n    init() {\n         Timer.publish(every: 1.0, on: .main, in: .common)\n             .autoconnect()\n             .assign(to: &$lastUpdated)\n    }\n}\n\n\nIf you instead implemented MyModel with assign(to: lastUpdated, on: self), storing the returned AnyCancellable instance could cause a reference cycle, because the Subscribers.Assign subscriber would hold a strong reference to self. Using assign(to:) solves this problem.\n\nWhile the to parameter uses the inout keyword, this method doesn\u2019t replace a reference type passed to it. Instead, this notation indicates that the operator may modify members of the assigned object, as seen in the following example:\n\n    class MyModel2: ObservableObject {\n        @Published var id: Int = 0\n    }\n    let model2 = MyModel2()\n    Just(100).assign(to: &model2.$id)\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/breakpoint(receivesubscription:receiveoutput:receivecompletion:)",
        "html": "Parameters\nreceiveSubscription\n\nA closure that executes when the publisher receives a subscription. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveOutput\n\nA closure that executes when the publisher receives a value. Return true from this closure to raise SIGTRAP, or false to continue.\n\nreceiveCompletion\n\nA closure that executes when the publisher receives a completion. Return true from this closure to raise SIGTRAP, or false to continue.\n\nReturn Value\n\nA publisher that raises a debugger signal when one of the provided closures returns true.\n\nDiscussion\n\nUse breakpoint(receiveSubscription:receiveOutput:receiveCompletion:) to examine one or more stages of the subscribe/publish/completion process and stop in the debugger, based on conditions you specify. When any of the provided closures returns true, this operator raises the SIGTRAP signal to stop the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn the example below, a PassthroughSubject publishes strings to a breakpoint republisher. When the breakpoint receives the string \u201cDEBUGGER\u201d, it returns true, which stops the app in the debugger.\n\nlet publisher = PassthroughSubject<String?, Never>()\ncancellable = publisher\n    .breakpoint(\n        receiveOutput: { value in return value == \"DEBUGGER\" }\n    )\n    .sink { print(\"\\(String(describing: $0))\" , terminator: \" \") }\n\n\npublisher.send(\"DEBUGGER\")\n\n\n// Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n// Depending on your specific environment, the console messages may\n// also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "min(by:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/min(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to determine the minimum value in the stream of elements from an upstream publisher using a comparison operation you specify.\n\nThis operator is useful when the value received from the upstream publisher isn\u2019t Comparable.\n\nIn the example below an array publishes enumeration elements representing playing card ranks. The min(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the minimum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .king]\ncancellable = cards.publisher\n    .min {\n        return  $0.rawValue < $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"ace\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "merge(with:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/merge(with:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers; it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubE, pubG)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\n\n\n//Prints: \"1 40 90 -1 33 44 54 2 50 100 -2 33 33 54\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/merge(with:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\n\n\n//Prints: \"1 40 90 -1 33 44 2 50 100 -2 33 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/merge(with:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:). To combine elements from multiple upstream publishers, use zip(_:_:).\n\nIn this example, as merge(with:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubA.send(2)\npubB.send(50)\npubC.send(100)\n\n\n// Prints: \"1 40 90 2 50 100\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/merge(with:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\n\n\n// Prints: \"1 40 90 -1 2 50 100 -2 \"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/merge(with:)",
        "html": "Parameters\nother\n\nAnother publisher of this publisher\u2019s type.\n\nReturn Value\n\nA publisher that emits an event when either upstream publisher emits an event.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "max(by:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/max(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max(by:) to determine the maximum value of elements received from the upstream publisher based on an ordering closure you specify.\n\nIn the example below, an array publishes enumeration elements representing playing card ranks. The max(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the maximum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .jack]\ncancellable = cards.publisher\n    .max {\n        return  $0.rawValue > $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"queen\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "map(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/map(_:_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of a second property on Output.\n\nkeyPath2\n\nThe key path of a third property on Output.\n\nReturn Value\n\nA publisher that publishes the values of three key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:_:) operator uses the Swift key path syntax to access the die1, die2, and die3 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these three values (as an (Int, Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n    let die3: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6),\n                            die3: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2, \\.die3)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1), \\(values.2) (total \\(values.0 + values.1 + values.2))\")\n    }\n// Prints \"Rolled: 5, 4, 2 (total 11)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/map(_:)-4oqah",
        "html": "Parameters\nkeyPath\n\nThe key path of a property on Output.\n\nReturn Value\n\nA publisher that publishes the value of the key path.\n\nDiscussion\n\nIn the following example, the map(_:) operator uses the Swift key path syntax to access the die member of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only the value of this Int, not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die: Int\n}\n\n\ncancellable = Just(DiceRoll(die:Int.random(in:1...6)))\n    .map(\\.die)\n    .sink {\n        print (\"Rolled: \\($0)\")\n    }\n// Prints \"Rolled: 3\" (or some other random value).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "makeConnectable()",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/makeconnectable()",
        "html": "Return Value\n\nA ConnectablePublisher wrapping this publisher.\n\nDiscussion\n\nIn the following example, makeConnectable() wraps its upstream publisher (an instance of Publishers.Share) with a ConnectablePublisher. Without this, the first sink subscriber would receive all the elements from the sequence publisher and cause it to complete before the second subscriber attaches. By making the publisher connectable, the publisher doesn\u2019t produce any elements until after the connect() call.\n\n let subject = Just<String>(\"Sent\")\n let pub = subject\n     .share()\n     .makeConnectable()\n cancellable1 = pub.sink { print (\"Stream 1 received: \\($0)\")  }\n\n\n // For example purposes, use DispatchQueue to add a second subscriber\n // a second later, and then connect to the publisher a second after that.\n DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n     self.cancellable2 = pub.sink { print (\"Stream 2 received: \\($0)\") }\n }\n DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     self.connectable = pub.connect()\n }\n // Prints:\n // Stream 2 received: Sent\n // Stream 1 received: Sent\n\n\nNote\n\nThe connect() operator returns a Cancellable instance that you must retain. You can also use this instance to cancel publishing."
    },
    {
        "title": "drop(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/drop(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA publisher to monitor for its first emitted element.\n\nReturn Value\n\nA publisher that drops elements from the upstream publisher until the other publisher produces a value.\n\nDiscussion\n\nUse drop(untilOutputFrom:) to ignore elements from the upstream publisher until another, second, publisher delivers its first element. This publisher requests a single value from the second publisher, and it ignores (drops) all elements from the upstream publisher until the second publisher produces a value. After the second publisher produces an element, drop(untilOutputFrom:) cancels its subscription to the second publisher, and allows events from the upstream publisher to pass through.\n\nAfter this publisher receives a subscription from the upstream publisher, it passes through backpressure requests from downstream to the upstream publisher. If the upstream publisher acts on those requests before the other publisher produces an item, this publisher drops the elements it receives from the upstream publisher.\n\nIn the example below, the pub1 publisher defers publishing its elements until the pub2 publisher delivers its first element:\n\nlet upstream = PassthroughSubject<Int,Never>()\nlet second = PassthroughSubject<String,Never>()\ncancellable = upstream\n    .drop(untilOutputFrom: second)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\nupstream.send(1)\nupstream.send(2)\nsecond.send(\"A\")\nupstream.send(3)\nupstream.send(4)\n// Prints \"3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "mapError(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/maperror(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes the upstream failure as a parameter and returns a new error for the publisher to terminate with.\n\nReturn Value\n\nA publisher that replaces any upstream failure with a new error produced by the transform closure.\n\nDiscussion\n\nUse the mapError(_:) operator when you need to replace one error type with another, or where a downstream operator needs the error types of its inputs to match.\n\nThe following example uses a tryMap(_:) operator to divide 1 by each element produced by a sequence publisher. When the publisher produces a 0, the tryMap(_:) fails with a DivisionByZeroError. The mapError(_:) operator converts this into a MyGenericError.\n\nstruct DivisionByZeroError: Error {}\nstruct MyGenericError: Error { var wrappedError: Error }\n\n\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n       guard divisor != 0 else { throw DivisionByZeroError() }\n       return dividend / divisor\n   }\n\n\nlet divisors: [Double] = [5, 4, 3, 2, 1, 0]\ndivisors.publisher\n    .tryMap { try myDivide(1, $0) }\n    .mapError { MyGenericError(wrappedError: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") ,\n        receiveValue: { print (\"value: \\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"0.2 0.25 0.3333333333333333 0.5 1.0 completion: failure(MyGenericError(wrappedError: DivisionByZeroError()))\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)",
        "html": "Parameters\nreceiveSubscription\n\nAn optional closure that executes when the publisher receives the subscription from the upstream publisher. This value defaults to nil.\n\nreceiveOutput\n\nAn optional closure that executes when the publisher receives a value from the upstream publisher. This value defaults to nil.\n\nreceiveCompletion\n\nAn optional closure that executes when the upstream publisher finishes normally or terminates with an error. This value defaults to nil.\n\nreceiveCancel\n\nAn optional closure that executes when the downstream receiver cancels publishing. This value defaults to nil.\n\nreceiveRequest\n\nAn optional closure that executes when the publisher receives a request for more elements. This value defaults to nil.\n\nReturn Value\n\nA publisher that performs the specified closures when publisher events occur.\n\nDiscussion\n\nUse handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:) when you want to examine elements as they progress through the stages of the publisher\u2019s lifecycle.\n\nIn the example below, a publisher of integers shows the effect of printing debugging information at each stage of the element-processing lifecycle:\n\nlet integers = (0...2)\ncancellable = integers.publisher\n    .handleEvents(receiveSubscription: { subs in\n        print(\"Subscription: \\(subs.combineIdentifier)\")\n    }, receiveOutput: { anInt in\n        print(\"in output handler, received \\(anInt)\")\n    }, receiveCompletion: { _ in\n        print(\"in completion handler\")\n    }, receiveCancel: {\n        print(\"received cancel\")\n    }, receiveRequest: { (demand) in\n        print(\"received demand: \\(demand.description)\")\n    })\n    .sink { _ in return }\n\n\n// Prints:\n//   received demand: unlimited\n//   Subscription: 0x7f81284734c0\n//   in output handler, received 0\n//   in output handler, received 1\n//   in output handler, received 2\n//   in completion handler\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/flatmap(maxpublishers:_:)-8ootk",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "allSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/allsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the allSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes.\n\nIn the example below, the allSatisfy(_:) operator tests if each an integer array publisher\u2019s elements fall into the targetRange:\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .allSatisfy { targetRange.contains($0) }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "last()",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/last()",
        "html": "Return Value\n\nA publisher that only publishes the last element of a stream.\n\nDiscussion\n\nUse last() when you need to emit only the last element from an upstream publisher.\n\nIn the example below, the range publisher only emits the last element from the sequence publisher, 10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "last(where:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/last(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse last(where:) when you need to republish only the last element of a stream that satisfies a closure you specify.\n\nIn the example below, a range publisher emits the last element that satisfies the closure\u2019s criteria, then finishes normally:\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last { $0 < 6 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"5\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "reduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/reduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nA closure that produces a new value by taking the previously-accumulated value and the next element it receives from the upstream publisher.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes. If reduce(_:_:) receives an error from the upstream publisher, the operator delivers it to the downstream subscriber, the publisher terminates and publishes no value.\n\nDiscussion\n\nUse reduce(_:_:) to collect a stream of elements and produce an accumulated value based on a closure you provide.\n\nIn the following example, the reduce(_:_:) operator collects all the integer values it receives from its upstream publisher:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .reduce(0, { accum, next in accum + next })\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"55\"\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/map(_:)-1mdn8",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s map(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use map(_:) to transform from one kind of element to another.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A map(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the map(_:)\u2019s closure fails to look up a Roman numeral, it returns the string (unknown).\n\nlet numbers = [5, 4, 3, 2, 1, 0]\nlet romanNumeralDict: [Int : String] =\n   [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\ncancellable = numbers.publisher\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"V IV III II I (unknown)\"\n\n\nIf your closure can throw an error, use Combine\u2019s tryMap(_:) operator instead.\n\nSee Also\nMapping Elements\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "scan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/scan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nA closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse scan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value.\n\nThe following example logs a running total of all values received from the sequence publisher.\n\nlet range = (0...5)\ncancellable = range.publisher\n    .scan(0) { return $0 + $1 }\n    .sink { print (\"\\($0)\", terminator: \" \") }\n // Prints: \"0 1 3 6 10 15 \".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "removeDuplicates()",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/removeduplicates()",
        "html": "Return Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates() to remove repeating elements from an upstream publisher. This operator has a two-element memory: the operator uses the current and previously published elements as the basis for its comparison.\n\nIn the example below, removeDuplicates() triggers on the doubled, tripled, and quadrupled occurrences of 1, 3, and 4 respectively. Because the two-element memory considers only the current element and the previous element, the operator prints the final 0 in the example data since its immediate predecessor is 4.\n\nlet numbers = [0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 0]\ncancellable = numbers.publisher\n    .removeDuplicates()\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 0\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "receive(subscriber:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/receive(subscriber:)",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this Publisher, after which it can receive values.\n\nDiscussion\n\nImplementations of Publisher must implement this method.\n\nThe provided implementation of subscribe(_:)calls this method.\n\nSee Also\nWorking with Subscribers\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "assertNoFailure(_:file:line:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/assertnofailure(_:file:line:)",
        "html": "Parameters\nprefix\n\nA string used at the beginning of the fatal error message.\n\nfile\n\nA filename used in the error message. This defaults to #file.\n\nline\n\nA line number used in the error message. This defaults to #line.\n\nReturn Value\n\nA publisher that raises a fatal error when its upstream publisher fails.\n\nDiscussion\n\nUse assertNoFailure() for internal integrity checks that are active during testing. However, it is important to note that, like its Swift counterpart fatalError(_:), the assertNoFailure() operator asserts a fatal exception when triggered during development and testing, and in shipping versions of code.\n\nIn the example below, a CurrentValueSubject publishes the initial and second values successfully. The third value, containing a genericSubjectError, causes the assertNoFailure() operator to assert a fatal exception stopping the process:\n\npublic enum SubjectError: Error {\n    case genericSubjectError\n}\n\n\nlet subject = CurrentValueSubject<String, Error>(\"initial value\")\nsubject\n    .assertNoFailure()\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0).\") }\n    )\n\n\nsubject.send(\"second value\")\nsubject.send(completion: Subscribers.Completion<Error>.failure(SubjectError.genericSubjectError))\n\n\n// Prints:\n//  value: initial value.\n//  value: second value.\n//  The process then terminates in the debugger as the assertNoFailure operator catches the genericSubjectError.\n\nSee Also\nHandling Errors\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "switchToLatest()",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/switchtolatest()",
        "html": "Discussion\n\nThis operator works with an upstream publisher of publishers, flattening the stream of elements to appear as if they were coming from a single stream of elements. It switches the inner publisher as new ones arrive but keeps the outer publisher constant for downstream subscribers.\n\nWhen this operator receives a new publisher from the upstream publisher, it cancels its previous subscription. Use this feature to prevent earlier publishers from performing unnecessary work, such as creating network request publishers from frequently updating user interface publishers.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify."
    },
    {
        "title": "catch(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/catch(_:)",
        "html": "Parameters\nhandler\n\nA closure that accepts the upstream failure as input and returns a publisher to replace the upstream publisher.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher.\n\nDiscussion\n\nUse catch() to replace an error from an upstream publisher with a new publisher.\n\nIn the example below, the catch() operator handles the SimpleError thrown by the upstream publisher by replacing the error with a Just publisher. This continues the stream by publishing a single value and completing normally.\n\nstruct SimpleError: Error {}\nlet numbers = [5, 4, 3, 2, 1, 0, 9, 8, 7, 6]\ncancellable = numbers.publisher\n    .tryLast(where: {\n        guard $0 != 0 else {throw SimpleError()}\n        return true\n    })\n    .catch({ (error) in\n        Just(-1)\n    })\n    .sink { print(\"\\($0)\") }\n    // Prints: -1\n\n\nBackpressure note: This publisher passes through request and cancel to the upstream. After receiving an error, the publisher sends sends any unfulfilled demand to the new Publisher. SeeAlso: replaceError\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-sequence-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/flatmap(maxpublishers:_:)-537pg",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "first(where:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/first(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse first(where:) to republish only the first element of a stream that satisfies a closure you specify. The publisher ignores all elements after the first element that satisfies the closure and finishes normally. If this publisher doesn\u2019t receive any elements, it finishes without publishing.\n\nIn the example below, the provided closure causes the Publishers.FirstWhere publisher to republish the first received element that\u2019s greater than 0, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first { $0 > 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"1\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "first()",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/first()",
        "html": "Return Value\n\nA publisher that only publishes the first element of a stream.\n\nDiscussion\n\nUse first() to publish just the first element from an upstream publisher, then finish normally. The first() operator requests unlimited from its upstream as soon as downstream requests at least one element. If the upstream completes before first() receives any elements, it completes without emitting any values.\n\nIn this example, the first() publisher republishes the first element received from the sequence publisher, -10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first()\n    .sink { print(\"\\($0)\") }\n\n\n// Print: \"-10\"\n\nSee Also\nSelecting Specific Elements\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "encode(encoder:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/encode(encoder:)",
        "html": "Parameters\nencoder\n\nAn encoder that implements the TopLevelEncoder protocol.\n\nReturn Value\n\nA publisher that encodes received elements using a specified encoder, and publishes the resulting data.\n\nDiscussion\n\nUse encode(encoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to encode an Encodable struct into Data that could be used to make a JSON string (or written to disk as a binary plist in the case of property lists).\n\nIn this example, a PassthroughSubject publishes an Article. The encode(encoder:) operator encodes the properties of the Article struct into a new JSON string according to the Codable protocol adopted by Article. The operator publishes the resulting JSON string to the downstream subscriber. If the encoding operation fails, which can happen in the case of complex properties that can\u2019t be directly transformed into JSON, the stream terminates and the error is passed to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Article, Never>()\nlet cancellable = dataProvider\n    .encode(encoder: JSONEncoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\") },\n          receiveValue: {  data in\n            guard let stringRepresentation = String(data: data, encoding: .utf8) else { return }\n            print(\"Data received \\(data) string representation: \\(stringRepresentation)\")\n    })\n\n\ndataProvider.send(Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: Date()))\n\n\n// Prints: \"Data received 86 bytes string representation: {\"title\":\"My First Article\",\"author\":\"Gita Kumar\",\"pubDate\":606211803.279603}\"\n\nSee Also\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder."
    },
    {
        "title": "merge(with:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/merge(with:_:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nh\n\nAn eighth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\nlet pubH = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF, pubG, pubH)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\npubH.send(1000)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\npubH.send(1001)\n\n\n//Prints: \"1 40 90 -1 33 44 54 1000 2 50 100 -2 33 33 54 1001\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/combinelatest(_:_:)-8pxri",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn this example, three instances of PassthroughSubject emit values; as combineLatest(_:_:) receives input from any of the upstream publishers, it combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: (2, 2, 9).\n//  Result: (3, 2, 9).\n//  Result: (3, 12, 9).\n//  Result: (13, 12, 9).\n//  Result: (13, 12, 19).\n\n\nIf any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/combinelatest(_:_:)-7sh61",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest<P,T>(_:) to combine the current and one additional publisher and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn the example below, combineLatest() receives the most-recent values published by the two publishers, it multiplies them together, and republishes the result:\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2) { (first, second) in\n        return first * second\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(9)\npub1.send(3)\npub2.send(12)\npub1.send(13)\n//\n// Prints:\n//Result: 4.    (pub1 latest = 2, pub2 latest = 2)\n//Result: 18.   (pub1 latest = 9, pub2 latest = 2)\n//Result: 6.    (pub1 latest = 3, pub2 latest = 2)\n//Result: 36.   (pub1 latest = 3, pub2 latest = 12)\n//Result: 156.  (pub1 latest = 13, pub2 latest = 12)\n\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "breakpointOnError()",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/breakpointonerror()",
        "html": "Return Value\n\nA publisher that raises a debugger signal upon receiving a failure.\n\nDiscussion\n\nWhen the upstream publisher fails with an error, this publisher raises the SIGTRAP signal, which stops the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn this example a PassthroughSubject publishes strings, but its downstream tryMap(_:) operator throws an error. This sends the error downstream as a Subscribers.Completion.failure(_:). The breakpointOnError() operator receives this completion and stops the app in the debugger.\n\n struct CustomError : Error {}\n let publisher = PassthroughSubject<String?, Error>()\n cancellable = publisher\n     .tryMap { stringValue in\n         throw CustomError()\n     }\n     .breakpointOnError()\n     .sink(\n         receiveCompletion: { completion in print(\"Completion: \\(String(describing: completion))\") },\n         receiveValue: { aValue in print(\"Result: \\(String(describing: aValue))\") }\n     )\n\n\n publisher.send(\"TEST DATA\")\n\n\n // Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n // Depending on your specific environment, the console messages may\n // also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "assign(to:on:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/assign(to:on:)",
        "html": "Parameters\nkeyPath\n\nA key path that indicates the property to assign. See Key-Path Expression in The Swift Programming Language to learn how to use key paths to specify a property of an object.\n\nobject\n\nThe object that contains the property. The subscriber assigns the object\u2019s property every time it receives a new value.\n\nReturn Value\n\nAn AnyCancellable instance. Call cancel() on this instance when you no longer want the publisher to automatically assign the property. Deinitializing this instance will also cancel automatic assignment.\n\nDiscussion\n\nUse the assign(to:on:) subscriber when you want to set a given property each time a publisher produces a value.\n\nIn this example, the assign(to:on:) sets the value of the anInt property on an instance of MyClass:\n\nclass MyClass {\n    var anInt: Int = 0 {\n        didSet {\n            print(\"anInt was set to: \\(anInt)\", terminator: \"; \")\n        }\n    }\n}\n\n\nvar myObject = MyClass()\nlet myRange = (0...2)\ncancellable = myRange.publisher\n    .assign(to: \\.anInt, on: myObject)\n\n\n// Prints: \"anInt was set to: 0; anInt was set to: 1; anInt was set to: 2\"\n\n\nImportant\n\nThe Subscribers.Assign instance created by this operator maintains a strong reference to object, and sets it to nil when the upstream publisher completes (either normally or with an error).\n\nSee Also\nConnecting Simple Subscribers\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "collect()",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/collect()",
        "html": "Return Value\n\nA publisher that collects all received items and returns them as an array upon completion.\n\nDiscussion\n\nUse collect() to gather elements into an array that the operator emits after the upstream publisher finishes.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThis publisher requests an unlimited number of elements from the upstream publisher and uses an unbounded amount of memory to store the received values. The publisher may exert memory pressure on the system for very large sets of elements.\n\nThe collect() operator only sends the collected array to its downstream receiver after a request whose demand is greater than 0 items. Otherwise, collect() waits until it receives a non-zero request.\n\nIn the example below, an Integer range is a publisher that emits an array of integers:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\nSee Also\nReducing Elements\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "append(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/append(_:)",
        "html": "Parameters\nelements\n\nElements to publish after this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that appends the specifiecd elements after this publisher\u2019s elements.\n\nDiscussion\n\nUse append(_:) when you need to prepend specific elements after the output of a publisher.\n\nIn the example below, the append(_:) operator publishes the provided elements after republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .append(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 5 6 7 8 9 10 0 1 255\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "merge(with:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/merge(with:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\n let pubA = PassthroughSubject<Int, Never>()\n let pubB = PassthroughSubject<Int, Never>()\n let pubC = PassthroughSubject<Int, Never>()\n let pubD = PassthroughSubject<Int, Never>()\n let pubE = PassthroughSubject<Int, Never>()\n\n\n cancellable = pubA\n     .merge(with: pubB, pubC, pubD, pubE)\n     .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\n pubA.send(1)\n pubB.send(40)\n pubC.send(90)\n pubD.send(-1)\n pubE.send(33)\n pubA.send(2)\n pubB.send(50)\n pubC.send(100)\n pubD.send(-2)\n pubE.send(33)\n\n\n // Prints: \"1 40 90 -1 33 2 50 100 -2 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "allSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/allsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the allSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes.\n\nIn the example below, the allSatisfy(_:) operator tests if each an integer array publisher\u2019s elements fall into the targetRange:\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .allSatisfy { targetRange.contains($0) }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryfilter/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "measureInterval(using:options:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/measureinterval(using:options:)",
        "html": "Parameters\nscheduler\n\nA scheduler to use for tracking the timing of events.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher that emits elements representing the time interval between the elements it receives.\n\nDiscussion\n\nUse measureInterval(using:options:) to measure the time between events delivered from an upstream publisher.\n\nIn the example below, a 1-second Timer is used as the data source for an event publisher; the measureInterval(using:options:) operator reports the elapsed time between the reception of events on the main run loop:\n\ncancellable = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .measureInterval(using: RunLoop.main)\n    .sink { print(\"\\($0)\", terminator: \"\\n\") }\n\n\n// Prints:\n//      Stride(magnitude: 1.0013610124588013)\n//      Stride(magnitude: 0.9992760419845581)\n\n\nThe output type of the returned publisher is the time interval of the provided scheduler.\n\nThis operator uses the provided scheduler\u2019s now property to measure intervals between events.\n\nSee Also\nControlling Timing\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "map(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/map(_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of another property on Output.\n\nReturn Value\n\nA publisher that publishes the values of two key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:) operator uses the Swift key path syntax to access the die1 and die2 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these two values (as an (Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1) (total: \\(values.0 + values.1))\")\n    }\n// Prints \"Rolled: 6, 4 (total: 10)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "max()",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/max()",
        "html": "Return Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max() to determine the maximum value in the stream of elements from an upstream publisher.\n\nIn the example below, the max() operator emits a value when the publisher finishes, that value is the maximum of the values received from upstream, which is 10.\n\nlet numbers = [0, 10, 5]\ncancellable = numbers.publisher\n    .max()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-tryfilter-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nFiltering Elements\nfunc filter((Publishers.TryFilter<Upstream>.Output) -> Bool) -> Publishers.TryFilter<Upstream>\nAvailable when Upstream conforms to Publisher.\nfunc tryFilter((Publishers.TryFilter<Upstream>.Output) throws -> Bool) -> Publishers.TryFilter<Upstream>\nAvailable when Upstream conforms to Publisher.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nConnecting Simple Subscribers\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "ignoreOutput()",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/ignoreoutput()",
        "html": "Return Value\n\nA publisher that ignores all upstream elements.\n\nDiscussion\n\nUse the ignoreOutput() operator to determine if a publisher is able to complete successfully or would fail.\n\nIn the example below, the array publisher (numbers) delivers the first five of its elements successfully, as indicated by the ignoreOutput() operator. The operator consumes, but doesn\u2019t republish the elements downstream. However, the sixth element, 0, causes the error throwing closure to catch a NoZeroValuesAllowedError that terminates the stream.\n\nstruct NoZeroValuesAllowedError: Error {}\nlet numbers = [1, 2, 3, 4, 5, 0, 6, 7, 8, 9]\ncancellable = numbers.publisher\n    .tryFilter({ anInt in\n        guard anInt != 0 else { throw NoZeroValuesAllowedError() }\n        return anInt < 20\n    })\n    .ignoreOutput()\n    .sink(receiveCompletion: {print(\"completion: \\($0)\")},\n          receiveValue: {print(\"value \\($0)\")})\n\n\n// Prints: \"completion: failure(NoZeroValuesAllowedError())\"\n\n\nThe output type of this publisher is Never.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "append(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/append(_:)",
        "html": "Parameters\nelements\n\nElements to publish after this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that appends the specifiecd elements after this publisher\u2019s elements.\n\nDiscussion\n\nUse append(_:) when you need to prepend specific elements after the output of a publisher.\n\nIn the example below, the append(_:) operator publishes the provided elements after republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .append(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 5 6 7 8 9 10 0 1 255\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "map(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/map(_:_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of a second property on Output.\n\nkeyPath2\n\nThe key path of a third property on Output.\n\nReturn Value\n\nA publisher that publishes the values of three key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:_:) operator uses the Swift key path syntax to access the die1, die2, and die3 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these three values (as an (Int, Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n    let die3: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6),\n                            die3: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2, \\.die3)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1), \\(values.2) (total \\(values.0 + values.1 + values.2))\")\n    }\n// Prints \"Rolled: 5, 4, 2 (total 11)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple."
    },
    {
        "title": "tryContains(where:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/trycontains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse tryContains(where:) to find the first element in an upstream that satisfies the error-throwing closure you provide.\n\nThis operator consumes elements produced from the upstream publisher until the upstream publisher either:\n\nProduces a matching element, after which it emits true and the publisher finishes normally.\n\nEmits false if no matching element is found and the publisher finishes normally.\n\nIf the predicate throws an error, the publisher fails, passing the error to its downstream.\n\nIn the example below, the tryContains(where:) operator tests values to find an element less than 10; when the closure finds an odd number, like 3, the publisher terminates with an IllegalValueError.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers = [3, 2, 10, 5, 0, 9]\nnumbers.publisher\n    .tryContains {\n        if ($0 % 2 != 0) {\n            throw IllegalValueError()\n        }\n       return $0 < 10\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "first(where:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/first(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse first(where:) to republish only the first element of a stream that satisfies a closure you specify. The publisher ignores all elements after the first element that satisfies the closure and finishes normally. If this publisher doesn\u2019t receive any elements, it finishes without publishing.\n\nIn the example below, the provided closure causes the Publishers.FirstWhere publisher to republish the first received element that\u2019s greater than 0, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first { $0 > 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"1\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "values",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/values",
        "html": "Discussion\n\nThis property provides an AsyncThrowingPublisher, which allows you to use the Swift async-await syntax to receive the publisher\u2019s elements. Because AsyncPublisher conforms to AsyncSequence, you iterate over its elements with a for-await-in loop, rather than attaching a subscriber. If the publisher terminates with an error, the awaiting caller receives the error as a throw.\n\nThe following example shows how to use the values property to receive elements asynchronously. The example adapts a code snippet from the tryFilter(_:) operator\u2019s documentation, which filters a sequence to only emit even integers, and terminate with an error on a 0. This example replaces the Subscribers.Sink subscriber with a for-await-in loop that iterates over the AsyncPublisher provided by the values property. With this approach, the error handling previously provided in the sink subscriber\u2019s receiveCompletion closure goes instead in a catch block.\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\nlet filterPublisher = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n\n\ndo {\n    for try await number in filterPublisher.values {\n        print (\"\\(number)\", terminator: \" \")\n    }\n} catch {\n    print (\"\\(error)\")\n}\n"
    },
    {
        "title": "isIncluded",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryfilter/isincluded",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "print(_:to:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/print(_:to:)",
        "html": "Parameters\nprefix\n\nA string \u2014- which defaults to empty -\u2014 with which to prefix all log messages.\n\nstream\n\nA stream for text output that receives messages, and which directs output to the console by default. A custom stream can be used to log messages to other destinations.\n\nReturn Value\n\nA publisher that prints log messages for all publishing events.\n\nDiscussion\n\nUse print(_:to:) to log messages the console.\n\nIn the example below, log messages are printed on the console:\n\nlet integers = (1...2)\ncancellable = integers.publisher\n   .print(\"Logged a message\", to: nil)\n   .sink { _ in }\n\n\n// Prints:\n//  Logged a message: receive subscription: (1..<2)\n//  Logged a message: request unlimited\n//  Logged a message: receive value: (1)\n//  Logged a message: receive finished\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur."
    },
    {
        "title": "breakpointOnError()",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/breakpointonerror()",
        "html": "Return Value\n\nA publisher that raises a debugger signal upon receiving a failure.\n\nDiscussion\n\nWhen the upstream publisher fails with an error, this publisher raises the SIGTRAP signal, which stops the process in the debugger. Otherwise, this publisher passes through values and completions as-is.\n\nIn this example a PassthroughSubject publishes strings, but its downstream tryMap(_:) operator throws an error. This sends the error downstream as a Subscribers.Completion.failure(_:). The breakpointOnError() operator receives this completion and stops the app in the debugger.\n\n struct CustomError : Error {}\n let publisher = PassthroughSubject<String?, Error>()\n cancellable = publisher\n     .tryMap { stringValue in\n         throw CustomError()\n     }\n     .breakpointOnError()\n     .sink(\n         receiveCompletion: { completion in print(\"Completion: \\(String(describing: completion))\") },\n         receiveValue: { aValue in print(\"Result: \\(String(describing: aValue))\") }\n     )\n\n\n publisher.send(\"TEST DATA\")\n\n\n // Prints: \"error: Execution was interrupted, reason: signal SIGTRAP.\"\n // Depending on your specific environment, the console messages may\n // also include stack trace information, which is not shown here.\n\nSee Also\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "sink(receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/sink(receivevalue:)",
        "html": "Parameters\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveValue:) to observe values received by the publisher and print them to the console. This operator can only be used when the stream doesn\u2019t fail, that is, when the publisher\u2019s Failure type is Never.\n\nIn this example, a Range publisher publishes integers to a sink(receiveValue:) operator\u2019s receiveValue closure that prints them to the console:\n\nlet integers = (0...3)\nintegers.publisher\n    .sink { print(\"Received \\($0)\") }\n\n\n// Prints:\n//  Received 0\n//  Received 1\n//  Received 2\n//  Received 3\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior."
    },
    {
        "title": "sink(receiveCompletion:receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/sink(receivecompletion:receivevalue:)",
        "html": "Parameters\nreceiveComplete\n\nThe closure to execute on completion.\n\nreceiveValue\n\nThe closure to execute on receipt of a value.\n\nReturn Value\n\nA cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.\n\nDiscussion\n\nUse sink(receiveCompletion:receiveValue:) to observe values received by the publisher and process them using a closure you specify.\n\nIn this example, a Range publisher publishes integers to a sink(receiveCompletion:receiveValue:) operator\u2019s receiveValue closure that prints them to the console. Upon completion the sink(receiveCompletion:receiveValue:) operator\u2019s receiveCompletion closure indicates the successful termination of the stream.\n\nlet myRange = (0...3)\ncancellable = myRange.publisher\n    .sink(receiveCompletion: { print (\"completion: \\($0)\") },\n          receiveValue: { print (\"value: \\($0)\") })\n\n\n// Prints:\n//  value: 0\n//  value: 1\n//  value: 2\n//  value: 3\n//  completion: finished\n\n\nThis method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.\n\nSee Also\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "assign(to:on:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/assign(to:on:)",
        "html": "Parameters\nkeyPath\n\nA key path that indicates the property to assign. See Key-Path Expression in The Swift Programming Language to learn how to use key paths to specify a property of an object.\n\nobject\n\nThe object that contains the property. The subscriber assigns the object\u2019s property every time it receives a new value.\n\nReturn Value\n\nAn AnyCancellable instance. Call cancel() on this instance when you no longer want the publisher to automatically assign the property. Deinitializing this instance will also cancel automatic assignment.\n\nDiscussion\n\nUse the assign(to:on:) subscriber when you want to set a given property each time a publisher produces a value.\n\nIn this example, the assign(to:on:) sets the value of the anInt property on an instance of MyClass:\n\nclass MyClass {\n    var anInt: Int = 0 {\n        didSet {\n            print(\"anInt was set to: \\(anInt)\", terminator: \"; \")\n        }\n    }\n}\n\n\nvar myObject = MyClass()\nlet myRange = (0...2)\ncancellable = myRange.publisher\n    .assign(to: \\.anInt, on: myObject)\n\n\n// Prints: \"anInt was set to: 0; anInt was set to: 1; anInt was set to: 2\"\n\n\nImportant\n\nThe Subscribers.Assign instance created by this operator maintains a strong reference to object, and sets it to nil when the upstream publisher completes (either normally or with an error).\n\nSee Also\nConnecting Simple Subscribers\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never."
    },
    {
        "title": "eraseToAnyPublisher()",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/erasetoanypublisher()",
        "html": "Return Value\n\nAn AnyPublisher wrapping this publisher.\n\nDiscussion\n\nUse eraseToAnyPublisher() to expose an instance of AnyPublisher to the downstream subscriber, rather than this publisher\u2019s actual type. This form of type erasure preserves abstraction across API boundaries, such as different modules. When you expose your publishers as the AnyPublisher type, you can change the underlying implementation over time without affecting existing clients.\n\nThe following example shows two types that each have a publisher property. TypeWithSubject exposes this property as its actual type, PassthroughSubject, while TypeWithErasedSubject uses eraseToAnyPublisher() to expose it as an AnyPublisher. As seen in the output, a caller from another module can access TypeWithSubject.publisher as its native type. This means you can\u2019t change your publisher to a different type without breaking the caller. By comparison, TypeWithErasedSubject.publisher appears to callers as an AnyPublisher, so you can change the underlying publisher type at will.\n\npublic class TypeWithSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n}\npublic class TypeWithErasedSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n        .eraseToAnyPublisher()\n}\n\n\n// In another module:\nlet nonErased = TypeWithSubject()\nif let subject = nonErased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast nonErased.publisher.\")\n}\nlet erased = TypeWithErasedSubject()\nif let subject = erased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast erased.publisher.\")\n}\n\n\n// Prints \"Successfully cast nonErased.publisher.\"\n"
    },
    {
        "title": "map(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/map(_:_:)",
        "html": "Parameters\nkeyPath0\n\nThe key path of a property on Output.\n\nkeyPath1\n\nThe key path of another property on Output.\n\nReturn Value\n\nA publisher that publishes the values of two key paths as a tuple.\n\nDiscussion\n\nIn the following example, the map(_:_:) operator uses the Swift key path syntax to access the die1 and die2 members of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only these two values (as an (Int, Int) tuple), not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die1: Int\n    let die2: Int\n}\n\n\ncancellable = Just(DiceRoll(die1:Int.random(in:1...6),\n                            die2: Int.random(in:1...6)))\n    .map(\\.die1, \\.die2)\n    .sink { values in\n        print (\"Rolled: \\(values.0), \\(values.1) (total: \\(values.0 + values.1))\")\n    }\n// Prints \"Rolled: 6, 4 (total: 10)\" (or other random values).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "share()",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/share()",
        "html": "Return Value\n\nA class instance that shares elements received from its upstream to multiple subscribers.\n\nDiscussion\n\nThe publisher returned by this operator supports multiple subscribers, all of whom receive unchanged elements and completion states from the upstream publisher.\n\nTip\n\nPublishers.Share is effectively a combination of the Publishers.Multicast and PassthroughSubject publishers, with an implicit autoconnect().\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a share() operator to share the same random number to each of two subscribers. This example uses a delay(for:tolerance:scheduler:options:) operator only to prevent the first subscriber from exhausting the sequence publisher immediately; an asynchronous publisher wouldn\u2019t need this.\n\nlet pub = (1...3).publisher\n    .delay(for: 1, scheduler: DispatchQueue.main)\n    .map( { _ in return Int.random(in: 0...100) } )\n    .print(\"Random\")\n    .share()\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\n\n\n// Prints:\n// Random: receive value: (20)\n// Stream 1 received: 20\n// Stream 2 received: 20\n// Random: receive value: (85)\n// Stream 1 received: 85\n// Stream 2 received: 85\n// Random: receive value: (98)\n// Stream 1 received: 98\n// Stream 2 received: 98\n\n\nWithout the share() operator, stream 1 receives three random values, followed by stream 2 receiving three different random values.\n\nAlso note that Publishers.Share is a class rather than a structure like most other publishers. This means you can use this operator to create a publisher instance that uses reference semantics.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers."
    },
    {
        "title": "multicast(subject:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/multicast(subject:)",
        "html": "Parameters\nsubject\n\nA subject to deliver elements to downstream subscribers.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(_:), this method produces a publisher that shares the provided Subject among all the downstream subscribers.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(subject:) operator with a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast(subject: PassthroughSubject<(String, Int), Never>())\n\n\ncancellable1 = pub\n    .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n    .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 78))\n// Stream 2 received: (\"First\", 78)\n// Stream 1 received: (\"First\", 78)\n// Random: receive value: ((\"Second\", 98))\n// Stream 2 received: (\"Second\", 98)\n// Stream 1 received: (\"Second\", 98)\n// Random: receive value: ((\"Third\", 61))\n// Stream 2 received: (\"Third\", 61)\n// Stream 1 received: (\"Third\", 61)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "buffer(size:prefetch:whenFull:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/buffer(size:prefetch:whenfull:)",
        "html": "Parameters\nsize\n\nThe maximum number of elements to store.\n\nprefetch\n\nThe strategy to initially populate the buffer.\n\nwhenFull\n\nThe action to take when the buffer becomes full.\n\nReturn Value\n\nA publisher that buffers elements received from an upstream publisher.\n\nDiscussion\n\nUse buffer(size:prefetch:whenFull:) to collect a specific number of elements from an upstream publisher before republishing them to the downstream subscriber according to the Publishers.BufferingStrategy and Publishers.PrefetchStrategy strategy you specify.\n\nIf the publisher completes before reaching the size threshold, it buffers the elements and publishes them downstream prior to completion."
    },
    {
        "title": "throttle(for:scheduler:latest:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/throttle(for:scheduler:latest:)",
        "html": "Parameters\ninterval\n\nThe interval at which to find and emit either the most recent or the first element, expressed in the time system of the scheduler.\n\nscheduler\n\nThe scheduler on which to publish elements.\n\nlatest\n\nA Boolean value that indicates whether to publish the most recent element. If false, the publisher emits the first element received during the interval.\n\nReturn Value\n\nA publisher that emits either the most-recent or first element received during the specified interval.\n\nDiscussion\n\nUse throttle(for:scheduler:latest:) to selectively republish elements from an upstream publisher during an interval you specify. Other elements received from the upstream in the throttling interval aren\u2019t republished.\n\nIn the example below, a Timer.TimerPublisher produces elements on one-second intervals; the throttle(for:scheduler:latest:) operator delivers the first event, then republishes only the latest event in the following ten second intervals:\n\ncancellable = Timer.publish(every: 3.0, on: .main, in: .default)\n    .autoconnect()\n    .print(\"\\(Date().description)\")\n    .throttle(for: 10.0, scheduler: RunLoop.main, latest: true)\n    .sink(\n        receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print(\"Received Timestamp \\($0).\") }\n     )\n\n\n// Prints:\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:26:57 +0000)\n //    Received Timestamp 2020-03-19 18:26:57 +0000.\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:00 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:03 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:06 +0000)\n //    Publish at: 2020-03-19 18:26:54 +0000: receive value: (2020-03-19 18:27:09 +0000)\n //    Received Timestamp 2020-03-19 18:27:09 +0000.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "delay(for:tolerance:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/delay(for:tolerance:scheduler:options:)",
        "html": "Parameters\ninterval\n\nThe amount of time to delay.\n\ntolerance\n\nThe allowed tolerance in delivering delayed events. The Delay publisher may deliver elements this much sooner or later than the interval specifies.\n\nscheduler\n\nThe scheduler to deliver the delayed events.\n\noptions\n\nOptions relevant to the scheduler\u2019s behavior.\n\nReturn Value\n\nA publisher that delays delivery of elements and completion to the downstream receiver.\n\nDiscussion\n\nUse delay(for:tolerance:scheduler:options:) when you need to delay the delivery of elements to a downstream by a specified amount of time.\n\nIn this example, a Timer publishes an event every second. The delay(for:tolerance:scheduler:options:) operator holds the delivery of the initial element for 3 seconds (\u00b10.5 seconds), after which each element is delivered to the downstream on the main run loop after the specified delay:\n\nlet df = DateFormatter()\ndf.dateStyle = .none\ndf.timeStyle = .long\ncancellable = Timer.publish(every: 1.0, on: .main, in: .default)\n    .autoconnect()\n    .handleEvents(receiveOutput: { date in\n        print (\"Sending Timestamp \\'\\(df.string(from: date))\\' to delay()\")\n    })\n    .delay(for: .seconds(3), scheduler: RunLoop.main, options: .none)\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \"\\n\") },\n        receiveValue: { value in\n            let now = Date()\n            print (\"At \\(df.string(from: now)) received  Timestamp \\'\\(df.string(from: value))\\' sent: \\(String(format: \"%.2f\", now.timeIntervalSince(value))) secs ago\", terminator: \"\\n\")\n        }\n    )\n\n\n// Prints:\n//    Sending Timestamp '5:02:33 PM PDT' to delay()\n//    Sending Timestamp '5:02:34 PM PDT' to delay()\n//    Sending Timestamp '5:02:35 PM PDT' to delay()\n//    Sending Timestamp '5:02:36 PM PDT' to delay()\n//    At 5:02:36 PM PDT received  Timestamp '5:02:33 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:37 PM PDT' to delay()\n//    At 5:02:37 PM PDT received  Timestamp '5:02:34 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:38 PM PDT' to delay()\n//    At 5:02:38 PM PDT received  Timestamp '5:02:35 PM PDT' sent: 3.00 secs ago\n\n\nThe delay affects the delivery of elements and completion, but not of the original subscription.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/flatmap(maxpublishers:_:)-1tdfg",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "debounce(for:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/debounce(for:scheduler:options:)",
        "html": "Parameters\ndueTime\n\nThe time the publisher should wait before publishing an element.\n\nscheduler\n\nThe scheduler on which this publisher delivers elements\n\noptions\n\nScheduler options that customize this publisher\u2019s delivery of elements.\n\nReturn Value\n\nA publisher that publishes events only after a specified time elapses.\n\nDiscussion\n\nUse the debounce(for:scheduler:options:) operator to control the number of values and time between delivery of values from the upstream publisher. This operator is useful to process bursty or high-volume event streams where you need to reduce the number of values delivered to the downstream to a rate you specify.\n\nIn this example, a PassthroughSubject publishes elements on a schedule defined by the bounces array. The array is composed of tuples representing a value sent by the PassthroughSubject, and a TimeInterval ranging from one-quarter second up to 2 seconds that drives a delivery timer. As the queue builds, elements arriving faster than one-half second debounceInterval are discarded, while elements arriving at a rate slower than debounceInterval are passed through to the sink(receiveValue:) operator.\n\nlet bounces:[(Int,TimeInterval)] = [\n    (0, 0),\n    (1, 0.25),  // 0.25s interval since last index\n    (2, 1),     // 0.75s interval since last index\n    (3, 1.25),  // 0.25s interval since last index\n    (4, 1.5),   // 0.25s interval since last index\n    (5, 2)      // 0.5s interval since last index\n]\n\n\nlet subject = PassthroughSubject<Int, Never>()\ncancellable = subject\n    .debounce(for: .seconds(0.5), scheduler: RunLoop.main)\n    .sink { index in\n        print (\"Received index \\(index)\")\n    }\n\n\nfor bounce in bounces {\n    DispatchQueue.main.asyncAfter(deadline: .now() + bounce.1) {\n        subject.send(bounce.0)\n    }\n}\n\n\n// Prints:\n//  Received index 1\n//  Received index 4\n//  Received index 5\n\n\n//  Here is the event flow shown from the perspective of time, showing value delivery through the `debounce()` operator:\n\n\n//  Time 0: Send index 0.\n//  Time 0.25: Send index 1. Index 0 was waiting and is discarded.\n//  Time 0.75: Debounce period ends, publish index 1.\n//  Time 1: Send index 2.\n//  Time 1.25: Send index 3. Index 2 was waiting and is discarded.\n//  Time 1.5: Send index 4. Index 3 was waiting and is discarded.\n//  Time 2: Debounce period ends, publish index 4. Also, send index 5.\n//  Time 2.5: Debounce period ends, publish index 5.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/flatmap(maxpublishers:_:)-2ysbp",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "retry(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/retry(_:)",
        "html": "Parameters\nretries\n\nThe number of times to attempt to recreate the subscription.\n\nReturn Value\n\nA publisher that attempts to recreate its subscription to a failed upstream publisher.\n\nDiscussion\n\nUse retry(_:) to try a connecting to an upstream publisher after a failed connection attempt.\n\nIn the example below, a URLSession.DataTaskPublisher attempts to connect to a remote URL. If the connection attempt succeeds, it publishes the remote service\u2019s HTML to the downstream publisher and completes normally. Otherwise, the retry operator attempts to reestablish the connection. If after three attempts the publisher still can\u2019t connect to the remote URL, the catch(_:) operator replaces the error with a new publisher that publishes a \u201cconnection timed out\u201d HTML page. After the downstream subscriber receives the timed out message, the stream completes normally.\n\nstruct WebSiteData: Codable {\n    var rawHTML: String\n}\n\n\nlet myURL = URL(string: \"https://www.example.com\")\n\n\ncancellable = URLSession.shared.dataTaskPublisher(for: myURL!)\n    .retry(3)\n    .map({ (page) -> WebSiteData in\n        return WebSiteData(rawHTML: String(decoding: page.data, as: UTF8.self))\n    })\n    .catch { error in\n        return Just(WebSiteData(rawHTML: \"<HTML>Unable to load page - timed out.</HTML>\"))\n}\n.sink(receiveCompletion: { print (\"completion: \\($0)\") },\n      receiveValue: { print (\"value: \\($0)\") }\n )\n\n\n// Prints: The HTML content from the remote URL upon a successful connection,\n//         or returns \"<HTML>Unable to load page - timed out.</HTML>\" if the number of retries exceeds the specified value.\n\n\nAfter exceeding the specified number of retries, the publisher passes the failure to the downstream receiver.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/flatmap(maxpublishers:_:)-9ybn5",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nDiscussion\n\nCombine\u2018s flatMap(maxPublishers:_:) operator performs a similar function to the doc://com.apple.documentation/documentation/Swift/Sequence/2905332-flatmap operator in the Swift standard library, but turns the elements from one kind of publisher into a new publisher that is sent to subscribers. Use flatMap(maxPublishers:_:) when you want to create a new series of events for downstream subscribers based on the received value. The closure creates the new Publisher based on the received value. The new Publisher can emit more than one event, and successful completion of the new Publisher does not complete the overall stream. Failure of the new Publisher causes the overall stream to fail.\n\nIn the example below, a PassthroughSubject publishes WeatherStation elements. The flatMap(maxPublishers:_:) receives each element, creates a URL from it, and produces a new URLSession.DataTaskPublisher, which will publish the data loaded from that URL.\n\npublic struct WeatherStation {\n    public let stationID: String\n}\n\n\nvar weatherPublisher = PassthroughSubject<WeatherStation, URLError>()\n\n\ncancellable = weatherPublisher.flatMap { station -> URLSession.DataTaskPublisher in\n    let url = URL(string:\"https://weatherapi.example.com/stations/\\(station.stationID)/observations/latest\")!\n    return URLSession.shared.dataTaskPublisher(for: url)\n}\n.sink(\n    receiveCompletion: { completion in\n        // Handle publisher completion (normal or error).\n    },\n    receiveValue: {\n        // Process the received data.\n    }\n )\n\n\nweatherPublisher.send(WeatherStation(stationID: \"KSFO\")) // San Francisco, CA\nweatherPublisher.send(WeatherStation(stationID: \"EGLC\")) // London, UK\nweatherPublisher.send(WeatherStation(stationID: \"ZBBB\")) // Beijing, CN\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "merge(with:_:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/merge(with:_:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nh\n\nAn eighth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\nlet pubH = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF, pubG, pubH)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\npubH.send(1000)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\npubH.send(1001)\n\n\n//Prints: \"1 40 90 -1 33 44 54 1000 2 50 100 -2 33 33 54 1001\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "zip(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/zip(_:_:_:)-5jjkw",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from three upstream publishers.\n\nDiscussion\n\nUse zip(_:_:_:) to return a new publisher that combines the elements from two other publishers using a transformation you specify to publish a new value to the downstream subscriber. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject that emit values; zip(_:_:_:) receives the oldest value from each publisher and uses the Int from numbersPub and publishes a string that repeats the String from lettersPub and emojiPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(letters, emoji) { anInt, aLetter, anEmoji in\n        (\"\\(String(repeating: anEmoji, count: anInt)) \\(String(repeating: aLetter, count: anInt))\")\n    }\n    .sink { print(\"\\($0)\") }\n\n\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:        emojiPub:            zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:        emojiPub:            zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"    emojiPub:\"\ud83d\ude00\"        zip output: \"\ud83d\ude00 A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"    emojiPub:            zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:        emojiPub:\"\ud83d\ude00\", \"\ud83e\udd70\"  zip output: \"\ud83e\udd70\ud83e\udd70 BB\"\n\n\n// Prints:\n// \ud83d\ude00 A\n// \ud83e\udd70\ud83e\udd70 BB\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/zip(_:_:)-24loa",
        "html": "Parameters\nother\n\nAnother publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that uses the transform closure to emit new elements, produced by combining the most recent value from two upstream publishers.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two publishers using a transformation you specify to publish a new value to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together that the operator uses in the transformation.\n\nIn this example, PassthroughSubject instances numbersPub and lettersPub emit values; zip(_:_:) receives the oldest value from each publisher, uses the Int from numbersPub and publishes a string that repeats the String from lettersPub that many times.\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\ncancellable = numbersPub\n    .zip(lettersPub) { anInt, aLetter in\n        String(repeating: aLetter, count: anInt)\n    }\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:       zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:       zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:       zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"   zip output: \"A\"\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"   zip output: \"BB\"\n// Prints:\n//  A\n//  BB\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "merge(with:_:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/merge(with:_:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\ng\n\nA seventh publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers; it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\nlet pubG = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubE, pubG)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\npubG.send(54)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\npubG.send(54)\n\n\n//Prints: \"1 40 90 -1 33 44 54 2 50 100 -2 33 33 54\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "zip(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/zip(_:)",
        "html": "Parameters\nother\n\nAnother publisher.\n\nReturn Value\n\nA publisher that emits pairs of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:) to combine the latest elements from two publishers and emit a tuple to the downstream. The returned publisher waits until both publishers have emitted an event, then delivers the oldest unconsumed event from each publisher together as a tuple to the subscriber.\n\nMuch like a zipper or zip fastener on a piece of clothing pulls together rows of teeth to link the two sides, zip(_:) combines streams from two different publishers by linking pairs of elements from each side.\n\nIn this example, numbers and letters are PassthroughSubjects that emit values; once zip(_:) receives one value from each, it publishes the pair as a tuple to the downstream subscriber. It then waits for the next pair of values.\n\n let numbersPub = PassthroughSubject<Int, Never>()\n let lettersPub = PassthroughSubject<String, Never>()\n\n\n cancellable = numbersPub\n     .zip(lettersPub)\n     .sink { print(\"\\($0)\") }\n numbersPub.send(1)    // numbersPub: 1      lettersPub:        zip output: <none>\n numbersPub.send(2)    // numbersPub: 1,2    lettersPub:        zip output: <none>\n letters.send(\"A\")     // numbers: 1,2       letters:\"A\"        zip output: <none>\n numbers.send(3)       // numbers: 1,2,3     letters:           zip output: (1,\"A\")\n letters.send(\"B\")     // numbers: 1,2,3     letters: \"B\"       zip output: (2,\"B\")\n\n\n // Prints:\n //  (1, \"A\")\n //  (2, \"B\")\n\n\nIf either upstream publisher finishes successfully or fails with an error, the zipped publisher does the same.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "merge(with:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/merge(with:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\n\n\n// Prints: \"1 40 90 -1 2 50 100 -2 \"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "zip(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/zip(_:_:)-171j8",
        "html": "Parameters\npublisher1\n\nA second publisher.\n\npublisher2\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits groups of elements from the upstream publishers as tuples.\n\nDiscussion\n\nUse zip(_:_:) to return a new publisher that combines the elements from two additional publishers to publish a tuple to the downstream. The returned publisher waits until all three publishers have emitted an event, then delivers the oldest unconsumed event from each publisher as a tuple to the subscriber.\n\nIn this example, numbersPub, lettersPub and emojiPub are each a PassthroughSubject; zip(_:_:) receives the oldest unconsumed value from each publisher and combines them into a tuple that it republishes to the downstream:\n\nlet numbersPub = PassthroughSubject<Int, Never>()\nlet lettersPub = PassthroughSubject<String, Never>()\nlet emojiPub = PassthroughSubject<String, Never>()\n\n\ncancellable = numbersPub\n    .zip(lettersPub, emojiPub)\n    .sink { print(\"\\($0)\") }\nnumbersPub.send(1)     // numbersPub: 1      lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(2)     // numbersPub: 1,2    lettersPub:          emojiPub:        zip output: <none>\nnumbersPub.send(3)     // numbersPub: 1,2,3  lettersPub:          emojiPub:        zip output: <none>\nlettersPub.send(\"A\")   // numbersPub: 1,2,3  lettersPub: \"A\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83d\ude00\")    // numbersPub: 2,3    lettersPub: \"A\"      emojiPub: \"\ud83d\ude00\"   zip output: (1, \"A\", \"\ud83d\ude00\")\nlettersPub.send(\"B\")   // numbersPub: 2,3    lettersPub: \"B\"      emojiPub:        zip output: <none>\nemojiPub.send(\"\ud83e\udd70\")    // numbersPub: 3      lettersPub:          emojiPub:        zip output: (2, \"B\", \"\ud83e\udd70\")\n\n\n// Prints:\n//  (1, \"A\", \"\ud83d\ude00\")\n//  (2, \"B\", \"\ud83e\udd70\")\n\n\nIf any upstream publisher finishes successfully or fails with an error, so too does the zipped publisher.\n\nSee Also\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "merge(with:_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/merge(with:_:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nf\n\nA sixth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\nlet pubD = PassthroughSubject<Int, Never>()\nlet pubE = PassthroughSubject<Int, Never>()\nlet pubF = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC, pubD, pubE, pubF)\n    .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubD.send(-1)\npubE.send(33)\npubF.send(44)\n\n\npubA.send(2)\npubB.send(50)\npubC.send(100)\npubD.send(-2)\npubE.send(33)\npubF.send(33)\n\n\n//Prints: \"1 40 90 -1 33 44 2 50 100 -2 33 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "merge(with:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/merge(with:_:_:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nd\n\nA fourth publisher.\n\ne\n\nA fifth publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:_:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:_:). To combine elements from multiple upstream publishers, use zip(_:_:_:).\n\nIn this example, as merge(with:_:_:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\n let pubA = PassthroughSubject<Int, Never>()\n let pubB = PassthroughSubject<Int, Never>()\n let pubC = PassthroughSubject<Int, Never>()\n let pubD = PassthroughSubject<Int, Never>()\n let pubE = PassthroughSubject<Int, Never>()\n\n\n cancellable = pubA\n     .merge(with: pubB, pubC, pubD, pubE)\n     .sink { print(\"\\($0)\", terminator: \" \" ) }\n\n\n pubA.send(1)\n pubB.send(40)\n pubC.send(90)\n pubD.send(-1)\n pubE.send(33)\n pubA.send(2)\n pubB.send(50)\n pubC.send(100)\n pubD.send(-2)\n pubE.send(33)\n\n\n // Prints: \"1 40 90 -1 33 2 50 100 -2 33\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/flatmap(maxpublishers:_:)-26j9",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nDiscussion\n\nCombine\u2018s flatMap(maxPublishers:_:) operator performs a similar function to the doc://com.apple.documentation/documentation/Swift/Sequence/2905332-flatmap operator in the Swift standard library, but turns the elements from one kind of publisher into a new publisher that is sent to subscribers. Use flatMap(maxPublishers:_:) when you want to create a new series of events for downstream subscribers based on the received value. The closure creates the new Publisher based on the received value. The new Publisher can emit more than one event, and successful completion of the new Publisher does not complete the overall stream. Failure of the new Publisher causes the overall stream to fail.\n\nIn the example below, a PassthroughSubject publishes WeatherStation elements. The flatMap(maxPublishers:_:) receives each element, creates a URL from it, and produces a new URLSession.DataTaskPublisher, which will publish the data loaded from that URL.\n\npublic struct WeatherStation {\n    public let stationID: String\n}\n\n\nvar weatherPublisher = PassthroughSubject<WeatherStation, URLError>()\n\n\ncancellable = weatherPublisher.flatMap { station -> URLSession.DataTaskPublisher in\n    let url = URL(string:\"https://weatherapi.example.com/stations/\\(station.stationID)/observations/latest\")!\n    return URLSession.shared.dataTaskPublisher(for: url)\n}\n.sink(\n    receiveCompletion: { completion in\n        // Handle publisher completion (normal or error).\n    },\n    receiveValue: {\n        // Process the received data.\n    }\n )\n\n\nweatherPublisher.send(WeatherStation(stationID: \"KSFO\")) // San Francisco, CA\nweatherPublisher.send(WeatherStation(stationID: \"EGLC\")) // London, UK\nweatherPublisher.send(WeatherStation(stationID: \"ZBBB\")) // Beijing, CN\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "flatMap(maxPublishers:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/flatmap(maxpublishers:_:)-2vn1e",
        "html": "Parameters\nmaxPublishers\n\nSpecifies the maximum number of concurrent publisher subscriptions, or unlimited if unspecified.\n\ntransform\n\nA closure that takes an element as a parameter and returns a publisher that produces elements of that type.\n\nReturn Value\n\nA publisher that transforms elements from an upstream publisher into a publisher of that element\u2019s type.\n\nSee Also\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "eraseToAnyPublisher()",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/erasetoanypublisher()",
        "html": "Return Value\n\nAn AnyPublisher wrapping this publisher.\n\nDiscussion\n\nUse eraseToAnyPublisher() to expose an instance of AnyPublisher to the downstream subscriber, rather than this publisher\u2019s actual type. This form of type erasure preserves abstraction across API boundaries, such as different modules. When you expose your publishers as the AnyPublisher type, you can change the underlying implementation over time without affecting existing clients.\n\nThe following example shows two types that each have a publisher property. TypeWithSubject exposes this property as its actual type, PassthroughSubject, while TypeWithErasedSubject uses eraseToAnyPublisher() to expose it as an AnyPublisher. As seen in the output, a caller from another module can access TypeWithSubject.publisher as its native type. This means you can\u2019t change your publisher to a different type without breaking the caller. By comparison, TypeWithErasedSubject.publisher appears to callers as an AnyPublisher, so you can change the underlying publisher type at will.\n\npublic class TypeWithSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n}\npublic class TypeWithErasedSubject {\n    public let publisher: some Publisher = PassthroughSubject<Int,Never>()\n        .eraseToAnyPublisher()\n}\n\n\n// In another module:\nlet nonErased = TypeWithSubject()\nif let subject = nonErased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast nonErased.publisher.\")\n}\nlet erased = TypeWithErasedSubject()\nif let subject = erased.publisher as? PassthroughSubject<Int,Never> {\n    print(\"Successfully cast erased.publisher.\")\n}\n\n\n// Prints \"Successfully cast nonErased.publisher.\"\n"
    },
    {
        "title": "dropFirst(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/dropfirst(_:)",
        "html": "Parameters\ncount\n\nThe number of elements to omit. The default is 1.\n\nReturn Value\n\nA publisher that doesn\u2019t republish the first count elements.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the upstream publisher, and republish the remaining elements.\n\nThe example below drops the first five elements from the stream:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncancellable = numbers.publisher\n    .dropFirst(5)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"6 7 8 9 10 \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "drop(while:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/drop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an upstream publisher until the element received meets a condition you specify.\n\nIn the example below, the operator omits all elements in the stream until the first element arrives that\u2019s a positive integer, after which the operator publishes all remaining elements:\n\nlet numbers = [-62, -1, 0, 10, 0, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .drop { $0 <= 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10 0, 22 41 -1 5\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/combinelatest(_:_:_:)-5044h",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, combineLatest(_:_:_:) receives input from any of the publishers, combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n//\n// Prints:\n//  Result: (2, 2, 9, 1).\n//  Result: (3, 2, 9, 1).\n//  Result: (3, 12, 9, 1).\n//  Result: (13, 12, 9, 1).\n//  Result: (13, 12, 19, 1).\n\n\nIf any individual publisher of the combined set terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers."
    },
    {
        "title": "drop(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/drop(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA publisher to monitor for its first emitted element.\n\nReturn Value\n\nA publisher that drops elements from the upstream publisher until the other publisher produces a value.\n\nDiscussion\n\nUse drop(untilOutputFrom:) to ignore elements from the upstream publisher until another, second, publisher delivers its first element. This publisher requests a single value from the second publisher, and it ignores (drops) all elements from the upstream publisher until the second publisher produces a value. After the second publisher produces an element, drop(untilOutputFrom:) cancels its subscription to the second publisher, and allows events from the upstream publisher to pass through.\n\nAfter this publisher receives a subscription from the upstream publisher, it passes through backpressure requests from downstream to the upstream publisher. If the upstream publisher acts on those requests before the other publisher produces an item, this publisher drops the elements it receives from the upstream publisher.\n\nIn the example below, the pub1 publisher defers publishing its elements until the pub2 publisher delivers its first element:\n\nlet upstream = PassthroughSubject<Int,Never>()\nlet second = PassthroughSubject<String,Never>()\ncancellable = upstream\n    .drop(untilOutputFrom: second)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\nupstream.send(1)\nupstream.send(2)\nsecond.send(\"A\")\nupstream.send(3)\nupstream.send(4)\n// Prints \"3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "filter(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/filter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value indicating whether to republish the element.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nCombine\u2019s filter(_:) operator performs an operation similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018365-filter in the Swift Standard Library: it uses a closure to test each element to determine whether to republish the element to the downstream subscriber.\n\nThe following example, uses a filter operation that receives an Int and only republishes a value if it\u2019s even.\n\nlet numbers: [Int] = [1, 2, 3, 4, 5]\ncancellable = numbers.publisher\n    .filter { $0 % 2 == 0 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 4\"\n\nSee Also\nFiltering Elements\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "combineLatest(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/combinelatest(_:)",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest(_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To pair elements from multiple publishers, use zip(_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn this example, PassthroughSubject pub1 and also pub2 emit values; as combineLatest(_:) receives input from either upstream publisher, it combines the latest value from each publisher into a tuple and publishes it.\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(3)\npub1.send(45)\npub2.send(22)\n\n\n// Prints:\n//    Result: (2, 2).    // pub1 latest = 2, pub2 latest = 2\n//    Result: (3, 2).    // pub1 latest = 3, pub2 latest = 2\n//    Result: (45, 2).   // pub1 latest = 45, pub2 latest = 2\n//    Result: (45, 22).  // pub1 latest = 45, pub2 latest = 22\n\n\nWhen all upstream publishers finish, this publisher finishes. If an upstream publisher never publishes a value, this publisher never finishes.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "debounce(for:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/debounce(for:scheduler:options:)",
        "html": "Parameters\ndueTime\n\nThe time the publisher should wait before publishing an element.\n\nscheduler\n\nThe scheduler on which this publisher delivers elements\n\noptions\n\nScheduler options that customize this publisher\u2019s delivery of elements.\n\nReturn Value\n\nA publisher that publishes events only after a specified time elapses.\n\nDiscussion\n\nUse the debounce(for:scheduler:options:) operator to control the number of values and time between delivery of values from the upstream publisher. This operator is useful to process bursty or high-volume event streams where you need to reduce the number of values delivered to the downstream to a rate you specify.\n\nIn this example, a PassthroughSubject publishes elements on a schedule defined by the bounces array. The array is composed of tuples representing a value sent by the PassthroughSubject, and a TimeInterval ranging from one-quarter second up to 2 seconds that drives a delivery timer. As the queue builds, elements arriving faster than one-half second debounceInterval are discarded, while elements arriving at a rate slower than debounceInterval are passed through to the sink(receiveValue:) operator.\n\nlet bounces:[(Int,TimeInterval)] = [\n    (0, 0),\n    (1, 0.25),  // 0.25s interval since last index\n    (2, 1),     // 0.75s interval since last index\n    (3, 1.25),  // 0.25s interval since last index\n    (4, 1.5),   // 0.25s interval since last index\n    (5, 2)      // 0.5s interval since last index\n]\n\n\nlet subject = PassthroughSubject<Int, Never>()\ncancellable = subject\n    .debounce(for: .seconds(0.5), scheduler: RunLoop.main)\n    .sink { index in\n        print (\"Received index \\(index)\")\n    }\n\n\nfor bounce in bounces {\n    DispatchQueue.main.asyncAfter(deadline: .now() + bounce.1) {\n        subject.send(bounce.0)\n    }\n}\n\n\n// Prints:\n//  Received index 1\n//  Received index 4\n//  Received index 5\n\n\n//  Here is the event flow shown from the perspective of time, showing value delivery through the `debounce()` operator:\n\n\n//  Time 0: Send index 0.\n//  Time 0.25: Send index 1. Index 0 was waiting and is discarded.\n//  Time 0.75: Debounce period ends, publish index 1.\n//  Time 1: Send index 2.\n//  Time 1.25: Send index 3. Index 2 was waiting and is discarded.\n//  Time 1.5: Send index 4. Index 3 was waiting and is discarded.\n//  Time 2: Debounce period ends, publish index 4. Also, send index 5.\n//  Time 2.5: Debounce period ends, publish index 5.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "contains(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/contains(_:)",
        "html": "Parameters\noutput\n\nAn element to match against.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(_:) to find the first element in an upstream that\u2019s equal to the supplied argument. The contains publisher consumes all received elements until the upstream publisher produces a matching element. Upon finding the first match, it emits true and finishes normally. If the upstream finishes normally without producing a matching element, this publisher emits false and finishes.\n\nIn the example below, the contains(_:) operator emits true the first time it receives the value 5 from the numbers.publisher, and then finishes normally.\n\nlet numbers = [-1, 5, 10, 5]\nnumbers.publisher\n    .contains(5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "count()",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/count()",
        "html": "Return Value\n\nA publisher that consumes all elements until the upstream publisher finishes, then emits a single value with the total number of elements received.\n\nDiscussion\n\nUse count() to determine the number of elements received from the upstream publisher before it completes:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .count()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"11\"\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "delay(for:tolerance:scheduler:options:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/delay(for:tolerance:scheduler:options:)",
        "html": "Parameters\ninterval\n\nThe amount of time to delay.\n\ntolerance\n\nThe allowed tolerance in delivering delayed events. The Delay publisher may deliver elements this much sooner or later than the interval specifies.\n\nscheduler\n\nThe scheduler to deliver the delayed events.\n\noptions\n\nOptions relevant to the scheduler\u2019s behavior.\n\nReturn Value\n\nA publisher that delays delivery of elements and completion to the downstream receiver.\n\nDiscussion\n\nUse delay(for:tolerance:scheduler:options:) when you need to delay the delivery of elements to a downstream by a specified amount of time.\n\nIn this example, a Timer publishes an event every second. The delay(for:tolerance:scheduler:options:) operator holds the delivery of the initial element for 3 seconds (\u00b10.5 seconds), after which each element is delivered to the downstream on the main run loop after the specified delay:\n\nlet df = DateFormatter()\ndf.dateStyle = .none\ndf.timeStyle = .long\ncancellable = Timer.publish(every: 1.0, on: .main, in: .default)\n    .autoconnect()\n    .handleEvents(receiveOutput: { date in\n        print (\"Sending Timestamp \\'\\(df.string(from: date))\\' to delay()\")\n    })\n    .delay(for: .seconds(3), scheduler: RunLoop.main, options: .none)\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \"\\n\") },\n        receiveValue: { value in\n            let now = Date()\n            print (\"At \\(df.string(from: now)) received  Timestamp \\'\\(df.string(from: value))\\' sent: \\(String(format: \"%.2f\", now.timeIntervalSince(value))) secs ago\", terminator: \"\\n\")\n        }\n    )\n\n\n// Prints:\n//    Sending Timestamp '5:02:33 PM PDT' to delay()\n//    Sending Timestamp '5:02:34 PM PDT' to delay()\n//    Sending Timestamp '5:02:35 PM PDT' to delay()\n//    Sending Timestamp '5:02:36 PM PDT' to delay()\n//    At 5:02:36 PM PDT received  Timestamp '5:02:33 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:37 PM PDT' to delay()\n//    At 5:02:37 PM PDT received  Timestamp '5:02:34 PM PDT' sent: 3.00 secs ago\n//    Sending Timestamp '5:02:38 PM PDT' to delay()\n//    At 5:02:38 PM PDT received  Timestamp '5:02:35 PM PDT' sent: 3.00 secs ago\n\n\nThe delay affects the delivery of elements and completion, but not of the original subscription.\n\nSee Also\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "contains(where:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/contains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(where:) to find the first element in an upstream that satisfies the closure you provide. This operator consumes elements produced from the upstream publisher until the upstream publisher produces a matching element.\n\nThis operator is useful when the upstream publisher produces elements that don\u2019t conform to Equatable.\n\nIn the example below, the contains(where:) operator tests elements against the supplied closure and emits true for the first elements that\u2019s greater than 4, and then finishes normally.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .contains {$0 > 4}\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/compactmap(_:)",
        "html": "Parameters\ntransform\n\nA closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of the calling the supplied closure.\n\nDiscussion\n\nCombine\u2019s compactMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/2950916-compactmap in the Swift standard library: the compactMap(_:) operator in Combine removes nil elements in a publisher\u2019s stream and republishes non-nil elements to the downstream subscriber.\n\nThe example below uses a range of numbers as the source for a collection based publisher. The compactMap(_:) operator consumes each element from the numbers publisher attempting to access the dictionary using the element as the key. If the example\u2019s dictionary returns a nil, due to a non-existent key, compactMap(_:) filters out the nil (missing) elements.\n\nlet numbers = (0...5)\nlet romanNumeralDict: [Int : String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ncancellable = numbers.publisher\n    .compactMap { romanNumeralDict[$0] }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"I II III V\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "collect(_:options:)",
        "url": "https://developer.apple.com/documentation/combine/anypublisher/collect(_:options:)",
        "html": "Parameters\nstrategy\n\nThe timing group strategy used by the operator to collect and publish elements.\n\noptions\n\nScheduler options to use for the strategy.\n\nReturn Value\n\nA publisher that collects elements by a given strategy, and emits a single array of the collection.\n\nDiscussion\n\nUse collect(_:options:) to emit arrays of elements on a schedule specified by a Scheduler and Stride that you provide. At the end of each scheduled interval, the publisher sends an array that contains the items it collected. If the upstream publisher finishes before filling the buffer, the publisher sends an array that contains items it received. This may be fewer than the number of elements specified in the requested Stride.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThe example above collects timestamps generated on a one-second Timer in groups (Stride) of five.\n\nlet sub = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .collect(.byTime(RunLoop.main, .seconds(5)))\n    .sink { print(\"\\($0)\", terminator: \"\\n\\n\") }\n\n\n// Prints: \"[2020-01-24 00:54:46 +0000, 2020-01-24 00:54:47 +0000,\n//          2020-01-24 00:54:48 +0000, 2020-01-24 00:54:49 +0000,\n//          2020-01-24 00:54:50 +0000]\"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "init(sequence:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/sequence/init(sequence:)",
        "html": "Parameters\nsequence\n\nThe sequence of elements to publish."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/sequence/==(_:_:)",
        "html": "Parameters\nlhs\n\nA Sequence publisher to compare for equality.\n\nrhs\n\nAnother Sequewnce publisher to compare for equality.\n\nReturn Value\n\ntrue if the publishers have equal sequence properties; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/sequence/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Sequence<Elements, Failure>, Publishers.Sequence<Elements, Failure>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when Elements conforms to Equatable, Elements conforms to Sequence, and Failure conforms to Error."
    },
    {
        "title": ">=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/_=(_:_:)-6lv9s",
        "html": "Discussion\n\nIf rhs is .unlimited, then the result is always false. Otherwise, the operator compares the demand\u2019s max value to lhs."
    },
    {
        "title": "tryRemoveDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/tryremoveduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first. If this closure throws an error, the publisher terminates with the thrown error.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse tryRemoveDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of elements using an error-throwing closure you provide. If your closure throws an error, the publisher terminates with the error.\n\nIn the example below, the closure provided to tryRemoveDuplicates(by:) returns true when two consecutive elements are equal, thereby filtering out 0, 1, 2, and 3. However, the closure throws an error when it encounters 4. The publisher then terminates with this error.\n\nstruct BadValuesError: Error {}\nlet numbers = [0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\ncancellable = numbers.publisher\n    .tryRemoveDuplicates { first, second -> Bool in\n        if (first == 4 && second == 4) {\n            throw BadValuesError()\n        }\n        return first == second\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n // Prints: \"0 1 2 3 4 failure(BadValuesError()\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip4/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "output(in:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/output(in:)",
        "html": "Parameters\nrange\n\nA range that indicates which elements to publish.\n\nReturn Value\n\nA publisher that publishes elements specified by a range.\n\nDiscussion\n\nUse output(in:) to republish a range indices you specify in the published stream. After publishing all elements, the publisher finishes normally. If the publisher completes normally or with an error before producing all the elements in the range, it doesn\u2019t publish the remaining elements.\n\nIn the example below, an array publisher emits the subset of elements at the indices in the specified range:\n\nlet numbers = [1, 1, 2, 2, 2, 3, 4, 5, 6]\nnumbers.publisher\n    .output(in: (3...5))\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 2 3\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip4/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Zip4<A, B, C, D>, Publishers.Zip4<A, B, C, D>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, A.Failure is B.Failure, B.Failure is C.Failure, and C.Failure is D.Failure."
    },
    {
        "title": "last(where:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/last(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse last(where:) when you need to republish only the last element of a stream that satisfies a closure you specify.\n\nIn the example below, a range publisher emits the last element that satisfies the closure\u2019s criteria, then finishes normally:\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last { $0 < 6 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"5\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/combinelatest(_:_:_:)-p0h5",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest<P, Q>(_:,_:) to combine the current and two additional publishers and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer. All upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nIn the example below, combineLatest() receives the most-recent values published by three publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3) { firstValue, secondValue, thirdValue in\n        return firstValue * secondValue * thirdValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(10)\n\n\npub.send(9)\npub3.send(4)\npub2.send(12)\n\n\n// Prints:\n//  Result: 40.     // pub = 2, pub2 = 2, pub3 = 10\n//  Result: 180.    // pub = 9, pub2 = 2, pub3 = 10\n//  Result: 72.     // pub = 9, pub2 = 2, pub3 = 4\n//  Result: 432.    // pub = 9, pub2 = 12, pub3 = 4\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "merge(with:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/merge(with:_:)",
        "html": "Parameters\nb\n\nA second publisher.\n\nc\n\nA third publisher.\n\nReturn Value\n\nA publisher that emits an event when any upstream publisher emits an event.\n\nDiscussion\n\nUse merge(with:_:) when you want to receive a new element whenever any of the upstream publishers emits an element. To receive tuples of the most-recent value from all the upstream publishers whenever any of them emit a value, use combineLatest(_:_:). To combine elements from multiple upstream publishers, use zip(_:_:).\n\nIn this example, as merge(with:_:) receives input from the upstream publishers, it republishes the interleaved elements to the downstream:\n\nlet pubA = PassthroughSubject<Int, Never>()\nlet pubB = PassthroughSubject<Int, Never>()\nlet pubC = PassthroughSubject<Int, Never>()\n\n\ncancellable = pubA\n    .merge(with: pubB, pubC)\n    .sink { print(\"\\($0)\", terminator: \" \" )}\n\n\npubA.send(1)\npubB.send(40)\npubC.send(90)\npubA.send(2)\npubB.send(50)\npubC.send(100)\n\n\n// Prints: \"1 40 90 2 50 100\"\n\n\nThe merged publisher continues to emit elements until all upstream publishers finish. If an upstream publisher produces an error, the merged publisher fails with that error.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/combinelatest(_:_:)-8nm0f",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and two other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn this example, three instances of PassthroughSubject emit values; as combineLatest(_:_:) receives input from any of the upstream publishers, it combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: (2, 2, 9).\n//  Result: (3, 2, 9).\n//  Result: (3, 12, 9).\n//  Result: (13, 12, 9).\n//  Result: (13, 12, 19).\n\n\nIf any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/combinelatest(_:_:_:_:)",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:_:) when you need to combine the current and 3 additional publishers and transform the values using a closure in which you specify the published elements, to publish a new element.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, as combineLatest(_:_:_:_:) receives the most-recent values published by four publishers, multiplies them together, and republishes the result:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4) { firstValue, secondValue, thirdValue, fourthValue in\n        return firstValue * secondValue * thirdValue * fourthValue\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n\n\n// Prints:\n//  Result: 36.     // pub = 2,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 54.     // pub = 3,  pub2 = 2,   pub3 = 9,  pub4 = 1\n//  Result: 324.    // pub = 3,  pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 1404.   // pub = 13, pub2 = 12,  pub3 = 9,  pub4 = 1\n//  Result: 2964.   // pub = 13, pub2 = 12,  pub3 = 19, pub4 = 1\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "init(receiveCompletion:receiveValue:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/sink/init(receivecompletion:receivevalue:)",
        "html": "Parameters\nreceiveCompletion\n\nThe closure to execute on completion.\n\nreceiveValue\n\nThe closure to execute on receipt of a value."
    },
    {
        "title": "first()",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/first()",
        "html": "Return Value\n\nA publisher that only publishes the first element of a stream.\n\nDiscussion\n\nUse first() to publish just the first element from an upstream publisher, then finish normally. The first() operator requests unlimited from its upstream as soon as downstream requests at least one element. If the upstream completes before first() receives any elements, it completes without emitting any values.\n\nIn this example, the first() publisher republishes the first element received from the sequence publisher, -10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .first()\n    .sink { print(\"\\($0)\") }\n\n\n// Print: \"-10\"\n\nSee Also\nSelecting Specific Elements\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "last()",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/last()",
        "html": "Return Value\n\nA publisher that only publishes the last element of a stream.\n\nDiscussion\n\nUse last() when you need to emit only the last element from an upstream publisher.\n\nIn the example below, the range publisher only emits the last element from the sequence publisher, 10, then finishes normally.\n\nlet numbers = (-10...10)\ncancellable = numbers.publisher\n    .last()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/subscribe(_:)-38cmk",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this publisher. After attaching, the subscriber can start to receive values.\n\nDiscussion\n\nAlways call this function instead of receive(subscriber:). Adopters of Publisher must implement receive(subscriber:). The implementation of subscribe(_:) provided by Publisher calls through to receive(subscriber:).\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "prepend(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/prepend(_:)",
        "html": "Parameters\nelements\n\nThe elements to publish before this publisher\u2019s elements.\n\nReturn Value\n\nA publisher that prefixes the specified elements prior to this publisher\u2019s elements.\n\nDiscussion\n\nUse prepend(_:) when you need to prepend specific elements before the output of a publisher.\n\nIn the example below, the prepend(_:) operator publishes the provided elements before republishing all elements from dataElements:\n\nlet dataElements = (0...10)\ncancellable = dataElements.publisher\n    .prepend(0, 1, 255)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 255 0 1 2 3 4 5 6 7 8 9 10\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "prefix(untilOutputFrom:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/prefix(untiloutputfrom:)",
        "html": "Parameters\npublisher\n\nA second publisher.\n\nReturn Value\n\nA publisher that republishes elements until the second publisher publishes an element.\n\nDiscussion\n\nAfter the second publisher publishes an element, the publisher returned by this method finishes.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue."
    },
    {
        "title": "tryPrefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/tryprefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value indicating whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate throws or indicates publishing should finish.\n\nDiscussion\n\nUse tryPrefix(while:) to emit values from the upstream publisher that meet a condition you specify in an error-throwing closure. The publisher finishes when the closure returns false. If the closure throws an error, the publisher fails with that error.\n\nstruct OutOfRangeError: Error {}\n\n\nlet numbers = (0...10).reversed()\ncancellable = numbers.publisher\n    .tryPrefix {\n        guard $0 != 0 else {throw OutOfRangeError()}\n        return $0 <= numbers.max()!\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"10 9 8 7 6 5 4 3 2 1 completion: failure(OutOfRangeError()) \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "prefix(while:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/prefix(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether publishing should continue.\n\nReturn Value\n\nA publisher that passes through elements until the predicate indicates publishing should finish.\n\nDiscussion\n\nUse prefix(while:) to emit values while elements from the upstream publisher meet a condition you specify. The publisher finishes when the closure returns false.\n\nIn the example below, the prefix(while:) operator emits values while the element it receives is less than five:\n\nlet numbers = (0...10)\nnumbers.publisher\n    .prefix { $0 < 5 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "prefix(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/prefix(_:)",
        "html": "Parameters\nmaxLength\n\nThe maximum number of elements to republish.\n\nReturn Value\n\nA publisher that publishes up to the specified number of elements.\n\nDiscussion\n\nUse prefix(_:) to limit the number of elements republished to the downstream subscriber.\n\nIn the example below, the prefix(_:) operator limits its output to the first two elements before finishing normally:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .prefix(2)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryDrop(while:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/trydrop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false, and then republishes all remaining elements. If the predicate closure throws, the publisher fails with an error.\n\nDiscussion\n\nUse tryDrop(while:) to omit elements from an upstream until an error-throwing closure you provide returns false, after which the remaining items in the stream are published. If the closure throws, no elements are emitted and the publisher fails with an error.\n\nIn the example below, elements are ignored until -1 is encountered in the stream and the closure returns false. The publisher then republishes the remaining elements and finishes normally. Conversely, if the guard value in the closure had been encountered, the closure would throw and the publisher would fail with an error.\n\nstruct RangeError: Error {}\nvar numbers = [1, 2, 3, 4, 5, 6, -1, 7, 8, 9, 10]\nlet range: CountableClosedRange<Int> = (1...100)\ncancellable = numbers.publisher\n    .tryDrop {\n        guard $0 != 0 else { throw RangeError() }\n        return range.contains($0)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"-1 7 8 9 10 completion: finished\"\n// If instead numbers was [1, 2, 3, 4, 5, 6, 0, -1, 7, 8, 9, 10], tryDrop(while:) would fail with a RangeError.\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "tryMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/trymap(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element. If the closure throws an error, the publisher fails with the thrown error.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s tryMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use tryMap(_:) to transform from one kind of element to another, and to terminate publishing when the map\u2019s closure throws an error.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A tryMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the tryMap(_:)\u2019s closure fails to look up a Roman numeral, it throws an error. The tryMap(_:) operator catches this error and terminates publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from:Int) throws -> String {\n    let romanNumeralDict: [Int : String] =\n        [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\n    guard let numeral = romanNumeralDict[from] else {\n        throw ParseError()\n    }\n    return numeral\n}\nlet numbers = [5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryMap { try romanNumeral(from: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"V IV III II I completion: failure(ParseError())\"\n\n\nIf your closure doesn\u2019t throw, use map(_:) instead.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "tryAllSatisfy(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/tryallsatisfy(_:)",
        "html": "Parameters\npredicate\n\nA closure that evaluates each received element. Return true to continue, or false to cancel the upstream and complete. The closure may throw an error, in which case the publisher cancels the upstream publisher and fails with the thrown error.\n\nReturn Value\n\nA publisher that publishes a Boolean value that indicates whether all received elements pass a given predicate.\n\nDiscussion\n\nUse the tryAllSatisfy(_:) operator to determine if all elements in a stream satisfy a criteria in an error-throwing predicate you provide. When this publisher receives an element, it runs the predicate against the element. If the predicate returns false, the publisher produces a false value and finishes. If the upstream publisher finishes normally, this publisher produces a true value and finishes. If the predicate throws an error, the publisher fails and passes the error to its downstream subscriber.\n\nIn the example below, an error-throwing predicate tests if each of an integer array publisher\u2019s elements fall into the targetRange; the predicate throws an error if an element is zero and terminates the stream.\n\nlet targetRange = (-1...100)\nlet numbers = [-1, 10, 5, 0]\n\n\nnumbers.publisher\n    .tryAllSatisfy { anInt in\n        guard anInt != 0 else { throw RangeError() }\n        return targetRange.contains(anInt)\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(RangeError())\"\n\n\nWith operators similar to reduce(_:_:), this publisher produces at most one value.\n\nNote\n\nUpon receiving any request greater than zero, this publisher requests unlimited elements from the upstream publisher.\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate."
    },
    {
        "title": "scan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/scan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nA closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse scan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value.\n\nThe following example logs a running total of all values received from the sequence publisher.\n\nlet range = (0...5)\ncancellable = range.publisher\n    .scan(0) { return $0 + $1 }\n    .sink { print (\"\\($0)\", terminator: \" \") }\n // Prints: \"0 1 3 6 10 15 \".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "setFailureType(to:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/setfailuretype(to:)",
        "html": "Parameters\nfailureType\n\nThe Failure type presented by this publisher.\n\nReturn Value\n\nA publisher that appears to send the specified failure type.\n\nDiscussion\n\nUse setFailureType(to:) when you need set the error type of a publisher that cannot fail.\n\nConversely, if the upstream can fail, you would use mapError(_:) to provide instructions on converting the error types to needed by the downstream publisher\u2019s inputs.\n\nThe following example has two publishers with mismatched error types: pub1\u2019s error type is Never, and pub2\u2019s error type is Error. Because of the mismatch, the combineLatest(_:) operator requires that pub1 use setFailureType(to:) to make it appear that pub1 can produce the Error type, like pub2 can.\n\nlet pub1 = [0, 1, 2, 3, 4, 5].publisher\nlet pub2 = CurrentValueSubject<Int, Error>(0)\nlet cancellable = pub1\n    .setFailureType(to: Error.self)\n    .combineLatest(pub2)\n    .sink(\n        receiveCompletion: { print (\"completed: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\")}\n     )\n\n\n// Prints: \"value: (5, 0)\".\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure."
    },
    {
        "title": "mapError(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/maperror(_:)",
        "html": "Parameters\ntransform\n\nA closure that takes the upstream failure as a parameter and returns a new error for the publisher to terminate with.\n\nReturn Value\n\nA publisher that replaces any upstream failure with a new error produced by the transform closure.\n\nDiscussion\n\nUse the mapError(_:) operator when you need to replace one error type with another, or where a downstream operator needs the error types of its inputs to match.\n\nThe following example uses a tryMap(_:) operator to divide 1 by each element produced by a sequence publisher. When the publisher produces a 0, the tryMap(_:) fails with a DivisionByZeroError. The mapError(_:) operator converts this into a MyGenericError.\n\nstruct DivisionByZeroError: Error {}\nstruct MyGenericError: Error { var wrappedError: Error }\n\n\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n       guard divisor != 0 else { throw DivisionByZeroError() }\n       return dividend / divisor\n   }\n\n\nlet divisors: [Double] = [5, 4, 3, 2, 1, 0]\ndivisors.publisher\n    .tryMap { try myDivide(1, $0) }\n    .mapError { MyGenericError(wrappedError: $0) }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") ,\n        receiveValue: { print (\"value: \\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"0.2 0.25 0.3333333333333333 0.5 1.0 completion: failure(MyGenericError(wrappedError: DivisionByZeroError()))\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "min(by:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/min(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to determine the minimum value in the stream of elements from an upstream publisher using a comparison operation you specify.\n\nThis operator is useful when the value received from the upstream publisher isn\u2019t Comparable.\n\nIn the example below an array publishes enumeration elements representing playing card ranks. The min(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the minimum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .king]\ncancellable = cards.publisher\n    .min {\n        return  $0.rawValue < $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"ace\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "tryFilter(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/tryfilter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value that indicated whether to republish the element or throws an error.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nUse tryFilter(_:) to filter elements evaluated in an error-throwing closure. If the isIncluded closure throws an error, the publisher fails with that error.\n\nIn the example below, tryFilter(_:) checks to see if the element provided by the publisher is zero, and throws a ZeroError before terminating the publisher with the thrown error. Otherwise, it republishes the element only if it\u2019s even:\n\nstruct ZeroError: Error {}\n\n\nlet numbers: [Int] = [1, 2, 3, 4, 0, 5]\ncancellable = numbers.publisher\n    .tryFilter{\n        if $0 == 0 {\n            throw ZeroError()\n        } else {\n            return $0 % 2 == 0\n        }\n    }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"2 4 failure(DivisionByZeroError())\".\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryScan(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/tryscan(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher.\n\nReturn Value\n\nA publisher that transforms elements by applying a closure that receives its previous return value and the next element from the upstream publisher.\n\nDiscussion\n\nUse tryScan(_:_:) to accumulate all previously-published values into a single value, which you then combine with each newly-published value. If your accumulator closure throws an error, the publisher terminates with the error.\n\nIn the example below, tryScan(_:_:) calls a division function on elements of a collection publisher. The Publishers.TryScan publisher publishes each result until the function encounters a DivisionByZeroError, which terminates the publisher.\n\nstruct DivisionByZeroError: Error {}\n\n\n/// A function that throws a DivisionByZeroError if `current` provided by the TryScan publisher is zero.\nfunc myThrowingFunction(_ lastValue: Int, _ currentValue: Int) throws -> Int {\n    guard currentValue != 0 else { throw DivisionByZeroError() }\n    return (lastValue + currentValue) / currentValue\n }\n\n\nlet numbers = [1,2,3,4,5,0,6,7,8,9]\ncancellable = numbers.publisher\n    .tryScan(10) { try myThrowingFunction($0, $1) }\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"11 6 3 1 1 -1 failure(DivisionByZeroError())\".\n\n\nIf the closure throws an error, the publisher fails with the error.\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "filter(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/filter(_:)",
        "html": "Parameters\nisIncluded\n\nA closure that takes one element and returns a Boolean value indicating whether to republish the element.\n\nReturn Value\n\nA publisher that republishes all elements that satisfy the closure.\n\nDiscussion\n\nCombine\u2019s filter(_:) operator performs an operation similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018365-filter in the Swift Standard Library: it uses a closure to test each element to determine whether to republish the element to the downstream subscriber.\n\nThe following example, uses a filter operation that receives an Int and only republishes a value if it\u2019s even.\n\nlet numbers: [Int] = [1, 2, 3, 4, 5]\ncancellable = numbers.publisher\n    .filter { $0 % 2 == 0 }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"2 4\"\n\nSee Also\nFiltering Elements\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "receive(subscriber:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/receive(subscriber:)",
        "html": "Parameters\nsubscriber\n\nThe subscriber to attach to this Publisher, after which it can receive values.\n\nDiscussion\n\nImplementations of Publisher must implement this method.\n\nThe provided implementation of subscribe(_:)calls this method.\n\nSee Also\nWorking with Subscribers\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher."
    },
    {
        "title": "init(object:keyPath:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/assign/init(object:keypath:)",
        "html": "Parameters\nobject\n\nThe object that contains the property. The subscriber assigns the object\u2019s property every time it receives a new value.\n\nkeyPath\n\nA key path that indicates the property to assign. See Key-Path Expression in The Swift Programming Language to learn how to use key paths to specify a property of an object."
    },
    {
        "title": "decode(type:decoder:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/decode(type:decoder:)",
        "html": "Parameters\ntype\n\nThe encoded data to decode into a struct that conforms to the Decodable protocol.\n\ndecoder\n\nA decoder that implements the TopLevelDecoder protocol.\n\nReturn Value\n\nA publisher that decodes a given type using a specified decoder and publishes the result.\n\nDiscussion\n\nUse decode(type:decoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to decode data received from a URLSession.DataTaskPublisher or other data source using the Decodable protocol.\n\nIn this example, a PassthroughSubject publishes a JSON string. The JSON decoder parses the string, converting its fields according to the Decodable protocol implemented by Article, and successfully populating a new Article. The Publishers.Decode publisher then publishes the Article to the downstream. If a decoding operation fails, which happens in the case of missing or malformed data in the source JSON string, the stream terminates and passes the error to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Data, Never>()\ncancellable = dataProvider\n    .decode(type: Article.self, decoder: JSONDecoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\")},\n          receiveValue: { print (\"value: \\($0)\") })\n\n\ndataProvider.send(Data(\"{\\\"pubDate\\\":1574273638.575666, \\\"title\\\" : \\\"My First Article\\\", \\\"author\\\" : \\\"Gita Kumar\\\" }\".utf8))\n\n\n// Prints: \".sink() data received Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: 2050-11-20 18:13:58 +0000)\"\n\nSee Also\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable."
    },
    {
        "title": "tryCatch(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/trycatch(_:)",
        "html": "Parameters\nhandler\n\nA throwing closure that accepts the upstream failure as input. This closure can either replace the upstream publisher with a new one, or throw a new error to the downstream subscriber.\n\nReturn Value\n\nA publisher that handles errors from an upstream publisher by replacing the failed publisher with another publisher, or an error.\n\nDiscussion\n\nUse tryCatch(_:) to decide how to handle from an upstream publisher by either replacing the publisher with a new publisher, or throwing a new error.\n\nIn the example below, an array publisher emits values that a tryMap(_:) operator evaluates to ensure the values are greater than zero. If the values aren\u2019t greater than zero, the operator throws an error to the downstream subscriber to let it know there was a problem. The subscriber, tryCatch(_:), replaces the error with a new publisher using Just to publish a final value before the stream ends normally.\n\nenum SimpleError: Error { case error }\nvar numbers = [5, 4, 3, 2, 1, -1, 7, 8, 9, 10]\n\n\ncancellable = numbers.publisher\n   .tryMap { v in\n        if v > 0 {\n            return v\n        } else {\n            throw SimpleError.error\n        }\n}\n  .tryCatch { error in\n      Just(0) // Send a final value before completing normally.\n              // Alternatively, throw a new error to terminate the stream.\n}\n  .sink(receiveCompletion: { print (\"Completion: \\($0).\") },\n        receiveValue: { print (\"Received \\($0).\") }\n  )\n//    Received 5.\n//    Received 4.\n//    Received 3.\n//    Received 2.\n//    Received 1.\n//    Received 0.\n//    Completion: finished.\n\nSee Also\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/map(_:)-5u39a",
        "html": "Parameters\nkeyPath\n\nThe key path of a property on Output.\n\nReturn Value\n\nA publisher that publishes the value of the key path.\n\nDiscussion\n\nIn the following example, the map(_:) operator uses the Swift key path syntax to access the die member of the DiceRoll structure published by the Just publisher.\n\nThe downstream sink subscriber receives only the value of this Int, not the entire DiceRoll.\n\nstruct DiceRoll {\n    let die: Int\n}\n\n\ncancellable = Just(DiceRoll(die:Int.random(in:1...6)))\n    .map(\\.die)\n    .sink {\n        print (\"Rolled: \\($0)\")\n    }\n// Prints \"Rolled: 3\" (or some other random value).\n\nSee Also\nIdentifying Properties with Key Paths\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple."
    },
    {
        "title": "makeConnectable()",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/makeconnectable()",
        "html": "Return Value\n\nA ConnectablePublisher wrapping this publisher.\n\nDiscussion\n\nIn the following example, makeConnectable() wraps its upstream publisher (an instance of Publishers.Share) with a ConnectablePublisher. Without this, the first sink subscriber would receive all the elements from the sequence publisher and cause it to complete before the second subscriber attaches. By making the publisher connectable, the publisher doesn\u2019t produce any elements until after the connect() call.\n\n let subject = Just<String>(\"Sent\")\n let pub = subject\n     .share()\n     .makeConnectable()\n cancellable1 = pub.sink { print (\"Stream 1 received: \\($0)\")  }\n\n\n // For example purposes, use DispatchQueue to add a second subscriber\n // a second later, and then connect to the publisher a second after that.\n DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n     self.cancellable2 = pub.sink { print (\"Stream 2 received: \\($0)\") }\n }\n DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n     self.connectable = pub.connect()\n }\n // Prints:\n // Stream 2 received: Sent\n // Stream 1 received: Sent\n\n\nNote\n\nThe connect() operator returns a Cancellable instance that you must retain. You can also use this instance to cancel publishing."
    },
    {
        "title": "multicast(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/multicast(_:)",
        "html": "Parameters\ncreateSubject\n\nA closure to create a new Subject each time a subscriber attaches to the multicast publisher.\n\nDiscussion\n\nUse a multicast publisher when you have multiple downstream subscribers, but you want upstream publishers to only process one receive(_:) call per event. This is useful when upstream publishers are doing expensive work you don\u2019t want to duplicate, like performing network requests.\n\nIn contrast with multicast(subject:), this method produces a publisher that creates a separate Subject for each subscriber.\n\nThe following example uses a sequence publisher as a counter to publish three random numbers, generated by a map(_:) operator. It uses a multicast(_:) operator whose closure creates a PassthroughSubject to share the same random number to each of two subscribers. Because the multicast publisher is a ConnectablePublisher, publishing only begins after a call to connect().\n\nlet pub = [\"First\", \"Second\", \"Third\"].publisher\n    .map( { return ($0, Int.random(in: 0...100)) } )\n    .print(\"Random\")\n    .multicast { PassthroughSubject<(String, Int), Never>() }\n\n\ncancellable1 = pub\n   .sink { print (\"Stream 1 received: \\($0)\")}\ncancellable2 = pub\n   .sink { print (\"Stream 2 received: \\($0)\")}\npub.connect()\n\n\n// Prints:\n// Random: receive value: ((\"First\", 9))\n// Stream 2 received: (\"First\", 9)\n// Stream 1 received: (\"First\", 9)\n// Random: receive value: ((\"Second\", 46))\n// Stream 2 received: (\"Second\", 46)\n// Stream 1 received: (\"Second\", 46)\n// Random: receive value: ((\"Third\", 26))\n// Stream 2 received: (\"Third\", 26)\n// Stream 1 received: (\"Third\", 26)\n\n\nIn this example, the output shows that the print(_:to:) operator receives each random value only one time, and then sends the value to both subscribers.\n\nSee Also\nWorking with Multiple Subscribers\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers."
    },
    {
        "title": "subscribe(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/subscribe(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler used to send messages to upstream publishers.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher which performs upstream operations on the specified scheduler.\n\nDiscussion\n\nIn contrast with receive(on:options:), which affects downstream messages, subscribe(on:options:) changes the execution context of upstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes ioPerformingPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes uiUpdatingSubscriber to receive elements and completion on RunLoop.main.\n\nlet ioPerformingPublisher == // Some publisher.\nlet uiUpdatingSubscriber == // Some subscriber that updates the UI.\n\n\nioPerformingPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(uiUpdatingSubscriber)\n\n\nUsing subscribe(on:options:) also causes the upstream publisher to perform cancel() using the specfied scheduler.\n\nSee Also\nSpecifying Schedulers\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher."
    },
    {
        "title": "measureInterval(using:options:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/measureinterval(using:options:)",
        "html": "Parameters\nscheduler\n\nA scheduler to use for tracking the timing of events.\n\noptions\n\nOptions that customize the delivery of elements.\n\nReturn Value\n\nA publisher that emits elements representing the time interval between the elements it receives.\n\nDiscussion\n\nUse measureInterval(using:options:) to measure the time between events delivered from an upstream publisher.\n\nIn the example below, a 1-second Timer is used as the data source for an event publisher; the measureInterval(using:options:) operator reports the elapsed time between the reception of events on the main run loop:\n\ncancellable = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .measureInterval(using: RunLoop.main)\n    .sink { print(\"\\($0)\", terminator: \"\\n\") }\n\n\n// Prints:\n//      Stride(magnitude: 1.0013610124588013)\n//      Stride(magnitude: 0.9992760419845581)\n\n\nThe output type of the returned publisher is the time interval of the provided scheduler.\n\nThis operator uses the provided scheduler\u2019s now property to measure intervals between events.\n\nSee Also\nControlling Timing\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element."
    },
    {
        "title": "encode(encoder:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/encode(encoder:)",
        "html": "Parameters\nencoder\n\nAn encoder that implements the TopLevelEncoder protocol.\n\nReturn Value\n\nA publisher that encodes received elements using a specified encoder, and publishes the resulting data.\n\nDiscussion\n\nUse encode(encoder:) with a JSONDecoder (or a PropertyListDecoder for property lists) to encode an Encodable struct into Data that could be used to make a JSON string (or written to disk as a binary plist in the case of property lists).\n\nIn this example, a PassthroughSubject publishes an Article. The encode(encoder:) operator encodes the properties of the Article struct into a new JSON string according to the Codable protocol adopted by Article. The operator publishes the resulting JSON string to the downstream subscriber. If the encoding operation fails, which can happen in the case of complex properties that can\u2019t be directly transformed into JSON, the stream terminates and the error is passed to the downstream subscriber.\n\nstruct Article: Codable {\n    let title: String\n    let author: String\n    let pubDate: Date\n}\n\n\nlet dataProvider = PassthroughSubject<Article, Never>()\nlet cancellable = dataProvider\n    .encode(encoder: JSONEncoder())\n    .sink(receiveCompletion: { print (\"Completion: \\($0)\") },\n          receiveValue: {  data in\n            guard let stringRepresentation = String(data: data, encoding: .utf8) else { return }\n            print(\"Data received \\(data) string representation: \\(stringRepresentation)\")\n    })\n\n\ndataProvider.send(Article(title: \"My First Article\", author: \"Gita Kumar\", pubDate: Date()))\n\n\n// Prints: \"Data received 86 bytes string representation: {\"title\":\"My First Article\",\"author\":\"Gita Kumar\",\"pubDate\":606211803.279603}\"\n\nSee Also\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder."
    },
    {
        "title": "receive(on:options:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/receive(on:options:)",
        "html": "Parameters\nscheduler\n\nThe scheduler the publisher uses for element delivery.\n\noptions\n\nScheduler options used to customize element delivery.\n\nReturn Value\n\nA publisher that delivers elements using the specified scheduler.\n\nDiscussion\n\nYou use the receive(on:options:) operator to receive results and completion on a specific scheduler, such as performing UI work on the main run loop. In contrast with subscribe(on:options:), which affects upstream messages, receive(on:options:) changes the execution context of downstream messages.\n\nIn the following example, the subscribe(on:options:) operator causes jsonPublisher to receive requests on backgroundQueue, while the receive(on:options:) causes labelUpdater to receive elements and completion on RunLoop.main.\n\nlet jsonPublisher = MyJSONLoaderPublisher() // Some publisher.\nlet labelUpdater = MyLabelUpdateSubscriber() // Some subscriber that updates the UI.\n\n\njsonPublisher\n    .subscribe(on: backgroundQueue)\n    .receive(on: RunLoop.main)\n    .subscribe(labelUpdater)\n\n\nPrefer receive(on:options:) over explicit use of dispatch queues when performing work in subscribers. For example, instead of the following pattern:\n\npub.sink {\n    DispatchQueue.main.async {\n        // Do something.\n    }\n}\n\n\nUse this pattern instead:\n\npub.receive(on: DispatchQueue.main).sink {\n    // Do something.\n}\n\n\nNote\n\nreceive(on:options:) doesn\u2019t affect the scheduler used to call the subscriber\u2019s receive(subscription:) method.\n\nSee Also\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations."
    },
    {
        "title": "Publishers.TryFilter.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryfilter/failure",
        "html": "Discussion\n\nThis publisher produces the Swift Error type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryfilter/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet isIncluded: (Upstream.Output) throws -> Bool\nAn error-throwing closure that indicates whether this filter should republish an element."
    },
    {
        "title": "Publishers.TryFilter.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryfilter/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "init(upstream:isIncluded:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryfilter/init(upstream:isincluded:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\nisIncluded\n\nAn error-throwing closure that indicates whether this filter should republish an element."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip3/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-combinelatest-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-zip4-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "max(by:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/max(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA closure that receives two elements and returns true if they\u2019re in increasing order.\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max(by:) to determine the maximum value of elements received from the upstream publisher based on an ordering closure you specify.\n\nIn the example below, an array publishes enumeration elements representing playing card ranks. The max(by:) operator compares the current and next elements using the rawValue property of each enumeration value in the user supplied closure and prints the maximum value found after publishing all of the elements.\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet cards: [Rank] = [.five, .queen, .ace, .eight, .jack]\ncancellable = cards.publisher\n    .max {\n        return  $0.rawValue > $1.rawValue\n    }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"queen\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-merge-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<P>(with: P) -> Publishers.Merge3<A, B, P>\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<Z, Y>(with: Z, Y) -> Publishers.Merge4<A, B, Z, Y>\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<Z, Y, X>(with: Z, Y, X) -> Publishers.Merge5<A, B, Z, Y, X>\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<Z, Y, X, W>(with: Z, Y, X, W) -> Publishers.Merge6<A, B, Z, Y, X, W>\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<Z, Y, X, W, V>(with: Z, Y, X, W, V) -> Publishers.Merge7<A, B, Z, Y, X, W, V>\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<Z, Y, X, W, V, U>(with: Z, Y, X, W, V, U) -> Publishers.Merge8<A, B, Z, Y, X, W, V, U>\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "compactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/compactmap(_:)",
        "html": "Parameters\ntransform\n\nA closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of the calling the supplied closure.\n\nDiscussion\n\nCombine\u2019s compactMap(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/2950916-compactmap in the Swift standard library: the compactMap(_:) operator in Combine removes nil elements in a publisher\u2019s stream and republishes non-nil elements to the downstream subscriber.\n\nThe example below uses a range of numbers as the source for a collection based publisher. The compactMap(_:) operator consumes each element from the numbers publisher attempting to access the dictionary using the element as the key. If the example\u2019s dictionary returns a nil, due to a non-existent key, compactMap(_:) filters out the nil (missing) elements.\n\nlet numbers = (0...5)\nlet romanNumeralDict: [Int : String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ncancellable = numbers.publisher\n    .compactMap { romanNumeralDict[$0] }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"I II III V\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "tryCompactMap(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/trycompactmap(_:)",
        "html": "Parameters\ntransform\n\nAn error-throwing closure that receives a value and returns an optional value.\n\nReturn Value\n\nAny non-nil optional results of calling the supplied closure.\n\nDiscussion\n\nUse tryCompactMap(_:) to remove nil elements from a publisher\u2019s stream based on an error-throwing closure you provide. If the closure throws an error, the publisher cancels the upstream publisher and sends the thrown error to the downstream subscriber as a Failure.\n\nThe following example uses an array of numbers as the source for a collection-based publisher. A tryCompactMap(_:) operator consumes each integer from the publisher and uses a dictionary to transform the numbers from its Arabic to Roman numerals, as an optional String.\n\nIf the closure called by tryCompactMap(_:) fails to look up a Roman numeral, it returns the optional String (unknown).\n\nIf the closure called by tryCompactMap(_:) determines the input is 0, it throws an error. The tryCompactMap(_:) operator catches this error and stops publishing, sending a Subscribers.Completion.failure(_:) that wraps the error.\n\nstruct ParseError: Error {}\nfunc romanNumeral(from: Int) throws -> String? {\n    let romanNumeralDict: [Int : String] =\n        [1: \"I\", 2: \"II\", 3: \"III\", 4: \"IV\", 5: \"V\"]\n    guard from != 0 else { throw ParseError() }\n    return romanNumeralDict[from]\n}\nlet numbers = [6, 5, 4, 3, 2, 1, 0]\ncancellable = numbers.publisher\n    .tryCompactMap { try romanNumeral(from: $0) }\n    .sink(\n          receiveCompletion: { print (\"\\($0)\") },\n          receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"(Unknown) V IV III II I failure(ParseError())\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "replaceError(with:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/replaceerror(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher fails.\n\nReturn Value\n\nA publisher that replaces an error from the upstream publisher with the provided output element.\n\nDiscussion\n\nIf the upstream publisher fails with an error, this publisher emits the provided element, then finishes normally.\n\nIn the example below, a publisher of strings fails with a MyError instance, which sends a failure completion downstream. The replaceError(with:) operator handles the failure by publishing the string (replacement element) and completing normally.\n\nstruct MyError: Error {}\nlet fail = Fail<String, MyError>(error: MyError())\ncancellable = fail\n    .replaceError(with: \"(replacement element)\")\n    .sink(\n        receiveCompletion: { print (\"\\($0)\") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n\n\n// Prints: \"(replacement element) finished\".\n\n\nThis replaceError(with:) functionality is useful when you want to handle an error by sending a single replacement element and end the stream. Use catch(_:) to recover from an error and provide a replacement publisher to continue providing elements to the downstream subscriber.\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element."
    },
    {
        "title": "removeDuplicates(by:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/removeduplicates(by:)",
        "html": "Parameters\npredicate\n\nA closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first.\n\nReturn Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates(by:) to remove repeating elements from an upstream publisher based upon the evaluation of the current and previously published elements using a closure you provide.\n\nUse the removeDuplicates(by:) operator when comparing types that don\u2019t themselves implement Equatable, or if you need to compare values differently than the type\u2019s Equatable implementation.\n\nIn the example below, the removeDuplicates(by:) functionality triggers when the x property of the current and previous elements are equal, otherwise the operator publishes the current Point to the downstream subscriber:\n\nstruct Point {\n    let x: Int\n    let y: Int\n}\n\n\nlet points = [Point(x: 0, y: 0), Point(x: 0, y: 1),\n              Point(x: 1, y: 1), Point(x: 2, y: 1)]\ncancellable = points.publisher\n    .removeDuplicates { prev, current in\n        // Considers points to be duplicate if the x coordinate\n        // is equal, and ignores the y coordinate\n        prev.x == current.x\n    }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: Point(x: 0, y: 0) Point(x: 1, y: 1) Point(x: 2, y: 1)\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "<=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/_=(_:_:)-9cywv",
        "html": "Discussion\n\nIf both sides are .unlimited, the result is always true. If lhs is .unlimited, then the result is always false. If rhs is unlimited then the result is always true. Otherwise, this operator compares the demands\u2019 max values."
    },
    {
        "title": "Publishers.CombineLatest.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest/failure",
        "html": "Discussion\n\nThis publisher produces the failure type shared by its upstream publishers.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "collect(_:options:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/collect(_:options:)",
        "html": "Parameters\nstrategy\n\nThe timing group strategy used by the operator to collect and publish elements.\n\noptions\n\nScheduler options to use for the strategy.\n\nReturn Value\n\nA publisher that collects elements by a given strategy, and emits a single array of the collection.\n\nDiscussion\n\nUse collect(_:options:) to emit arrays of elements on a schedule specified by a Scheduler and Stride that you provide. At the end of each scheduled interval, the publisher sends an array that contains the items it collected. If the upstream publisher finishes before filling the buffer, the publisher sends an array that contains items it received. This may be fewer than the number of elements specified in the requested Stride.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThe example above collects timestamps generated on a one-second Timer in groups (Stride) of five.\n\nlet sub = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .collect(.byTime(RunLoop.main, .seconds(5)))\n    .sink { print(\"\\($0)\", terminator: \"\\n\\n\") }\n\n\n// Prints: \"[2020-01-24 00:54:46 +0000, 2020-01-24 00:54:47 +0000,\n//          2020-01-24 00:54:48 +0000, 2020-01-24 00:54:49 +0000,\n//          2020-01-24 00:54:50 +0000]\"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest/==(_:_:)",
        "html": "Parameters\nlhs\n\nA combineLatest publisher to compare for equality.\n\nrhs\n\nAnother combineLatest publisher to compare for equality.\n\nReturn Value\n\ntrue if the corresponding upstream publishers of each combineLatest publisher are equal; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "ignoreOutput()",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/ignoreoutput()",
        "html": "Return Value\n\nA publisher that ignores all upstream elements.\n\nDiscussion\n\nUse the ignoreOutput() operator to determine if a publisher is able to complete successfully or would fail.\n\nIn the example below, the array publisher (numbers) delivers the first five of its elements successfully, as indicated by the ignoreOutput() operator. The operator consumes, but doesn\u2019t republish the elements downstream. However, the sixth element, 0, causes the error throwing closure to catch a NoZeroValuesAllowedError that terminates the stream.\n\nstruct NoZeroValuesAllowedError: Error {}\nlet numbers = [1, 2, 3, 4, 5, 0, 6, 7, 8, 9]\ncancellable = numbers.publisher\n    .tryFilter({ anInt in\n        guard anInt != 0 else { throw NoZeroValuesAllowedError() }\n        return anInt < 20\n    })\n    .ignoreOutput()\n    .sink(receiveCompletion: {print(\"completion: \\($0)\")},\n          receiveValue: {print(\"value \\($0)\")})\n\n\n// Prints: \"completion: failure(NoZeroValuesAllowedError())\"\n\n\nThe output type of this publisher is Never.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.CombineLatest<A, B>, Publishers.CombineLatest<A, B>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, and A.Failure is B.Failure."
    },
    {
        "title": "combineIdentifier",
        "url": "https://developer.apple.com/documentation/combine/subscribers/sink/combineidentifier",
        "html": "See Also\nSupporting Debugging\nvar customMirror: Mirror\nThe custom mirror for this instance.\nvar description: String\nA textual representation of this instance.\nvar playgroundDescription: Any\nA custom playground description for this instance."
    },
    {
        "title": "Subscriber Implementations",
        "url": "https://developer.apple.com/documentation/combine/subscribers/sink/subscriber-implementations",
        "html": "Topics\nInstance Methods\nfunc receive() -> Subscribers.Demand\nTells the subscriber that a publisher of void elements is ready to receive further requests.\nAvailable when Input is ()."
    },
    {
        "title": "c",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip4/c",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to zip.\nlet b: B\nA second publisher to zip.\nlet d: D\nA fourth publisher to zip."
    },
    {
        "title": ">=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/_=(_:_:)-28c1e",
        "html": "Discussion\n\nIf lhs is .unlimited, then the result is always true. Otherwise, the operator compares the demand\u2019s max value to rhs."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Merge<A, B>, Publishers.Merge<A, B>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, A.Failure is B.Failure, and A.Output is B.Output."
    },
    {
        "title": "receive(_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/sink/receive(_:)",
        "html": "Parameters\ninput\n\nThe published element.\n\nReturn Value\n\nA Subscribers.Demand instance indicating how many more elements the subscriber expects to receive."
    },
    {
        "title": "Cancellable Implementations",
        "url": "https://developer.apple.com/documentation/combine/subscribers/sink/cancellable-implementations",
        "html": "Topics\nInstance Methods\nfunc store(in: inout Set<AnyCancellable>)\nStores this cancellable instance in the specified set."
    },
    {
        "title": "combineLatest(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/combinelatest(_:_:_:)-mhdq",
        "html": "Parameters\npublisher1\n\nA second publisher to combine with the first publisher.\n\npublisher2\n\nA third publisher to combine with the first publisher.\n\npublisher3\n\nA fourth publisher to combine with the first publisher.\n\nReturn Value\n\nA publisher that receives and combines elements from this publisher and three other publishers.\n\nDiscussion\n\nUse combineLatest(_:_:_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To combine elements from multiple publishers, use zip(_:_:_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:_:_:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes.\n\nIn the example below, combineLatest(_:_:_:) receives input from any of the publishers, combines the latest value from each publisher into a tuple and publishes it:\n\nlet pub = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\nlet pub3 = PassthroughSubject<Int, Never>()\nlet pub4 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub\n    .combineLatest(pub2, pub3, pub4)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub.send(1)\npub.send(2)\npub2.send(2)\npub3.send(9)\npub4.send(1)\n\n\npub.send(3)\npub2.send(12)\npub.send(13)\npub3.send(19)\n//\n// Prints:\n//  Result: (2, 2, 9, 1).\n//  Result: (3, 2, 9, 1).\n//  Result: (3, 12, 9, 1).\n//  Result: (13, 12, 9, 1).\n//  Result: (13, 12, 19, 1).\n\n\nIf any individual publisher of the combined set terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers."
    },
    {
        "title": "merge(with:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/merge(with:)",
        "html": "Parameters\nother\n\nAnother publisher of this publisher\u2019s type.\n\nReturn Value\n\nA publisher that emits an event when either upstream publisher emits an event.\n\nSee Also\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements."
    },
    {
        "title": "output(at:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/output(at:)",
        "html": "Parameters\nindex\n\nThe index that indicates the element to publish.\n\nReturn Value\n\nA publisher that publishes a specific indexed element.\n\nDiscussion\n\nUse output(at:) when you need to republish a specific element specified by its position in the stream. If the publisher completes normally or with an error before publishing the specified element, then the publisher doesn\u2019t produce any elements.\n\nIn the example below, the array publisher emits the fifth element in the sequence of published elements:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbers.publisher\n    .output(at: 5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"6\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "combineLatest(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/combinelatest(_:_:)-617l5",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\ntransform\n\nA closure that receives the most-recent value from each publisher and returns a new value to publish.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest<P,T>(_:) to combine the current and one additional publisher and transform them using a closure you specify to publish a new value to the downstream.\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn the example below, combineLatest() receives the most-recent values published by the two publishers, it multiplies them together, and republishes the result:\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2) { (first, second) in\n        return first * second\n    }\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(9)\npub1.send(3)\npub2.send(12)\npub1.send(13)\n//\n// Prints:\n//Result: 4.    (pub1 latest = 2, pub2 latest = 2)\n//Result: 18.   (pub1 latest = 9, pub2 latest = 2)\n//Result: 6.    (pub1 latest = 3, pub2 latest = 2)\n//Result: 36.   (pub1 latest = 3, pub2 latest = 12)\n//Result: 156.  (pub1 latest = 13, pub2 latest = 12)\n\n\nAll upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "combineLatest(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/combinelatest(_:)",
        "html": "Parameters\nother\n\nAnother publisher to combine with this one.\n\nReturn Value\n\nA publisher that receives and combines elements from this and another publisher.\n\nDiscussion\n\nUse combineLatest(_:) when you want the downstream subscriber to receive a tuple of the most-recent element from multiple publishers when any of them emit a value. To pair elements from multiple publishers, use zip(_:) instead. To receive just the most-recent element from multiple publishers rather than tuples, use merge(with:).\n\nTip\n\nThe combined publisher doesn\u2019t produce elements until each of its upstream publishers publishes at least one element.\n\nThe combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn\u2019t unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.\n\nIn this example, PassthroughSubject pub1 and also pub2 emit values; as combineLatest(_:) receives input from either upstream publisher, it combines the latest value from each publisher into a tuple and publishes it.\n\nlet pub1 = PassthroughSubject<Int, Never>()\nlet pub2 = PassthroughSubject<Int, Never>()\n\n\ncancellable = pub1\n    .combineLatest(pub2)\n    .sink { print(\"Result: \\($0).\") }\n\n\npub1.send(1)\npub1.send(2)\npub2.send(2)\npub1.send(3)\npub1.send(45)\npub2.send(22)\n\n\n// Prints:\n//    Result: (2, 2).    // pub1 latest = 2, pub2 latest = 2\n//    Result: (3, 2).    // pub1 latest = 3, pub2 latest = 2\n//    Result: (45, 2).   // pub1 latest = 45, pub2 latest = 2\n//    Result: (45, 22).  // pub1 latest = 45, pub2 latest = 22\n\n\nWhen all upstream publishers finish, this publisher finishes. If an upstream publisher never publishes a value, this publisher never finishes.\n\nSee Also\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers."
    },
    {
        "title": "tryLast(where:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/trylast(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the last element satisfying the given predicate.\n\nDiscussion\n\nUse tryLast(where:) when you need to republish the last element that satisfies an error-throwing closure you specify. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a publisher emits the last element that satisfies the error-throwing closure, then finishes normally:\n\nstruct RangeError: Error {}\n\n\nlet numbers = [-62, 1, 6, 10, 9, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .tryLast {\n        guard 0 != 0  else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n    )\n// Prints: \"5 completion: finished\"\n// If instead the numbers array had contained a `0`, the `tryLast` operator would terminate publishing with a RangeError.\"\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "tryFirst(where:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/tryfirst(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value that indicates whether to publish the element.\n\nReturn Value\n\nA publisher that only publishes the first element of a stream that satisfies the predicate.\n\nDiscussion\n\nUse tryFirst(where:) when you need to republish only the first element of a stream that satisfies an error-throwing closure you specify. The publisher ignores all elements after the first. If this publisher doesn\u2019t receive any elements, it finishes without publishing. If the predicate closure throws an error, the publisher fails.\n\nIn the example below, a range publisher emits the first element in the range then finishes normally:\n\nlet numberRange: ClosedRange<Int> = (-1...50)\nnumberRange.publisher\n    .tryFirst {\n        guard $0 < 99 else {throw RangeError()}\n        return true\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\", terminator: \" \") },\n        receiveValue: { print (\"\\($0)\", terminator: \" \") }\n     )\n\n\n// Prints: \"-1 completion: finished\"\n// If instead the number range were ClosedRange<Int> = (100...200), the tryFirst operator would terminate publishing with a RangeError.\n\nSee Also\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements."
    },
    {
        "title": "drop(while:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/drop(while:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher\u2019s output.\n\nReturn Value\n\nA publisher that skips over elements until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an upstream publisher until the element received meets a condition you specify.\n\nIn the example below, the operator omits all elements in the stream until the first element arrives that\u2019s a positive integer, after which the operator publishes all remaining elements:\n\nlet numbers = [-62, -1, 0, 10, 0, 22, 41, -1, 5]\ncancellable = numbers.publisher\n    .drop { $0 <= 0 }\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10 0, 22 41 -1 5\"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "dropFirst(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/dropfirst(_:)",
        "html": "Parameters\ncount\n\nThe number of elements to omit. The default is 1.\n\nReturn Value\n\nA publisher that doesn\u2019t republish the first count elements.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the upstream publisher, and republish the remaining elements.\n\nThe example below drops the first five elements from the stream:\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncancellable = numbers.publisher\n    .dropFirst(5)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"6 7 8 9 10 \"\n\nSee Also\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element."
    },
    {
        "title": "contains(where:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/contains(where:)",
        "html": "Parameters\npredicate\n\nA closure that takes an element as its parameter and returns a Boolean value that indicates whether the element satisfies the closure\u2019s comparison logic.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(where:) to find the first element in an upstream that satisfies the closure you provide. This operator consumes elements produced from the upstream publisher until the upstream publisher produces a matching element.\n\nThis operator is useful when the upstream publisher produces elements that don\u2019t conform to Equatable.\n\nIn the example below, the contains(where:) operator tests elements against the supplied closure and emits true for the first elements that\u2019s greater than 4, and then finishes normally.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .contains {$0 > 4}\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "tryMin(by:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/trymin(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMin(by:) to determine the minimum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMin(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\nnumbers.publisher\n    .tryMin { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first < second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: \"completion: failure(IllegalValueError())\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes."
    },
    {
        "title": "contains(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/contains(_:)",
        "html": "Parameters\noutput\n\nAn element to match against.\n\nReturn Value\n\nA publisher that emits the Boolean value true when the upstream publisher emits a matching value.\n\nDiscussion\n\nUse contains(_:) to find the first element in an upstream that\u2019s equal to the supplied argument. The contains publisher consumes all received elements until the upstream publisher produces a matching element. Upon finding the first match, it emits true and finishes normally. If the upstream finishes normally without producing a matching element, this publisher emits false and finishes.\n\nIn the example below, the contains(_:) operator emits true the first time it receives the value 5 from the numbers.publisher, and then finishes normally.\n\nlet numbers = [-1, 5, 10, 5]\nnumbers.publisher\n    .contains(5)\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"true\"\n\nSee Also\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate."
    },
    {
        "title": "min()",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/min()",
        "html": "Return Value\n\nA publisher that publishes the minimum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse min(by:) to find the minimum value in a stream of elements from an upstream publisher.\n\nIn the example below, the min(by:) operator emits a value when the publisher finishes, that value is the minimum of the values received from upstream, which is -1.\n\nlet numbers = [-1, 0, 10, 5]\nnumbers.publisher\n    .min()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"-1\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "tryMax(by:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/trymax(by:)",
        "html": "Parameters\nareInIncreasingOrder\n\nA throwing closure that receives two elements and returns true if they\u2019re in increasing order. If this closure throws, the publisher terminates with a Subscribers.Completion.failure(_:).\n\nReturn Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse tryMax(by:) to determine the maximum value of elements received from the upstream publisher using an error-throwing closure you specify.\n\nIn the example below, an array publishes elements. The tryMax(by:) operator executes the error-throwing closure that throws when the first element is an odd number, terminating the publisher.\n\nstruct IllegalValueError: Error {}\n\n\nlet numbers: [Int]  = [0, 10, 6, 13, 22, 22]\ncancellable = numbers.publisher\n    .tryMax { first, second -> Bool in\n        if (first % 2 != 0) {\n            throw IllegalValueError()\n        }\n        return first > second\n    }\n    .sink(\n        receiveCompletion: { print (\"completion: \\($0)\") },\n        receiveValue: { print (\"value: \\($0)\") }\n    )\n\n\n// Prints: completion: failure(IllegalValueError())\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "map(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/map(_:)-77nj3",
        "html": "Parameters\ntransform\n\nA closure that takes one element as its parameter and returns a new element.\n\nReturn Value\n\nA publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.\n\nDiscussion\n\nCombine\u2019s map(_:) operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use map(_:) to transform from one kind of element to another.\n\nThe following example uses an array of numbers as the source for a collection based publisher. A map(_:) operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the map(_:)\u2019s closure fails to look up a Roman numeral, it returns the string (unknown).\n\nlet numbers = [5, 4, 3, 2, 1, 0]\nlet romanNumeralDict: [Int : String] =\n   [1:\"I\", 2:\"II\", 3:\"III\", 4:\"IV\", 5:\"V\"]\ncancellable = numbers.publisher\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"V IV III II I (unknown)\"\n\n\nIf your closure can throw an error, use Combine\u2019s tryMap(_:) operator instead.\n\nSee Also\nMapping Elements\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "subscribe(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/subscribe(_:)-4vprz",
        "html": "Parameters\nsubject\n\nThe subject to attach to this publisher.\n\nSee Also\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher."
    },
    {
        "title": "replaceNil(with:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/replacenil(with:)",
        "html": "Parameters\noutput\n\nThe element to use when replacing nil.\n\nReturn Value\n\nA publisher that replaces nil elements from the upstream publisher with the provided element.\n\nDiscussion\n\nThe replaceNil(with:) operator enables replacement of nil values in a stream with a substitute value. In the example below, a collection publisher contains a nil value. The replaceNil(with:) operator replaces this with 0.0.\n\nlet numbers: [Double?] = [1.0, 2.0, nil, 3.0]\nnumbers.publisher\n    .replaceNil(with: 0.0)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"Optional(1.0) Optional(2.0) Optional(0.0) Optional(3.0)\"\n\nSee Also\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never."
    },
    {
        "title": "<(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/_(_:_:)-8nf1g",
        "html": "Discussion\n\nIf both sides are .unlimited, the result is always false. If lhs is .unlimited, then the result is always false. If rhs is .unlimited then the result is always true. Otherwise, this operator compares the demands\u2019 max values."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/==(_:_:)-28b3l",
        "html": "Parameters\nlhs\n\nA value to compare.\n\nrhs\n\nAnother value to compare.\n\nDiscussion\n\nEquality is the inverse of inequality. For any values a and b, a == b implies that a != b is false.\n\nSee Also\nComparing Demands\nstatic func == (Subscribers.Demand, Int) -> Bool\nReturns a Boolean value that indicates whether a demand requests the given number of elements.\nstatic func == (Int, Subscribers.Demand) -> Bool\nReturns a Boolean value that indicates whether a given number of elements matches the request of a given demand.\nstatic func != (Self, Self) -> Bool\nstatic func != (Subscribers.Demand, Int) -> Bool\nReturns a Boolean value that indicates whether a demand isn\u2019t equal to an integer.\nstatic func != (Int, Subscribers.Demand) -> Bool\nReturns a Boolean value that indicates whether an integer is unequal to a demand."
    },
    {
        "title": "a",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip4/a",
        "html": "See Also\nInspecting Publisher Properties\nlet b: B\nA second publisher to zip.\nlet c: C\nA third publisher to zip.\nlet d: D\nA fourth publisher to zip."
    },
    {
        "title": "*(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/*(_:_:)",
        "html": "Discussion\n\nWhen multiplying any value by .unlimited, the result is .unlimited. If the multiplication operation overflows, the result is .unlimited.\n\nSee Also\nPerforming Mathematical Operations\nstatic func *= (inout Subscribers.Demand, Int)\nMultiplies a demand by an integer, and assigns the result to the demand.\nstatic func + (Subscribers.Demand, Subscribers.Demand) -> Subscribers.Demand\nReturns the result of adding two demands. When adding any value to .unlimited, the result is .unlimited.\nstatic func + (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of adding an integer to a demand.\nstatic func += (inout Subscribers.Demand, Subscribers.Demand)\nAdds two demands, and assigns the result to the first demand.\nstatic func += (inout Subscribers.Demand, Int)\nAdds an integer to a demand, and assigns the result to the demand.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds."
    },
    {
        "title": "encode(to:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/encode(to:)",
        "html": "Parameters\nencoder\n\nAn encoder instance.\n\nSee Also\nEncoding and Decoding\ninit(from: Decoder) throws\nCreates a demand instance from a decoder."
    },
    {
        "title": "max",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/max",
        "html": "Discussion\n\nThe value is nil if the demand is unlimited."
    },
    {
        "title": "max(_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/max(_:)",
        "html": "Parameters\nvalue\n\nThe maximum number of elements. Providing a negative value for this parameter results in a fatal error.\n\nDiscussion\n\nThe publisher is free to send fewer than the requested maximum number of elements."
    },
    {
        "title": "none",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/none",
        "html": "Discussion\n\nThis is equivalent to Demand.max(0).\n\nSee Also\nUsing Special Demands\nstatic let unlimited: Subscribers.Demand\nA request for as many values as the publisher can produce."
    },
    {
        "title": "init(from:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/init(from:)",
        "html": "Parameters\ndecoder\n\nThe decoder of a previously-encoded Subscribers.Demand instance.\n\nSee Also\nEncoding and Decoding\nfunc encode(to: Encoder) throws\nEncodes the demand to the provide encoder."
    },
    {
        "title": "b",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip/b",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to zip."
    },
    {
        "title": "a",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip3/a",
        "html": "See Also\nInspecting Publisher Properties\nlet b: B\nA second publisher to zip.\nlet c: C\nA third publisher to zip."
    },
    {
        "title": "b",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip3/b",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to zip.\nlet c: C\nA third publisher to zip."
    },
    {
        "title": "c",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip3/c",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to zip.\nlet b: B\nA second publisher to zip."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-zip3-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "hash(into:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/hash(into:)",
        "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nDiscussion\n\nImplement this method to conform to the Hashable protocol. The components used for hashing must be the same as the components compared in your type\u2019s == operator implementation. Call hasher.combine(_:) with each of these components.\n\nImportant\n\nIn your implementation of hash(into:), don\u2019t call finalize() on the hasher instance provided, or replace it with a different instance. Doing so may become a compile-time error in the future."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-zip-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryprefixwhile/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip/==(_:_:)",
        "html": "Parameters\nlhs\n\nA zip publisher to compare for equality.\n\nrhs\n\nAnother zip publisher to compare for equality.\n\nReturn Value\n\ntrue if the corresponding upstream publishers of each zip publisher are equal; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "init(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip/init(_:_:)",
        "html": "Parameters\na\n\nA publisher to zip.\n\nb\n\nAnother publisher to zip."
    },
    {
        "title": ">=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/_=(_:_:)-5xnt",
        "html": "Discussion\n\nIf both sides are .unlimited, the result is always true. If lhs is .unlimited, then the result is always true. If rhs is .unlimited then the result is always false. Otherwise, this operator compares the demands\u2019 max values."
    },
    {
        "title": "replaceEmpty(with:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/replaceempty(with:)",
        "html": "Parameters\noutput\n\nAn element to emit when the upstream publisher finishes without emitting any elements.\n\nReturn Value\n\nA publisher that replaces an empty stream with the provided output element.\n\nDiscussion\n\nUse replaceEmpty(with:) to provide a replacement element if the upstream publisher finishes without producing any elements.\n\nIn the example below, the empty Double array publisher doesn\u2019t produce any elements, so replaceEmpty(with:) publishes Double.nan and finishes normally.\n\nlet numbers: [Double] = []\ncancellable = numbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints \"(nan)\".\n\n\nConversely, providing a non-empty publisher publishes all elements and the publisher then terminates normally:\n\nlet otherNumbers: [Double] = [1.0, 2.0, 3.0]\ncancellable2 = otherNumbers.publisher\n    .replaceEmpty(with: Double.nan)\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: 1.0 2.0 3.0\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "removeDuplicates()",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/removeduplicates()",
        "html": "Return Value\n\nA publisher that consumes \u2014 rather than publishes \u2014\u00a0duplicate elements.\n\nDiscussion\n\nUse removeDuplicates() to remove repeating elements from an upstream publisher. This operator has a two-element memory: the operator uses the current and previously published elements as the basis for its comparison.\n\nIn the example below, removeDuplicates() triggers on the doubled, tripled, and quadrupled occurrences of 1, 3, and 4 respectively. Because the two-element memory considers only the current element and the previous element, the operator prints the final 0 in the example data since its immediate predecessor is 4.\n\nlet numbers = [0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 0]\ncancellable = numbers.publisher\n    .removeDuplicates()\n    .sink { print(\"\\($0)\", terminator: \" \") }\n\n\n// Prints: \"0 1 2 3 4 0\"\n\nSee Also\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element."
    },
    {
        "title": "description",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/description",
        "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type\u2019s description property."
    },
    {
        "title": "collect(_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/collect(_:)",
        "html": "Parameters\ncount\n\nThe maximum number of received elements to buffer before publishing.\n\nReturn Value\n\nA publisher that collects up to the specified number of elements, and then publishes them as an array.\n\nDiscussion\n\nUse collect(_:) to emit arrays of at most count elements from an upstream publisher. If the upstream publisher finishes before collecting the specified number of elements, the publisher sends an array of only the items it received. This may be fewer than count elements.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nIn the example below, the collect(_:) operator emits one partial and two full arrays based on the requested collection size of 5:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect(5)\n    .sink { print(\"\\($0), terminator: \" \"\") }\n\n\n// Prints \"[0, 1, 2, 3, 4] [5, 6, 7, 8, 9] [10] \"\n\n\nNote\n\nWhen this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "collect()",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/collect()",
        "html": "Return Value\n\nA publisher that collects all received items and returns them as an array upon completion.\n\nDiscussion\n\nUse collect() to gather elements into an array that the operator emits after the upstream publisher finishes.\n\nIf the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.\n\nThis publisher requests an unlimited number of elements from the upstream publisher and uses an unbounded amount of memory to store the received values. The publisher may exert memory pressure on the system for very large sets of elements.\n\nThe collect() operator only sends the collected array to its downstream receiver after a request whose demand is greater than 0 items. Otherwise, collect() waits until it receives a non-zero request.\n\nIn the example below, an Integer range is a publisher that emits an array of integers:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .collect()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n\nSee Also\nReducing Elements\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "reduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/reduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nA closure that produces a new value by taking the previously-accumulated value and the next element it receives from the upstream publisher.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes. If reduce(_:_:) receives an error from the upstream publisher, the operator delivers it to the downstream subscriber, the publisher terminates and publishes no value.\n\nDiscussion\n\nUse reduce(_:_:) to collect a stream of elements and produce an accumulated value based on a closure you provide.\n\nIn the following example, the reduce(_:_:) operator collects all the integer values it receives from its upstream publisher:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .reduce(0, { accum, next in accum + next })\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"55\"\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "init(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest/init(_:_:)",
        "html": "Parameters\na\n\nThe first upstream publisher.\n\nb\n\nThe second upstream publisher."
    },
    {
        "title": "max()",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/max()",
        "html": "Return Value\n\nA publisher that publishes the maximum value received from the upstream publisher, after the upstream publisher finishes.\n\nDiscussion\n\nUse max() to determine the maximum value in the stream of elements from an upstream publisher.\n\nIn the example below, the max() operator emits a value when the publisher finishes, that value is the maximum of the values received from upstream, which is 10.\n\nlet numbers = [0, 10, 5]\ncancellable = numbers.publisher\n    .max()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"10\"\n\n\nAfter this publisher receives a request for more than 0 items, it requests unlimited items from its upstream publisher.\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "tryReduce(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/tryreduce(_:_:)",
        "html": "Parameters\ninitialResult\n\nThe value that the closure receives the first time it\u2019s called.\n\nnextPartialResult\n\nAn error-throwing closure that takes the previously-accumulated value and the next element from the upstream publisher to produce a new value.\n\nReturn Value\n\nA publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes.\n\nDiscussion\n\nUse tryReduce(_:_:) to collect a stream of elements and produce an accumulated value based on an error-throwing closure you provide. If the closure throws an error, the publisher fails and passes the error to its subscriber.\n\nIn the example below, the publisher\u2019s 0 element causes the myDivide(_:_:) function to throw an error and publish the doc://com.apple.documentation/documentation/Swift/Double/1641611-nan result:\n\nstruct DivisionByZeroError: Error {}\nfunc myDivide(_ dividend: Double, _ divisor: Double) throws -> Double {\n    guard divisor != 0 else { throw DivisionByZeroError() }\n    return dividend / divisor\n}\n\n\nvar numbers: [Double] = [5, 4, 3, 2, 1, 0]\nnumbers.publisher\n    .tryReduce(numbers.first!, { accum, next in try myDivide(accum, next) })\n    .catch({ _ in Just(Double.nan) })\n    .sink { print(\"\\($0)\") }\n\nSee Also\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion."
    },
    {
        "title": "count()",
        "url": "https://developer.apple.com/documentation/combine/passthroughsubject/count()",
        "html": "Return Value\n\nA publisher that consumes all elements until the upstream publisher finishes, then emits a single value with the total number of elements received.\n\nDiscussion\n\nUse count() to determine the number of elements received from the upstream publisher before it completes:\n\nlet numbers = (0...10)\ncancellable = numbers.publisher\n    .count()\n    .sink { print(\"\\($0)\") }\n\n\n// Prints: \"11\"\n\nSee Also\nApplying Mathematical Operations on Elements\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items."
    },
    {
        "title": "Publishers.CombineLatest.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest/output",
        "html": "Discussion\n\nThis publisher produces two-element tuples of the upstream publishers\u2019 output types.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "b",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest/b",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A"
    },
    {
        "title": "a",
        "url": "https://developer.apple.com/documentation/combine/publishers/combinelatest/a",
        "html": "See Also\nInspecting Publisher Properties\nlet b: B"
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryscan/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip4/==(_:_:)",
        "html": "Parameters\nlhs\n\nA zip publisher to compare for equality.\n\nrhs\n\nAnother zip publisher to compare for equality.\n\nReturn Value\n\ntrue if the corresponding upstream publishers of each zip publisher are equal; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "cancel()",
        "url": "https://developer.apple.com/documentation/combine/subscribers/sink/cancel()",
        "html": "Discussion\n\nWhen implementing Cancellable in support of a custom publisher, implement cancel() to request that your publisher stop calling its downstream subscribers. Combine doesn\u2019t require that the publisher stop immediately, but the cancel() call should take effect quickly. Canceling should also eliminate any strong references it currently holds.\n\nAfter you receive one call to cancel(), subsequent calls shouldn\u2019t do anything. Additionally, your implementation must be thread-safe, and it shouldn\u2019t block the caller.\n\nTip\n\nKeep in mind that your cancel() may execute concurrently with another call to cancel() \u2014 including the scenario where an AnyCancellable is deallocating \u2014 or to request(_:)."
    },
    {
        "title": "d",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip4/d",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to zip.\nlet b: B\nA second publisher to zip.\nlet c: C\nA third publisher to zip."
    },
    {
        "title": "receive(subscription:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/sink/receive(subscription:)",
        "html": "Parameters\nsubscription\n\nA subscription that represents the connection between publisher and subscriber.\n\nDiscussion\n\nUse the received Subscription to request items from the publisher."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip4/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Zip4<A, B, C, D>, Publishers.Zip4<A, B, C, D>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, D conforms to Publisher, D conforms to Equatable, A.Failure is B.Failure, B.Failure is C.Failure, and C.Failure is D.Failure."
    },
    {
        "title": "description",
        "url": "https://developer.apple.com/documentation/combine/subscribers/sink/description",
        "html": "Discussion\n\nCalling this property directly is discouraged. Instead, convert an instance of any type to a string by using the String(describing:) initializer. This initializer works with any type, and uses the custom description property for types that conform to CustomStringConvertible:\n\nstruct Point: CustomStringConvertible {\n    let x: Int, y: Int\n\n\n    var description: String {\n        return \"(\\(x), \\(y))\"\n    }\n}\n\n\nlet p = Point(x: 21, y: 30)\nlet s = String(describing: p)\nprint(s)\n// Prints \"(21, 30)\"\n\n\nThe conversion of p to a string in the assignment to s uses the Point type\u2019s description property.\n\nSee Also\nSupporting Debugging\nvar combineIdentifier: CombineIdentifier\nA unique identifier for identifying publisher streams.\nvar customMirror: Mirror\nThe custom mirror for this instance.\nvar playgroundDescription: Any\nA custom playground description for this instance."
    },
    {
        "title": "encode(to:)",
        "url": "https://developer.apple.com/documentation/combine/record/encode(to:)",
        "html": "Parameters\nencoder\n\nThe encoder to write data to.\n\nDiscussion\n\nIf the value fails to encode anything, encoder will encode an empty keyed container in its place.\n\nThis function throws an error if any values are invalid for the given encoder\u2019s format."
    },
    {
        "title": "CustomCombineIdentifierConvertible Implementations",
        "url": "https://developer.apple.com/documentation/combine/subscribers/sink/customcombineidentifierconvertible-implementations",
        "html": "Topics\nInstance Properties\nvar combineIdentifier: CombineIdentifier\nA unique identifier for identifying publisher streams."
    },
    {
        "title": "customMirror",
        "url": "https://developer.apple.com/documentation/combine/subscribers/sink/custommirror",
        "html": "Discussion\n\nIf this type has value semantics, the mirror should be unaffected by subsequent mutations of the instance.\n\nSee Also\nSupporting Debugging\nvar combineIdentifier: CombineIdentifier\nA unique identifier for identifying publisher streams.\nvar description: String\nA textual representation of this instance.\nvar playgroundDescription: Any\nA custom playground description for this instance."
    },
    {
        "title": "receive(completion:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/sink/receive(completion:)",
        "html": "Parameters\ncompletion\n\nA Subscribers.Completion case indicating whether publishing completed normally or with an error."
    },
    {
        "title": "b",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip4/b",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to zip.\nlet c: C\nA third publisher to zip.\nlet d: D\nA fourth publisher to zip."
    },
    {
        "title": "playgroundDescription",
        "url": "https://developer.apple.com/documentation/combine/subscribers/sink/playgrounddescription",
        "html": "See Also\nSupporting Debugging\nvar combineIdentifier: CombineIdentifier\nA unique identifier for identifying publisher streams.\nvar customMirror: Mirror\nThe custom mirror for this instance.\nvar description: String\nA textual representation of this instance."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/maperror/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryremoveduplicates/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet predicate: (Publishers.TryRemoveDuplicates<Upstream>.Output, Publishers.TryRemoveDuplicates<Upstream>.Output) throws -> Bool\nAn error-throwing closure to evaluate whether two elements are equivalent, for purposes of filtering."
    },
    {
        "title": "<=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/_=(_:_:)-5f62z",
        "html": "Discussion\n\nIf rhs is .unlimited, then the result is always true. Otherwise, the operator compares the demand\u2019s max value to lhs."
    },
    {
        "title": ">(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/_(_:_:)-4k1xp",
        "html": "Discussion\n\nIf lhs is .unlimited, then the result is always true. Otherwise, the operator compares the demand\u2019s max value to rhs."
    },
    {
        "title": "nextPartialResult",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryscan/nextpartialresult",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher that this publisher receives elements from.\nlet initialResult: Output\nThe previous result returned by the nextPartialResult closure."
    },
    {
        "title": ">(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/_(_:_:)-35p6f",
        "html": "Discussion\n\nIf rhs is .unlimited, then the result is always false. Otherwise, the operator compares the demand\u2019s max value to lhs."
    },
    {
        "title": "+=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/+=(_:_:)-20lis",
        "html": "Discussion\n\nWhen adding any value to .unlimited, the result is .unlimited.\n\nSee Also\nPerforming Mathematical Operations\nstatic func * (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of multiplying a demand by an integer.\nstatic func *= (inout Subscribers.Demand, Int)\nMultiplies a demand by an integer, and assigns the result to the demand.\nstatic func + (Subscribers.Demand, Subscribers.Demand) -> Subscribers.Demand\nReturns the result of adding two demands. When adding any value to .unlimited, the result is .unlimited.\nstatic func + (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of adding an integer to a demand.\nstatic func += (inout Subscribers.Demand, Int)\nAdds an integer to a demand, and assigns the result to the demand.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds."
    },
    {
        "title": "+(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/+(_:_:)-902we",
        "html": "Discussion\n\nWhen adding any value to .unlimited, the result is .unlimited.\n\nSee Also\nPerforming Mathematical Operations\nstatic func * (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of multiplying a demand by an integer.\nstatic func *= (inout Subscribers.Demand, Int)\nMultiplies a demand by an integer, and assigns the result to the demand.\nstatic func + (Subscribers.Demand, Subscribers.Demand) -> Subscribers.Demand\nReturns the result of adding two demands. When adding any value to .unlimited, the result is .unlimited.\nstatic func += (inout Subscribers.Demand, Subscribers.Demand)\nAdds two demands, and assigns the result to the first demand.\nstatic func += (inout Subscribers.Demand, Int)\nAdds an integer to a demand, and assigns the result to the demand.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds."
    },
    {
        "title": "+=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/+=(_:_:)-3k1hv",
        "html": "Discussion\n\nWhen adding any value to .unlimited, the result is .unlimited.\n\nSee Also\nPerforming Mathematical Operations\nstatic func * (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of multiplying a demand by an integer.\nstatic func *= (inout Subscribers.Demand, Int)\nMultiplies a demand by an integer, and assigns the result to the demand.\nstatic func + (Subscribers.Demand, Subscribers.Demand) -> Subscribers.Demand\nReturns the result of adding two demands. When adding any value to .unlimited, the result is .unlimited.\nstatic func + (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of adding an integer to a demand.\nstatic func += (inout Subscribers.Demand, Subscribers.Demand)\nAdds two demands, and assigns the result to the first demand.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds."
    },
    {
        "title": "...(_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/'...(_:)-3qgos",
        "html": "Parameters\nminimum\n\nThe lower bound for the range.\n\nDiscussion\n\nUse the postfix range operator (postfix ...) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeFrom<Double> instance that includes any value greater than or equal to 5.0.\n\nlet atLeastFive = 5.0...\n\n\natLeastFive.contains(4.0)     // false\natLeastFive.contains(5.0)     // true\natLeastFive.contains(6.0)     // true\n\n\nYou can use this type of partial range of a collection\u2019s indices to represent the range from the partial range\u2019s lower bound up to the end of the collection.\n\nlet numbers = [10, 20, 30, 40, 50, 60, 70]\nprint(numbers[3...])\n// Prints \"[40, 50, 60, 70]\"\n\n\nPrecondition\n\nminimum must compare equal to itself (i.e. cannot be NaN).\n\nSee Also\nPerforming Mathematical Operations\nstatic func * (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of multiplying a demand by an integer.\nstatic func *= (inout Subscribers.Demand, Int)\nMultiplies a demand by an integer, and assigns the result to the demand.\nstatic func + (Subscribers.Demand, Subscribers.Demand) -> Subscribers.Demand\nReturns the result of adding two demands. When adding any value to .unlimited, the result is .unlimited.\nstatic func + (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of adding an integer to a demand.\nstatic func += (inout Subscribers.Demand, Subscribers.Demand)\nAdds two demands, and assigns the result to the first demand.\nstatic func += (inout Subscribers.Demand, Int)\nAdds an integer to a demand, and assigns the result to the demand.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds."
    },
    {
        "title": "+(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/+(_:_:)-2hdad",
        "html": "See Also\nPerforming Mathematical Operations\nstatic func * (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of multiplying a demand by an integer.\nstatic func *= (inout Subscribers.Demand, Int)\nMultiplies a demand by an integer, and assigns the result to the demand.\nstatic func + (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of adding an integer to a demand.\nstatic func += (inout Subscribers.Demand, Subscribers.Demand)\nAdds two demands, and assigns the result to the first demand.\nstatic func += (inout Subscribers.Demand, Int)\nAdds an integer to a demand, and assigns the result to the demand.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds."
    },
    {
        "title": "...(_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/'...(_:)-kb35",
        "html": "Parameters\nmaximum\n\nThe upper bound for the range.\n\nDiscussion\n\nUse the prefix closed range operator (prefix ...) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeThrough<Double> instance that includes any value less than or equal to 5.0.\n\nlet throughFive = ...5.0\n\n\nthroughFive.contains(4.0)     // true\nthroughFive.contains(5.0)     // true\nthroughFive.contains(6.0)     // false\n\n\nYou can use this type of partial range of a collection\u2019s indices to represent the range from the start of the collection up to, and including, the partial range\u2019s upper bound.\n\nlet numbers = [10, 20, 30, 40, 50, 60, 70]\nprint(numbers[...3])\n// Prints \"[10, 20, 30, 40]\"\n\n\nPrecondition\n\nmaximum must compare equal to itself (i.e. cannot be NaN).\n\nSee Also\nPerforming Mathematical Operations\nstatic func * (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of multiplying a demand by an integer.\nstatic func *= (inout Subscribers.Demand, Int)\nMultiplies a demand by an integer, and assigns the result to the demand.\nstatic func + (Subscribers.Demand, Subscribers.Demand) -> Subscribers.Demand\nReturns the result of adding two demands. When adding any value to .unlimited, the result is .unlimited.\nstatic func + (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of adding an integer to a demand.\nstatic func += (inout Subscribers.Demand, Subscribers.Demand)\nAdds two demands, and assigns the result to the first demand.\nstatic func += (inout Subscribers.Demand, Int)\nAdds an integer to a demand, and assigns the result to the demand.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds."
    },
    {
        "title": "*=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/*=(_:_:)",
        "html": "Discussion\n\nWhen multiplying any value by .unlimited, the result is .unlimited. If the multiplication operation overflows, the result is .unlimited.\n\nSee Also\nPerforming Mathematical Operations\nstatic func * (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of multiplying a demand by an integer.\nstatic func + (Subscribers.Demand, Subscribers.Demand) -> Subscribers.Demand\nReturns the result of adding two demands. When adding any value to .unlimited, the result is .unlimited.\nstatic func + (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of adding an integer to a demand.\nstatic func += (inout Subscribers.Demand, Subscribers.Demand)\nAdds two demands, and assigns the result to the first demand.\nstatic func += (inout Subscribers.Demand, Int)\nAdds an integer to a demand, and assigns the result to the demand.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds."
    },
    {
        "title": "...(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/'...(_:_:)",
        "html": "Parameters\nminimum\n\nThe lower bound for the range.\n\nmaximum\n\nThe upper bound for the range.\n\nDiscussion\n\nUse the closed range operator (...) to create a closed range of any type that conforms to the Comparable protocol. This example creates a ClosedRange<Character> from \u201ca\u201d up to, and including, \u201cz\u201d.\n\nlet lowercase = \"a\"...\"z\"\nprint(lowercase.contains(\"z\"))\n// Prints \"true\"\n\n\nPrecondition\n\nminimum <= maximum.\n\nSee Also\nPerforming Mathematical Operations\nstatic func * (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of multiplying a demand by an integer.\nstatic func *= (inout Subscribers.Demand, Int)\nMultiplies a demand by an integer, and assigns the result to the demand.\nstatic func + (Subscribers.Demand, Subscribers.Demand) -> Subscribers.Demand\nReturns the result of adding two demands. When adding any value to .unlimited, the result is .unlimited.\nstatic func + (Subscribers.Demand, Int) -> Subscribers.Demand\nReturns the result of adding an integer to a demand.\nstatic func += (inout Subscribers.Demand, Subscribers.Demand)\nAdds two demands, and assigns the result to the first demand.\nstatic func += (inout Subscribers.Demand, Int)\nAdds an integer to a demand, and assigns the result to the demand.\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/==(_:_:)-7246z",
        "html": "Discussion\n\nAn .unlimited demand doesn\u2019t match any integer.\n\nSee Also\nComparing Demands\nstatic func == (Subscribers.Demand, Subscribers.Demand) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nstatic func == (Int, Subscribers.Demand) -> Bool\nReturns a Boolean value that indicates whether a given number of elements matches the request of a given demand.\nstatic func != (Self, Self) -> Bool\nstatic func != (Subscribers.Demand, Int) -> Bool\nReturns a Boolean value that indicates whether a demand isn\u2019t equal to an integer.\nstatic func != (Int, Subscribers.Demand) -> Bool\nReturns a Boolean value that indicates whether an integer is unequal to a demand."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/!=(_:_:)-5u2pg",
        "html": "See Also\nComparing Demands\nstatic func == (Subscribers.Demand, Subscribers.Demand) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nstatic func == (Subscribers.Demand, Int) -> Bool\nReturns a Boolean value that indicates whether a demand requests the given number of elements.\nstatic func == (Int, Subscribers.Demand) -> Bool\nReturns a Boolean value that indicates whether a given number of elements matches the request of a given demand.\nstatic func != (Subscribers.Demand, Int) -> Bool\nReturns a Boolean value that indicates whether a demand isn\u2019t equal to an integer.\nstatic func != (Int, Subscribers.Demand) -> Bool\nReturns a Boolean value that indicates whether an integer is unequal to a demand."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/==(_:_:)-4oy8i",
        "html": "Discussion\n\nAn .unlimited demand doesn\u2019t match any integer.\n\nSee Also\nComparing Demands\nstatic func == (Subscribers.Demand, Subscribers.Demand) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nstatic func == (Subscribers.Demand, Int) -> Bool\nReturns a Boolean value that indicates whether a demand requests the given number of elements.\nstatic func != (Self, Self) -> Bool\nstatic func != (Subscribers.Demand, Int) -> Bool\nReturns a Boolean value that indicates whether a demand isn\u2019t equal to an integer.\nstatic func != (Int, Subscribers.Demand) -> Bool\nReturns a Boolean value that indicates whether an integer is unequal to a demand."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/!=(_:_:)-2dj1p",
        "html": "Discussion\n\nThe .unlimited value isn\u2019t equal to any integer.\n\nSee Also\nComparing Demands\nstatic func == (Subscribers.Demand, Subscribers.Demand) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nstatic func == (Subscribers.Demand, Int) -> Bool\nReturns a Boolean value that indicates whether a demand requests the given number of elements.\nstatic func == (Int, Subscribers.Demand) -> Bool\nReturns a Boolean value that indicates whether a given number of elements matches the request of a given demand.\nstatic func != (Self, Self) -> Bool\nstatic func != (Int, Subscribers.Demand) -> Bool\nReturns a Boolean value that indicates whether an integer is unequal to a demand."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/!=(_:_:)-3j2h8",
        "html": "Discussion\n\nThe .unlimited value isn\u2019t equal to any integer.\n\nSee Also\nComparing Demands\nstatic func == (Subscribers.Demand, Subscribers.Demand) -> Bool\nReturns a Boolean value indicating whether two values are equal.\nstatic func == (Subscribers.Demand, Int) -> Bool\nReturns a Boolean value that indicates whether a demand requests the given number of elements.\nstatic func == (Int, Subscribers.Demand) -> Bool\nReturns a Boolean value that indicates whether a given number of elements matches the request of a given demand.\nstatic func != (Self, Self) -> Bool\nstatic func != (Subscribers.Demand, Int) -> Bool\nReturns a Boolean value that indicates whether a demand isn\u2019t equal to an integer."
    },
    {
        "title": "<(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/_(_:_:)-1wuod",
        "html": "Discussion\n\nIf rhs is .unlimited, then the result is always true. Otherwise, the operator compares the demand\u2019s max value to lhs."
    },
    {
        "title": "keyPath",
        "url": "https://developer.apple.com/documentation/combine/subscribers/assign/keypath",
        "html": "See Also\nInspecting the Assigned Property\nvar object: Root?\nThe object that contains the property to assign."
    },
    {
        "title": "object",
        "url": "https://developer.apple.com/documentation/combine/subscribers/assign/object",
        "html": "Discussion\n\nThe subscriber holds a strong reference to this object until the upstream publisher calls receive(completion:), at which point the subscriber sets this property to nil.\n\nSee Also\nInspecting the Assigned Property\nlet keyPath: ReferenceWritableKeyPath<Root, Input>\nThe key path that indicates the property to assign."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Zip<A, B>, Publishers.Zip<A, B>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, and A.Failure is B.Failure."
    },
    {
        "title": "scheduler",
        "url": "https://developer.apple.com/documentation/combine/publishers/measureinterval/scheduler",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publishers.Zip4.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip4/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.Zip3.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip3/output",
        "html": "Discussion\n\nThis publisher produces three-element tuples, whose members\u2019 types correspond to the types produced by the upstream publishers.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Zip<A, B>, Publishers.Zip<A, B>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, and A.Failure is B.Failure."
    },
    {
        "title": "init(_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip3/init(_:_:_:)",
        "html": "Parameters\na\n\nA publisher to zip.\n\nb\n\nA second publisher to zip.\n\nc\n\nA third publisher to zip."
    },
    {
        "title": "Publishers.Zip4.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip4/output",
        "html": "Discussion\n\nThis publisher produces four-element tuples, whose members\u2019 types correspond to the types produced by the upstream publishers.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "init(_:_:_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip4/init(_:_:_:_:)",
        "html": "Parameters\na\n\nA publisher to zip.\n\nb\n\nA second publisher to zip.\n\nc\n\nA third publisher to zip.\n\nd\n\nA fourth publisher to zip."
    },
    {
        "title": "Publishers.Zip3.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip3/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "a",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip/a",
        "html": "See Also\nInspecting Publisher Properties\nlet b: B\nAnother publisher to zip."
    },
    {
        "title": "transform",
        "url": "https://developer.apple.com/documentation/combine/publishers/trymap/transform",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publishers.Zip.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip3/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool\nstatic func == (Publishers.Zip3<A, B, C>, Publishers.Zip3<A, B, C>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, A.Failure is B.Failure, and B.Failure is C.Failure."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip3/==(_:_:)",
        "html": "Parameters\nlhs\n\nA zip publisher to compare for equality.\n\nrhs\n\nAnother zip publisher to compare for equality.\n\nReturn Value\n\ntrue if the corresponding upstream publishers of each zip publisher are equal; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "!=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/zip3/!=(_:_:)",
        "html": "See Also\nComparing Publishers\nstatic func == (Publishers.Zip3<A, B, C>, Publishers.Zip3<A, B, C>) -> Bool\nReturns a Boolean value that indicates whether two publishers are equivalent.\nAvailable when A conforms to Publisher, A conforms to Equatable, B conforms to Publisher, B conforms to Equatable, C conforms to Publisher, C conforms to Equatable, A.Failure is B.Failure, and B.Failure is C.Failure."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-makeconnectable-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-first-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Comparable Implementations",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/comparable-implementations",
        "html": "Topics\nOperators\nstatic func ... (Self) -> PartialRangeFrom<Self>\nReturns a partial range extending upward from a lower bound.\nstatic func ... (Self) -> PartialRangeThrough<Self>\nReturns a partial range up to, and including, its upper bound.\nstatic func ... (Self, Self) -> ClosedRange<Self>\nReturns a closed range that contains both of its bounds.\nstatic func ..< (Self) -> PartialRangeUpTo<Self>\nReturns a partial range up to, but not including, its upper bound.\nstatic func ..< (Self, Self) -> Range<Self>\nReturns a half-open range that contains its lower bound but not its upper bound.\nstatic func > (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.\nstatic func <= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.\nstatic func >= (Self, Self) -> Bool\nReturns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument."
    },
    {
        "title": "Equatable Implementations",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/equatable-implementations",
        "html": "Topics\nOperators\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "init(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge/init(_:_:)",
        "html": "Parameters\na\n\nA publisher to merge\n\nb\n\nA second publisher to merge."
    },
    {
        "title": "hashValue",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/hashvalue",
        "html": "Discussion\n\nHash values are not guaranteed to be equal across different executions of your program. Do not save hash values to use during a future execution.\n\nImportant\n\nhashValue is deprecated as a Hashable requirement. To conform to Hashable, implement the hash(into:) requirement instead. The compiler provides an implementation for hashValue for you."
    },
    {
        "title": "Publishers.First.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/first/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.MeasureInterval.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/measureinterval/output",
        "html": "Discussion\n\nThis publisher produces elements of the provided scheduler\u2019s time type\u2019s stride.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-buffer-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.MakeConnectable.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/makeconnectable/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "autoconnect()",
        "url": "https://developer.apple.com/documentation/combine/publishers/makeconnectable/autoconnect()",
        "html": "Return Value\n\nA publisher which automatically connects to its upstream connectable publisher.\n\nDiscussion\n\nUse autoconnect() to simplify working with ConnectablePublisher instances, such as Timer.TimerPublisher in the Foundation framework.\n\nIn the following example, the publish(every:tolerance:on:in:options:) operator creates a Timer.TimerPublisher, which is a ConnectablePublisher. As a result, subscribers don\u2019t receive any values until after a call to connect(). For convenience when working with a single subscriber, the autoconnect() operator performs the connect() call when attached to by the subscriber.\n\ncancellable = Timer.publish(every: 1, on: .main, in: .default)\n    .autoconnect()\n    .sink { date in\n        print (\"Date now: \\(date)\")\n    }\n"
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/first/==(_:_:)",
        "html": "Parameters\nlhs\n\nA drop publisher to compare for equality.\n\nrhs\n\nAnother drop publisher to compare for equality.\n\nReturn Value\n\ntrue if the two publishers have equal upstream publishers; otherwise false.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-tryremoveduplicates-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nConnecting Simple Subscribers\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "Publishers.Buffer.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/buffer/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "size",
        "url": "https://developer.apple.com/documentation/combine/publishers/buffer/size",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet prefetch: Publishers.PrefetchStrategy\nThe strategy for initially populating the buffer.\nlet whenFull: Publishers.BufferingStrategy<Publishers.Buffer<Upstream>.Failure>\nThe action to take when the buffer becomes full."
    },
    {
        "title": "Publishers.First.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/first/output",
        "html": "Discussion\n\nThis publisher uses its upstream publisher\u2019s output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/buffer/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet size: Int\nThe maximum number of elements to store.\nlet prefetch: Publishers.PrefetchStrategy\nThe strategy for initially populating the buffer.\nlet whenFull: Publishers.BufferingStrategy<Publishers.Buffer<Upstream>.Failure>\nThe action to take when the buffer becomes full."
    },
    {
        "title": "prefetch",
        "url": "https://developer.apple.com/documentation/combine/publishers/buffer/prefetch",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet size: Int\nThe maximum number of elements to store.\nlet whenFull: Publishers.BufferingStrategy<Publishers.Buffer<Upstream>.Failure>\nThe action to take when the buffer becomes full."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-tryscan-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nConnecting Simple Subscribers\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "predicate",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryremoveduplicates/predicate",
        "html": "See Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements."
    },
    {
        "title": "Publishers.TryScan.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryscan/failure",
        "html": "Discussion\n\nThis publisher produces the Swift Error type.\n\nSee Also\nDeclaring Publisher Topography\nstruct Output\nA publisher that publishes elements specified by a range in the sequence of published elements."
    },
    {
        "title": "upstream",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryscan/upstream",
        "html": "See Also\nInspecting Publisher Properties\nlet initialResult: Output\nThe previous result returned by the nextPartialResult closure.\nlet nextPartialResult: (Output, Upstream.Output) throws -> Output\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher."
    },
    {
        "title": "init(upstream:initialResult:nextPartialResult:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryscan/init(upstream:initialresult:nextpartialresult:)",
        "html": "Parameters\nupstream\n\nThe publisher that this publisher receives elements from.\n\ninitialResult\n\nThe previous result returned by the nextPartialResult closure.\n\nnextPartialResult\n\nAn error-throwing closure that takes as its arguments the previous value returned by the closure and the next element emitted from the upstream publisher."
    },
    {
        "title": "init(upstream:predicate:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryremoveduplicates/init(upstream:predicate:)",
        "html": "Parameters\nupstream\n\nThe publisher from which this publisher receives elements.\n\npredicate\n\nAn error-throwing closure to evaluate whether two elements are equivalent, for purposes of filtering. Return true from this closure to indicate that the second element is a duplicate of the first. If this closure throws an error, the publisher terminates with the thrown error."
    },
    {
        "title": "Publishers.TryRemoveDuplicates.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryremoveduplicates/output",
        "html": "See Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-trycatch-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nConnecting Simple Subscribers\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "-(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/-(_:_:)-1r0gm",
        "html": "Discussion\n\nWhen subtracting any value (including .unlimited) from .unlimited, the result is still .unlimited. Subtracting .unlimited from any value (except .unlimited) results in .max(0). A negative demand is impossible; when an operation would result in a negative value, Combine adjusts the value to .max(0)."
    },
    {
        "title": "-=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/-=(_:_:)-1d0m9",
        "html": "Discussion\n\nWhen subtracting any value (including .unlimited) from .unlimited, the result is still .unlimited. Subtracting .unlimited from any value (except .unlimited) results in .max(0). A negative demand is impossible; when an operation would result in a negative value, Combine adjusts the value to .max(0)."
    },
    {
        "title": "-(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/-(_:_:)-6mw4s",
        "html": "Discussion\n\nWhen subtracting any value from .unlimited, the result is still .unlimited. A negative demand is possible, but be aware that it isn\u2019t usable when requesting values in a subscription."
    },
    {
        "title": "-=(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/subscribers/demand/-=(_:_:)-9pwnc",
        "html": "Discussion\n\nWhen subtracting any value from .unlimited, the result is still .unlimited. A negative demand is impossible; when an operation would result in a negative value, Combine adjusts the value to .max(0)."
    },
    {
        "title": "Publisher Implementations",
        "url": "https://developer.apple.com/documentation/combine/publishers/measureinterval/publisher-implementations",
        "html": "Topics\nInstance Properties\nvar values: AsyncThrowingPublisher<Self>\nThe elements produced by the publisher, as a throwing asynchronous sequence.\nInstance Methods\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output."
    },
    {
        "title": "Subscribers.Assign.Failure",
        "url": "https://developer.apple.com/documentation/combine/subscribers/assign/failure",
        "html": "Discussion\n\nUse Never if this Subscriber cannot receive errors."
    },
    {
        "title": "Publisher Operators",
        "url": "https://developer.apple.com/documentation/combine/publishers-measureinterval-publisher-operators",
        "html": "Overview\n\nUse operators to assemble a chain of republishers, optionally ending with a subscriber, that processes elements produced by upstream publishers. Each operator creates and configures an instance of a Publisher or Subscriber, and subscribes it to the publisher that you call the method on.\n\nIn the following example, a sequence publisher emits the integers 1, 2, 3, 4, and 5. A filter(_:) operator creates a Publishers.Filter publisher to only republish even values. A second operator creates a Subscribers.Sink subscriber to print out each value received. The sink subscriber automatically subscribes to the filter publisher, at which point the filter publisher subscribes to its upstream publisher, the sequence publisher.\n\nlet cancellable = [1, 2, 3, 4, 5].publisher\n    .filter {\n        $0 % 2 == 0\n    }\n    .sink {\n        print (\"Even number: \\($0)\")\n    }\n// Prints:\n// Even number: 2\n// Even number: 4\n\nTopics\nWorking with Subscribers\nfunc receive<S>(subscriber: S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S)\nAttaches the specified subscriber to this publisher.\nfunc subscribe<S>(S) -> AnyCancellable\nAttaches the specified subject to this publisher.\nMapping Elements\nfunc map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>\nTransforms all elements from the upstream publisher with a provided closure.\nfunc tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>\nTransforms all elements from the upstream publisher with a provided error-throwing closure.\nfunc mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>\nConverts any failure from the upstream publisher into a new error.\nfunc replaceNil<T>(with: T) -> Publishers.Map<Self, T>\nReplaces nil elements in the stream with the provided element.\nfunc scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.\nfunc tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>\nTransforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.\nfunc setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>\nChanges the failure type declared by the upstream publisher.\nAvailable when Failure is Never.\nFiltering Elements\nfunc filter((Self.Output) -> Bool) -> Publishers.Filter<Self>\nRepublishes all elements that match a provided closure.\nfunc tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>\nRepublishes all elements that match a provided error-throwing closure.\nfunc compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>\nCalls a closure with each received element and publishes any returned optional that has a value.\nfunc tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>\nCalls an error-throwing closure with each received element and publishes any returned optional that has a value.\nfunc removeDuplicates() -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element.\nAvailable when Output conforms to Equatable.\nfunc removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided closure.\nfunc tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>\nPublishes only elements that don\u2019t match the previous element, as evaluated by a provided error-throwing closure.\nfunc replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>\nReplaces an empty stream with the provided element.\nfunc replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>\nReplaces any errors in the stream with the provided element.\nReducing Elements\nfunc collect() -> Publishers.Collect<Self>\nCollects all received elements, and emits a single array of the collection when the upstream publisher finishes.\nfunc collect(Int) -> Publishers.CollectByCount<Self>\nCollects up to the specified number of elements, and then emits a single array of the collection.\nfunc collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>\nCollects elements by a given time-grouping strategy, and emits a single array of the collection.\nfunc ignoreOutput() -> Publishers.IgnoreOutput<Self>\nIgnores all upstream elements, but passes along the upstream publisher\u2019s completion state (finished or failed).\nfunc reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>\nApplies a closure that collects each element of a stream and publishes a final result upon completion.\nfunc tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>\nApplies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.\nApplying Mathematical Operations on Elements\nfunc count() -> Publishers.Count<Self>\nPublishes the number of elements received from the upstream publisher.\nfunc max() -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided ordering closure.\nfunc tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nfunc min() -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nAvailable when Output conforms to Comparable.\nfunc min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>\nPublishes the minimum value received from the upstream publisher, after it finishes.\nfunc tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>\nPublishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.\nApplying Matching Criteria to Elements\nfunc contains(Self.Output) -> Publishers.Contains<Self>\nPublishes a Boolean value upon receiving an element equal to the argument.\nAvailable when Output conforms to Equatable.\nfunc contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the predicate closure.\nfunc tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>\nPublishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.\nfunc allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given predicate.\nfunc tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>\nPublishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.\nApplying Sequence Operations to Elements\nfunc drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>\nIgnores elements from the upstream publisher until it receives an element from a second publisher.\nfunc dropFirst(Int) -> Publishers.Drop<Self>\nOmits the specified number of elements before republishing subsequent elements.\nfunc drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>\nOmits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.\nfunc tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>\nOmits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.\nfunc append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>\nAppends a publisher\u2019s output with the specified elements.\nfunc prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>\nPrefixes a publisher\u2019s output with the specified values.\nfunc prefix(Int) -> Publishers.Output<Self>\nRepublishes elements up to the specified maximum count.\nfunc prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>\nRepublishes elements while a predicate closure indicates publishing should continue.\nfunc tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>\nRepublishes elements while an error-throwing predicate closure indicates publishing should continue.\nfunc prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>\nRepublishes elements until another publisher emits an element.\nSelecting Specific Elements\nfunc first() -> Publishers.First<Self>\nPublishes the first element of a stream, then finishes.\nfunc first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>\nPublishes the first element of a stream to satisfy a predicate closure, then finishes normally.\nfunc tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>\nPublishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.\nfunc last() -> Publishers.Last<Self>\nPublishes the last element of a stream, after the stream finishes.\nfunc last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>\nPublishes the last element of a stream that satisfies a predicate closure, after upstream finishes.\nfunc tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>\nPublishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.\nfunc output(at: Int) -> Publishers.Output<Self>\nPublishes a specific element, indicated by its index in the sequence of published elements.\nfunc output<R>(in: R) -> Publishers.Output<Self>\nPublishes elements specified by their range in the sequence of published elements.\nCollecting and Republishing the Latest Elements from Multiple Publishers\nfunc combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>\nSubscribes to an additional publisher and invokes a closure upon receiving output from either publisher.\nfunc combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>\nSubscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.\nfunc combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>\nSubscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>\nSubscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>\nSubscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.\nfunc combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>\nSubscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.\nRepublishing Elements from Multiple Publishers as an Interleaved Stream\nfunc merge(with: Self) -> Publishers.MergeMany<Self>\nCombines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.\nfunc merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>\nCombines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>\nCombines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>\nCombines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>\nCombines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>\nCombines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.\nfunc merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>\nCombines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.\nCollecting and Republishing the Oldest Unconsumed Elements from Multiple Publishers\nfunc zip<P>(P) -> Publishers.Zip<Self, P>\nCombines elements from another publisher and deliver pairs of elements as tuples.\nfunc zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>\nCombines elements from another publisher and delivers a transformed output.\nfunc zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>\nCombines elements from two other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>\nCombines elements from two other publishers and delivers a transformed output.\nfunc zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>\nCombines elements from three other publishers and delivers groups of elements as tuples.\nfunc zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>\nCombines elements from three other publishers and delivers a transformed output.\nRepublishing Elements by Subscribing to New Publishers\nfunc flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nAvailable when Failure is Never.\nfunc flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>\nTransforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.\nfunc switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>\nRepublishes elements sent by the most recently received publisher.\nAvailable when Failure is Never.\nHandling Errors\nfunc assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>\nRaises a fatal error when its upstream publisher fails, and otherwise republishes all received input.\nfunc `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>\nHandles errors from an upstream publisher by replacing it with another publisher.\nfunc tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>\nHandles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.\nfunc retry(Int) -> Publishers.Retry<Self>\nAttempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.\nControlling Timing\nfunc measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>\nMeasures and emits the time interval between events received from an upstream publisher.\nfunc debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>\nPublishes elements only after a specified time interval elapses between events.\nfunc delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>\nDelays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.\nfunc throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>\nPublishes either the most-recent or first element published by the upstream publisher in the specified time interval.\nfunc timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>\nTerminates publishing if the upstream publisher exceeds the specified time interval without producing an element.\nEncoding and Decoding\nfunc encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>\nEncodes the output from upstream using a specified encoder.\nAvailable when Output conforms to Encodable.\nfunc decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>\nDecodes the output from the upstream using a specified decoder.\nIdentifying Properties with Key Paths\nfunc map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>\nPublishes the value of a key path.\nfunc map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>\nPublishes the values of two key paths as a tuple.\nfunc map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>\nPublishes the values of three key paths as a tuple.\nWorking with Multiple Subscribers\nfunc multicast<S>(() -> S) -> Publishers.Multicast<Self, S>\nApplies a closure to create a subject that delivers elements to subscribers.\nfunc multicast<S>(subject: S) -> Publishers.Multicast<Self, S>\nProvides a subject to deliver elements to multiple subscribers.\nfunc share() -> Publishers.Share<Self>\nShares the output of an upstream publisher with multiple subscribers.\nBuffering Elements\nfunc buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>\nBuffers elements received from an upstream publisher.\nPerforming Type-Erasure\nfunc eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>\nWraps this publisher with a type eraser.\nSpecifying Schedulers\nfunc subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>\nSpecifies the scheduler on which to perform subscribe, cancel, and request operations.\nfunc receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>\nSpecifies the scheduler on which to receive elements from the publisher.\nAdding Explicit Connectability\nfunc makeConnectable() -> Publishers.MakeConnectable<Self>\nCreates a connectable wrapper around the publisher.\nAvailable when Failure is Never.\nConnecting Simple Subscribers\nfunc assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable\nAssigns each element from a publisher to a property on an object.\nAvailable when Failure is Never.\nfunc assign(to: inout Published<Self.Output>.Publisher)\nRepublishes elements received from a publisher, by assigning them to a property marked as a publisher.\nAvailable when Failure is Never.\nfunc sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior.\nfunc sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable\nAttaches a subscriber with closure-based behavior to a publisher that never fails.\nAvailable when Failure is Never.\nDebugging\nfunc breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>\nRaises a debugger signal when a provided closure needs to stop the process in the debugger.\nfunc breakpointOnError() -> Publishers.Breakpoint<Self>\nRaises a debugger signal upon receiving a failure.\nfunc handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>\nPerforms the specified closures when publisher events occur.\nfunc print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>\nPrints log messages for all publishing events."
    },
    {
        "title": "nextPartialResult",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryreduce/nextpartialresult",
        "html": "Discussion\n\nIf this closure throws an error, the publisher fails and passes the error to its subscriber.\n\nSee Also\nInspecting Publisher Properties\nlet upstream: Upstream\nThe publisher from which this publisher receives elements.\nlet initial: Output\nThe initial value provided on the first-use of the closure."
    },
    {
        "title": "Publishers.TryFirstWhere.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/tryfirstwhere/failure",
        "html": "Discussion\n\nThis publisher produces the Swift Error type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "==(_:_:)",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge/==(_:_:)",
        "html": "Parameters\nlhs\n\nA merging publisher to compare for equality.\n\nrhs\n\nAnother merging publisher to compare for equality..\n\nReturn Value\n\ntrue if the two merging - rhs: Another merging publisher to compare for equality.\n\nSee Also\nComparing Publishers\nstatic func != (Self, Self) -> Bool"
    },
    {
        "title": "b",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge/b",
        "html": "See Also\nInspecting Publisher Properties\nlet a: A\nA publisher to merge."
    },
    {
        "title": "Publishers.Merge.Failure",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge/failure",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common failure type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Output\nThe kind of values published by this publisher."
    },
    {
        "title": "Publishers.Merge.Output",
        "url": "https://developer.apple.com/documentation/combine/publishers/merge/output",
        "html": "Discussion\n\nThis publisher uses its upstream publishers\u2019 common output type.\n\nSee Also\nDeclaring Publisher Topography\ntypealias Failure\nThe kind of errors this publisher might publish."
    }
]