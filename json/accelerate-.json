[
  {
    "title": "BNNSDataLayout6DLastMajor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayout6dlastmajor",
    "html": "Discussion\n\nThe value (i, j, k, l, m, n) is at index:\n\ni * stride[0] + j * stride[1] + k * stride[2] + l * stride[3] +\n\nm * stride[4] + n * stride[5].\n\nsize[0] is the size of the first dimension (i).\n\nsize[1] is the size of the second dimension (j).\n\nsize[2] is the size of the third dimension (k).\n\nsize[3] is the size of the fourth dimension (l).\n\nsize[4] is the size of the fifth dimension (m).\n\nsize[5] is the size of the sixth dimension (n).\n\nSee Also\n6D Data Layouts\nBNNSDataLayout6DFirstMajor\nA constant that represents a 6D first-major tensor."
  },
  {
    "title": "BNNSArithmeticAcos | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticacos",
    "html": "See Also\nTrigonometric Functions\nvar BNNSArithmeticAcosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic cosine of its input.\nvar BNNSArithmeticAsin: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse sine of its input.\nvar BNNSArithmeticAsinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic sine of its input.\nvar BNNSArithmeticAtan: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse tangent of its input.\nvar BNNSArithmeticAtanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic tangent of its input.\nvar BNNSArithmeticCos: BNNSArithmeticFunction\nAn operation that calculates the element-wise cosine of its input.\nvar BNNSArithmeticCosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic cosine of its input.\nvar BNNSArithmeticSin: BNNSArithmeticFunction\nAn operation that calculates the element-wise sine of its input.\nvar BNNSArithmeticSinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic sine of its input.\nvar BNNSArithmeticTan: BNNSArithmeticFunction\nAn operation that calculates the element-wise tangent of its input.\nvar BNNSArithmeticTanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic tangent of its input."
  },
  {
    "title": "BNNSArithmeticLog2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticlog2",
    "html": "See Also\nExponential and Logarithmic Functions\nvar BNNSArithmeticExp: BNNSArithmeticFunction\nAn operation that calculates the element-wise result of e raised to the power of its input.\nvar BNNSArithmeticExp2: BNNSArithmeticFunction\nAn operation that calculates the element-wise result of 2 raised to the power of its input.\nvar BNNSArithmeticLog: BNNSArithmeticFunction\nAn operation that calculates the element-wise natural logarithm of its input."
  },
  {
    "title": "BNNSDataLayout6DFirstMajor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayout6dfirstmajor",
    "html": "Discussion\n\nThe value (i, j, k, l, m, n) is at index:\n\nn * stride[0] + m * stride[1] + l * stride[2] + k * stride[3] +\n\nj * stride[4] + i * stride[5].\n\nsize[0] is the size of the first dimension (i).\n\nsize[1] is the size of the second dimension (j).\n\nsize[2] is the size of the third dimension (k).\n\nsize[3] is the size of the fourth dimension (l).\n\nsize[4] is the size of the fifth dimension (m).\n\nsize[5] is the size of the sixth dimension (n).\n\nSee Also\n6D Data Layouts\nBNNSDataLayout6DLastMajor\nA constant that represents a 6D last-major tensor."
  },
  {
    "title": "BNNSDataLayout3DFirstMajor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayout3dfirstmajor",
    "html": "Discussion\n\nThe value (i, j, k) is at index k * stride[0] + j * stride[1] + i * stride[2].\n\nsize[0] is the size of the first dimension (i).\n\nsize[1] is the size of the second dimension (j).\n\nsize[2] is the size of the third dimension (k).\n\nSee Also\n3D Data Layouts\nBNNSDataLayoutImageCHW\nA constant that represents a 3D image stack.\nBNNSDataLayout3DLastMajor\nA constant that represents a 3D last-major tensor.\nBNNSDataLayoutSNE\nA constant that represents a 3D tensor with the size elements embedding dimension, batch size, and sequence length.\nBNNSDataLayoutNSE\nA constant that represents a 3D tensor with the size elements embedding dimension, sequence length, and batch size."
  },
  {
    "title": "BNNSArithmeticAsin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticasin",
    "html": "See Also\nTrigonometric Functions\nvar BNNSArithmeticAcos: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse cosine of its input.\nvar BNNSArithmeticAcosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic cosine of its input.\nvar BNNSArithmeticAsinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic sine of its input.\nvar BNNSArithmeticAtan: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse tangent of its input.\nvar BNNSArithmeticAtanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic tangent of its input.\nvar BNNSArithmeticCos: BNNSArithmeticFunction\nAn operation that calculates the element-wise cosine of its input.\nvar BNNSArithmeticCosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic cosine of its input.\nvar BNNSArithmeticSin: BNNSArithmeticFunction\nAn operation that calculates the element-wise sine of its input.\nvar BNNSArithmeticSinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic sine of its input.\nvar BNNSArithmeticTan: BNNSArithmeticFunction\nAn operation that calculates the element-wise tangent of its input.\nvar BNNSArithmeticTanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic tangent of its input."
  },
  {
    "title": "clamp(_:min:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690513-clamp",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uint4, simd_uint4, simd_uint4) -> simd_uint4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<UInt32>, min: UInt32, max: UInt32) -> SIMD4<UInt32>\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_uint4, simd_uint4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "BNNSDataLayout1DLastMajor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayout1dlastmajor",
    "html": "See Also\n1D Data Layouts\nBNNSDataLayoutVector\nA constant that represents a 1D vector.\nBNNSDataLayout1DFirstMajor\nA constant that represents a 1D first-major vector."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticfunction/3548485-init",
    "html": "See Also\nRaw Values\nvar rawValue: UInt32\ninit(rawValue: UInt32)"
  },
  {
    "title": "BNNSDataLayout7DFirstMajor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayout7dfirstmajor",
    "html": "Discussion\n\nThe value (i, j, k, l, m, n, o) is at index:\n\no * stride[0] + n * stride[1] + m * stride[2] + l * stride[3] +\n\nk * stride[4] + j * stride[5] + i * stride[6].\n\nsize[0] is the size of the first dimension (i).\n\nsize[1] is the size of the second dimension (j).\n\nsize[2] is the size of the third dimension (k).\n\nsize[3] is the size of the fourth dimension (l).\n\nsize[4] is the size of the fifth dimension (m).\n\nsize[5] is the size of the sixth dimension (n).\n\nsize[6] is the size of the seventh dimension (o).\n\nSee Also\n7D Data Layouts\nBNNSDataLayout7DLastMajor\nA constant that represents a 7D last-major tensor."
  },
  {
    "title": "BNNSDataLayout8DLastMajor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayout8dlastmajor",
    "html": "Discussion\n\nThe value (i, j, k, l, m, n, o, p) is at index:\n\ni * stride[0] + j * stride[1] + k * stride[2] + l * stride[3] +\n\nm * stride[4] + n * stride[5] + o * stride[6] + p * stride[7]\n\nsize[0] is the size of the first dimension (i).\n\nsize[1] is the size of the second dimension (j).\n\nsize[2] is the size of the third dimension (k).\n\nsize[3] is the size of the fourth dimension (l).\n\nsize[4] is the size of the fifth dimension (m).\n\nsize[5] is the size of the sixth dimension (n).\n\nsize[6] is the size of the seventh dimension (o).\n\nsize[7] is the size of the eighth dimension (p).\n\nSee Also\n8D Data Layouts\nBNNSDataLayout8DFirstMajor\nA constant that represents a 8D first-major tensor."
  },
  {
    "title": "BNNSDataLayout7DLastMajor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayout7dlastmajor",
    "html": "Discussion\n\nThe value (i, j, k, l, m, n, o) is at index:\n\ni * stride[0] + j * stride[1] + k * stride[2] + l * stride[3] +\n\nm * stride[4] + n * stride[5] + o * stride[6].\n\nsize[0] is the size of the first dimension (i).\n\nsize[1] is the size of the second dimension (j).\n\nsize[2] is the size of the third dimension (k).\n\nsize[3] is the size of the fourth dimension (l).\n\nsize[4] is the size of the fifth dimension (m).\n\nsize[5] is the size of the sixth dimension (n).\n\nsize[6] is the size of the seventh dimension (o).\n\nSee Also\n7D Data Layouts\nBNNSDataLayout7DFirstMajor\nA constant that represents a 7D first-major tensor."
  },
  {
    "title": "BNNSDataLayout8DFirstMajor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayout8dfirstmajor",
    "html": "Discussion\n\nThe value (i, j, k, l, m, n, o, p) is at index:\n\np * stride[0] + o * stride[1] + n * stride[2] + m * stride[3] +\n\nl * stride[4] + k * stride[5] + j * stride[6] + i * stride[7]\n\nsize[0] is the size of the first dimension (i).\n\nsize[1] is the size of the second dimension (j).\n\nsize[2] is the size of the third dimension (k).\n\nsize[3] is the size of the fourth dimension (l).\n\nsize[4] is the size of the fifth dimension (m).\n\nsize[5] is the size of the sixth dimension (n).\n\nsize[6] is the size of the seventh dimension (o).\n\nsize[7] is the size of the eighth dimension (p).\n\nSee Also\n8D Data Layouts\nBNNSDataLayout8DLastMajor\nA constant that represents a 8D last-major tensor."
  },
  {
    "title": "BNNSDataLayoutConvolutionWeightsOIHrWr | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayoutconvolutionweightsoihrwr",
    "html": "Discussion\n\nThe value (kx, ky, InChannel, OutChannel) is at index:\n\n(kw - 1 - kx) * stride[0] + (kh - 1 - ky) * stride[1] + OutChannel * stride[2] + InChannel * stride[3].\n\nsize[0] is the convolution kernel width in pixels.\n\nsize[1] is the convolution kernel height in pixels.\n\nsize[2] is the number of output channels.\n\nsize[3] is the number of input channels.\n\nkw is size[0] and kx is between 0 to kw-1.\n\nkh is size[1] and ky is between 0 to kh-1.\n\nSee Also\n4D Data Layouts\nBNNSDataLayoutConvolutionWeightsOIHW\nA constant that represents a 4D array of convolution weights.\nBNNSDataLayoutConvolutionWeightsIOHrWr\nA constant that represents a 4D array of rotated convolution weights.\nBNNSDataLayoutConvolutionWeightsOIHW_Pack32\nA constant that represents a 4D array of packed convolution weights with 32-output channel packing and 128-byte array address alignment.\nBNNSDataLayout4DFirstMajor\nA constant that represents a 4D first-major tensor.\nBNNSDataLayout4DLastMajor\nA constant that represents a 4D last-major tensor."
  },
  {
    "title": "BNNSDataLayout3DLastMajor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayout3dlastmajor",
    "html": "Discussion\n\nThe value (i, j, k) is at index i * stride[0] + j * stride[1] + k * stride[2].\n\nsize[0] is the size of the first dimension (i).\n\nsize[1] is the size of the second dimension (j).\n\nsize[2] is the size of the third dimension (k).\n\nSee Also\n3D Data Layouts\nBNNSDataLayoutImageCHW\nA constant that represents a 3D image stack.\nBNNSDataLayout3DFirstMajor\nA constant that represents a 3D first-major tensor.\nBNNSDataLayoutSNE\nA constant that represents a 3D tensor with the size elements embedding dimension, batch size, and sequence length.\nBNNSDataLayoutNSE\nA constant that represents a 3D tensor with the size elements embedding dimension, sequence length, and batch size."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparsescaling_t/2868014-init",
    "html": "See Also\nRaw Values\ninit(rawValue: UInt8)\nvar rawValue: UInt8"
  },
  {
    "title": "BNNSArithmeticAcosh | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticacosh",
    "html": "See Also\nTrigonometric Functions\nvar BNNSArithmeticAcos: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse cosine of its input.\nvar BNNSArithmeticAsin: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse sine of its input.\nvar BNNSArithmeticAsinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic sine of its input.\nvar BNNSArithmeticAtan: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse tangent of its input.\nvar BNNSArithmeticAtanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic tangent of its input.\nvar BNNSArithmeticCos: BNNSArithmeticFunction\nAn operation that calculates the element-wise cosine of its input.\nvar BNNSArithmeticCosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic cosine of its input.\nvar BNNSArithmeticSin: BNNSArithmeticFunction\nAn operation that calculates the element-wise sine of its input.\nvar BNNSArithmeticSinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic sine of its input.\nvar BNNSArithmeticTan: BNNSArithmeticFunction\nAn operation that calculates the element-wise tangent of its input.\nvar BNNSArithmeticTanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic tangent of its input."
  },
  {
    "title": "BNNSDataLayoutRowMajorMatrix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayoutrowmajormatrix",
    "html": "Discussion\n\nThe value (row, col) is at index col * stride[0] + row * stride[1].\n\nsize[0] is the number of columns.\n\nsize[1] is the number of rows.\n\nSee Also\n2D Data Layouts\nBNNSDataLayoutColumnMajorMatrix\nA constant that represents a 2D column-major matrix.\nBNNSDataLayout2DFirstMajor\nA constant that represents a 2D first-major matrix.\nBNNSDataLayout2DLastMajor\nA constant that represents a 2D last-major matrix."
  },
  {
    "title": "BNNSDataLayoutVector | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayoutvector",
    "html": "See Also\n1D Data Layouts\nBNNSDataLayout1DFirstMajor\nA constant that represents a 1D first-major vector.\nBNNSDataLayout1DLastMajor\nA constant that represents a 1D last-major vector."
  },
  {
    "title": "BNNSArithmeticTanh | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmetictanh",
    "html": "See Also\nTrigonometric Functions\nvar BNNSArithmeticAcos: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse cosine of its input.\nvar BNNSArithmeticAcosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic cosine of its input.\nvar BNNSArithmeticAsin: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse sine of its input.\nvar BNNSArithmeticAsinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic sine of its input.\nvar BNNSArithmeticAtan: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse tangent of its input.\nvar BNNSArithmeticAtanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic tangent of its input.\nvar BNNSArithmeticCos: BNNSArithmeticFunction\nAn operation that calculates the element-wise cosine of its input.\nvar BNNSArithmeticCosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic cosine of its input.\nvar BNNSArithmeticSin: BNNSArithmeticFunction\nAn operation that calculates the element-wise sine of its input.\nvar BNNSArithmeticSinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic sine of its input.\nvar BNNSArithmeticTan: BNNSArithmeticFunction\nAn operation that calculates the element-wise tangent of its input."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparsestatus_t/2868169-init",
    "html": "See Also\nRaw Values\ninit(Int32)\nvar rawValue: Int32"
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticfunction/3548486-init",
    "html": "See Also\nRaw Values\nvar rawValue: UInt32\ninit(UInt32)"
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917869-simd_uint",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticfunction/3548487-rawvalue",
    "html": "See Also\nRaw Values\ninit(UInt32)\ninit(rawValue: UInt32)"
  },
  {
    "title": "BNNSArithmeticCos | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticcos",
    "html": "See Also\nTrigonometric Functions\nvar BNNSArithmeticAcos: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse cosine of its input.\nvar BNNSArithmeticAcosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic cosine of its input.\nvar BNNSArithmeticAsin: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse sine of its input.\nvar BNNSArithmeticAsinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic sine of its input.\nvar BNNSArithmeticAtan: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse tangent of its input.\nvar BNNSArithmeticAtanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic tangent of its input.\nvar BNNSArithmeticCosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic cosine of its input.\nvar BNNSArithmeticSin: BNNSArithmeticFunction\nAn operation that calculates the element-wise sine of its input.\nvar BNNSArithmeticSinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic sine of its input.\nvar BNNSArithmeticTan: BNNSArithmeticFunction\nAn operation that calculates the element-wise tangent of its input.\nvar BNNSArithmeticTanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic tangent of its input."
  },
  {
    "title": "BNNSArithmeticAtanh | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticatanh",
    "html": "See Also\nTrigonometric Functions\nvar BNNSArithmeticAcos: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse cosine of its input.\nvar BNNSArithmeticAcosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic cosine of its input.\nvar BNNSArithmeticAsin: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse sine of its input.\nvar BNNSArithmeticAsinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic sine of its input.\nvar BNNSArithmeticAtan: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse tangent of its input.\nvar BNNSArithmeticCos: BNNSArithmeticFunction\nAn operation that calculates the element-wise cosine of its input.\nvar BNNSArithmeticCosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic cosine of its input.\nvar BNNSArithmeticSin: BNNSArithmeticFunction\nAn operation that calculates the element-wise sine of its input.\nvar BNNSArithmeticSinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic sine of its input.\nvar BNNSArithmeticTan: BNNSArithmeticFunction\nAn operation that calculates the element-wise tangent of its input.\nvar BNNSArithmeticTanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic tangent of its input."
  },
  {
    "title": "BNNSArithmeticTan | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmetictan",
    "html": "See Also\nTrigonometric Functions\nvar BNNSArithmeticAcos: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse cosine of its input.\nvar BNNSArithmeticAcosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic cosine of its input.\nvar BNNSArithmeticAsin: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse sine of its input.\nvar BNNSArithmeticAsinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic sine of its input.\nvar BNNSArithmeticAtan: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse tangent of its input.\nvar BNNSArithmeticAtanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic tangent of its input.\nvar BNNSArithmeticCos: BNNSArithmeticFunction\nAn operation that calculates the element-wise cosine of its input.\nvar BNNSArithmeticCosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic cosine of its input.\nvar BNNSArithmeticSin: BNNSArithmeticFunction\nAn operation that calculates the element-wise sine of its input.\nvar BNNSArithmeticSinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic sine of its input.\nvar BNNSArithmeticTanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic tangent of its input."
  },
  {
    "title": "BNNSArithmeticSinh | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticsinh",
    "html": "See Also\nTrigonometric Functions\nvar BNNSArithmeticAcos: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse cosine of its input.\nvar BNNSArithmeticAcosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic cosine of its input.\nvar BNNSArithmeticAsin: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse sine of its input.\nvar BNNSArithmeticAsinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic sine of its input.\nvar BNNSArithmeticAtan: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse tangent of its input.\nvar BNNSArithmeticAtanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic tangent of its input.\nvar BNNSArithmeticCos: BNNSArithmeticFunction\nAn operation that calculates the element-wise cosine of its input.\nvar BNNSArithmeticCosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic cosine of its input.\nvar BNNSArithmeticSin: BNNSArithmeticFunction\nAn operation that calculates the element-wise sine of its input.\nvar BNNSArithmeticTan: BNNSArithmeticFunction\nAn operation that calculates the element-wise tangent of its input.\nvar BNNSArithmeticTanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic tangent of its input."
  },
  {
    "title": "BNNSArithmeticCosh | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticcosh",
    "html": "See Also\nTrigonometric Functions\nvar BNNSArithmeticAcos: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse cosine of its input.\nvar BNNSArithmeticAcosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic cosine of its input.\nvar BNNSArithmeticAsin: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse sine of its input.\nvar BNNSArithmeticAsinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic sine of its input.\nvar BNNSArithmeticAtan: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse tangent of its input.\nvar BNNSArithmeticAtanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic tangent of its input.\nvar BNNSArithmeticCos: BNNSArithmeticFunction\nAn operation that calculates the element-wise cosine of its input.\nvar BNNSArithmeticSin: BNNSArithmeticFunction\nAn operation that calculates the element-wise sine of its input.\nvar BNNSArithmeticSinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic sine of its input.\nvar BNNSArithmeticTan: BNNSArithmeticFunction\nAn operation that calculates the element-wise tangent of its input.\nvar BNNSArithmeticTanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic tangent of its input."
  },
  {
    "title": "BNNSArithmeticSin | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticsin",
    "html": "See Also\nTrigonometric Functions\nvar BNNSArithmeticAcos: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse cosine of its input.\nvar BNNSArithmeticAcosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic cosine of its input.\nvar BNNSArithmeticAsin: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse sine of its input.\nvar BNNSArithmeticAsinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic sine of its input.\nvar BNNSArithmeticAtan: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse tangent of its input.\nvar BNNSArithmeticAtanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic tangent of its input.\nvar BNNSArithmeticCos: BNNSArithmeticFunction\nAn operation that calculates the element-wise cosine of its input.\nvar BNNSArithmeticCosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic cosine of its input.\nvar BNNSArithmeticSinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic sine of its input.\nvar BNNSArithmeticTan: BNNSArithmeticFunction\nAn operation that calculates the element-wise tangent of its input.\nvar BNNSArithmeticTanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic tangent of its input."
  },
  {
    "title": "BNNSDataLayout5DLastMajor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayout5dlastmajor",
    "html": "Discussion\n\nThe value (i, j, k, l, m) is at index:\n\ni * stride[0] + j * stride[1] + k * stride[2] + l * stride[3] + m * stride[4].\n\nsize[0] is the size of the first dimension (i).\n\nsize[1] is the size of the second dimension (j).\n\nsize[2] is the size of the third dimension (k).\n\nsize[3] is the size of the fourth dimension (l).\n\nsize[4] is the size of the fifth dimension (m).\n\nSee Also\n5D Data Layouts\nBNNSDataLayout5DFirstMajor\nA constant that represents a 5D first-major tensor."
  },
  {
    "title": "BNNSArithmeticAsinh | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticasinh",
    "html": "See Also\nTrigonometric Functions\nvar BNNSArithmeticAcos: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse cosine of its input.\nvar BNNSArithmeticAcosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic cosine of its input.\nvar BNNSArithmeticAsin: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse sine of its input.\nvar BNNSArithmeticAtan: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse tangent of its input.\nvar BNNSArithmeticAtanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic tangent of its input.\nvar BNNSArithmeticCos: BNNSArithmeticFunction\nAn operation that calculates the element-wise cosine of its input.\nvar BNNSArithmeticCosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic cosine of its input.\nvar BNNSArithmeticSin: BNNSArithmeticFunction\nAn operation that calculates the element-wise sine of its input.\nvar BNNSArithmeticSinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic sine of its input.\nvar BNNSArithmeticTan: BNNSArithmeticFunction\nAn operation that calculates the element-wise tangent of its input.\nvar BNNSArithmeticTanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic tangent of its input."
  },
  {
    "title": "BNNSArithmeticAtan | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticatan",
    "html": "See Also\nTrigonometric Functions\nvar BNNSArithmeticAcos: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse cosine of its input.\nvar BNNSArithmeticAcosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic cosine of its input.\nvar BNNSArithmeticAsin: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse sine of its input.\nvar BNNSArithmeticAsinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic sine of its input.\nvar BNNSArithmeticAtanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise inverse hyperbolic tangent of its input.\nvar BNNSArithmeticCos: BNNSArithmeticFunction\nAn operation that calculates the element-wise cosine of its input.\nvar BNNSArithmeticCosh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic cosine of its input.\nvar BNNSArithmeticSin: BNNSArithmeticFunction\nAn operation that calculates the element-wise sine of its input.\nvar BNNSArithmeticSinh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic sine of its input.\nvar BNNSArithmeticTan: BNNSArithmeticFunction\nAn operation that calculates the element-wise tangent of its input.\nvar BNNSArithmeticTanh: BNNSArithmeticFunction\nAn operation that calculates the element-wise hyperbolic tangent of its input."
  },
  {
    "title": "BNNSDataLayout4DLastMajor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayout4dlastmajor",
    "html": "Discussion\n\nThe value (i, j, k, l) is at index:\n\ni * stride[0] + j * stride[1] + k * stride[2] + l * stride[3]\n\nsize[0] is the size of the first dimension (i).\n\nsize[1] is the size of the second dimension (j).\n\nsize[2] is the size of the third dimension (k).\n\nsize[3] is the size of the fourth dimension (l).\n\nSee Also\n4D Data Layouts\nBNNSDataLayoutConvolutionWeightsOIHW\nA constant that represents a 4D array of convolution weights.\nBNNSDataLayoutConvolutionWeightsIOHrWr\nA constant that represents a 4D array of rotated convolution weights.\nBNNSDataLayoutConvolutionWeightsOIHrWr\nA constant that represents a 4D array of rotated convolution weights.\nBNNSDataLayoutConvolutionWeightsOIHW_Pack32\nA constant that represents a 4D array of packed convolution weights with 32-output channel packing and 128-byte array address alignment.\nBNNSDataLayout4DFirstMajor\nA constant that represents a 4D first-major tensor."
  },
  {
    "title": "BNNSDataLayout5DFirstMajor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayout5dfirstmajor",
    "html": "Discussion\n\nThe value (i, j, k, l, m) is at index:\n\nm * stride[0] + l * stride[1] + k * stride[2] + j * stride[3] + i * stride[4].\n\nsize[0] is the size of the first dimension (i).\n\nsize[1] is the size of the second dimension (j).\n\nsize[2] is the size of the third dimension (k).\n\nsize[3] is the size of the fourth dimension (l).\n\nsize[4] is the size of the fifth dimension (m).\n\nSee Also\n5D Data Layouts\nBNNSDataLayout5DLastMajor\nA constant that represents a 5D last-major tensor."
  },
  {
    "title": "BNNSArithmeticLog | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticlog",
    "html": "See Also\nExponential and Logarithmic Functions\nvar BNNSArithmeticExp: BNNSArithmeticFunction\nAn operation that calculates the element-wise result of e raised to the power of its input.\nvar BNNSArithmeticExp2: BNNSArithmeticFunction\nAn operation that calculates the element-wise result of 2 raised to the power of its input.\nvar BNNSArithmeticLog2: BNNSArithmeticFunction\nAn operation that calculates the element-wise base 2 logarithm of its input."
  },
  {
    "title": "BNNSArithmeticTruncDivide | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmetictruncdivide",
    "html": "See Also\nBinary Arithmetic Functions\nvar BNNSArithmeticAdd: BNNSArithmeticFunction\nAn operation that calculates the element-wise sum of its two inputs.\nvar BNNSArithmeticSubtract: BNNSArithmeticFunction\nAn operation that calculates the element-wise difference of its two inputs.\nvar BNNSArithmeticDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs.\nvar BNNSArithmeticDivideNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs and returns zero if the divisor is zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticMultiply: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs.\nvar BNNSArithmeticMultiplyNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs and returns zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticPow: BNNSArithmeticFunction\nAn operation that calculates the element-wise first input raised to the power of its second input.\nvar BNNSArithmeticMaximum: BNNSArithmeticFunction\nAn operation that calculates the element-wise maximum of its two inputs.\nvar BNNSArithmeticMinimum: BNNSArithmeticFunction\nAn operation that calculates the element-wise minimum of its two inputs.\nvar BNNSArithmeticFloorDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise floor division of its inputs.\nvar BNNSArithmeticTruncRemainder: BNNSArithmeticFunction\nAn operation that calculates the element-wise remainder of truncated division of its inputs."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparsegmresvariant_t/2873552-init",
    "html": "See Also\nRaw Values\ninit(rawValue: UInt8)\nvar rawValue: UInt8"
  },
  {
    "title": "BNNSDataLayout4DFirstMajor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayout4dfirstmajor",
    "html": "Discussion\n\nThe value (i, j, k, l) is at index:\n\nl * stride[0] + k * stride[1] + j * stride[2] + i * stride[3]\n\nsize[0] is the size of the first dimension (i).\n\nsize[1] is the size of the second dimension (j).\n\nsize[2] is the size of the third dimension (k).\n\nsize[3] is the size of the fourth dimension (l).\n\nSee Also\n4D Data Layouts\nBNNSDataLayoutConvolutionWeightsOIHW\nA constant that represents a 4D array of convolution weights.\nBNNSDataLayoutConvolutionWeightsIOHrWr\nA constant that represents a 4D array of rotated convolution weights.\nBNNSDataLayoutConvolutionWeightsOIHrWr\nA constant that represents a 4D array of rotated convolution weights.\nBNNSDataLayoutConvolutionWeightsOIHW_Pack32\nA constant that represents a 4D array of packed convolution weights with 32-output channel packing and 128-byte array address alignment.\nBNNSDataLayout4DLastMajor\nA constant that represents a 4D last-major tensor."
  },
  {
    "title": "BNNSDataLayoutConvolutionWeightsOIHW_Pack32 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayoutconvolutionweightsoihw_pack32",
    "html": "Discussion\n\nThe Value (kx, ky, InChannel, OutChannel) is at index:\n\nOutChannelPositionInGroup + kw * 32 + ky * kernel_width * 32 +\n\nInChannel * kernel_height * kernel_width * 32 +\n\nOutChannelGroup * input_channels * kernel_height * kernel_width * 32\n\nWhere:\n\nkernel_width is the kernel width.\n\nkernel_height is the kernel height.\n\ninput_channels is the number of input channels.\n\noutput_channels is the number of output channels.\n\nOutChannelGroup = OutChannel / 32.\n\nOutChannelPositionInGroup = OutChannel % 32.\n\nkw is size[0] and kx is between 0 to kw-1.\n\nkh is size[1] and ky is between 0 to kh-1.\n\nSee Also\n4D Data Layouts\nBNNSDataLayoutConvolutionWeightsOIHW\nA constant that represents a 4D array of convolution weights.\nBNNSDataLayoutConvolutionWeightsIOHrWr\nA constant that represents a 4D array of rotated convolution weights.\nBNNSDataLayoutConvolutionWeightsOIHrWr\nA constant that represents a 4D array of rotated convolution weights.\nBNNSDataLayout4DFirstMajor\nA constant that represents a 4D first-major tensor.\nBNNSDataLayout4DLastMajor\nA constant that represents a 4D last-major tensor."
  },
  {
    "title": "BNNSDataLayoutConvolutionWeightsIOHrWr | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayoutconvolutionweightsiohrwr",
    "html": "Discussion\n\nThe value (kx, ky, InChannel, OutChannel) is at index:\n\n(kw - 1 - kx) * stride[0] + (kh - 1 - ky) * stride[1] + InChannel * stride[2] + OutChannel * stride[3].\n\nsize[0] is the convolution kernel width in pixels.\n\nsize[1] is the convolution kernel height in pixels.\n\nsize[2] is the number of input channels.\n\nsize[3] is the number of output channels.\n\nkw is size[0] and kx is between 0 to kw-1.\n\nkh is size[1] and ky is between 0 to kh-1.\n\nSee Also\n4D Data Layouts\nBNNSDataLayoutConvolutionWeightsOIHW\nA constant that represents a 4D array of convolution weights.\nBNNSDataLayoutConvolutionWeightsOIHrWr\nA constant that represents a 4D array of rotated convolution weights.\nBNNSDataLayoutConvolutionWeightsOIHW_Pack32\nA constant that represents a 4D array of packed convolution weights with 32-output channel packing and 128-byte array address alignment.\nBNNSDataLayout4DFirstMajor\nA constant that represents a 4D first-major tensor.\nBNNSDataLayout4DLastMajor\nA constant that represents a 4D last-major tensor."
  },
  {
    "title": "BNNSDataLayoutConvolutionWeightsOIHW | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayoutconvolutionweightsoihw",
    "html": "Discussion\n\nThe value (kx ,ky, InChannel, OutChannel) is at index:\n\nkx * stride[0] + ky * stride[1] + InChannel * stride[2] + OutChannel * stride[3].\n\nsize[0] is the convolution kernel width in pixels.\n\nsize[1] is the convolution kernel height in pixels.\n\nsize[2] is the number of input channels.\n\nsize[3] is the number of output channels.\n\nSee Also\n4D Data Layouts\nBNNSDataLayoutConvolutionWeightsIOHrWr\nA constant that represents a 4D array of rotated convolution weights.\nBNNSDataLayoutConvolutionWeightsOIHrWr\nA constant that represents a 4D array of rotated convolution weights.\nBNNSDataLayoutConvolutionWeightsOIHW_Pack32\nA constant that represents a 4D array of packed convolution weights with 32-output channel packing and 128-byte array address alignment.\nBNNSDataLayout4DFirstMajor\nA constant that represents a 4D first-major tensor.\nBNNSDataLayout4DLastMajor\nA constant that represents a 4D last-major tensor."
  },
  {
    "title": "BNNSDataLayoutNSE | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayoutnse",
    "html": "Discussion\n\nThe value (e, s, n) is at index e * stride[0] + s * stride[1] + n * stride[2].\n\nsize[0] is the embedding dimension (e).\n\nsize[1] is the sequence length (s).\n\nsize[2] is the batch size (n).\n\nSee Also\n3D Data Layouts\nBNNSDataLayoutImageCHW\nA constant that represents a 3D image stack.\nBNNSDataLayout3DFirstMajor\nA constant that represents a 3D first-major tensor.\nBNNSDataLayout3DLastMajor\nA constant that represents a 3D last-major tensor.\nBNNSDataLayoutSNE\nA constant that represents a 3D tensor with the size elements embedding dimension, batch size, and sequence length."
  },
  {
    "title": "BNNSDataLayoutSNE | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayoutsne",
    "html": "Discussion\n\nThe value (e, n, s) is at index e * stride[0] + n * stride[1] + s * stride[2]:\n\nsize[0] is the embedding dimension (e).\n\nsize[1] is the batch size (n).\n\nsize[2] is the sequence length (s).\n\nSee Also\n3D Data Layouts\nBNNSDataLayoutImageCHW\nA constant that represents a 3D image stack.\nBNNSDataLayout3DFirstMajor\nA constant that represents a 3D first-major tensor.\nBNNSDataLayout3DLastMajor\nA constant that represents a 3D last-major tensor.\nBNNSDataLayoutNSE\nA constant that represents a 3D tensor with the size elements embedding dimension, sequence length, and batch size."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparsescaling_t/2868191-init",
    "html": "See Also\nRaw Values\ninit(UInt8)\nvar rawValue: UInt8"
  },
  {
    "title": "vImageConvert_RGB565toPlanar8(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533170-vimageconvert_rgb565toplanar8",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to separate.\n\ndestR\n\nA pointer to a vImage buffer data structure that represents the red channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\ndestG\n\nA pointer to a vImage buffer data structure that represents the green channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\ndestB\n\nA pointer to a vImage buffer data structure that represents the blue channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe RGB565 format has 16-bit pixels with 5 bits for red, 6 for green, and 5 for blue. The function calculates the pixels in the destination image as follows:\n\n    Pixel8 red   = (5bitRedChannel   * 255 + 15) / 31\n    Pixel8 green = (6bitGreenChannel * 255 + 31) / 63\n    Pixel8 blue  = (5bitBlueChannel  * 255 + 15) / 31\n\n\nThis function works in place for one destination buffer. You must allocate the others separately.\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparselsmrconvergencetest_t/2875530-init",
    "html": "See Also\nRaw Values\ninit(Int32)\nvar rawValue: Int32"
  },
  {
    "title": "BNNSArithmeticAdd | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticadd",
    "html": "See Also\nBinary Arithmetic Functions\nvar BNNSArithmeticSubtract: BNNSArithmeticFunction\nAn operation that calculates the element-wise difference of its two inputs.\nvar BNNSArithmeticDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs.\nvar BNNSArithmeticDivideNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs and returns zero if the divisor is zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticMultiply: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs.\nvar BNNSArithmeticMultiplyNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs and returns zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticPow: BNNSArithmeticFunction\nAn operation that calculates the element-wise first input raised to the power of its second input.\nvar BNNSArithmeticMaximum: BNNSArithmeticFunction\nAn operation that calculates the element-wise maximum of its two inputs.\nvar BNNSArithmeticMinimum: BNNSArithmeticFunction\nAn operation that calculates the element-wise minimum of its two inputs.\nvar BNNSArithmeticFloorDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise floor division of its inputs.\nvar BNNSArithmeticTruncDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise truncated division of its inputs.\nvar BNNSArithmeticTruncRemainder: BNNSArithmeticFunction\nAn operation that calculates the element-wise remainder of truncated division of its inputs."
  },
  {
    "title": "BNNSArithmeticMultiplyAdd | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticmultiplyadd",
    "html": "See Also\nTernary Arithmetic Functions\nvar BNNSArithmeticSelect: BNNSArithmeticFunction\nAn operation that selects elements from either its second or third input based on the corresponding value of its first input."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparselsmrconvergencetest_t/2875511-init",
    "html": "See Also\nRaw Values\ninit(rawValue: Int32)\nvar rawValue: Int32"
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparsestatus_t/2868182-rawvalue",
    "html": "See Also\nRaw Values\ninit(Int32)\ninit(rawValue: Int32)"
  },
  {
    "title": "BNNSDataLayout2DLastMajor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayout2dlastmajor",
    "html": "Discussion\n\nThe value (i, j) is at index i * stride[0] + j * stride[1].\n\nsize[0] is the size of the first dimension (i).\n\nsize[1] is the size of the second dimension (j).\n\nThis is the BLAS/LAPACK column-major equivalent.\n\nSee Also\n2D Data Layouts\nBNNSDataLayoutColumnMajorMatrix\nA constant that represents a 2D column-major matrix.\nBNNSDataLayoutRowMajorMatrix\nA constant that represents a 2D row-major matrix.\nBNNSDataLayout2DFirstMajor\nA constant that represents a 2D first-major matrix."
  },
  {
    "title": "simd_make_uint4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883318-simd_make_uint4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uint4(simd_uint2, UInt32, UInt32) -> simd_uint4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_uint4(simd_uint3, UInt32) -> simd_uint4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_uint3, UInt32) -> simd_uint4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_uint4(UInt32, UInt32, simd_uint2) -> simd_uint4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_uint4(UInt32, simd_uint3) -> simd_uint4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "BNNSDataLayoutColumnMajorMatrix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayoutcolumnmajormatrix",
    "html": "Discussion\n\nThe value (row, col) is at index row * stride[0] + col * stride[1].\n\nsize[0] is the number of rows.\n\nsize[1] is the number of columns.\n\nSee Also\n2D Data Layouts\nBNNSDataLayoutRowMajorMatrix\nA constant that represents a 2D row-major matrix.\nBNNSDataLayout2DFirstMajor\nA constant that represents a 2D first-major matrix.\nBNNSDataLayout2DLastMajor\nA constant that represents a 2D last-major matrix."
  },
  {
    "title": "BNNSDataLayout2DFirstMajor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayout2dfirstmajor",
    "html": "Discussion\n\nThe value (i, j) is at index j * stride[0] + i * stride[1].\n\nsize[0] is the size of the first dimension (i).\n\nsize[1] is the size of the second dimension (j).\n\nThis is the BLAS/LAPACK row-major equivalent.\n\nSee Also\n2D Data Layouts\nBNNSDataLayoutColumnMajorMatrix\nA constant that represents a 2D column-major matrix.\nBNNSDataLayoutRowMajorMatrix\nA constant that represents a 2D row-major matrix.\nBNNSDataLayout2DLastMajor\nA constant that represents a 2D last-major matrix."
  },
  {
    "title": "BNNSDataLayout1DFirstMajor | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayout1dfirstmajor",
    "html": "See Also\n1D Data Layouts\nBNNSDataLayoutVector\nA constant that represents a 1D vector.\nBNNSDataLayout1DLastMajor\nA constant that represents a 1D last-major vector."
  },
  {
    "title": "simd_make_uint4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883491-simd_make_uint4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uint4(simd_uint2) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint4(simd_uint3) -> simd_uint4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint4(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector.\nfunc simd_make_uint4(simd_uint8) -> simd_uint4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uint4(simd_uint16) -> simd_uint4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc vector4(simd_uint2, simd_uint2) -> simd_uint4\nReturns a new vector from the specified vectors.\nfunc simd_make_uint4_undef(simd_uint2) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint4_undef(simd_uint3) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918639-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsshuffletype/3930807-init",
    "html": "See Also\nRaw Values\ninit(rawValue: UInt32)\nvar rawValue: UInt32"
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsshuffletype/3930809-rawvalue",
    "html": "See Also\nRaw Values\ninit(UInt32)\ninit(rawValue: UInt32)"
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsshuffletype/3930808-init",
    "html": "See Also\nRaw Values\ninit(UInt32)\nvar rawValue: UInt32"
  },
  {
    "title": "SPARSE_NORM_TWO | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparse_norm_two",
    "html": "Discussion\n\nMatrix element wise\n\n\t\n\nsqrt( sumᵢ,ⱼ (A[i,j])² )\n\n\n\n\nMatrix operator\n\n\t\n\nLargest singular value of matrix, note that the operator SPARSE_NORM_TWO is significantly more expensive than other norm operations.\n\n\n\n\nVector element wise\n\n\t\n\nsqrt( sumᵢ (x[i])² )"
  },
  {
    "title": "vImageConvert_RGB888toARGB8888(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533137-vimageconvert_rgb888toargb8888",
    "html": "Parameters\nrgbSrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\naSrc\n\nA pointer to a vImage buffer structure that contains a Planar8 alpha plane to use as the alpha values for in the destination image. If you pass NULL, the function assigns the value of the alpha parameter for all pixels in the destination image.\n\nalpha\n\nAn alpha value for all pixels in the destination image. The function ignores this value if the aSrc parameter is not NULL.\n\nargbDest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\npremultiply\n\nPass true if the data is premultiplied by the alpha value; false otherwise.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nIf you specify premultiplied data, the function calculates each channel in the destination image as follows:\n\n    (alpha * sourceValue + 127) / 255\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "SPARSE_NORM_R1 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparse_norm_r1",
    "html": "Discussion\n\nMatrix element wise\n\n\t\n\nsumⱼ ( sqrt ( sumᵢ ( A[i,j]² ) ) )\n\n\n\n\nMatrix operator\n\n\t\n\nNot supported. Undefined.\n\n\n\n\nVector element wise\n\n\t\n\nNot supported. Undefined."
  },
  {
    "title": "vImageConvert_RGB565toRGBA8888(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533249-vimageconvert_rgb565torgba8888",
    "html": "Parameters\nalpha\n\nA value of type Pixel_8 to be used as the alpha value for all pixels in the destination image.\n\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe RGB565 format has 16-bit pixels with 5 bits for red, 6 for green, and 5 for blue. The function calculates the pixels in the destination image as follows:\n\n    Pixel8 alpha = alpha\n    Pixel8 red   = (5bitRedChannel   * 255 + 15) / 31\n    Pixel8 green = (6bitGreenChannel * 255 + 31) / 63\n    Pixel8 blue  = (5bitBlueChannel  * 255 + 15) / 31\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918141-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "uint4 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/uint4",
    "html": "See Also\nAlternative Type Alias\ntypealias vector_uint4"
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918740-simd_uchar",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918397-simd_uchar",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918420-simd_uchar",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896614-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_uint4) -> simd_bool\nReturns true if the high-order bit of every element is set; false otherwise.\nfunc simd_bitselect(simd_uint4, simd_uint4, simd_int4) -> simd_uint4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917201-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ulong3, simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_ulong3, simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_ulong3, simd_ulong3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "vector_uint4 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vector_uint4",
    "html": "See Also\nAlternative Type Alias\ntypealias uint4\nDeprecated"
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916716-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong3) -> simd_bool\nfunc simd_any(simd_ulong3) -> simd_bool\nfunc simd_all(simd_ulong3) -> simd_bool\nfunc simd_bitselect(simd_ulong3, simd_ulong3, simd_long3) -> simd_ulong3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_ulong3, simd_ulong3, simd_long3) -> simd_ulong3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896543-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc reduce_min(SIMD4<UInt32>) -> UInt32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_uint4) -> UInt32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD4<UInt32>) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint4) -> UInt32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD4<UInt32>) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916988-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong3) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_ulong3) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong3) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_ulong3) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong3) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage_perpsectivetransform/interpolation/4111511-hash",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916684-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong3) -> simd_bool\nfunc simd_all(simd_ulong3) -> simd_bool\nfunc simd_all(simd_ulong3) -> simd_bool\nfunc simd_bitselect(simd_ulong3, simd_ulong3, simd_long3) -> simd_ulong3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_ulong3, simd_ulong3, simd_long3) -> simd_ulong3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "CBLAS_UPLO | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/blas/cblas_uplo",
    "html": "Overview\n\nImportant\n\nApple provides the BLAS and LAPACK libraries under the Accelerate framework to be in line with LAPACK 3.9.1. These new interfaces provide additional functionality, as well as a new ILP64 interface. To use the new interfaces, define ACCELERATE_NEW_LAPACK before including the Accelerate or vecLib headers. For ILP64 interfaces, also define ACCELERATE_LAPACK_ILP64. For Swift projects, specify ACCELERATE_NEW_LAPACK=1 and ACCELERATE_LAPACK_ILP64=1 as preprocessor macros in Xcode build settings."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917043-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong3) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong3) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_ulong3) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong3) -> simd_ulong1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_ulong3) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916951-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong3) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong3) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_ulong3) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong3) -> simd_ulong1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_ulong3) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "BNNSArithmeticExp2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticexp2",
    "html": "See Also\nExponential and Logarithmic Functions\nvar BNNSArithmeticExp: BNNSArithmeticFunction\nAn operation that calculates the element-wise result of e raised to the power of its input.\nvar BNNSArithmeticLog: BNNSArithmeticFunction\nAn operation that calculates the element-wise natural logarithm of its input.\nvar BNNSArithmeticLog2: BNNSArithmeticFunction\nAn operation that calculates the element-wise base 2 logarithm of its input."
  },
  {
    "title": "BNNSArithmeticSelect | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticselect",
    "html": "Discussion\n\nThis function returns values using the following operation:\n\n out = in1 ? in2 : in3\n\n\nSee Also\nTernary Arithmetic Functions\nvar BNNSArithmeticMultiplyAdd: BNNSArithmeticFunction\nAn operation that calculates the element-wise fused multiply-add of its three inputs."
  },
  {
    "title": "BNNSArithmeticExp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticexp",
    "html": "See Also\nExponential and Logarithmic Functions\nvar BNNSArithmeticExp2: BNNSArithmeticFunction\nAn operation that calculates the element-wise result of 2 raised to the power of its input.\nvar BNNSArithmeticLog: BNNSArithmeticFunction\nAn operation that calculates the element-wise natural logarithm of its input.\nvar BNNSArithmeticLog2: BNNSArithmeticFunction\nAn operation that calculates the element-wise base 2 logarithm of its input."
  },
  {
    "title": "BNNSArithmeticPow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticpow",
    "html": "See Also\nBinary Arithmetic Functions\nvar BNNSArithmeticAdd: BNNSArithmeticFunction\nAn operation that calculates the element-wise sum of its two inputs.\nvar BNNSArithmeticSubtract: BNNSArithmeticFunction\nAn operation that calculates the element-wise difference of its two inputs.\nvar BNNSArithmeticDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs.\nvar BNNSArithmeticDivideNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs and returns zero if the divisor is zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticMultiply: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs.\nvar BNNSArithmeticMultiplyNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs and returns zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticMaximum: BNNSArithmeticFunction\nAn operation that calculates the element-wise maximum of its two inputs.\nvar BNNSArithmeticMinimum: BNNSArithmeticFunction\nAn operation that calculates the element-wise minimum of its two inputs.\nvar BNNSArithmeticFloorDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise floor division of its inputs.\nvar BNNSArithmeticTruncDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise truncated division of its inputs.\nvar BNNSArithmeticTruncRemainder: BNNSArithmeticFunction\nAn operation that calculates the element-wise remainder of truncated division of its inputs."
  },
  {
    "title": "BNNSArithmeticFloorDivide | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticfloordivide",
    "html": "See Also\nBinary Arithmetic Functions\nvar BNNSArithmeticAdd: BNNSArithmeticFunction\nAn operation that calculates the element-wise sum of its two inputs.\nvar BNNSArithmeticSubtract: BNNSArithmeticFunction\nAn operation that calculates the element-wise difference of its two inputs.\nvar BNNSArithmeticDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs.\nvar BNNSArithmeticDivideNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs and returns zero if the divisor is zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticMultiply: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs.\nvar BNNSArithmeticMultiplyNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs and returns zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticPow: BNNSArithmeticFunction\nAn operation that calculates the element-wise first input raised to the power of its second input.\nvar BNNSArithmeticMaximum: BNNSArithmeticFunction\nAn operation that calculates the element-wise maximum of its two inputs.\nvar BNNSArithmeticMinimum: BNNSArithmeticFunction\nAn operation that calculates the element-wise minimum of its two inputs.\nvar BNNSArithmeticTruncDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise truncated division of its inputs.\nvar BNNSArithmeticTruncRemainder: BNNSArithmeticFunction\nAn operation that calculates the element-wise remainder of truncated division of its inputs."
  },
  {
    "title": "BNNSArithmeticTruncRemainder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmetictruncremainder",
    "html": "See Also\nBinary Arithmetic Functions\nvar BNNSArithmeticAdd: BNNSArithmeticFunction\nAn operation that calculates the element-wise sum of its two inputs.\nvar BNNSArithmeticSubtract: BNNSArithmeticFunction\nAn operation that calculates the element-wise difference of its two inputs.\nvar BNNSArithmeticDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs.\nvar BNNSArithmeticDivideNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs and returns zero if the divisor is zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticMultiply: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs.\nvar BNNSArithmeticMultiplyNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs and returns zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticPow: BNNSArithmeticFunction\nAn operation that calculates the element-wise first input raised to the power of its second input.\nvar BNNSArithmeticMaximum: BNNSArithmeticFunction\nAn operation that calculates the element-wise maximum of its two inputs.\nvar BNNSArithmeticMinimum: BNNSArithmeticFunction\nAn operation that calculates the element-wise minimum of its two inputs.\nvar BNNSArithmeticFloorDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise floor division of its inputs.\nvar BNNSArithmeticTruncDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise truncated division of its inputs."
  },
  {
    "title": "BNNSArithmeticMultiplyNoNaN | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticmultiplynonan",
    "html": "See Also\nBinary Arithmetic Functions\nvar BNNSArithmeticAdd: BNNSArithmeticFunction\nAn operation that calculates the element-wise sum of its two inputs.\nvar BNNSArithmeticSubtract: BNNSArithmeticFunction\nAn operation that calculates the element-wise difference of its two inputs.\nvar BNNSArithmeticDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs.\nvar BNNSArithmeticDivideNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs and returns zero if the divisor is zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticMultiply: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs.\nvar BNNSArithmeticPow: BNNSArithmeticFunction\nAn operation that calculates the element-wise first input raised to the power of its second input.\nvar BNNSArithmeticMaximum: BNNSArithmeticFunction\nAn operation that calculates the element-wise maximum of its two inputs.\nvar BNNSArithmeticMinimum: BNNSArithmeticFunction\nAn operation that calculates the element-wise minimum of its two inputs.\nvar BNNSArithmeticFloorDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise floor division of its inputs.\nvar BNNSArithmeticTruncDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise truncated division of its inputs.\nvar BNNSArithmeticTruncRemainder: BNNSArithmeticFunction\nAn operation that calculates the element-wise remainder of truncated division of its inputs."
  },
  {
    "title": "BNNSArithmeticMultiply | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticmultiply",
    "html": "See Also\nBinary Arithmetic Functions\nvar BNNSArithmeticAdd: BNNSArithmeticFunction\nAn operation that calculates the element-wise sum of its two inputs.\nvar BNNSArithmeticSubtract: BNNSArithmeticFunction\nAn operation that calculates the element-wise difference of its two inputs.\nvar BNNSArithmeticDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs.\nvar BNNSArithmeticDivideNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs and returns zero if the divisor is zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticMultiplyNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs and returns zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticPow: BNNSArithmeticFunction\nAn operation that calculates the element-wise first input raised to the power of its second input.\nvar BNNSArithmeticMaximum: BNNSArithmeticFunction\nAn operation that calculates the element-wise maximum of its two inputs.\nvar BNNSArithmeticMinimum: BNNSArithmeticFunction\nAn operation that calculates the element-wise minimum of its two inputs.\nvar BNNSArithmeticFloorDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise floor division of its inputs.\nvar BNNSArithmeticTruncDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise truncated division of its inputs.\nvar BNNSArithmeticTruncRemainder: BNNSArithmeticFunction\nAn operation that calculates the element-wise remainder of truncated division of its inputs."
  },
  {
    "title": "BNNSArithmeticDivideNoNaN | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticdividenonan",
    "html": "See Also\nBinary Arithmetic Functions\nvar BNNSArithmeticAdd: BNNSArithmeticFunction\nAn operation that calculates the element-wise sum of its two inputs.\nvar BNNSArithmeticSubtract: BNNSArithmeticFunction\nAn operation that calculates the element-wise difference of its two inputs.\nvar BNNSArithmeticDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs.\nvar BNNSArithmeticMultiply: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs.\nvar BNNSArithmeticMultiplyNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs and returns zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticPow: BNNSArithmeticFunction\nAn operation that calculates the element-wise first input raised to the power of its second input.\nvar BNNSArithmeticMaximum: BNNSArithmeticFunction\nAn operation that calculates the element-wise maximum of its two inputs.\nvar BNNSArithmeticMinimum: BNNSArithmeticFunction\nAn operation that calculates the element-wise minimum of its two inputs.\nvar BNNSArithmeticFloorDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise floor division of its inputs.\nvar BNNSArithmeticTruncDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise truncated division of its inputs.\nvar BNNSArithmeticTruncRemainder: BNNSArithmeticFunction\nAn operation that calculates the element-wise remainder of truncated division of its inputs."
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparsescaling_t/2868192-rawvalue",
    "html": "See Also\nRaw Values\ninit(UInt8)\ninit(rawValue: UInt8)"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparsestatus_t/2868197-init",
    "html": "See Also\nRaw Values\ninit(rawValue: Int32)\nvar rawValue: Int32"
  },
  {
    "title": "BNNSArithmeticSubtract | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticsubtract",
    "html": "See Also\nBinary Arithmetic Functions\nvar BNNSArithmeticAdd: BNNSArithmeticFunction\nAn operation that calculates the element-wise sum of its two inputs.\nvar BNNSArithmeticDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs.\nvar BNNSArithmeticDivideNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs and returns zero if the divisor is zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticMultiply: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs.\nvar BNNSArithmeticMultiplyNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs and returns zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticPow: BNNSArithmeticFunction\nAn operation that calculates the element-wise first input raised to the power of its second input.\nvar BNNSArithmeticMaximum: BNNSArithmeticFunction\nAn operation that calculates the element-wise maximum of its two inputs.\nvar BNNSArithmeticMinimum: BNNSArithmeticFunction\nAn operation that calculates the element-wise minimum of its two inputs.\nvar BNNSArithmeticFloorDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise floor division of its inputs.\nvar BNNSArithmeticTruncDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise truncated division of its inputs.\nvar BNNSArithmeticTruncRemainder: BNNSArithmeticFunction\nAn operation that calculates the element-wise remainder of truncated division of its inputs."
  },
  {
    "title": "BNNSArithmeticDivide | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticdivide",
    "html": "See Also\nBinary Arithmetic Functions\nvar BNNSArithmeticAdd: BNNSArithmeticFunction\nAn operation that calculates the element-wise sum of its two inputs.\nvar BNNSArithmeticSubtract: BNNSArithmeticFunction\nAn operation that calculates the element-wise difference of its two inputs.\nvar BNNSArithmeticDivideNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs and returns zero if the divisor is zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticMultiply: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs.\nvar BNNSArithmeticMultiplyNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs and returns zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticPow: BNNSArithmeticFunction\nAn operation that calculates the element-wise first input raised to the power of its second input.\nvar BNNSArithmeticMaximum: BNNSArithmeticFunction\nAn operation that calculates the element-wise maximum of its two inputs.\nvar BNNSArithmeticMinimum: BNNSArithmeticFunction\nAn operation that calculates the element-wise minimum of its two inputs.\nvar BNNSArithmeticFloorDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise floor division of its inputs.\nvar BNNSArithmeticTruncDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise truncated division of its inputs.\nvar BNNSArithmeticTruncRemainder: BNNSArithmeticFunction\nAn operation that calculates the element-wise remainder of truncated division of its inputs."
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparsegmresvariant_t/2873526-rawvalue",
    "html": "See Also\nRaw Values\ninit(UInt8)\ninit(rawValue: UInt8)"
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917059-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ulong3, simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_ulong3, simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_ulong3, simd_ulong3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparselsmrconvergencetest_t/2875481-rawvalue",
    "html": "See Also\nRaw Values\ninit(Int32)\ninit(rawValue: Int32)"
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparsegmresvariant_t/2873607-init",
    "html": "See Also\nRaw Values\ninit(UInt8)\nvar rawValue: UInt8"
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917996-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917460-simd_make_uchar3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_uchar3(simd_uchar2) -> simd_uchar3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar3(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector.\nfunc simd_make_uchar3(simd_uchar4) -> simd_uchar3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uchar3(simd_uchar8) -> simd_uchar3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar3(simd_uchar32) -> simd_uchar3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar3(simd_uchar64) -> simd_uchar3\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar3_undef(simd_uchar2) -> simd_uchar3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917354-simd_make_uchar3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_uchar3(simd_uchar2) -> simd_uchar3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar3(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector.\nfunc simd_make_uchar3(simd_uchar4) -> simd_uchar3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uchar3(simd_uchar8) -> simd_uchar3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar3(simd_uchar16) -> simd_uchar3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar3(simd_uchar32) -> simd_uchar3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar3(simd_uchar64) -> simd_uchar3\nReturns a new vector by truncating the specified sixty four-element vector."
  },
  {
    "title": "simd_make_uint4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867751-simd_make_uint4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_uint4(UInt32) -> simd_uint4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector4(UInt32, UInt32, UInt32, UInt32) -> simd_uint4\nReturns a new vector from the specified scalar values.\nfunc simd_make_uint4_undef(UInt32) -> simd_uint4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "cblas_xerbla | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1513114-cblas_xerbla",
    "html": "Parameters\np\n\nThe position of the invalid parameter\n\nrout\n\nThe name of the routine that generated this error.\n\nform\n\nA format string describing the error.\n\n...\n\nAdditional parameters for the format string.\n\nDiscussion\n\nThis is the default error handler for BLAS functions. You can replace it with another function by calling SetBLASParamErrorProc.\n\nImportant\n\nApple provides the BLAS and LAPACK libraries under the Accelerate framework to be in line with LAPACK 3.9.1. These new interfaces provide additional functionality, as well as a new ILP64 interface. To use the new interfaces, define ACCELERATE_NEW_LAPACK before including the Accelerate or vecLib headers. For ILP64 interfaces, also define ACCELERATE_LAPACK_ILP64. For Swift projects, specify ACCELERATE_NEW_LAPACK=1 and ACCELERATE_LAPACK_ILP64=1 as preprocessor macros in Xcode build settings.\n\nSee Also\nGeneral functions\nSetBLASParamErrorProc\nSets an error handler function.\ncblas_errprn\nPrints an error message.\ncblas_icamax\nReturns the index of the element with the largest absolute value in a vector (single-precision complex).\ncblas_idamax\nReturns the index of the element with the largest absolute value in a vector (double-precision).\ncblas_isamax\nReturns the index of the element with the largest absolute value in a vector (single-precision).\ncblas_izamax\nReturns the index of the element with the largest absolute value in a vector (double-precision complex)."
  },
  {
    "title": "simd_make_uint4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883398-simd_make_uint4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uint4(simd_uint2) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint4(simd_uint3) -> simd_uint4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint4(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector.\nfunc simd_make_uint4(simd_uint8) -> simd_uint4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uint4(simd_uint16) -> simd_uint4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint4(simd_uint2, simd_uint2) -> simd_uint4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_uint2, simd_uint2) -> simd_uint4\nReturns a new vector from the specified vectors.\nfunc simd_make_uint4_undef(simd_uint3) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "vector3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918546-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_uchar3(UInt8) -> simd_uchar3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_uchar3(UInt8, UInt8, UInt8) -> simd_uchar3\nReturns a new vector from the specified scalar values.\nfunc simd_make_uchar3_undef(UInt8) -> simd_uchar3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918575-simd_uint",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "CBLAS_ORDER | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/blas/cblas_order",
    "html": "Overview\n\nImportant\n\nApple provides the BLAS and LAPACK libraries under the Accelerate framework to be in line with LAPACK 3.9.1. These new interfaces provide additional functionality, as well as a new ILP64 interface. To use the new interfaces, define ACCELERATE_NEW_LAPACK before including the Accelerate or vecLib headers. For ILP64 interfaces, also define ACCELERATE_LAPACK_ILP64. For Swift projects, specify ACCELERATE_NEW_LAPACK=1 and ACCELERATE_LAPACK_ILP64=1 as preprocessor macros in Xcode build settings."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918366-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "BNNSDataLayoutImageCHW | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsdatalayout/bnnsdatalayoutimagechw",
    "html": "Discussion\n\nThe value (x, y, channel) is at index x * stride[0] + y * stride[1] + channel * stride[2].\n\nsize[0] is the image width in pixels.\n\nsize[1] is the image height in pixels.\n\nsize[2] is the number of channels.\n\nSee Also\n3D Data Layouts\nBNNSDataLayout3DFirstMajor\nA constant that represents a 3D first-major tensor.\nBNNSDataLayout3DLastMajor\nA constant that represents a 3D last-major tensor.\nBNNSDataLayoutSNE\nA constant that represents a 3D tensor with the size elements embedding dimension, batch size, and sequence length.\nBNNSDataLayoutNSE\nA constant that represents a 3D tensor with the size elements embedding dimension, sequence length, and batch size."
  },
  {
    "title": "simd_make_uint4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896481-simd_make_uint4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uint4(simd_uint2) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint4(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector.\nfunc simd_make_uint4(simd_uint8) -> simd_uint4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uint4(simd_uint16) -> simd_uint4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint4(simd_uint2, simd_uint2) -> simd_uint4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_uint2, simd_uint2) -> simd_uint4\nReturns a new vector from the specified vectors.\nfunc simd_make_uint4_undef(simd_uint2) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint4_undef(simd_uint3) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uint4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896605-simd_make_uint4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uint4(simd_uint2) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint4(simd_uint3) -> simd_uint4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint4(simd_uint8) -> simd_uint4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uint4(simd_uint16) -> simd_uint4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint4(simd_uint2, simd_uint2) -> simd_uint4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_uint2, simd_uint2) -> simd_uint4\nReturns a new vector from the specified vectors.\nfunc simd_make_uint4_undef(simd_uint2) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint4_undef(simd_uint3) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896741-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc clamp(SIMD4<UInt32>, min: UInt32, max: UInt32) -> SIMD4<UInt32>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<UInt32>, min: SIMD4<UInt32>, max: SIMD4<UInt32>) -> SIMD4<UInt32>\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_uint4, simd_uint4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918711-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "ConstVectorFloat | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/blas/constvectorfloat",
    "html": "Overview\n\nImportant\n\nApple provides the BLAS and LAPACK libraries under the Accelerate framework to be in line with LAPACK 3.9.1. These new interfaces provide additional functionality, as well as a new ILP64 interface. To use the new interfaces, define ACCELERATE_NEW_LAPACK before including the Accelerate or vecLib headers. For ILP64 interfaces, also define ACCELERATE_LAPACK_ILP64. For Swift projects, specify ACCELERATE_NEW_LAPACK=1 and ACCELERATE_LAPACK_ILP64=1 as preprocessor macros in Xcode build settings.\n\nSee Also\nData types\nBLASParamErrorProc\nA BLAS error handler callback type.\nVectorFloat\nA vector of floating-point numbers."
  },
  {
    "title": "vImageConvert_RGB565toBGRA8888(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533057-vimageconvert_rgb565tobgra8888",
    "html": "Parameters\nalpha\n\nA value of type Pixel_8 to be used as the alpha value for all pixels in the destination image.\n\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe RGB565 format has 16-bit pixels with 5 bits for red, 6 for green, and 5 for blue. The function calculates the pixels in the destination image as follows:\n\n    Pixel8 alpha = alpha\n    Pixel8 red   = (5bitRedChannel   * 255 + 15) / 31\n    Pixel8 green = (6bitGreenChannel * 255 + 31) / 63\n    Pixel8 blue  = (5bitBlueChannel  * 255 + 15) / 31\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "SPARSE_NORM_ONE | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparse_norm_one",
    "html": "Discussion\n\nMatrix element wise\n\n\t\n\nsumᵢ,ⱼ ( | A[i,j] | )\n\n\n\n\nMatrix operator\n\n\t\n\nmaxⱼ ( sumᵢ ( | A[i,j] | )\n\n\n\n\nVector element wise\n\n\t\n\nsqrt( sumᵢ,ⱼ (A[i,j])² )"
  },
  {
    "title": "vImageConvert_RGB565toARGB1555(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533169-vimageconvert_rgb565toargb1555",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\ndither\n\nType of dithering, if any, to apply to the image.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThis function supports the following dithering options:\n\nkvImageConvert_DitherNone\n\nThis option applies no dithering. Input values are rounded to the nearest value representable in the destination format.\n\nkvImageConvert_DitherOrdered\n\nPrecomputed blue noise is added to the image before the values are rounded to the destination format. The offset into the blue noise is randomized per call to avoid visible artifacts if you do your own tiling or call the function on sequential frames of video.\n\nkvImageConvert_DitherOrderedReproducible\n\nPrecomputed blue noise is added to the image before the values are rounded to the destination format. The offset into the blue noise is the same for every call to allow users to get reproducible results.\n\nkvImageConvert_DitherFloydSteinberg\n\nFloyd-Steinberg dithering is applied to the image.\n\nkvImageConvert_DitherAtkinson\n\nAtkinson dithering is applied to the image.\n\nYou can further influence the ordered dither methods by shaping the noise distribution using the Gaussian and uniform options below. These options are OR-ed with kvImageConvert_DitherOrdered or kvImageConvert_DitherOrderedReproducible:\n\nkvImageConvert_OrderedGaussianBlue\n\nWhen using an ordered dither pattern, distribute the noise according to a Gaussian distribution. This generally gives more pleasing images—less noisy and perhaps a little more saturated—but color fidelity can suffer. Its effect is between kvImageConvert_DitherNone and kvImageConvert_DitherOrdered | kvImageConvert_DitherUniform. This option is the default for kvImageConvert_DitherOrdered and kvImageConvert_DitherOrderedReproducible.\n\nkvImageConvert_OrderedUniformBlue\n\nWhen using an ordered dither pattern, distribute the noise uniformly. This generally gives the best color fidelity, but the resulting image is noisier and more obviously dithered. This is usually the best choice when low bit depth content is drawn next to high bit depth content and in other circumstances where subtle changes to color arising from the conversion could be easily noticed. It may be a poor choice when the image is likely to be enlarged—which would cause the noise to become more evident—and for very flat or synthetic content with little inherent noise. You can avoid the enlargement problem by enlarging first at high bit depth, then converting to lower bit depth.\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "vImageConvert_RGB565toARGB8888(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533159-vimageconvert_rgb565toargb8888",
    "html": "Parameters\nalpha\n\nA value of type Pixel_8 to be used as the alpha value for all pixels in the destination image.\n\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe RGB565 format has 16-bit pixels with 5 bits for red, 6 for green, and 5 for blue. The function calculates the pixels in the destination image as follows:\n\n    Pixel8 alpha = alpha\n    Pixel8 red   = (5bitRedChannel   * 255 + 15) / 31\n    Pixel8 green = (6bitGreenChannel * 255 + 31) / 63\n    Pixel8 blue  = (5bitBlueChannel  * 255 + 15) / 31\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "vImageConvert_RGB565toRGB888(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533105-vimageconvert_rgb565torgb888",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe calculation for each pixel is:\n\n     uint32_t red   = (8bitRedChannel   * 31 + 127) / 255;\n     uint32_t green = (8bitGreenChannel * 63 + 127) / 255;\n     uint32_t blue  = (8bitBlueChannel  * 31 + 127) / 255;\n     uint16_t RGB565pixel =  (red << 11) | (green << 5) | blue;\n\n\nThis function can operate in place, provided that src->data == dest->data, src->rowBytes >= dest >rowBytes, and the kvImageDoNotTile flag is used if src->rowBytes > dest->rowBytes.\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "vImageConvert_RGB565toRGBA5551(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533171-vimageconvert_rgb565torgba5551",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\ndither\n\nType of dithering, if any, to apply to the image.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThis function supports the following dithering options:\n\nkvImageConvert_DitherNone\n\nThis option applies no dithering. Input values are rounded to the nearest value representable in the destination format.\n\nkvImageConvert_DitherOrdered\n\nPrecomputed blue noise is added to the image before the values are rounded to the destination format. The offset into the blue noise is randomized per call to avoid visible artifacts if you do your own tiling or call the function on sequential frames of video.\n\nkvImageConvert_DitherOrderedReproducible\n\nPrecomputed blue noise is added to the image before the values are rounded to the destination format. The offset into the blue noise is the same for every call to allow users to get reproducible results.\n\nkvImageConvert_DitherFloydSteinberg\n\nFloyd-Steinberg dithering is applied to the image.\n\nkvImageConvert_DitherAtkinson\n\nAtkinson dithering is applied to the image.\n\nYou can further influence the ordered dither methods by shaping the noise distribution using the Gaussian and uniform options below. These options are OR-ed with kvImageConvert_DitherOrdered or kvImageConvert_DitherOrderedReproducible:\n\nkvImageConvert_OrderedGaussianBlue\n\nWhen using an ordered dither pattern, distribute the noise according to a Gaussian distribution. This generally gives more pleasing images—less noisy and perhaps a little more saturated—but color fidelity can suffer. Its effect is between kvImageConvert_DitherNone and kvImageConvert_DitherOrdered | kvImageConvert_DitherUniform. This option is the default for kvImageConvert_DitherOrdered and kvImageConvert_DitherOrderedReproducible.\n\nkvImageConvert_OrderedUniformBlue\n\nWhen using an ordered dither pattern, distribute the noise uniformly. This generally gives the best color fidelity, but the resulting image is noisier and more obviously dithered. This is usually the best choice when low bit depth content is drawn next to high bit depth content and in other circumstances where subtle changes to color arising from the conversion could be easily noticed. It may be a poor choice when the image is likely to be enlarged—which would cause the noise to become more evident—and for very flat or synthetic content with little inherent noise. You can avoid the enlargement problem by enlarging first at high bit depth, then converting to lower bit depth.\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "BNNSActivationFunctionSiLU | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunctionsilu",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nSiLU(x) = x * sigmoid(x)\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:"
  },
  {
    "title": "BNNSActivationFunctionGELUApproximation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunctiongeluapproximation",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\n0.5f * x * (1.0f + tanh(alpha*(x + beta * x * x * x)))\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10, an alpha of 0.1 and a beta of 1.0:"
  },
  {
    "title": "vImageConvert_RGB16UtoPlanar16U(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533021-vimageconvert_rgb16utoplanar16u",
    "html": "Parameters\nrgbSrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to separate.\n\nrDest\n\nA pointer to a vImage buffer data structure that represents the red channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\ngDest\n\nA pointer to a vImage buffer data structure that represents the green channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\nbDest\n\nA pointer to a vImage buffer data structure that represents the blue channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe source and destination buffers must have the same height and width.\n\nThis function doesn't work in place.\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "vImageConvert_RGB16UtoRGBA16U(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533158-vimageconvert_rgb16utorgba16u",
    "html": "Parameters\nrgbSrc\n\nA pointer to a vImage buffer structure that contains the RGB interleaved source pixels.\n\naSrc\n\nA pointer to a vImage buffer structure that contains the alpha planar source pixels.\n\nalpha\n\nA single alpha value.\n\nrgbaDest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\npremultiply\n\nA Boolean that determines if this function will premultiply alpha value to RGB values.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe conversion from RGB16U to RGBA16U is:\n\nif (aSrc != NULL)\n {\n    if (premultiply)\n    {\n        r = (aSrc[i] * rgb[i*3+0] + 32767) / 65535\n        g = (aSrc[i] * rgb[i*3+1] + 32767) / 65535\n        b = (aSrc[i] * rgb[i*3+2] + 32767) / 65535\n        rgbaDest[i*4+3] = aSrc[i];\n        rgbaDest[i*4+0] = r;\n        rgbaDest[i*4+1] = g;\n        rgbaDest[i*4+2] = b;\n    }\n    else\n    {\n        rgbaDest[i*4+3] = aSrc[i];\n        rgbaDest[i*4+0] = rgb[i*3+0];\n        rgbaDest[i*4+1] = rgb[i*3+1];\n        rgbaDest[i*4+2] = rgb[i*3+2];\n    }\n }\n else\n {\n    if (premultiply)\n    {\n        r = (alpha * rgb[i*3+0] + 32767) / 65535\n        g = (alpha * rgb[i*3+1] + 32767) / 65535\n        b = (alpha * rgb[i*3+2] + 32767) / 65535\n        rgbaDest[i*4+3] = alpha;\n        rgbaDest[i*4+0] = r;\n        rgbaDest[i*4+1] = g;\n        rgbaDest[i*4+1] = b;\n    }\n    else\n    {\n        rgbaDest[i*4+3] = alpha;\n        rgbaDest[i*4+0] = rgb[i*3+0];\n        rgbaDest[i*4+1] = rgb[i*3+1];\n        rgbaDest[i*4+2] = rgb[i*3+2];\n    }\n }\n\n\nThis function doesn't operate in place.\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "vImageConvert_RGB16UtoBGRA16U(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533033-vimageconvert_rgb16utobgra16u",
    "html": "Parameters\nrgbSrc\n\nA pointer to a vImage buffer structure that contains the RGB interleaved source pixels.\n\naSrc\n\nA pointer to a vImage buffer structure that contains the alpha planar source pixels.\n\nalpha\n\nA single alpha value.\n\nbgraDest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\npremultiply\n\nA Boolean that determines if this function will premultiply alpha value to RGB values.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe conversion from RGB16U to BGRA16U is:\n\nif (aSrc != NULL)\n {\n    if (premultiply)\n    {\n        r = (aSrc[i] * rgb[i*3+0] + 32767) / 65535\n        g = (aSrc[i] * rgb[i*3+1] + 32767) / 65535\n        b = (aSrc[i] * rgb[i*3+2] + 32767) / 65535\n        bgraDest[i*4+3] = aSrc[i];\n        bgraDest[i*4+2] = r;\n        bgraDest[i*4+1] = g;\n        bgraDest[i*4+0] = b;\n    }\n    else\n    {\n        bgraDest[i*4+3] = aSrc[i];\n        bgraDest[i*4+2] = rgb[i*3+0];\n        bgraDest[i*4+1] = rgb[i*3+1];\n        bgraDest[i*4+0] = rgb[i*3+2];\n    }\n }\n else\n {\n    if (premultiply)\n    {\n        r = (alpha * rgb[i*3+0] + 32767) / 65535\n        g = (alpha * rgb[i*3+1] + 32767) / 65535\n        b = (alpha * rgb[i*3+2] + 32767) / 65535\n        bgraDest[i*4+3] = alpha;\n        bgraDest[i*4+2] = r;\n        bgraDest[i*4+1] = g;\n        bgraDest[i*4+0] = b;\n    }\n    else\n    {\n        bgraDest[i*4+3] = alpha;\n        bgraDest[i*4+2] = rgb[i*3+0];\n        bgraDest[i*4+1] = rgb[i*3+1];\n        bgraDest[i*4+0] = rgb[i*3+2];\n    }\n }\n\n\nThis function doesn't operate in place.\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "vImageConvert_RGB16UtoRGB888_dithered(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1642378-vimageconvert_rgb16utorgb888_dit",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\ndither\n\nType of dithering to apply to the image, if any.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThis function supports the following dithering options:\n\nkvImageConvert_DitherNone\n\nThis option applies no dithering. Input values are rounded to the nearest value representable in the destination format.\n\nkvImageConvert_DitherOrdered\n\nPrecomputed blue noise is added to the image before the values are rounded to the destination format. The offset into the blue noise is randomized per call to avoid visible artifacts if you do your own tiling or call the function on sequential frames of video.\n\nkvImageConvert_DitherOrderedReproducible\n\nPrecomputed blue noise is added to the image before the values are rounded to the destination format. The offset into the blue noise is the same for every call to allow users to get reproducible results.\n\nkvImageConvert_DitherFloydSteinberg\n\nFloyd-Steinberg dithering is applied to the image.\n\nkvImageConvert_DitherAtkinson\n\nAtkinson dithering is applied to the image.\n\nYou can further influence the ordered dither methods by shaping the noise distribution using the Gaussian and uniform options below. These options are OR-ed with kvImageConvert_DitherOrdered or kvImageConvert_DitherOrderedReproducible:\n\nkvImageConvert_OrderedGaussianBlue\n\nWhen using an ordered dither pattern, distribute the noise according to a Gaussian distribution. This generally gives more pleasing images—less noisy and perhaps a little more saturated—but color fidelity can suffer. Its effect is between kvImageConvert_DitherNone and kvImageConvert_DitherOrdered | kvImageConvert_DitherUniform. This option is the default for kvImageConvert_DitherOrdered and kvImageConvert_DitherOrderedReproducible.\n\nkvImageConvert_OrderedUniformBlue\n\nWhen using an ordered dither pattern, distribute the noise uniformly. This generally gives the best color fidelity, but the resulting image is noisier and more obviously dithered. This is usually the best choice when low bit depth content is drawn next to high bit depth content and in other circumstances where subtle changes to color arising from the conversion could be easily noticed. It may be a poor choice when the image is likely to be enlarged—which would cause the noise to become more evident—and for very flat or synthetic content with little inherent noise. You can avoid the enlargement problem by enlarging first at high bit depth, then converting to lower bit depth.\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "vImageConvert_RGB16UtoARGB16U(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533272-vimageconvert_rgb16utoargb16u",
    "html": "Parameters\nrgbSrc\n\nA pointer to a vImage buffer structure that contains the RGB interleaved source pixels.\n\naSrc\n\nA pointer to a vImage buffer structure that contains the alpha planar source pixels.\n\nalpha\n\nA single alpha value.\n\nargbDest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\npremultiply\n\nA Boolean that determines if this function will premultiply alpha value to RGB values.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe conversion from RGB16U to ARGB16U is:\n\nif (aSrc != NULL)\n {\n    if (premultiply)\n    {\n        r = (aSrc[i] * rgb[i*3+0] + 32767) / 65535\n        g = (aSrc[i] * rgb[i*3+1] + 32767) / 65535\n        b = (aSrc[i] * rgb[i*3+2] + 32767) / 65535\n\n\n        argbDest[i*4+0] = aSrc[i];\n        argbDest[i*4+1] = r;\n        argbDest[i*4+2] = g;\n        argbDest[i*4+3] = b;\n    }\n    else\n    {\n        argbDest[i*4+0] = aSrc[i];\n        argbDest[i*4+1] = rgb[i*3+0];\n        argbDest[i*4+2] = rgb[i*3+1];\n        argbDest[i*4+3] = rgb[i*3+2];\n    }\n }\n else\n {\n    if (premultiply)\n    {\n        r = (alpha * rgb[i*3+0] + 32767) / 65535\n        g = (alpha * rgb[i*3+1] + 32767) / 65535\n        b = (alpha * rgb[i*3+2] + 32767) / 65535\n\n\n        argbDest[i*4+0] = alpha;\n        argbDest[i*4+1] = r;\n        argbDest[i*4+2] = g;\n        argbDest[i*4+3] = b;\n    }\n    else\n    {\n        argbDest[i*4+0] = alpha;\n        argbDest[i*4+1] = rgb[i*3+0];\n        argbDest[i*4+2] = rgb[i*3+1];\n        argbDest[i*4+3] = rgb[i*3+2];\n    }\n }\n\n\nThis function doesn't operate in place.\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "vImageConvert_RGB888toBGRA8888(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533212-vimageconvert_rgb888tobgra8888",
    "html": "Parameters\nrgbSrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\naSrc\n\nA pointer to a vImage buffer structure that contains a Planar8 alpha plane to use as the alpha values for in the destination image. If you pass NULL, the function assigns the value of the alpha parameter for all pixels in the destination image.\n\nalpha\n\nAn alpha value for all pixels in the destination image. The function ignores this value if the aSrc parameter is not NULL.\n\nbgraDest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\npremultiply\n\nPass true if the data should be premultiplied by the alpha value; false otherwise.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThis function cannot be used in place.\n\nIf premultiply is true, then this function computes r = (a * r + 127) / 255, g = (a * g + 127) / 255, and b = (a * b + 127) / 255. Otherwise, this function copies the planes as-is.\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896678-simd_min",
    "html": "See Also\nExtrema Functions\nfunc min(SIMD4<UInt32>, UInt32) -> SIMD4<UInt32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<UInt32>, SIMD4<UInt32>) -> SIMD4<UInt32>\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_uint4, simd_uint4) -> simd_uint4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<UInt32>, UInt32) -> SIMD4<UInt32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<UInt32>, SIMD4<UInt32>) -> SIMD4<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896561-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint4) -> UInt32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD4<UInt32>) -> UInt32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_uint4) -> UInt32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD4<UInt32>) -> UInt32\nReturns the maximum value in a vector.\nfunc reduce_add(SIMD4<UInt32>) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896437-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uint4) -> simd_bool\nReturns true if the high-order bit of any element is set; false otherwise.\nfunc simd_all(simd_uint4) -> simd_bool\nReturns true if the high-order bit of every element is set; false otherwise."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage_perpsectivetransform/interpolation/4111512-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690590-reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint4) -> UInt32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD4<UInt32>) -> UInt32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_uint4) -> UInt32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD4<UInt32>) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint4) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690575-max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint4, simd_uint4) -> simd_uint4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<UInt32>, UInt32) -> SIMD4<UInt32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<UInt32>, SIMD4<UInt32>) -> SIMD4<UInt32>\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_uint4, simd_uint4) -> simd_uint4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<UInt32>, SIMD4<UInt32>) -> SIMD4<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690542-max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint4, simd_uint4) -> simd_uint4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<UInt32>, UInt32) -> SIMD4<UInt32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<UInt32>, SIMD4<UInt32>) -> SIMD4<UInt32>\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_uint4, simd_uint4) -> simd_uint4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<UInt32>, UInt32) -> SIMD4<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896615-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uint4) -> simd_bool\nReturns true if the high-order bit of any element is set; false otherwise.\nfunc simd_bitselect(simd_uint4, simd_uint4, simd_int4) -> simd_uint4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690568-min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint4, simd_uint4) -> simd_uint4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<UInt32>, SIMD4<UInt32>) -> SIMD4<UInt32>\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_uint4, simd_uint4) -> simd_uint4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<UInt32>, UInt32) -> SIMD4<UInt32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<UInt32>, SIMD4<UInt32>) -> SIMD4<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690553-reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint4) -> UInt32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD4<UInt32>) -> UInt32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_uint4) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint4) -> UInt32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD4<UInt32>) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690567-reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint4) -> UInt32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_uint4) -> UInt32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD4<UInt32>) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint4) -> UInt32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD4<UInt32>) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896680-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uint4, simd_uint4, simd_uint4) -> simd_uint4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<UInt32>, min: UInt32, max: UInt32) -> SIMD4<UInt32>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<UInt32>, min: SIMD4<UInt32>, max: SIMD4<UInt32>) -> SIMD4<UInt32>\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690584-min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint4, simd_uint4) -> simd_uint4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<UInt32>, UInt32) -> SIMD4<UInt32>\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_uint4, simd_uint4) -> simd_uint4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<UInt32>, UInt32) -> SIMD4<UInt32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<UInt32>, SIMD4<UInt32>) -> SIMD4<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896734-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint4, simd_uint4) -> simd_uint4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<UInt32>, UInt32) -> SIMD4<UInt32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<UInt32>, SIMD4<UInt32>) -> SIMD4<UInt32>\nReturns the minimum value of each element in a vector.\nfunc max(SIMD4<UInt32>, UInt32) -> SIMD4<UInt32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<UInt32>, SIMD4<UInt32>) -> SIMD4<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896414-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint4) -> UInt32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD4<UInt32>) -> UInt32\nReturns the minimum value in a vector.\nfunc reduce_max(SIMD4<UInt32>) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint4) -> UInt32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD4<UInt32>) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "BNNSActivationFunctionHardSwish | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunctionhardswish",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nHardSwish(x) = x * (ReLU6(x + 3.0) * 1.0/6.0)\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:"
  },
  {
    "title": "CBLAS_TRANSPOSE | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/blas/cblas_transpose",
    "html": "Overview\n\nImportant\n\nApple provides the BLAS and LAPACK libraries under the Accelerate framework to be in line with LAPACK 3.9.1. These new interfaces provide additional functionality, as well as a new ILP64 interface. To use the new interfaces, define ACCELERATE_NEW_LAPACK before including the Accelerate or vecLib headers. For ILP64 interfaces, also define ACCELERATE_LAPACK_ILP64. For Swift projects, specify ACCELERATE_NEW_LAPACK=1 and ACCELERATE_LAPACK_ILP64=1 as preprocessor macros in Xcode build settings."
  },
  {
    "title": "CBLAS_SIDE | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/blas/cblas_side",
    "html": "Overview\n\nImportant\n\nApple provides the BLAS and LAPACK libraries under the Accelerate framework to be in line with LAPACK 3.9.1. These new interfaces provide additional functionality, as well as a new ILP64 interface. To use the new interfaces, define ACCELERATE_NEW_LAPACK before including the Accelerate or vecLib headers. For ILP64 interfaces, also define ACCELERATE_LAPACK_ILP64. For Swift projects, specify ACCELERATE_NEW_LAPACK=1 and ACCELERATE_LAPACK_ILP64=1 as preprocessor macros in Xcode build settings."
  },
  {
    "title": "SPARSE_NORM_INF | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparse_norm_inf",
    "html": "Discussion\n\nMatrix element wise\n\n\t\n\nmaxᵢ,ⱼ ( | A[i,j] | )\n\n\n\n\nMatrix operator\n\n\t\n\nmaxᵢ ( sumⱼ ( | A[i,j] | )\n\n\n\n\nVector element wise\n\n\t\n\nmaxᵢ ( | x[i] | )"
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918248-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917949-simd_ulong",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918408-simd_uchar",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916867-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uchar3) -> UInt8\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_uchar3) -> UInt8\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_make_uchar3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917683-simd_make_uchar3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc vector3(simd_uchar2, UInt8) -> simd_uchar3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_uchar3(UInt8, simd_uchar2) -> simd_uchar3\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918493-simd_ulong",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917443-simd_make_ulong3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ulong3(simd_ulong1, simd_ulong2) -> simd_ulong3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong2) -> simd_ulong3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_ulong3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917387-simd_make_ulong3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ulong3(simd_ulong1, simd_ulong2) -> simd_ulong3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ulong3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917207-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_uchar3, simd_uchar3) -> simd_uchar3\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918353-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_make_uchar3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917285-simd_make_uchar3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uchar3(simd_uchar2, UInt8) -> simd_uchar3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_uchar2, UInt8) -> simd_uchar3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_ulong4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917673-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918573-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_make_ulong4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917422-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918255-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917891-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "clamp(_:min:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690563-clamp",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uint4, simd_uint4, simd_uint4) -> simd_uint4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<UInt32>, min: SIMD4<UInt32>, max: SIMD4<UInt32>) -> SIMD4<UInt32>\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_uint4, simd_uint4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_make_uint4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883291-simd_make_uint4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uint4(simd_uint3) -> simd_uint4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint4(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector.\nfunc simd_make_uint4(simd_uint8) -> simd_uint4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uint4(simd_uint16) -> simd_uint4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint4(simd_uint2, simd_uint2) -> simd_uint4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_uint2, simd_uint2) -> simd_uint4\nReturns a new vector from the specified vectors.\nfunc simd_make_uint4_undef(simd_uint2) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint4_undef(simd_uint3) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896386-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896686-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918746-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896725-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918126-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896650-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917986-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917260-simd_make_uint4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uint4(simd_uint2) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint4(simd_uint3) -> simd_uint4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint4(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector.\nfunc simd_make_uint4(simd_uint8) -> simd_uint4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uint4(simd_uint2, simd_uint2) -> simd_uint4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_uint2, simd_uint2) -> simd_uint4\nReturns a new vector from the specified vectors.\nfunc simd_make_uint4_undef(simd_uint2) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint4_undef(simd_uint3) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uint4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917733-simd_make_uint4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uint4(simd_uint2) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint4(simd_uint3) -> simd_uint4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint4(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector.\nfunc simd_make_uint4(simd_uint16) -> simd_uint4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint4(simd_uint2, simd_uint2) -> simd_uint4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_uint2, simd_uint2) -> simd_uint4\nReturns a new vector from the specified vectors.\nfunc simd_make_uint4_undef(simd_uint2) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint4_undef(simd_uint3) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896711-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uint4(simd_uint2) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint4(simd_uint3) -> simd_uint4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint4(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector.\nfunc simd_make_uint4(simd_uint8) -> simd_uint4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uint4(simd_uint16) -> simd_uint4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint4(simd_uint2, simd_uint2) -> simd_uint4\nReturns a new vector from the specified vectors.\nfunc simd_make_uint4_undef(simd_uint2) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint4_undef(simd_uint3) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uint4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883301-simd_make_uint4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uint4(simd_uint2, UInt32, UInt32) -> simd_uint4\nReturns a new vector from a vector and scalar values.\nfunc vector4(simd_uint3, UInt32) -> simd_uint4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_uint4(UInt32, UInt32, simd_uint2) -> simd_uint4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_uint4(UInt32, simd_uint2, UInt32) -> simd_uint4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_uint4(UInt32, simd_uint3) -> simd_uint4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2092216-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uint4(simd_uint2, UInt32, UInt32) -> simd_uint4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_uint4(simd_uint3, UInt32) -> simd_uint4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_uint4(UInt32, UInt32, simd_uint2) -> simd_uint4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_uint4(UInt32, simd_uint2, UInt32) -> simd_uint4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_uint4(UInt32, simd_uint3) -> simd_uint4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_uint4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867674-simd_make_uint4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_uint4(UInt32) -> simd_uint4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_uint4(UInt32, UInt32, UInt32, UInt32) -> simd_uint4\nReturns a new vector from the specified scalar values.\nfunc vector4(UInt32, UInt32, UInt32, UInt32) -> simd_uint4\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "vector4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425315-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_uint4(UInt32) -> simd_uint4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_uint4(UInt32, UInt32, UInt32, UInt32) -> simd_uint4\nReturns a new vector from the specified scalar values.\nfunc simd_make_uint4_undef(UInt32) -> simd_uint4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_uint4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896649-simd_make_uint4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uint4(simd_uint2) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint4(simd_uint3) -> simd_uint4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint4(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector.\nfunc simd_make_uint4(simd_uint8) -> simd_uint4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uint4(simd_uint16) -> simd_uint4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint4(simd_uint2, simd_uint2) -> simd_uint4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_uint2, simd_uint2) -> simd_uint4\nReturns a new vector from the specified vectors.\nfunc simd_make_uint4_undef(simd_uint2) -> simd_uint4\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uint4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883589-simd_make_uint4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uint4(simd_uint3, UInt32) -> simd_uint4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_uint3, UInt32) -> simd_uint4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_uint4(UInt32, UInt32, simd_uint2) -> simd_uint4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_uint4(UInt32, simd_uint2, UInt32) -> simd_uint4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_uint4(UInt32, simd_uint3) -> simd_uint4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917837-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883607-simd_make_uint4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uint4(simd_uint2, UInt32, UInt32) -> simd_uint4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_uint4(simd_uint3, UInt32) -> simd_uint4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_uint3, UInt32) -> simd_uint4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_uint4(UInt32, UInt32, simd_uint2) -> simd_uint4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_uint4(UInt32, simd_uint2, UInt32) -> simd_uint4\nReturns a new vector from a scalar value, a vector, and a scalar value."
  },
  {
    "title": "simd_make_uint4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883461-simd_make_uint4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_uint4(UInt32, UInt32, UInt32, UInt32) -> simd_uint4\nReturns a new vector from the specified scalar values.\nfunc vector4(UInt32, UInt32, UInt32, UInt32) -> simd_uint4\nReturns a new vector from the specified scalar values.\nfunc simd_make_uint4_undef(UInt32) -> simd_uint4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918473-simd_uint",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883580-simd_make_uint4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uint4(simd_uint2, UInt32, UInt32) -> simd_uint4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_uint4(simd_uint3, UInt32) -> simd_uint4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_uint3, UInt32) -> simd_uint4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_uint4(UInt32, simd_uint2, UInt32) -> simd_uint4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_uint4(UInt32, simd_uint3) -> simd_uint4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918611-simd_uint",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918195-simd_uint",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918645-simd_uint",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918204-simd_uint",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896578-simd_uint",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896394-simd_uint",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896604-simd_uint",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896528-simd_uint",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918520-simd_uint",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar4) -> simd_uint4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort4) -> simd_uint4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float4) -> simd_uint4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double4) -> simd_uint4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "VectorFloat | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/blas/vectorfloat",
    "html": "Overview\n\nImportant\n\nApple provides the BLAS and LAPACK libraries under the Accelerate framework to be in line with LAPACK 3.9.1. These new interfaces provide additional functionality, as well as a new ILP64 interface. To use the new interfaces, define ACCELERATE_NEW_LAPACK before including the Accelerate or vecLib headers. For ILP64 interfaces, also define ACCELERATE_LAPACK_ILP64. For Swift projects, specify ACCELERATE_NEW_LAPACK=1 and ACCELERATE_LAPACK_ILP64=1 as preprocessor macros in Xcode build settings.\n\nSee Also\nData types\nBLASParamErrorProc\nA BLAS error handler callback type.\nConstVectorFloat\nA constant vector of floating-point numbers."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918729-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_make_ulong4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917396-simd_make_ulong4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917621-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917885-simd_ulong",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918314-simd_ulong",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916927-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ulong3, simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_ulong3, simd_ulong3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_ulong3, simd_ulong3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918272-simd_uchar",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917648-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916794-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong3) -> simd_bool\nfunc simd_any(simd_ulong3) -> simd_bool\nfunc simd_all(simd_ulong3) -> simd_bool\nfunc simd_bitselect(simd_ulong3, simd_ulong3, simd_long3) -> simd_ulong3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_ulong3, simd_ulong3, simd_long3) -> simd_ulong3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918488-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918532-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917669-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917849-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918445-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918726-simd_ulong",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917048-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong3) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_ulong3) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong3) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong3) -> simd_ulong1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_ulong3) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916685-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong3) -> simd_bool\nfunc simd_all(simd_ulong3) -> simd_bool\nfunc simd_all(simd_ulong3) -> simd_bool\nfunc simd_bitselect(simd_ulong3, simd_ulong3, simd_long3) -> simd_ulong3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_ulong3, simd_ulong3, simd_long3) -> simd_ulong3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_ulong4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917519-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918107-simd_ulong",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918749-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917730-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_ulong4(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong4_undef(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_ulong4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917230-simd_make_ulong4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918144-simd_ulong",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917567-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917128-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns the maximum value of each element in a vector.\nfunc simd_max(simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_make_ulong4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917550-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918741-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916851-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong3) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_ulong3) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong3) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong3) -> simd_ulong1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_ulong3) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_ulong3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917539-simd_make_ulong3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918409-simd_ulong",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916679-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong3) -> simd_bool\nfunc simd_any(simd_ulong3) -> simd_bool\nfunc simd_all(simd_ulong3) -> simd_bool\nfunc simd_all(simd_ulong3) -> simd_bool\nfunc simd_bitselect(simd_ulong3, simd_ulong3, simd_long3) -> simd_ulong3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918362-simd_uchar",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917180-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns the minimum value of each element in a vector.\nfunc simd_min(simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916910-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns the maximum value of each element in a vector.\nfunc simd_max(simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916970-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns the minimum value of each element in a vector.\nfunc simd_min(simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917158-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong3) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_ulong3) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong3) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_ulong3) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong3) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "CBLAS_DIAG | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/blas/cblas_diag",
    "html": "Overview\n\nImportant\n\nApple provides the BLAS and LAPACK libraries under the Accelerate framework to be in line with LAPACK 3.9.1. These new interfaces provide additional functionality, as well as a new ILP64 interface. To use the new interfaces, define ACCELERATE_NEW_LAPACK before including the Accelerate or vecLib headers. For ILP64 interfaces, also define ACCELERATE_LAPACK_ILP64. For Swift projects, specify ACCELERATE_NEW_LAPACK=1 and ACCELERATE_LAPACK_ILP64=1 as preprocessor macros in Xcode build settings."
  },
  {
    "title": "simd_make_uchar32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917267-simd_make_uchar32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_uchar32(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar32) -> simd_uchar32\nReturns a new vector from the specified vector.\nfunc simd_make_uchar32(simd_uchar64) -> simd_uchar32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32_undef(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916809-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uchar3) -> simd_bool\nfunc simd_all(simd_uchar3) -> simd_bool"
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917065-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uchar3, simd_uchar3) -> simd_uchar3\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916808-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uchar3) -> simd_bool\nfunc simd_bitselect(simd_uchar3, simd_uchar3, simd_char3) -> simd_uchar3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916681-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_uchar3) -> simd_bool\nfunc simd_bitselect(simd_uchar3, simd_uchar3, simd_char3) -> simd_uchar3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916913-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_equal(simd_uchar3, simd_uchar3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918518-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_make_uchar3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917397-simd_make_uchar3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_uchar3(simd_uchar2) -> simd_uchar3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar3(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector.\nfunc simd_make_uchar3(simd_uchar4) -> simd_uchar3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uchar3(simd_uchar16) -> simd_uchar3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar3(simd_uchar32) -> simd_uchar3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar3(simd_uchar64) -> simd_uchar3\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar3_undef(simd_uchar2) -> simd_uchar3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918648-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917204-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong4) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong4) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_ulong4) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong4) -> simd_ulong1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_ulong4) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_uchar3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917444-simd_make_uchar3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_uchar3(simd_uchar2) -> simd_uchar3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar3(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector.\nfunc simd_make_uchar3(simd_uchar8) -> simd_uchar3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar3(simd_uchar16) -> simd_uchar3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar3(simd_uchar32) -> simd_uchar3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar3(simd_uchar64) -> simd_uchar3\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar3_undef(simd_uchar2) -> simd_uchar3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917483-simd_make_uchar3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_uchar3(simd_uchar2) -> simd_uchar3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar3(simd_uchar4) -> simd_uchar3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uchar3(simd_uchar8) -> simd_uchar3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar3(simd_uchar16) -> simd_uchar3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar3(simd_uchar32) -> simd_uchar3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar3(simd_uchar64) -> simd_uchar3\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar3_undef(simd_uchar2) -> simd_uchar3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917464-simd_make_uchar3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_uchar3(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector.\nfunc simd_make_uchar3(simd_uchar4) -> simd_uchar3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uchar3(simd_uchar8) -> simd_uchar3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar3(simd_uchar16) -> simd_uchar3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar3(simd_uchar32) -> simd_uchar3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar3(simd_uchar64) -> simd_uchar3\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar3_undef(simd_uchar2) -> simd_uchar3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918363-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867645-simd_make_uchar3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_uchar3(UInt8) -> simd_uchar3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_uchar3(UInt8, UInt8, UInt8) -> simd_uchar3\nReturns a new vector from the specified scalar values.\nfunc vector3(UInt8, UInt8, UInt8) -> simd_uchar3\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "simd_make_uchar3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917617-simd_make_uchar3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_uchar3(UInt8, UInt8, UInt8) -> simd_uchar3\nReturns a new vector from the specified scalar values.\nfunc vector3(UInt8, UInt8, UInt8) -> simd_uchar3\nReturns a new vector from the specified scalar values.\nfunc simd_make_uchar3_undef(UInt8) -> simd_uchar3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_uchar3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917662-simd_make_uchar3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_uchar3(simd_uchar2) -> simd_uchar3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar3(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector.\nfunc simd_make_uchar3(simd_uchar4) -> simd_uchar3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uchar3(simd_uchar8) -> simd_uchar3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar3(simd_uchar16) -> simd_uchar3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar3(simd_uchar64) -> simd_uchar3\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar3_undef(simd_uchar2) -> simd_uchar3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867659-simd_make_uchar3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_uchar3(UInt8) -> simd_uchar3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector3(UInt8, UInt8, UInt8) -> simd_uchar3\nReturns a new vector from the specified scalar values.\nfunc simd_make_uchar3_undef(UInt8) -> simd_uchar3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918448-simd_uchar",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917102-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_uchar3) -> UInt8\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uchar3) -> UInt8\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918278-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917069-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uchar3, simd_uchar3, simd_uchar3) -> simd_uchar3\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916973-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uchar3) -> UInt8\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_uchar3) -> UInt8\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918319-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "vector3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918243-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_ulong3(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong3_undef(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong3_undef(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917980-simd_uchar",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917104-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong4) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong4) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_ulong4) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong4) -> simd_ulong1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_ulong4) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918737-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "vector3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918540-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uchar3(simd_uchar2, UInt8) -> simd_uchar3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_uchar3(UInt8, simd_uchar2) -> simd_uchar3\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918000-simd_uchar",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917026-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong4) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_ulong4) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong4) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong4) -> simd_ulong1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_ulong4) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_uchar3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917241-simd_make_uchar3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_uchar3(simd_uchar2) -> simd_uchar3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar3(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector.\nfunc simd_make_uchar3(simd_uchar4) -> simd_uchar3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uchar3(simd_uchar8) -> simd_uchar3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar3(simd_uchar16) -> simd_uchar3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar3(simd_uchar32) -> simd_uchar3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar3_undef(simd_uchar2) -> simd_uchar3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918494-simd_uchar",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918323-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ulong3(simd_ulong1, simd_ulong2) -> simd_ulong3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong2) -> simd_ulong3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ulong3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916977-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ulong4, simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_ulong4, simd_ulong4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_ulong4, simd_ulong4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_make_ulong3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867733-simd_make_ulong3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_ulong3(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong3_undef(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_ulong3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917530-simd_make_ulong3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_ulong3(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong3_undef(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong3_undef(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916787-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_uchar32) -> simd_bool\nfunc simd_bitselect(simd_uchar32, simd_uchar32, simd_char32) -> simd_uchar32\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_uchar32(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867651-simd_make_uchar32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_uchar32(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar32) -> simd_uchar32\nReturns a new vector from the specified vector.\nfunc simd_make_uchar32(simd_uchar64) -> simd_uchar32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32_undef(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917257-simd_make_uchar32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_uchar32(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar32) -> simd_uchar32\nReturns a new vector from the specified vector.\nfunc simd_make_uchar32(simd_uchar64) -> simd_uchar32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32_undef(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917731-simd_make_ulong3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ulong3(simd_ulong1, simd_ulong2) -> simd_ulong3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ulong3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_uchar32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917513-simd_make_uchar32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_uchar32(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar32) -> simd_uchar32\nReturns a new vector from the specified vector.\nfunc simd_make_uchar32(simd_uchar64) -> simd_uchar32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32_undef(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917341-simd_make_uchar32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_uchar32(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar32) -> simd_uchar32\nReturns a new vector from the specified vector.\nfunc simd_make_uchar32(simd_uchar64) -> simd_uchar32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32_undef(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917602-simd_make_uchar32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_uchar32(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar32) -> simd_uchar32\nReturns a new vector from the specified vector.\nfunc simd_make_uchar32(simd_uchar64) -> simd_uchar32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32_undef(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916974-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uchar32, simd_uchar32, simd_uchar32) -> simd_uchar32\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_make_ulong4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867739-simd_make_ulong4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_ulong4(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong4_undef(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_uchar32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917607-simd_make_uchar32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_uchar32(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar64) -> simd_uchar32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32_undef(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917862-simd_uchar",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char32) -> simd_uchar32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_short32) -> simd_uchar32\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort32) -> simd_uchar32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_make_uchar64(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917287-simd_make_uchar64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_uchar64(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar64) -> simd_uchar64\nReturns a new vector from the specified vector.\nfunc simd_make_uchar64(simd_uchar32, simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar64_undef(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918004-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918476-simd_uchar",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char32) -> simd_uchar32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar32) -> simd_uchar32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_ushort32) -> simd_uchar32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_make_ulong4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917700-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917159-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ulong3, simd_ulong3, simd_ulong3) -> simd_ulong3\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_ulong3, simd_ulong3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_ulong3, simd_ulong3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917844-simd_uchar",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_uchar32) -> simd_uchar32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short32) -> simd_uchar32\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort32) -> simd_uchar32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918266-simd_uchar",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar64(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867646-simd_make_uchar64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_uchar64(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar64) -> simd_uchar64\nReturns a new vector from the specified vector.\nfunc simd_make_uchar64_undef(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918237-simd_ulong",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918436-simd_ulong",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917815-simd_ulong",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar64(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917295-simd_make_uchar64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_uchar64(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar64) -> simd_uchar64\nReturns a new vector from the specified vector.\nfunc simd_make_uchar64(simd_uchar32, simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar64_undef(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917847-simd_ulong",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917431-simd_make_uchar32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_uchar32(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar32) -> simd_uchar32\nReturns a new vector from the specified vector.\nfunc simd_make_uchar32(simd_uchar64) -> simd_uchar32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32_undef(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917968-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918598-simd_ulong",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917972-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918497-simd_ulong",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917876-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917515-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917898-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917611-simd_make_ulong4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918612-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918389-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917239-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918716-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918303-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918684-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918164-simd_ulong",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917960-simd_ulong",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918313-simd_ulong",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918043-simd_ulong",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917463-simd_make_ulong4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong8) -> simd_ulong4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ulong2, simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong2) -> simd_ulong4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong3) -> simd_ulong4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar64_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917367-simd_make_uchar64_undef",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_uchar64(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar64) -> simd_uchar64\nReturns a new vector from the specified vector.\nfunc simd_make_uchar64(simd_uchar32, simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar64_undef(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar64_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917290-simd_make_uchar64_undef",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_uchar64(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar64) -> simd_uchar64\nReturns a new vector from the specified vector.\nfunc simd_make_uchar64(simd_uchar32, simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar64_undef(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917944-simd_ulong",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917433-simd_make_ulong3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916730-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong4) -> simd_bool\nfunc simd_any(simd_ulong4) -> simd_bool\nfunc simd_all(simd_ulong4) -> simd_bool\nfunc simd_all(simd_ulong4) -> simd_bool\nfunc simd_bitselect(simd_ulong4, simd_ulong4, simd_long4) -> simd_ulong4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_ulong3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917654-simd_make_ulong3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916741-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong4) -> simd_bool\nfunc simd_any(simd_ulong4) -> simd_bool\nfunc simd_all(simd_ulong4) -> simd_bool\nfunc simd_all(simd_ulong4) -> simd_bool\nfunc simd_bitselect(simd_ulong4, simd_ulong4, simd_long4) -> simd_ulong4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_ulong3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919020-simd_make_ulong3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_ulong3(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong3_undef(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917922-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918277-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918706-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918519-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918299-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918364-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917808-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ulong3(simd_ulong1, simd_ulong2) -> simd_ulong3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong2) -> simd_ulong3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ulong3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918118-simd_ulong",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_uchar3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918644-simd_ulong",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char3) -> simd_ulong3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_short3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort3) -> simd_ulong3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float3) -> simd_ulong3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double3) -> simd_ulong3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917399-simd_make_ulong3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ulong3(simd_ulong1, simd_ulong2) -> simd_ulong3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong2) -> simd_ulong3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_ulong2, simd_ulong1) -> simd_ulong3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918138-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918031-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917989-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar64_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917389-simd_make_uchar64_undef",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_uchar64(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar64) -> simd_uchar64\nReturns a new vector from the specified vector.\nfunc simd_make_uchar64(simd_uchar32, simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar64_undef(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918127-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916941-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ulong4, simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_ulong4, simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_ulong4, simd_ulong4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918096-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar64_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917726-simd_make_uchar64_undef",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_uchar64(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar64) -> simd_uchar64\nReturns a new vector from the specified vector.\nfunc simd_make_uchar64(simd_uchar32, simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar64_undef(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917160-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ulong4, simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_ulong4, simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_ulong4, simd_ulong4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916727-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long4) -> simd_bool\nfunc simd_any(simd_long4) -> simd_bool\nfunc simd_all(simd_long4) -> simd_bool\nfunc simd_bitselect(simd_long4, simd_long4, simd_long4) -> simd_long4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_long4, simd_long4, simd_long4) -> simd_long4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916673-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long4) -> simd_bool\nfunc simd_any(simd_long4) -> simd_bool\nfunc simd_all(simd_long4) -> simd_bool\nfunc simd_all(simd_long4) -> simd_bool\nfunc simd_bitselect(simd_long4, simd_long4, simd_long4) -> simd_long4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917067-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uchar64, simd_uchar64) -> simd_uchar64\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917122-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long4) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long4) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_long4) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long4) -> simd_long1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_long4) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_ulong3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917353-simd_make_ulong3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918656-simd_uchar",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar3) -> simd_uchar3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort3) -> simd_uchar3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float3) -> simd_uchar3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double3) -> simd_uchar3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917177-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_uchar32) -> UInt8\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uchar32) -> UInt8\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917807-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char32) -> simd_uchar32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar32) -> simd_uchar32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ushort32) -> simd_uchar32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917963-simd_ulong",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918585-simd_ulong",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918351-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char32) -> simd_uchar32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar32) -> simd_uchar32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short32) -> simd_uchar32\nReturns a new vector from the specified vector of 16-bit, signed integer elements."
  },
  {
    "title": "simd_make_uchar64(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917394-simd_make_uchar64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_uchar64(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar64) -> simd_uchar64\nReturns a new vector from the specified vector.\nfunc simd_make_uchar64(simd_uchar32, simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar64_undef(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918638-simd_ulong",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar4) -> simd_ulong4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short4) -> simd_ulong4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_int4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float4) -> simd_ulong4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double4) -> simd_ulong4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917021-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_equal(simd_uchar32, simd_uchar32) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_make_uchar64(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917305-simd_make_uchar64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_uchar64(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar64) -> simd_uchar64\nReturns a new vector from the specified vector.\nfunc simd_make_uchar64(simd_uchar32, simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar64_undef(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916718-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uchar64) -> simd_bool\nfunc simd_bitselect(simd_uchar64, simd_uchar64, simd_char64) -> simd_uchar64\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_uchar64(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917665-simd_make_uchar64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_uchar64(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar64) -> simd_uchar64\nReturns a new vector from the specified vector.\nfunc simd_make_uchar64(simd_uchar32, simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar64_undef(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar64(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917739-simd_make_uchar64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_uchar64(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar32, simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar64_undef(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917454-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_ulong3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917655-simd_make_ulong3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916800-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong4) -> simd_bool\nfunc simd_any(simd_ulong4) -> simd_bool\nfunc simd_all(simd_ulong4) -> simd_bool\nfunc simd_bitselect(simd_ulong4, simd_ulong4, simd_long4) -> simd_ulong4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_ulong4, simd_ulong4, simd_long4) -> simd_ulong4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916775-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong4) -> simd_bool\nfunc simd_any(simd_ulong4) -> simd_bool\nfunc simd_all(simd_ulong4) -> simd_bool\nfunc simd_bitselect(simd_ulong4, simd_ulong4, simd_long4) -> simd_ulong4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_ulong4, simd_ulong4, simd_long4) -> simd_ulong4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_ulong3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917546-simd_make_ulong3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917316-simd_make_ulong3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917682-simd_make_ulong3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917466-simd_make_ulong3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916778-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong4) -> simd_bool\nfunc simd_all(simd_ulong4) -> simd_bool\nfunc simd_all(simd_ulong4) -> simd_bool\nfunc simd_bitselect(simd_ulong4, simd_ulong4, simd_long4) -> simd_ulong4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_ulong4, simd_ulong4, simd_long4) -> simd_ulong4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917131-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns the maximum value of each element in a vector.\nfunc simd_max(simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916726-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong4) -> simd_bool\nfunc simd_all(simd_ulong4) -> simd_bool\nfunc simd_all(simd_ulong4) -> simd_bool\nfunc simd_bitselect(simd_ulong4, simd_ulong4, simd_long4) -> simd_ulong4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_ulong4, simd_ulong4, simd_long4) -> simd_ulong4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917029-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns the minimum value of each element in a vector.\nfunc simd_min(simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_make_ulong3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917430-simd_make_ulong3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong3) -> simd_ulong3\nReturns a new vector from the specified vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong4) -> simd_ulong3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3(simd_ulong8) -> simd_ulong3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong3_undef(simd_ulong2) -> simd_ulong3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917007-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns the minimum value of each element in a vector.\nfunc simd_min(simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916916-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns the maximum value of each element in a vector.\nfunc simd_max(simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_make_ulong3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917276-simd_make_ulong3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_ulong3(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong3_undef(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong3_undef(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_ulong3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919017-simd_make_ulong3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_ulong3(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong3_undef(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong3_undef(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "vector3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918692-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_ulong3(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong3_undef(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong3_undef(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917057-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong4) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_ulong4) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong4) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong4) -> simd_ulong1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_ulong4) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_ulong3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867728-simd_make_ulong3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_ulong3(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong3_undef(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong3_undef(simd_ulong1) -> simd_ulong3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916892-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong4) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_ulong4) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong4) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_ulong4) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong4) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916891-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong4) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_ulong4) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong4) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_ulong4) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong4) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917016-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ulong4, simd_ulong4, simd_ulong4) -> simd_ulong4\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_ulong4, simd_ulong4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_ulong4, simd_ulong4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917209-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uchar32) -> UInt8\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_uchar32) -> UInt8\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918513-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918437-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918292-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916744-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uchar32) -> simd_bool\nfunc simd_all(simd_uchar32) -> simd_bool"
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916826-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uchar32) -> simd_bool\nfunc simd_bitselect(simd_uchar32, simd_uchar32, simd_char32) -> simd_uchar32\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_ulong4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919019-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_ulong4(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong4_undef(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "vector32(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918559-vector32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_uchar32(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar32) -> simd_uchar32\nReturns a new vector from the specified vector.\nfunc simd_make_uchar32(simd_uchar64) -> simd_uchar32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32_undef(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "vector4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918040-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_ulong4(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong4_undef(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_ulong4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867732-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_ulong4(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong4_undef(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "vector4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917930-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_ulong4(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong4_undef(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong4_undef(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_uchar32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917445-simd_make_uchar32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_uchar32(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar32) -> simd_uchar32\nReturns a new vector from the specified vector.\nfunc simd_make_uchar32(simd_uchar64) -> simd_uchar32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32_undef(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917271-simd_make_uchar32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_uchar32(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar32) -> simd_uchar32\nReturns a new vector from the specified vector.\nfunc simd_make_uchar32(simd_uchar64) -> simd_uchar32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32_undef(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917578-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_uchar32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917522-simd_make_uchar32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_uchar32(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar32(simd_uchar32) -> simd_uchar32\nReturns a new vector from the specified vector.\nfunc vector32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32(simd_uchar16, simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar32_undef(simd_uchar2) -> simd_uchar32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar3) -> simd_uchar32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar4) -> simd_uchar32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar8) -> simd_uchar32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar32_undef(simd_uchar16) -> simd_uchar32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919021-simd_make_ulong4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_ulong4(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_ulong1, simd_ulong1, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong4_undef(simd_ulong1) -> simd_ulong4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_ulong4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917494-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_ulong4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917413-simd_make_ulong4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong1, simd_ulong2) -> simd_ulong4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong2, simd_ulong1) -> simd_ulong4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong1, simd_ulong3) -> simd_ulong4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong2, simd_ulong1, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ulong4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ulong3, simd_ulong1) -> simd_ulong4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916923-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_uchar32, simd_uchar32) -> simd_uchar32\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916865-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uchar32) -> UInt8\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_uchar32) -> UInt8\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917134-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uchar32, simd_uchar32) -> simd_uchar32\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_make_uchar32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867710-simd_make_uchar32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Scalar Values\nfunc simd_make_uchar32(UInt8) -> simd_uchar32\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916721-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uchar64) -> simd_bool\nfunc simd_all(simd_uchar64) -> simd_bool"
  },
  {
    "title": "simd_make_uchar64(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917240-simd_make_uchar64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_uchar64(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar64) -> simd_uchar64\nReturns a new vector from the specified vector.\nfunc simd_make_uchar64(simd_uchar32, simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar64_undef(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917892-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_uchar32) -> simd_uchar32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short32) -> simd_uchar32\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort32) -> simd_uchar32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918680-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char32) -> simd_uchar32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_short32) -> simd_uchar32\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort32) -> simd_uchar32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918009-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ulong_sat(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918054-simd_long",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918698-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ulong_sat(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918181-simd_long",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918158-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918501-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ulong_sat(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918346-simd_long",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918438-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918062-simd_long",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918042-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918109-simd_long",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918093-simd_long",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917977-simd_long",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917863-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_long4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917490-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_long4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917721-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_long4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917340-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_long4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917417-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917447-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_long4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917562-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_long4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917474-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_long4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917615-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917401-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918455-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917229-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917650-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917709-simd_make_long4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916836-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long4) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_long4) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long4) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_long4) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long4) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916979-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long4) -> simd_long4\nReturns the absolute value of each element in a vector.\nfunc simd_abs(simd_long4) -> simd_long4\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long4, simd_long4, simd_long4) -> simd_long4\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_long4, simd_long4, simd_long4) -> simd_long4\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_long4, simd_long4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917125-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_equal(simd_uchar64, simd_uchar64) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "BNNSArithmeticMinimum | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticminimum",
    "html": "See Also\nBinary Arithmetic Functions\nvar BNNSArithmeticAdd: BNNSArithmeticFunction\nAn operation that calculates the element-wise sum of its two inputs.\nvar BNNSArithmeticSubtract: BNNSArithmeticFunction\nAn operation that calculates the element-wise difference of its two inputs.\nvar BNNSArithmeticDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs.\nvar BNNSArithmeticDivideNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs and returns zero if the divisor is zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticMultiply: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs.\nvar BNNSArithmeticMultiplyNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs and returns zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticPow: BNNSArithmeticFunction\nAn operation that calculates the element-wise first input raised to the power of its second input.\nvar BNNSArithmeticMaximum: BNNSArithmeticFunction\nAn operation that calculates the element-wise maximum of its two inputs.\nvar BNNSArithmeticFloorDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise floor division of its inputs.\nvar BNNSArithmeticTruncDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise truncated division of its inputs.\nvar BNNSArithmeticTruncRemainder: BNNSArithmeticFunction\nAn operation that calculates the element-wise remainder of truncated division of its inputs."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917139-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_long4, simd_long4) -> simd_long4\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_long4, simd_long4) -> simd_long4\nReturns the maximum value of each element in a vector.\nfunc simd_max(simd_long4, simd_long4) -> simd_long4\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918460-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917015-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long4) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_long4) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long4) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_long4) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long4) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_uchar64_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917588-simd_make_uchar64_undef",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_uchar64(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_uchar64(simd_uchar64) -> simd_uchar64\nReturns a new vector from the specified vector.\nfunc simd_make_uchar64(simd_uchar32, simd_uchar32) -> simd_uchar64\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar64_undef(simd_uchar2) -> simd_uchar64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar3) -> simd_uchar64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar4) -> simd_uchar64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar8) -> simd_uchar64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_uchar64_undef(simd_uchar16) -> simd_uchar64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917188-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uchar64, simd_uchar64, simd_uchar64) -> simd_uchar64\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917203-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_long4, simd_long4) -> simd_long4\nReturns the minimum value of each element in a vector.\nfunc simd_min(simd_long4, simd_long4) -> simd_long4\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_long4, simd_long4) -> simd_long4\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916761-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_uchar64) -> simd_bool\nfunc simd_bitselect(simd_uchar64, simd_uchar64, simd_char64) -> simd_uchar64\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916799-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long4) -> simd_bool\nfunc simd_all(simd_long4) -> simd_bool\nfunc simd_all(simd_long4) -> simd_bool\nfunc simd_bitselect(simd_long4, simd_long4, simd_long4) -> simd_long4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_long4, simd_long4, simd_long4) -> simd_long4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916724-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long4) -> simd_bool\nfunc simd_any(simd_long4) -> simd_bool\nfunc simd_all(simd_long4) -> simd_bool\nfunc simd_bitselect(simd_long4, simd_long4, simd_long4) -> simd_long4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_long4, simd_long4, simd_long4) -> simd_long4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917217-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_uchar64) -> UInt8\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uchar64) -> UInt8\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_uchar64_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867663-simd_make_uchar64_undef",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Scalar Values\nfunc simd_make_uchar64(UInt8) -> simd_uchar64\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917004-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_long4, simd_long4) -> simd_long4\nReturns the minimum value of each element in a vector.\nfunc simd_min(simd_long4, simd_long4) -> simd_long4\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_long4, simd_long4) -> simd_long4\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_make_uchar64(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917344-simd_make_uchar64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Scalar Values\nfunc simd_make_uchar64_undef(UInt8) -> simd_uchar64\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916856-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_uchar64, simd_uchar64) -> simd_uchar64\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916890-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long4) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_long4) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long4) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long4) -> simd_long1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_long4) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918568-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917003-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long4) -> simd_long4\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long4, simd_long4, simd_long4) -> simd_long4\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_long4, simd_long4, simd_long4) -> simd_long4\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_long4, simd_long4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_long4, simd_long4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917119-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long4) -> simd_long4\nReturns the absolute value of each element in a vector.\nfunc simd_abs(simd_long4) -> simd_long4\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long4, simd_long4, simd_long4) -> simd_long4\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_long4, simd_long4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_long4, simd_long4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916904-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long4) -> simd_long4\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long4, simd_long4, simd_long4) -> simd_long4\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_long4, simd_long4, simd_long4) -> simd_long4\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_long4, simd_long4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_long4, simd_long4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917110-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uchar64) -> UInt8\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_uchar64) -> UInt8\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916764-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong8) -> simd_bool\nfunc simd_any(simd_ulong8) -> simd_bool\nfunc simd_all(simd_ulong8) -> simd_bool\nfunc simd_bitselect(simd_ulong8, simd_ulong8, simd_long8) -> simd_ulong8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_ulong8, simd_ulong8, simd_long8) -> simd_ulong8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_ushort3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917750-simd_make_ushort3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_ushort3(UInt16, UInt16, UInt16) -> simd_ushort3\nReturns a new vector from the specified scalar values.\nfunc vector3(UInt16, UInt16, UInt16) -> simd_ushort3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ushort3_undef(UInt16) -> simd_ushort3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916760-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong8) -> simd_bool\nfunc simd_all(simd_ulong8) -> simd_bool\nfunc simd_all(simd_ulong8) -> simd_bool\nfunc simd_bitselect(simd_ulong8, simd_ulong8, simd_long8) -> simd_ulong8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_ulong8, simd_ulong8, simd_long8) -> simd_ulong8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917147-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns the minimum value of each element in a vector.\nfunc simd_min(simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916819-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong8) -> simd_bool\nfunc simd_any(simd_ulong8) -> simd_bool\nfunc simd_all(simd_ulong8) -> simd_bool\nfunc simd_bitselect(simd_ulong8, simd_ulong8, simd_long8) -> simd_ulong8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_ulong8, simd_ulong8, simd_long8) -> simd_ulong8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916932-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns the maximum value of each element in a vector.\nfunc simd_max(simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917070-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong8) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_ulong8) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong8) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_ulong8) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong8) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916885-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong8) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_ulong8) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong8) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong8) -> simd_ulong1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_ulong8) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916905-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns the maximum value of each element in a vector.\nfunc simd_max(simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918232-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918244-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ulong_sat(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918590-simd_long",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917850-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ulong_sat(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918633-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ulong_sat(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918242-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918276-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918092-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ulong_sat(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918466-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918034-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ulong_sat(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918376-simd_long",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917965-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ulong_sat(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918322-simd_long",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917893-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918101-simd_ulong",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918599-simd_long",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar4) -> simd_long4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort4) -> simd_long4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong4) -> simd_long4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float4) -> simd_long4\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917660-simd_make_ulong8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918533-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ulong_sat(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918665-simd_ulong",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918527-simd_ulong",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918231-simd_ulong",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918007-simd_ulong",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918273-simd_ulong",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916697-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ushort3) -> simd_bool\nfunc simd_all(simd_ushort3) -> simd_bool"
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917897-simd_ulong",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_long4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917297-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_long4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917510-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917439-simd_make_long4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917366-simd_make_long4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917465-simd_make_long4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long4) -> simd_long4\nReturns a new vector from the specified vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long8) -> simd_long4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_long2, simd_long2) -> simd_long4\nReturns a new vector from the specified vectors.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long2) -> simd_long4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long4_undef(simd_long3) -> simd_long4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919014-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_long4(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long4(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc simd_make_long4_undef(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long4_undef(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_long4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917675-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_long4(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc simd_make_long4_undef(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long4_undef(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_long4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917410-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_long4(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc simd_make_long4_undef(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long4_undef(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_long4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919011-simd_make_long4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_long4(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long4(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc simd_make_long4_undef(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_long4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867717-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_long4(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long4(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc simd_make_long4_undef(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long4_undef(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "vector4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917827-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_long4(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long4(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc simd_make_long4_undef(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long4_undef(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916707-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong8) -> simd_bool\nfunc simd_any(simd_ulong8) -> simd_bool\nfunc simd_all(simd_ulong8) -> simd_bool\nfunc simd_all(simd_ulong8) -> simd_bool\nfunc simd_bitselect(simd_ulong8, simd_ulong8, simd_long8) -> simd_ulong8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_long4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917707-simd_make_long4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_long4(simd_long1, simd_long1, simd_long2) -> simd_long4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long2, simd_long1) -> simd_long4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long1, simd_long3) -> simd_long4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long2, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_long4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_long3, simd_long1) -> simd_long4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916740-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong8) -> simd_bool\nfunc simd_any(simd_ulong8) -> simd_bool\nfunc simd_all(simd_ulong8) -> simd_bool\nfunc simd_all(simd_ulong8) -> simd_bool\nfunc simd_bitselect(simd_ulong8, simd_ulong8, simd_long8) -> simd_ulong8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "vector4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918427-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_long4(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long4(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc simd_make_long4_undef(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long4_undef(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_long4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867688-simd_make_long4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_long4(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long4(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc simd_make_long4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc vector4(simd_long1, simd_long1, simd_long1, simd_long1) -> simd_long4\nReturns a new vector from the specified scalar values.\nfunc simd_make_long4_undef(simd_long1) -> simd_long4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918489-simd_ulong",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917359-simd_make_ulong8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_ulong8(simd_ulong1) -> simd_ulong8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong8_undef(simd_ulong1) -> simd_ulong8\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong1) -> simd_ulong8\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917941-simd_ulong",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917829-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918261-simd_ushort",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916920-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ushort3) -> UInt16\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_ushort3) -> UInt16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_ulong8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867715-simd_make_ulong8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_ulong8(simd_ulong1) -> simd_ulong8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong1) -> simd_ulong8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong8_undef(simd_ulong1) -> simd_ulong8\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917081-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ushort3, simd_ushort3, simd_ushort3) -> simd_ushort3\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918428-simd_ulong",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916739-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ushort3) -> simd_bool\nfunc simd_bitselect(simd_ushort3, simd_ushort3, simd_short3) -> simd_ushort3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916968-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ushort3) -> UInt16\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ushort3) -> UInt16\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917009-simd_max",
    "html": "See Also\nExtrema Function\nfunc simd_min(simd_ushort3, simd_ushort3) -> simd_ushort3\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917129-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_ushort3) -> UInt16\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ushort3) -> UInt16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_ushort3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917322-simd_make_ushort3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc vector3(simd_ushort2, UInt16) -> simd_ushort3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ushort3(UInt16, simd_ushort2) -> simd_ushort3\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918006-simd_ushort",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918215-simd_ushort",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918085-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_ushort3(UInt16) -> simd_ushort3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ushort3(UInt16, UInt16, UInt16) -> simd_ushort3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ushort3_undef(UInt16) -> simd_ushort3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "vector3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918418-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ushort3(simd_ushort2, UInt16) -> simd_ushort3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ushort3(UInt16, simd_ushort2) -> simd_ushort3\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_ushort3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917692-simd_make_ushort3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc vector3(simd_ushort2, UInt16) -> simd_ushort3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ushort3(simd_ushort2, UInt16) -> simd_ushort3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_ushort3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867652-simd_make_ushort3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_ushort3(UInt16) -> simd_ushort3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ushort3(UInt16, UInt16, UInt16) -> simd_ushort3\nReturns a new vector from the specified scalar values.\nfunc vector3(UInt16, UInt16, UInt16) -> simd_ushort3\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "simd_make_ushort3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867707-simd_make_ushort3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_ushort3(UInt16) -> simd_ushort3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector3(UInt16, UInt16, UInt16) -> simd_ushort3\nReturns a new vector from the specified scalar values.\nfunc simd_make_ushort3_undef(UInt16) -> simd_ushort3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917056-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong8) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_ulong8) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong8) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong8) -> simd_ulong1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_ulong8) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916708-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong8) -> simd_bool\nfunc simd_all(simd_ulong8) -> simd_bool\nfunc simd_all(simd_ulong8) -> simd_bool\nfunc simd_bitselect(simd_ulong8, simd_ulong8, simd_long8) -> simd_ulong8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_ulong8, simd_ulong8, simd_long8) -> simd_ulong8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917213-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ulong8, simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_ulong8, simd_ulong8) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nfunc simd_equal(simd_ulong8, simd_ulong8) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916935-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong8) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong8) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_ulong8) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong8) -> simd_ulong1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_ulong8) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917103-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ulong8, simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_ulong8, simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_ulong8, simd_ulong8) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918619-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917179-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ulong8, simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_ulong8, simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_ulong8, simd_ulong8) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916972-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong8) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong8) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_ulong8) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong8) -> simd_ulong1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_ulong8) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_ushort3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917667-simd_make_ushort3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ushort3(simd_ushort2) -> simd_ushort3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort3(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector.\nfunc simd_make_ushort3(simd_ushort4) -> simd_ushort3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ushort3(simd_ushort8) -> simd_ushort3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort3(simd_ushort32) -> simd_ushort3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort3_undef(simd_ushort2) -> simd_ushort3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917214-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong8) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_ulong8) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong8) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_ulong8) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong8) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916882-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns the minimum value of each element in a vector.\nfunc simd_min(simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917051-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ulong8, simd_ulong8, simd_ulong8) -> simd_ulong8\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_ulong8, simd_ulong8) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nfunc simd_equal(simd_ulong8, simd_ulong8) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false."
  },
  {
    "title": "simd_make_ushort3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917658-simd_make_ushort3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ushort3(simd_ushort2) -> simd_ushort3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort3(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector.\nfunc simd_make_ushort3(simd_ushort4) -> simd_ushort3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ushort3(simd_ushort16) -> simd_ushort3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort3(simd_ushort32) -> simd_ushort3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort3_undef(simd_ushort2) -> simd_ushort3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917351-simd_make_ushort3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ushort3(simd_ushort2) -> simd_ushort3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort3(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector.\nfunc simd_make_ushort3(simd_ushort4) -> simd_ushort3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ushort3(simd_ushort8) -> simd_ushort3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort3(simd_ushort16) -> simd_ushort3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort3(simd_ushort32) -> simd_ushort3\nReturns a new vector by truncating the specified thirty two-element vector."
  },
  {
    "title": "simd_make_ushort3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917741-simd_make_ushort3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ushort3(simd_ushort2) -> simd_ushort3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort3(simd_ushort4) -> simd_ushort3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ushort3(simd_ushort8) -> simd_ushort3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort3(simd_ushort16) -> simd_ushort3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort3(simd_ushort32) -> simd_ushort3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort3_undef(simd_ushort2) -> simd_ushort3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917288-simd_make_ushort3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ushort3(simd_ushort2) -> simd_ushort3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort3(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector.\nfunc simd_make_ushort3(simd_ushort4) -> simd_ushort3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ushort3(simd_ushort8) -> simd_ushort3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort3(simd_ushort16) -> simd_ushort3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort3_undef(simd_ushort2) -> simd_ushort3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917364-simd_make_ushort3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ushort3(simd_ushort2) -> simd_ushort3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort3(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector.\nfunc simd_make_ushort3(simd_ushort8) -> simd_ushort3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort3(simd_ushort16) -> simd_ushort3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort3(simd_ushort32) -> simd_ushort3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort3_undef(simd_ushort2) -> simd_ushort3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917373-simd_make_ushort3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_ushort3(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector.\nfunc simd_make_ushort3(simd_ushort4) -> simd_ushort3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ushort3(simd_ushort8) -> simd_ushort3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort3(simd_ushort16) -> simd_ushort3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort3(simd_ushort32) -> simd_ushort3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort3_undef(simd_ushort2) -> simd_ushort3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917412-simd_make_ulong8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918744-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917221-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_equal(simd_uint8, simd_uint8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918352-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917822-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916864-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_abs(simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_long8, simd_long8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_long8, simd_long8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917161-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint8) -> UInt32\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_uint8) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918544-simd_uint",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916922-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint8, simd_uint8) -> simd_uint8\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "vector8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918271-vector8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917259-simd_make_ulong8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uint8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917375-simd_make_uint8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uint8(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector.\nfunc simd_make_uint8(simd_uint16) -> simd_uint8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc simd_make_uint8_undef(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917274-simd_make_ulong8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917377-simd_make_ulong8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918296-simd_uint",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918459-vector8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917481-simd_make_ulong8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918547-simd_uint",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917695-simd_make_ulong8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uint8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917308-simd_make_uint8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uint8(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector.\nfunc simd_make_uint8(simd_uint16) -> simd_uint8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc simd_make_uint8_undef(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918088-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917703-simd_make_ulong8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918479-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917624-simd_make_ulong8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917734-simd_make_ulong8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918196-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867740-simd_make_ulong8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919022-simd_make_ulong8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917383-simd_make_ulong8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917603-simd_make_ulong8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919013-simd_make_ulong8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_ulong8(simd_ulong1) -> simd_ulong8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong1) -> simd_ulong8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong8_undef(simd_ulong1) -> simd_ulong8\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_ulong8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917497-simd_make_ulong8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ulong8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917553-simd_make_ulong8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ulong4, simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified vectors.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong2) -> simd_ulong8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong3) -> simd_ulong8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong4) -> simd_ulong8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918416-simd_ulong",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917987-simd_ulong",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_uchar8) -> simd_ulong8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort8) -> simd_ulong8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float8) -> simd_ulong8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double8) -> simd_ulong8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917708-simd_make_ulong8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_ulong8(simd_ulong1) -> simd_ulong8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong8_undef(simd_ulong1) -> simd_ulong8\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong8_undef(simd_ulong1) -> simd_ulong8\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916713-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_ushort3) -> simd_bool\nfunc simd_bitselect(simd_ushort3, simd_ushort3, simd_short3) -> simd_ushort3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917907-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918253-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917928-simd_ushort",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918478-simd_ushort",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917886-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918083-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918718-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918177-simd_ushort",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917916-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918485-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917858-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918131-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917992-simd_ushort",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918719-simd_ushort",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918361-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917821-simd_ushort",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917918-simd_ushort",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918185-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_uchar3) -> simd_ushort3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort3) -> simd_ushort3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_ulong3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, unsigned integer element.\nfunc simd_ushort_sat(simd_float3) -> simd_ushort3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double3) -> simd_ushort3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint16(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867667-simd_make_uint16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uint16(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector.\nfunc vector16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc simd_make_uint16_undef(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918056-simd_uint",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements."
  },
  {
    "title": "simd_make_long8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919010-simd_make_long8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_long8(simd_long1) -> simd_long8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long8(simd_long1) -> simd_long8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long8_undef(simd_long1) -> simd_long8\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918483-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917842-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918024-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918175-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917824-simd_char",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916748-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long8) -> simd_bool\nfunc simd_any(simd_long8) -> simd_bool\nfunc simd_all(simd_long8) -> simd_bool\nfunc simd_all(simd_long8) -> simd_bool\nfunc simd_bitselect(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917053-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uint8, simd_uint8, simd_uint8) -> simd_uint8\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916715-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long8) -> simd_bool\nfunc simd_any(simd_long8) -> simd_bool\nfunc simd_all(simd_long8) -> simd_bool\nfunc simd_bitselect(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918681-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916672-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long8) -> simd_bool\nfunc simd_any(simd_long8) -> simd_bool\nfunc simd_all(simd_long8) -> simd_bool\nfunc simd_bitselect(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918509-simd_char",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918163-simd_char",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917162-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long8) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_long8) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long8) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_long8) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long8) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916886-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long8) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_long8) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long8) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long8) -> simd_long1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_long8) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918154-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918077-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_uchar16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917073-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long8) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long8) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_long8) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long8) -> simd_long1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_long8) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918013-simd_uint",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_int16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_float16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917883-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918456-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918059-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917005-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_uint8) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint8) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916978-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_uint8, simd_uint8) -> simd_uint8\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916803-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_uint8) -> simd_bool\nfunc simd_bitselect(simd_uint8, simd_uint8, simd_int8) -> simd_uint8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916812-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uint8) -> simd_bool\nfunc simd_bitselect(simd_uint8, simd_uint8, simd_int8) -> simd_uint8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917123-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint8) -> UInt32\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_uint8) -> UInt32\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_make_uint8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917418-simd_make_uint8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uint8(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector.\nfunc simd_make_uint8(simd_uint16) -> simd_uint8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc simd_make_uint8_undef(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uint8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917407-simd_make_uint8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uint8(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector.\nfunc simd_make_uint8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc simd_make_uint8_undef(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uint8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917527-simd_make_uint8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uint8(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint16) -> simd_uint8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc simd_make_uint8_undef(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918350-simd_uint",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867650-simd_make_uint8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_uint8(UInt32) -> simd_uint8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_make_uint8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917335-simd_make_uint8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uint8(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector.\nfunc simd_make_uint8(simd_uint16) -> simd_uint8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc simd_make_uint8_undef(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "vector8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918061-vector8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uint8(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector.\nfunc simd_make_uint8(simd_uint16) -> simd_uint8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc simd_make_uint8_undef(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918186-simd_uint",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867680-simd_make_uint8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uint8(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector.\nfunc simd_make_uint8(simd_uint16) -> simd_uint8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc vector8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc simd_make_uint8_undef(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uint8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917411-simd_make_uint8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uint8(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector.\nfunc simd_make_uint8(simd_uint16) -> simd_uint8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc simd_make_uint8_undef(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918087-simd_uint",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918739-simd_uint",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917514-simd_make_uint8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_uint8_undef(UInt32) -> simd_uint8\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_uint8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917554-simd_make_uint8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uint8(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint4) -> simd_uint8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint8(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector.\nfunc simd_make_uint8(simd_uint16) -> simd_uint8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_uint4, simd_uint4) -> simd_uint8\nReturns a new vector from the specified vectors.\nfunc simd_make_uint8_undef(simd_uint2) -> simd_uint8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint8_undef(simd_uint3) -> simd_uint8\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918194-simd_uint",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918014-simd_uint",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918137-simd_uint",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918471-simd_uint",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917957-simd_uint",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918562-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917937-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918550-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar8) -> simd_uint8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort8) -> simd_uint8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float8) -> simd_uint8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double8) -> simd_uint8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_long8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917273-simd_make_long8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918150-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918696-simd_long",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917346-simd_make_uint16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uint16(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc simd_make_uint16_undef(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918251-simd_long",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918064-simd_long",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918558-vector8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917735-simd_make_long8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "vector16(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918227-vector16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uint16(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector.\nfunc simd_make_uint16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc simd_make_uint16_undef(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918502-simd_char",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918280-simd_uint",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_short16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_float16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917505-simd_make_uint16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uint16(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector.\nfunc simd_make_uint16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc simd_make_uint16_undef(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918439-simd_long",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916806-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uint16) -> simd_bool\nfunc simd_all(simd_uint16) -> simd_bool"
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918486-simd_long",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918615-simd_uint",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_float16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917676-simd_make_uint16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uint16(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector.\nfunc simd_make_uint16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc simd_make_uint16_undef(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uint16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917246-simd_make_uint16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Scalar Values\nfunc simd_make_uint16_undef(UInt32) -> simd_uint16\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_int16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917580-simd_make_int16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_int16(simd_int2) -> simd_int16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int4) -> simd_int16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int16) -> simd_int16\nReturns a new vector from the specified vector.\nfunc simd_make_int16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc simd_make_int16_undef(simd_int2) -> simd_int16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int4) -> simd_int16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int8) -> simd_int16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917592-simd_make_long8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917453-simd_make_long8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917647-simd_make_char3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_char3(simd_char2) -> simd_char3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char3(simd_char3) -> simd_char3\nReturns a new vector from the specified vector.\nfunc simd_make_char3(simd_char4) -> simd_char3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_char3(simd_char8) -> simd_char3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char3(simd_char16) -> simd_char3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char3(simd_char32) -> simd_char3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char3(simd_char64) -> simd_char3\nReturns a new vector by truncating the specified sixty four-element vector."
  },
  {
    "title": "simd_make_long8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917572-simd_make_long8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917040-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_char3, simd_char3) -> simd_char3\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_make_uint16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917442-simd_make_uint16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uint16(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector.\nfunc simd_make_uint16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc simd_make_uint16_undef(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917406-simd_make_long8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_long8(simd_long1) -> simd_long8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long8_undef(simd_long1) -> simd_long8\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long8_undef(simd_long1) -> simd_long8\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916701-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long8) -> simd_bool\nfunc simd_any(simd_long8) -> simd_bool\nfunc simd_all(simd_long8) -> simd_bool\nfunc simd_all(simd_long8) -> simd_bool\nfunc simd_bitselect(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916728-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long8) -> simd_bool\nfunc simd_all(simd_long8) -> simd_bool\nfunc simd_all(simd_long8) -> simd_bool\nfunc simd_bitselect(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916703-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long8) -> simd_bool\nfunc simd_all(simd_long8) -> simd_bool\nfunc simd_all(simd_long8) -> simd_bool\nfunc simd_bitselect(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916930-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_long8, simd_long8) -> simd_long8\nReturns the minimum value of each element in a vector.\nfunc simd_min(simd_long8, simd_long8) -> simd_long8\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_long8, simd_long8) -> simd_long8\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917068-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_long8, simd_long8) -> simd_long8\nReturns the minimum value of each element in a vector.\nfunc simd_min(simd_long8, simd_long8) -> simd_long8\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_long8, simd_long8) -> simd_long8\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916993-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_long8, simd_long8) -> simd_long8\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_long8, simd_long8) -> simd_long8\nReturns the maximum value of each element in a vector.\nfunc simd_max(simd_long8, simd_long8) -> simd_long8\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917938-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918023-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917045-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_abs(simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_long8, simd_long8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917111-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long8) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_long8) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long8) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long8) -> simd_long1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_long8) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916928-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_long8, simd_long8) -> simd_long8\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_long8, simd_long8) -> simd_long8\nReturns the maximum value of each element in a vector.\nfunc simd_max(simd_long8, simd_long8) -> simd_long8\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917098-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long8) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_long8) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long8) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_long8) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long8) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916870-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_abs(simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_long8, simd_long8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_long8, simd_long8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918563-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918651-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916686-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_uint16) -> simd_bool\nfunc simd_bitselect(simd_uint16, simd_uint16, simd_int16) -> simd_uint16\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916976-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_abs(simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_long8, simd_long8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918631-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916914-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long8) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long8) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_long8) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long8) -> simd_long1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_long8) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916987-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_long8, simd_long8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_long8, simd_long8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_make_char3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917365-simd_make_char3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_char3(simd_char2, CChar) -> simd_char3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_char2, CChar) -> simd_char3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917027-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint16) -> UInt32\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_uint16) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "vector3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918995-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_char3(CChar) -> simd_char3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_char3(CChar, CChar, CChar) -> simd_char3\nReturns a new vector from the specified scalar values.\nfunc simd_make_char3_undef(CChar) -> simd_char3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917894-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_long_sat(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918641-simd_char",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917042-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long8, simd_long8, simd_long8) -> simd_long8\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_long8, simd_long8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_long8, simd_long8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918417-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_make_char3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917724-simd_make_char3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_char3(simd_char2) -> simd_char3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char3(simd_char3) -> simd_char3\nReturns a new vector from the specified vector.\nfunc simd_make_char3(simd_char4) -> simd_char3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_char3(simd_char16) -> simd_char3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char3(simd_char32) -> simd_char3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char3(simd_char64) -> simd_char3\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char3_undef(simd_char2) -> simd_char3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918685-simd_char",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917950-simd_long",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_long8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917362-simd_make_long8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917694-simd_make_long8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918341-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_short16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918440-simd_char",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_int16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_float16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867653-simd_make_uint16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Scalar Values\nfunc simd_make_uint16(UInt32) -> simd_uint16\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_make_long8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917663-simd_make_long8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917596-simd_make_long8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919012-simd_make_long8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917686-simd_make_long8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867701-simd_make_long8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "vector8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917995-vector8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918713-simd_uint",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_ushort16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_float16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_long8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917495-simd_make_long8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917405-simd_make_long8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918235-simd_uint",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_uchar16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_float16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918405-simd_uint",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_float16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917899-simd_long",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_long8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917722-simd_make_long8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uint16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917426-simd_make_uint16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uint16(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector.\nfunc simd_make_uint16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc simd_make_uint16_undef(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917078-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int16) -> Int32\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_int16) -> Int32\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917913-simd_long",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917725-simd_make_uint16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uint16(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector.\nfunc simd_make_uint16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc simd_make_uint16_undef(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867649-simd_make_long8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_long8(simd_long1) -> simd_long8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long8(simd_long1) -> simd_long8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long8_undef(simd_long1) -> simd_long8\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_uint16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917326-simd_make_uint16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uint16(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector.\nfunc simd_make_uint16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc simd_make_uint16_undef(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918730-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_int16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_long8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917263-simd_make_long8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_long8(simd_long1) -> simd_long8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long8_undef(simd_long1) -> simd_long8\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long8_undef(simd_long1) -> simd_long8\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917879-simd_long",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917319-simd_make_uint16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uint16(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector.\nfunc simd_make_uint16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc simd_make_uint16_undef(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917954-simd_long",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917711-simd_make_uint16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uint16(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uint16(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector.\nfunc simd_make_uint16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_uint8, simd_uint8) -> simd_uint16\nReturns a new vector from the specified vectors.\nfunc simd_make_uint16_undef(simd_uint2) -> simd_uint16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint3) -> simd_uint16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint4) -> simd_uint16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uint16_undef(simd_uint8) -> simd_uint16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918622-simd_long",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918283-simd_long",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar8) -> simd_long8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort8) -> simd_long8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float8) -> simd_long8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double8) -> simd_long8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918458-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_short16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918442-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ushort16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_char3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917261-simd_make_char3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_char3(simd_char3) -> simd_char3\nReturns a new vector from the specified vector.\nfunc simd_make_char3(simd_char4) -> simd_char3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_char3(simd_char8) -> simd_char3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char3(simd_char16) -> simd_char3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char3(simd_char32) -> simd_char3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char3(simd_char64) -> simd_char3\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char3_undef(simd_char2) -> simd_char3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char64_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917248-simd_make_char64_undef",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_char64(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char64) -> simd_char64\nReturns a new vector from the specified vector.\nfunc simd_make_char64(simd_char32, simd_char32) -> simd_char64\nReturns a new vector from the specified vectors.\nfunc simd_make_char64_undef(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916912-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_char3) -> simd_char3\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_char3, simd_char3, simd_char3) -> simd_char3\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917108-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_char3) -> CChar\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_char3) -> CChar\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916880-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint16) -> UInt32\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_uint16) -> UInt32\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917990-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918140-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_float16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916860-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uint16, simd_uint16, simd_uint16) -> simd_uint16\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917205-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_equal(simd_uint16, simd_uint16) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918525-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917210-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_char3) -> CChar\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_char3) -> CChar\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918358-simd_char",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917867-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_long8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917380-simd_make_long8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_long8(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long8) -> simd_long8\nReturns a new vector from the specified vector.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_long4, simd_long4) -> simd_long8\nReturns a new vector from the specified vectors.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long2) -> simd_long8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long3) -> simd_long8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_long8_undef(simd_long4) -> simd_long8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918506-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char16) -> simd_uint16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_short16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort16) -> simd_uint16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float16) -> simd_uint16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_int16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917590-simd_make_int16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_int16(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int4) -> simd_int16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int8) -> simd_int16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int16) -> simd_int16\nReturns a new vector from the specified vector.\nfunc simd_make_int16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc simd_make_int16_undef(simd_int2) -> simd_int16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int4) -> simd_int16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int8) -> simd_int16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918449-simd_int",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_uint16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_float16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917390-simd_make_uchar4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uchar4(simd_uchar2, UInt8, UInt8) -> simd_uchar4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_uchar4(simd_uchar3, UInt8) -> simd_uchar4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_uchar3, UInt8) -> simd_uchar4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_uchar4(UInt8, UInt8, simd_uchar2) -> simd_uchar4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_uchar4(UInt8, simd_uchar3) -> simd_uchar4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918211-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_char16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917558-simd_make_char16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_char16(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char16) -> simd_char16\nReturns a new vector from the specified vector.\nfunc simd_make_char16(simd_char64) -> simd_char16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc simd_make_char16_undef(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918674-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_char16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867718-simd_make_char16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Scalar Values\nfunc simd_make_char16(CChar) -> simd_char16\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916719-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_int16) -> simd_bool\nfunc simd_bitselect(simd_int16, simd_int16, simd_int16) -> simd_int16\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916733-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_int16) -> simd_bool\nfunc simd_all(simd_int16) -> simd_bool"
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918695-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_uchar16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916687-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_int16) -> simd_bool\nfunc simd_bitselect(simd_int16, simd_int16, simd_int16) -> simd_int16\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_int16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917736-simd_make_int16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Scalar Values\nfunc simd_make_int16_undef(Int32) -> simd_int16\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_int16(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867684-simd_make_int16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_int16(simd_int2) -> simd_int16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int4) -> simd_int16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int8) -> simd_int16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int16) -> simd_int16\nReturns a new vector from the specified vector.\nfunc vector16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc simd_make_int16_undef(simd_int2) -> simd_int16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int4) -> simd_int16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int8) -> simd_int16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918236-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916818-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uint16) -> simd_bool\nfunc simd_bitselect(simd_uint16, simd_uint16, simd_int16) -> simd_uint16\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916874-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint16, simd_uint16) -> simd_uint16\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917024-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_uint16) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint16) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917071-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_char3) -> simd_char3\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_char3, simd_char3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916919-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_uint16, simd_uint16) -> simd_uint16\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916946-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_char3) -> CChar\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_char3) -> CChar\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916998-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_char3, simd_char3) -> simd_char3\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916763-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_char3) -> simd_bool\nfunc simd_all(simd_char3) -> simd_bool"
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916758-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_char3) -> simd_bool\nfunc simd_bitselect(simd_char3, simd_char3, simd_char3) -> simd_char3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916783-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_char3) -> simd_bool\nfunc simd_bitselect(simd_char3, simd_char3, simd_char3) -> simd_char3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_char3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917638-simd_make_char3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_char3(simd_char2) -> simd_char3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char3(simd_char3) -> simd_char3\nReturns a new vector from the specified vector.\nfunc simd_make_char3(simd_char8) -> simd_char3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char3(simd_char16) -> simd_char3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char3(simd_char32) -> simd_char3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char3(simd_char64) -> simd_char3\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char3_undef(simd_char2) -> simd_char3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917398-simd_make_char3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_char3(simd_char2) -> simd_char3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char3(simd_char4) -> simd_char3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_char3(simd_char8) -> simd_char3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char3(simd_char16) -> simd_char3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char3(simd_char32) -> simd_char3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char3(simd_char64) -> simd_char3\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char3_undef(simd_char2) -> simd_char3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916859-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_char3, simd_char3, simd_char3) -> simd_char3\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_char3, simd_char3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918291-simd_char",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918453-simd_char",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_char3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917477-simd_make_char3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_char3(simd_char2) -> simd_char3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char3(simd_char3) -> simd_char3\nReturns a new vector from the specified vector.\nfunc simd_make_char3(simd_char4) -> simd_char3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_char3(simd_char8) -> simd_char3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char3(simd_char32) -> simd_char3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char3(simd_char64) -> simd_char3\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char3_undef(simd_char2) -> simd_char3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917672-simd_make_char3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_char3(CChar, CChar, CChar) -> simd_char3\nReturns a new vector from the specified scalar values.\nfunc vector3(CChar, CChar, CChar) -> simd_char3\nReturns a new vector from the specified scalar values.\nfunc simd_make_char3_undef(CChar) -> simd_char3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_char3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917689-simd_make_char3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_char3(simd_char2) -> simd_char3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char3(simd_char3) -> simd_char3\nReturns a new vector from the specified vector.\nfunc simd_make_char3(simd_char4) -> simd_char3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_char3(simd_char8) -> simd_char3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char3(simd_char16) -> simd_char3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char3(simd_char32) -> simd_char3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char3_undef(simd_char2) -> simd_char3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917479-simd_make_char3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_char3(simd_char2) -> simd_char3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char3(simd_char3) -> simd_char3\nReturns a new vector from the specified vector.\nfunc simd_make_char3(simd_char4) -> simd_char3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_char3(simd_char8) -> simd_char3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char3(simd_char16) -> simd_char3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char3(simd_char64) -> simd_char3\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char3_undef(simd_char2) -> simd_char3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "vector3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918002-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_char3(CChar, simd_char2) -> simd_char3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_char3(simd_char2, CChar) -> simd_char3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_char3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867697-simd_make_char3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_char3(CChar) -> simd_char3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector3(CChar, CChar, CChar) -> simd_char3\nReturns a new vector from the specified scalar values.\nfunc simd_make_char3_undef(CChar) -> simd_char3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918705-simd_char",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917901-simd_char",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918577-simd_char",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_char3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917470-simd_make_char3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_char3(CChar, simd_char2) -> simd_char3\nReturns a new vector from a scalar value and a vector.\nfunc vector3(simd_char2, CChar) -> simd_char3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_char3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867703-simd_make_char3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_char3(CChar) -> simd_char3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_char3(CChar, CChar, CChar) -> simd_char3\nReturns a new vector from the specified scalar values.\nfunc vector3(CChar, CChar, CChar) -> simd_char3\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918171-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918151-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918032-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917979-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917440-simd_make_uchar4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uchar4(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar8) -> simd_uchar4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar4(simd_uchar16) -> simd_uchar4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar4(simd_uchar32) -> simd_uchar4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar4(simd_uchar64) -> simd_uchar4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar4_undef(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar4_undef(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918588-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_char64(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917461-simd_make_char64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_char64(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char64) -> simd_char64\nReturns a new vector from the specified vector.\nfunc simd_make_char64(simd_char32, simd_char32) -> simd_char64\nReturns a new vector from the specified vectors.\nfunc simd_make_char64_undef(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char64(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917436-simd_make_char64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Scalar Values\nfunc simd_make_char64_undef(CChar) -> simd_char64\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917105-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_char16, simd_char16, simd_char16) -> simd_char16\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_char16, simd_char16) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918580-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917902-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements."
  },
  {
    "title": "simd_make_char64(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917543-simd_make_char64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_char64(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char64) -> simd_char64\nReturns a new vector from the specified vector.\nfunc simd_make_char64(simd_char32, simd_char32) -> simd_char64\nReturns a new vector from the specified vectors.\nfunc simd_make_char64_undef(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918214-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918281-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_float16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918618-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_uint16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_char16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917315-simd_make_char16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_char16(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char16) -> simd_char16\nReturns a new vector from the specified vector.\nfunc simd_make_char16(simd_char32) -> simd_char16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char16(simd_char64) -> simd_char16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc simd_make_char16_undef(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917182-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_char64) -> CChar\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_char64) -> CChar\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_char16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917738-simd_make_char16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_char16(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char16) -> simd_char16\nReturns a new vector from the specified vector.\nfunc simd_make_char16(simd_char32) -> simd_char16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char16(simd_char64) -> simd_char16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc simd_make_char16_undef(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916743-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_char16) -> simd_bool\nfunc simd_bitselect(simd_char16, simd_char16, simd_char16) -> simd_char16\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_char64(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917484-simd_make_char64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_char64(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char64) -> simd_char64\nReturns a new vector from the specified vector.\nfunc simd_make_char64(simd_char32, simd_char32) -> simd_char64\nReturns a new vector from the specified vectors.\nfunc simd_make_char64_undef(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918249-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_uchar16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918116-simd_char",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_ushort16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_float16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917198-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_char16, simd_char16) -> simd_char16\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918345-simd_char",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements."
  },
  {
    "title": "simd_make_char64(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917282-simd_make_char64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_char64(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char64) -> simd_char64\nReturns a new vector from the specified vector.\nfunc simd_make_char64(simd_char32, simd_char32) -> simd_char64\nReturns a new vector from the specified vectors.\nfunc simd_make_char64_undef(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917090-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uchar4) -> UInt8\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_uchar4) -> UInt8\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918738-simd_char",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_uint16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_float16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_char64(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917467-simd_make_char64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_char64(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char64) -> simd_char64\nReturns a new vector from the specified vector.\nfunc simd_make_char64(simd_char32, simd_char32) -> simd_char64\nReturns a new vector from the specified vectors.\nfunc simd_make_char64_undef(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918225-simd_char",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_float16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917834-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_int16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_char64(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917352-simd_make_char64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_char64(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char64) -> simd_char64\nReturns a new vector from the specified vector.\nfunc simd_make_char64(simd_char32, simd_char32) -> simd_char64\nReturns a new vector from the specified vectors.\nfunc simd_make_char64_undef(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917612-simd_make_char16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Scalar Values\nfunc simd_make_char16_undef(CChar) -> simd_char16\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "vector16(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1574349-vector16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_char16(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char16) -> simd_char16\nReturns a new vector from the specified vector.\nfunc simd_make_char16(simd_char32) -> simd_char16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char16(simd_char64) -> simd_char16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc simd_make_char16_undef(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917427-simd_make_char16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_char16(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char32) -> simd_char16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char16(simd_char64) -> simd_char16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc simd_make_char16_undef(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917536-simd_make_char16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_char16(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char16) -> simd_char16\nReturns a new vector from the specified vector.\nfunc simd_make_char16(simd_char32) -> simd_char16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char16(simd_char64) -> simd_char16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc simd_make_char16_undef(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917962-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ushort16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_char16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917713-simd_make_char16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_char16(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char16) -> simd_char16\nReturns a new vector from the specified vector.\nfunc simd_make_char16(simd_char32) -> simd_char16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char16(simd_char64) -> simd_char16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc simd_make_char16_undef(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918337-simd_char",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_short16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_float16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_char64(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917651-simd_make_char64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_char64(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char32, simd_char32) -> simd_char64\nReturns a new vector from the specified vectors.\nfunc simd_make_char64_undef(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916868-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_char16) -> simd_char16\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_char16, simd_char16) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_make_char64(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867696-simd_make_char64",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_char64(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char64) -> simd_char64\nReturns a new vector from the specified vector.\nfunc simd_make_char64_undef(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char64_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917415-simd_make_char64_undef",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_char64(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char64) -> simd_char64\nReturns a new vector from the specified vector.\nfunc simd_make_char64(simd_char32, simd_char32) -> simd_char64\nReturns a new vector from the specified vectors.\nfunc simd_make_char64_undef(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char64_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917487-simd_make_char64_undef",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_char64(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char64) -> simd_char64\nReturns a new vector from the specified vector.\nfunc simd_make_char64(simd_char32, simd_char32) -> simd_char64\nReturns a new vector from the specified vectors.\nfunc simd_make_char64_undef(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917075-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_char16) -> simd_char16\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_char16, simd_char16, simd_char16) -> simd_char16\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_make_int16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917332-simd_make_int16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_int16(simd_int2) -> simd_int16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int4) -> simd_int16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int8) -> simd_int16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int16) -> simd_int16\nReturns a new vector from the specified vector.\nfunc simd_make_int16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc simd_make_int16_undef(simd_int2) -> simd_int16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int4) -> simd_int16\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918443-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_double3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918457-simd_int",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_short16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_float16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_int16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917614-simd_make_int16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_int16(simd_int2) -> simd_int16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int4) -> simd_int16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int8) -> simd_int16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc simd_make_int16_undef(simd_int2) -> simd_int16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int4) -> simd_int16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int8) -> simd_int16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918103-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar3) -> simd_char3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort3) -> simd_char3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong3) -> simd_char3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float3) -> simd_char3\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917803-simd_int",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_int16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_float16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_int16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917318-simd_make_int16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_int16(simd_int2) -> simd_int16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int4) -> simd_int16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int8) -> simd_int16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int16) -> simd_int16\nReturns a new vector from the specified vector.\nfunc simd_make_int16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc simd_make_int16_undef(simd_int2) -> simd_int16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int4) -> simd_int16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int8) -> simd_int16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_int16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917403-simd_make_int16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_int16(simd_int2) -> simd_int16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int8) -> simd_int16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int16) -> simd_int16\nReturns a new vector from the specified vector.\nfunc simd_make_int16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc simd_make_int16_undef(simd_int2) -> simd_int16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int4) -> simd_int16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int8) -> simd_int16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_int16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917237-simd_make_int16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_int16(simd_int2) -> simd_int16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int4) -> simd_int16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int8) -> simd_int16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int16) -> simd_int16\nReturns a new vector from the specified vector.\nfunc simd_make_int16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc simd_make_int16_undef(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int4) -> simd_int16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int8) -> simd_int16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_int16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917560-simd_make_int16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_int16(simd_int2) -> simd_int16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int4) -> simd_int16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int8) -> simd_int16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_int16(simd_int16) -> simd_int16\nReturns a new vector from the specified vector.\nfunc simd_make_int16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_int8, simd_int8) -> simd_int16\nReturns a new vector from the specified vectors.\nfunc simd_make_int16_undef(simd_int2) -> simd_int16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int3) -> simd_int16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int16_undef(simd_int8) -> simd_int16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917925-simd_int",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_float16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918145-simd_int",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_uchar16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_float16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917929-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_int16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918482-simd_int",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918661-simd_int",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_ushort16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_float16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918410-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_uint16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917823-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ushort16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918188-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar16) -> simd_int16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort16) -> simd_int16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_float16) -> simd_int16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917508-simd_make_uchar4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uchar4(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector.\nfunc simd_make_uchar4(simd_uchar8) -> simd_uchar4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar4(simd_uchar16) -> simd_uchar4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar4(simd_uchar32) -> simd_uchar4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar4(simd_uchar64) -> simd_uchar4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar4_undef(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar4_undef(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917946-simd_uint",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917047-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_char16) -> CChar\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_char16) -> CChar\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917037-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_char16, simd_char16) -> simd_char16\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916952-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_char64, simd_char64) -> simd_char64\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_make_uint3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867743-simd_make_uint3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_uint3(UInt32) -> simd_uint3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_uint3(UInt32, UInt32, UInt32) -> simd_uint3\nReturns a new vector from the specified scalar values.\nfunc vector3(UInt32, UInt32, UInt32) -> simd_uint3\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916820-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_uchar4) -> simd_bool\nfunc simd_bitselect(simd_uchar4, simd_uchar4, simd_char4) -> simd_uchar4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_uint3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896397-simd_make_uint3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_uint3(simd_uint2) -> simd_uint3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint3(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector.\nfunc simd_make_uint3(simd_uint8) -> simd_uint3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uint3(simd_uint16) -> simd_uint3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint3_undef(simd_uint2) -> simd_uint3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char64_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917501-simd_make_char64_undef",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_char64(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char64) -> simd_char64\nReturns a new vector from the specified vector.\nfunc simd_make_char64(simd_char32, simd_char32) -> simd_char64\nReturns a new vector from the specified vectors.\nfunc simd_make_char64_undef(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917032-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_equal(simd_uchar4, simd_uchar4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918419-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_make_int16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867681-simd_make_int16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Scalar Values\nfunc simd_make_int16(Int32) -> simd_int16\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916838-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_uchar4, simd_uchar4) -> simd_uchar4\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917080-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uchar4) -> UInt8\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_uchar4) -> UInt8\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917124-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uchar4, simd_uchar4) -> simd_uchar4\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916854-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_char64) -> simd_char64\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_char64, simd_char64, simd_char64) -> simd_char64\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_make_uchar4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917236-simd_make_uchar4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uchar4(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector.\nfunc simd_make_uchar4(simd_uchar8) -> simd_uchar4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar4(simd_uchar16) -> simd_uchar4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar4(simd_uchar32) -> simd_uchar4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar4(simd_uchar64) -> simd_uchar4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar4_undef(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917165-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_char64) -> CChar\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_char64) -> CChar\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916843-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_char64) -> simd_char64\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_char64, simd_char64) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916848-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_char64, simd_char64) -> simd_char64\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_make_uchar4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917529-simd_make_uchar4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uchar4(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector.\nfunc simd_make_uchar4(simd_uchar8) -> simd_uchar4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar4(simd_uchar16) -> simd_uchar4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar4(simd_uchar64) -> simd_uchar4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar4_undef(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar4_undef(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916735-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_char64) -> simd_bool\nfunc simd_bitselect(simd_char64, simd_char64, simd_char64) -> simd_char64\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916712-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_char64) -> simd_bool\nfunc simd_bitselect(simd_char64, simd_char64, simd_char64) -> simd_char64\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918029-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uchar4(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector.\nfunc simd_make_uchar4(simd_uchar8) -> simd_uchar4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar4(simd_uchar16) -> simd_uchar4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar4(simd_uchar32) -> simd_uchar4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar4(simd_uchar64) -> simd_uchar4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar4_undef(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar4_undef(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917551-simd_make_uchar4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uchar4(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector.\nfunc simd_make_uchar4(simd_uchar8) -> simd_uchar4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar4(simd_uchar16) -> simd_uchar4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar4(simd_uchar32) -> simd_uchar4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar4(simd_uchar64) -> simd_uchar4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar4_undef(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917498-simd_make_uchar4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uchar4(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector.\nfunc simd_make_uchar4(simd_uchar8) -> simd_uchar4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar4(simd_uchar16) -> simd_uchar4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar4(simd_uchar32) -> simd_uchar4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar4_undef(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar4_undef(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917347-simd_make_uchar4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uchar4(simd_uchar3, UInt8) -> simd_uchar4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_uchar3, UInt8) -> simd_uchar4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_uchar4(UInt8, UInt8, simd_uchar2) -> simd_uchar4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_uchar4(UInt8, simd_uchar2, UInt8) -> simd_uchar4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_uchar4(UInt8, simd_uchar3) -> simd_uchar4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "vector4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917809-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_uchar4(UInt8) -> simd_uchar4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_uchar4(UInt8, UInt8, UInt8, UInt8) -> simd_uchar4\nReturns a new vector from the specified scalar values.\nfunc simd_make_uchar4_undef(UInt8) -> simd_uchar4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_uchar4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867694-simd_make_uchar4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_uchar4(UInt8) -> simd_uchar4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector4(UInt8, UInt8, UInt8, UInt8) -> simd_uchar4\nReturns a new vector from the specified scalar values.\nfunc simd_make_uchar4_undef(UInt8) -> simd_uchar4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_uchar4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867656-simd_make_uchar4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_uchar4(UInt8) -> simd_uchar4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_uchar4(UInt8, UInt8, UInt8, UInt8) -> simd_uchar4\nReturns a new vector from the specified scalar values.\nfunc vector4(UInt8, UInt8, UInt8, UInt8) -> simd_uchar4\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917135-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_int16, simd_int16, simd_int16) -> simd_int16\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_int16, simd_int16) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917025-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int16) -> Int32\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_int16) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918621-simd_uchar",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917099-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_int16) -> Int32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_int16) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916989-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int16) -> simd_int16\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_int16, simd_int16) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916931-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int16) -> simd_int16\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_int16, simd_int16, simd_int16) -> simd_int16\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917222-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_int16, simd_int16) -> simd_int16\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917109-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int16, simd_int16) -> simd_int16\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916823-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_char16) -> simd_bool\nfunc simd_all(simd_char16) -> simd_bool"
  },
  {
    "title": "simd_make_char16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917438-simd_make_char16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_char16(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char16) -> simd_char16\nReturns a new vector from the specified vector.\nfunc simd_make_char16(simd_char32) -> simd_char16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char16(simd_char64) -> simd_char16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc simd_make_char16_undef(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917622-simd_make_char16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_char16(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char16) -> simd_char16\nReturns a new vector from the specified vector.\nfunc simd_make_char16(simd_char32) -> simd_char16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char16(simd_char64) -> simd_char16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc simd_make_char16_undef(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917628-simd_make_char16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_char16(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char16) -> simd_char16\nReturns a new vector from the specified vector.\nfunc simd_make_char16(simd_char32) -> simd_char16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc simd_make_char16_undef(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917249-simd_make_char16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_char16(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char16) -> simd_char16\nReturns a new vector from the specified vector.\nfunc simd_make_char16(simd_char32) -> simd_char16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char16(simd_char64) -> simd_char16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc simd_make_char16_undef(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916798-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_char16) -> simd_bool\nfunc simd_bitselect(simd_char16, simd_char16, simd_char16) -> simd_char16\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_char16(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867683-simd_make_char16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_char16(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char16) -> simd_char16\nReturns a new vector from the specified vector.\nfunc simd_make_char16(simd_char32) -> simd_char16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char16(simd_char64) -> simd_char16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc simd_make_char16_undef(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917577-simd_make_char16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_char16(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char4) -> simd_char16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char16(simd_char16) -> simd_char16\nReturns a new vector from the specified vector.\nfunc simd_make_char16(simd_char32) -> simd_char16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char16(simd_char64) -> simd_char16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_char8, simd_char8) -> simd_char16\nReturns a new vector from the specified vectors.\nfunc simd_make_char16_undef(simd_char2) -> simd_char16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char3) -> simd_char16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char16_undef(simd_char8) -> simd_char16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918407-simd_char",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_uchar16) -> simd_char16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort16) -> simd_char16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_float16) -> simd_char16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916925-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_char16) -> CChar\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_char16) -> CChar\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918574-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918710-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896491-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_int3) -> simd_bool\nReturns true if the high-order bit of any element is set; false otherwise.\nfunc simd_all(simd_int3) -> simd_bool\nReturns true if the high-order bit of every element is set; false otherwise."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917945-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918119-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_make_uint3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883276-simd_make_uint3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_uint3(UInt32, UInt32, UInt32) -> simd_uint3\nReturns a new vector from the specified scalar values.\nfunc vector3(UInt32, UInt32, UInt32) -> simd_uint3\nReturns a new vector from the specified scalar values.\nfunc simd_make_uint3_undef(UInt32) -> simd_uint3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918500-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916694-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_char8) -> simd_bool\nfunc simd_all(simd_char8) -> simd_bool"
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918512-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1426097-min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int3, simd_int3) -> simd_int3\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<Int32>, Int32) -> SIMD3<Int32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<Int32>, SIMD3<Int32>) -> SIMD3<Int32>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_int3, simd_int3) -> simd_int3\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<Int32>, Int32) -> SIMD3<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425527-min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int3, simd_int3) -> simd_int3\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<Int32>, Int32) -> SIMD3<Int32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<Int32>, SIMD3<Int32>) -> SIMD3<Int32>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_int3, simd_int3) -> simd_int3\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<Int32>, SIMD3<Int32>) -> SIMD3<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "int3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/int3",
    "html": "See Also\nAlternative Type Alias\ntypealias vector_int3"
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896395-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_int3) -> simd_bool\nReturns true if the high-order bit of any element is set; false otherwise.\nfunc simd_bitselect(simd_int3, simd_int3, simd_int3) -> simd_int3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425185-max",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int3, simd_int3) -> simd_int3\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<Int32>, Int32) -> SIMD3<Int32>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_int3, simd_int3) -> simd_int3\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<Int32>, Int32) -> SIMD3<Int32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<Int32>, SIMD3<Int32>) -> SIMD3<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896579-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int3, simd_int3) -> simd_int3\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<Int32>, Int32) -> SIMD3<Int32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<Int32>, SIMD3<Int32>) -> SIMD3<Int32>\nReturns the maximum value of each element in a vector.\nfunc min(SIMD3<Int32>, Int32) -> SIMD3<Int32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<Int32>, SIMD3<Int32>) -> SIMD3<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424645-max",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int3, simd_int3) -> simd_int3\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<Int32>, SIMD3<Int32>) -> SIMD3<Int32>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_int3, simd_int3) -> simd_int3\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<Int32>, Int32) -> SIMD3<Int32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<Int32>, SIMD3<Int32>) -> SIMD3<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896405-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896463-simd_max",
    "html": "See Also\nExtrema Functions\nfunc max(SIMD3<Int32>, Int32) -> SIMD3<Int32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<Int32>, SIMD3<Int32>) -> SIMD3<Int32>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_int3, simd_int3) -> simd_int3\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<Int32>, Int32) -> SIMD3<Int32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<Int32>, SIMD3<Int32>) -> SIMD3<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_make_int3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896498-simd_make_int3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_int3(simd_int2) -> simd_int3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int3(simd_int4) -> simd_int3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_int3(simd_int8) -> simd_int3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_int3(simd_int16) -> simd_int3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int3_undef(simd_int2) -> simd_int3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918123-simd_int",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_int3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917589-simd_make_int3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_int3(simd_int2) -> simd_int3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int3(simd_int3) -> simd_int3\nReturns a new vector from the specified vector.\nfunc simd_make_int3(simd_int4) -> simd_int3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_int3(simd_int8) -> simd_int3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_int3_undef(simd_int2) -> simd_int3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_int3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883609-simd_make_int3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_int3(Int32, Int32, Int32) -> simd_int3\nReturns a new vector from the specified scalar values.\nfunc vector3(Int32, Int32, Int32) -> simd_int3\nReturns a new vector from the specified scalar values.\nfunc simd_make_int3_undef(Int32) -> simd_int3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918025-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_int3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867686-simd_make_int3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_int3(Int32) -> simd_int3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector3(Int32, Int32, Int32) -> simd_int3\nReturns a new vector from the specified scalar values.\nfunc simd_make_int3_undef(Int32) -> simd_int3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916863-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_char64, simd_char64, simd_char64) -> simd_char64\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_char64, simd_char64) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_make_char64_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917382-simd_make_char64_undef",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_char64(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char64) -> simd_char64\nReturns a new vector from the specified vector.\nfunc simd_make_char64(simd_char32, simd_char32) -> simd_char64\nReturns a new vector from the specified vectors.\nfunc simd_make_char64_undef(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917060-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_char16) -> CChar\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_char16) -> CChar\nReturns the maximum value in a vector."
  },
  {
    "title": "vector3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2092222-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_int3(simd_int2, Int32) -> simd_int3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_int3(Int32, simd_int2) -> simd_int3\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_int3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883559-simd_make_int3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_int3(simd_int2, Int32) -> simd_int3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_int2, Int32) -> simd_int3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918576-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_char64_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917524-simd_make_char64_undef",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Other Vectors\nfunc simd_make_char64(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char8) -> simd_char64\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements set to zero.\nfunc simd_make_char64(simd_char64) -> simd_char64\nReturns a new vector from the specified vector.\nfunc simd_make_char64(simd_char32, simd_char32) -> simd_char64\nReturns a new vector from the specified vectors.\nfunc simd_make_char64_undef(simd_char2) -> simd_char64\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char3) -> simd_char64\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char4) -> simd_char64\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char16) -> simd_char64\nReturns a new vector from the specified sixteen-element vector, and other elements undefined.\nfunc simd_make_char64_undef(simd_char32) -> simd_char64\nReturns a new vector from the specified thirty two-element vector, and other elements undefined."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916770-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uchar4) -> simd_bool\nfunc simd_all(simd_uchar4) -> simd_bool"
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917146-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_uchar4) -> UInt8\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uchar4) -> UInt8\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_uchar4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917704-simd_make_uchar4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uchar4(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector.\nfunc simd_make_uchar4(simd_uchar8) -> simd_uchar4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar4(simd_uchar16) -> simd_uchar4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar4(simd_uchar32) -> simd_uchar4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar4(simd_uchar64) -> simd_uchar4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar4_undef(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar4_undef(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916750-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uchar4) -> simd_bool\nfunc simd_bitselect(simd_uchar4, simd_uchar4, simd_char4) -> simd_uchar4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916889-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uchar4, simd_uchar4, simd_uchar4) -> simd_uchar4\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_make_char64_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867695-simd_make_char64_undef",
    "html": "See Also\nFunctions to Create Sixty Four-Element Vectors From Scalar Values\nfunc simd_make_char64(CChar) -> simd_char64\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917171-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_char64) -> CChar\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_char64) -> CChar\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916756-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_char64) -> simd_bool\nfunc simd_all(simd_char64) -> simd_bool"
  },
  {
    "title": "simd_make_uchar4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917376-simd_make_uchar4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uchar4(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector.\nfunc simd_make_uchar4(simd_uchar16) -> simd_uchar4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar4(simd_uchar32) -> simd_uchar4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar4(simd_uchar64) -> simd_uchar4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar4_undef(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar4_undef(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917272-simd_make_uchar4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_uchar4(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar4(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector.\nfunc simd_make_uchar4(simd_uchar8) -> simd_uchar4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar4(simd_uchar16) -> simd_uchar4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar4(simd_uchar32) -> simd_uchar4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar4(simd_uchar64) -> simd_uchar4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector4(simd_uchar2, simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar4_undef(simd_uchar2) -> simd_uchar4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar4_undef(simd_uchar3) -> simd_uchar4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919029-simd_uint",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918039-simd_uchar",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918735-simd_uchar",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918015-simd_uchar",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917955-simd_uchar",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918463-simd_uchar",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918233-simd_uchar",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918688-simd_uchar",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918670-simd_uchar",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918367-simd_uchar",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917556-simd_make_uchar4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_uchar4(UInt8, UInt8, UInt8, UInt8) -> simd_uchar4\nReturns a new vector from the specified scalar values.\nfunc vector4(UInt8, UInt8, UInt8, UInt8) -> simd_uchar4\nReturns a new vector from the specified scalar values.\nfunc simd_make_uchar4_undef(UInt8) -> simd_uchar4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_uchar4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917629-simd_make_uchar4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uchar4(simd_uchar2, UInt8, UInt8) -> simd_uchar4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_uchar4(simd_uchar3, UInt8) -> simd_uchar4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_uchar3, UInt8) -> simd_uchar4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_uchar4(UInt8, UInt8, simd_uchar2) -> simd_uchar4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_uchar4(UInt8, simd_uchar2, UInt8) -> simd_uchar4\nReturns a new vector from a scalar value, a vector, and a scalar value."
  },
  {
    "title": "simd_make_uchar4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917593-simd_make_uchar4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uchar4(simd_uchar2, UInt8, UInt8) -> simd_uchar4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_uchar4(simd_uchar3, UInt8) -> simd_uchar4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_uchar3, UInt8) -> simd_uchar4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_uchar4(UInt8, simd_uchar2, UInt8) -> simd_uchar4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_uchar4(UInt8, simd_uchar3) -> simd_uchar4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918762-simd_uchar",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917357-simd_make_uchar4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uchar4(simd_uchar2, UInt8, UInt8) -> simd_uchar4\nReturns a new vector from a vector and scalar values.\nfunc vector4(simd_uchar3, UInt8) -> simd_uchar4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_uchar4(UInt8, UInt8, simd_uchar2) -> simd_uchar4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_uchar4(UInt8, simd_uchar2, UInt8) -> simd_uchar4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_uchar4(UInt8, simd_uchar3) -> simd_uchar4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918401-simd_uchar",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917997-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uchar4(simd_uchar2, UInt8, UInt8) -> simd_uchar4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_uchar4(simd_uchar3, UInt8) -> simd_uchar4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_uchar4(UInt8, UInt8, simd_uchar2) -> simd_uchar4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_uchar4(UInt8, simd_uchar2, UInt8) -> simd_uchar4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_uchar4(UInt8, simd_uchar3) -> simd_uchar4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918720-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uint_sat(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916822-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_char8) -> simd_bool\nfunc simd_bitselect(simd_char8, simd_char8, simd_char8) -> simd_char8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690539-reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint2) -> UInt32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD2<UInt32>) -> UInt32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_uint2) -> UInt32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD2<UInt32>) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint2) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896616-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896398-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc clamp(SIMD3<UInt32>, min: UInt32, max: UInt32) -> SIMD3<UInt32>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD3<UInt32>, min: SIMD3<UInt32>, max: SIMD3<UInt32>) -> SIMD3<UInt32>\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_uint3, simd_uint3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896470-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint3) -> UInt32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD3<UInt32>) -> UInt32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_uint3) -> UInt32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD3<UInt32>) -> UInt32\nReturns the maximum value in a vector.\nfunc reduce_add(SIMD3<UInt32>) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918190-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uint_sat(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896472-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uint3, simd_uint3, simd_uint3) -> simd_uint3\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD3<UInt32>, min: UInt32, max: UInt32) -> SIMD3<UInt32>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD3<UInt32>, min: SIMD3<UInt32>, max: SIMD3<UInt32>) -> SIMD3<UInt32>\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918210-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uint_sat(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918682-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uint_sat(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918132-simd_uint",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918055-simd_uint",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896647-simd_uint",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917895-simd_uint",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918484-simd_uint",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896425-simd_uint",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896730-simd_uint",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918560-simd_uint",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918725-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "vector3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2092226-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uint3(simd_uint2, UInt32) -> simd_uint3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_uint3(UInt32, simd_uint2) -> simd_uint3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918079-simd_uint",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883533-simd_make_uint3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_uint3(simd_uint2) -> simd_uint3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint3(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector.\nfunc simd_make_uint3(simd_uint4) -> simd_uint3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uint3(simd_uint8) -> simd_uint3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uint3(simd_uint16) -> simd_uint3\nReturns a new vector by truncating the specified sixteen-element vector."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918122-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_make_uint3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896622-simd_make_uint3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_uint3(simd_uint2) -> simd_uint3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint3(simd_uint4) -> simd_uint3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uint3(simd_uint8) -> simd_uint3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uint3(simd_uint16) -> simd_uint3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint3_undef(simd_uint2) -> simd_uint3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918400-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_make_uint3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883538-simd_make_uint3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uint3(simd_uint2, UInt32) -> simd_uint3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_uint2, UInt32) -> simd_uint3\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896408-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "vector_int3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vector_int3",
    "html": "See Also\nAlternative Type Alias\ntypealias int3\nDeprecated"
  },
  {
    "title": "vector3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918996-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_uint3(UInt32) -> simd_uint3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_uint3(UInt32, UInt32, UInt32) -> simd_uint3\nReturns a new vector from the specified scalar values.\nfunc simd_make_uint3_undef(UInt32) -> simd_uint3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_uint3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883309-simd_make_uint3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_uint3(UInt32, simd_uint2) -> simd_uint3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_uint2, UInt32) -> simd_uint3\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918412-simd_uint",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "BNNSArithmeticMaximum | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsarithmeticmaximum",
    "html": "See Also\nBinary Arithmetic Functions\nvar BNNSArithmeticAdd: BNNSArithmeticFunction\nAn operation that calculates the element-wise sum of its two inputs.\nvar BNNSArithmeticSubtract: BNNSArithmeticFunction\nAn operation that calculates the element-wise difference of its two inputs.\nvar BNNSArithmeticDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs.\nvar BNNSArithmeticDivideNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise division of its two inputs and returns zero if the divisor is zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticMultiply: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs.\nvar BNNSArithmeticMultiplyNoNaN: BNNSArithmeticFunction\nAn operation that calculates the element-wise product of its two inputs and returns zero, even if the first input is NaN or infinity.\nvar BNNSArithmeticPow: BNNSArithmeticFunction\nAn operation that calculates the element-wise first input raised to the power of its second input.\nvar BNNSArithmeticMinimum: BNNSArithmeticFunction\nAn operation that calculates the element-wise minimum of its two inputs.\nvar BNNSArithmeticFloorDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise floor division of its inputs.\nvar BNNSArithmeticTruncDivide: BNNSArithmeticFunction\nAn operation that calculates the element-wise truncated division of its inputs.\nvar BNNSArithmeticTruncRemainder: BNNSArithmeticFunction\nAn operation that calculates the element-wise remainder of truncated division of its inputs."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918316-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar4) -> simd_uchar4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort4) -> simd_uchar4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float4) -> simd_uchar4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double4) -> simd_uchar4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "uint2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/uint2",
    "html": "See Also\nAlternative Type Alias\ntypealias vector_uint2"
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896745-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_int3) -> simd_bool\nReturns true if the high-order bit of every element is set; false otherwise.\nfunc simd_bitselect(simd_int3, simd_int3, simd_int3) -> simd_int3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918293-simd_int",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_int3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883521-simd_make_int3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_int3(simd_int2) -> simd_int3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int3(simd_int3) -> simd_int3\nReturns a new vector from the specified vector.\nfunc simd_make_int3(simd_int4) -> simd_int3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_int3(simd_int8) -> simd_int3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_int3(simd_int16) -> simd_int3\nReturns a new vector by truncating the specified sixteen-element vector."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918586-simd_int",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918609-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1426095-reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int3) -> Int32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD3<Int32>) -> Int32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_float3) -> Float\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_int3) -> Int32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD3<Int32>) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425354-reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int3) -> Int32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD3<Int32>) -> Int32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_float3) -> Float\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD3<Int32>) -> Int32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_int3) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "clamp(_:min:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425756-clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int3) -> simd_int3\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD3<Int32>) -> SIMD3<Int32>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_int3, simd_int3, simd_int3) -> simd_int3\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD3<Int32>, min: SIMD3<Int32>, max: SIMD3<Int32>) -> SIMD3<Int32>\nReturns each element in a vector clamped to a specified scalar range.\nfunc simd_equal(simd_float3, simd_float3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "clamp(_:min:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424774-clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int3) -> simd_int3\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD3<Int32>) -> SIMD3<Int32>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_int3, simd_int3, simd_int3) -> simd_int3\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD3<Int32>, min: Int32, max: Int32) -> SIMD3<Int32>\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_float3, simd_float3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918535-simd_int",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918208-simd_int",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896497-simd_int",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896509-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int3) -> Int32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD3<Int32>) -> Int32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_float3) -> Float\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD3<Int32>) -> Int32\nReturns the maximum value in a vector.\nfunc reduce_add(SIMD3<Int32>) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896769-simd_int",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_int3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883300-simd_make_int3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc vector3(simd_int2, Int32) -> simd_int3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_int3(Int32, simd_int2) -> simd_int3\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896777-simd_int",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896634-simd_int",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918049-simd_int",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_int3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867738-simd_make_int3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_int3(Int32) -> simd_int3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_int3(Int32, Int32, Int32) -> simd_int3\nReturns a new vector from the specified scalar values.\nfunc vector3(Int32, Int32, Int32) -> simd_int3\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424749-reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int3) -> Int32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_float3) -> Float\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD3<Int32>) -> Int32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_int3) -> Int32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD3<Int32>) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918084-simd_int",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918347-simd_int",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896721-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc reduce_min(SIMD3<Int32>) -> Int32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_float3) -> Float\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD3<Int32>) -> Int32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_int3) -> Int32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD3<Int32>) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896422-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int3) -> simd_int3\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD3<Int32>) -> SIMD3<Int32>\nReturns the absolute value of each element in a vector.\nfunc clamp(SIMD3<Int32>, min: Int32, max: Int32) -> SIMD3<Int32>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD3<Int32>, min: SIMD3<Int32>, max: SIMD3<Int32>) -> SIMD3<Int32>\nReturns each element in a vector clamped to a specified scalar range.\nfunc simd_equal(simd_float3, simd_float3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_make_int3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883459-simd_make_int3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_int3(simd_int3) -> simd_int3\nReturns a new vector from the specified vector.\nfunc simd_make_int3(simd_int4) -> simd_int3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_int3(simd_int8) -> simd_int3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_int3(simd_int16) -> simd_int3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int3_undef(simd_int2) -> simd_int3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_int3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917485-simd_make_int3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_int3(simd_int2) -> simd_int3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int3(simd_int3) -> simd_int3\nReturns a new vector from the specified vector.\nfunc simd_make_int3(simd_int4) -> simd_int3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_int3(simd_int16) -> simd_int3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int3_undef(simd_int2) -> simd_int3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_int3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896588-simd_make_int3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_int3(simd_int2) -> simd_int3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int3(simd_int3) -> simd_int3\nReturns a new vector from the specified vector.\nfunc simd_make_int3(simd_int8) -> simd_int3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_int3(simd_int16) -> simd_int3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int3_undef(simd_int2) -> simd_int3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918534-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918514-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896493-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896418-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1640232-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_int3(Int32) -> simd_int3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_int3(Int32, Int32, Int32) -> simd_int3\nReturns a new vector from the specified scalar values.\nfunc simd_make_int3_undef(Int32) -> simd_int3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918183-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918591-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918342-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896580-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar3) -> simd_int3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort3) -> simd_int3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float3) -> simd_int3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double3) -> simd_int3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896710-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690582-min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint2, simd_uint2) -> simd_uint2\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<UInt32>, UInt32) -> SIMD2<UInt32>\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_uint2, simd_uint2) -> simd_uint2\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<UInt32>, UInt32) -> SIMD2<UInt32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<UInt32>, SIMD2<UInt32>) -> SIMD2<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_make_uint2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883429-simd_make_uint2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_uint2(UInt32, UInt32) -> simd_uint2\nReturns a new vector from the specified scalar values.\nfunc vector2(UInt32, UInt32) -> simd_uint2\nReturns a new vector from the specified scalar values.\nfunc simd_make_uint2_undef(UInt32) -> simd_uint2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918045-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896461-simd_uint",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918694-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918667-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917172-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_char4, simd_char4) -> simd_char4\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690511-min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint2, simd_uint2) -> simd_uint2\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<UInt32>, SIMD2<UInt32>) -> SIMD2<UInt32>\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_uint2, simd_uint2) -> simd_uint2\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<UInt32>, UInt32) -> SIMD2<UInt32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<UInt32>, SIMD2<UInt32>) -> SIMD2<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690521-reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint2) -> UInt32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_uint2) -> UInt32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD2<UInt32>) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint2) -> UInt32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD2<UInt32>) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_char8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917503-simd_make_char8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_char8(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char8) -> simd_char8\nReturns a new vector from the specified vector.\nfunc simd_make_char8(simd_char16) -> simd_char8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char8(simd_char32) -> simd_char8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_char8(simd_char64) -> simd_char8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc simd_make_char8_undef(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896567-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint2) -> UInt32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD2<UInt32>) -> UInt32\nReturns the minimum value in a vector.\nfunc reduce_max(SIMD2<UInt32>) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint2) -> UInt32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD2<UInt32>) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896611-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896760-simd_abs",
    "html": "See Also\nCommon Functions\nfunc abs(SIMD3<Int32>) -> SIMD3<Int32>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_int3, simd_int3, simd_int3) -> simd_int3\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD3<Int32>, min: Int32, max: Int32) -> SIMD3<Int32>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD3<Int32>, min: SIMD3<Int32>, max: SIMD3<Int32>) -> SIMD3<Int32>\nReturns each element in a vector clamped to a specified scalar range.\nfunc simd_equal(simd_float3, simd_float3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918708-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uint_sat(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918623-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uint_sat(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_make_char8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917385-simd_make_char8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_char8(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char8) -> simd_char8\nReturns a new vector from the specified vector.\nfunc simd_make_char8(simd_char16) -> simd_char8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char8(simd_char32) -> simd_char8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_char8(simd_char64) -> simd_char8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc simd_make_char8_undef(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918241-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uint_sat(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "clamp(_:min:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690538-clamp",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uint3, simd_uint3, simd_uint3) -> simd_uint3\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD3<UInt32>, min: UInt32, max: UInt32) -> SIMD3<UInt32>\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_uint3, simd_uint3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "clamp(_:min:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690545-clamp",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uint3, simd_uint3, simd_uint3) -> simd_uint3\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD3<UInt32>, min: SIMD3<UInt32>, max: SIMD3<UInt32>) -> SIMD3<UInt32>\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_uint3, simd_uint3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690558-reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint3) -> UInt32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_uint3) -> UInt32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD3<UInt32>) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint3) -> UInt32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD3<UInt32>) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896626-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc reduce_min(SIMD3<UInt32>) -> UInt32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_uint3) -> UInt32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD3<UInt32>) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint3) -> UInt32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD3<UInt32>) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896720-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uint_sat(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690536-reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint3) -> UInt32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD3<UInt32>) -> UInt32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_uint3) -> UInt32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD3<UInt32>) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint3) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "clamp(_:min:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690565-clamp",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uint2, simd_uint2, simd_uint2) -> simd_uint2\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD2<UInt32>, min: SIMD2<UInt32>, max: SIMD2<UInt32>) -> SIMD2<UInt32>\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_uint2, simd_uint2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690537-reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint3) -> UInt32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD3<UInt32>) -> UInt32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_uint3) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint3) -> UInt32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD3<UInt32>) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896432-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uint3) -> simd_bool\nReturns true if the high-order bit of any element is set; false otherwise.\nfunc simd_bitselect(simd_uint3, simd_uint3, simd_int3) -> simd_uint3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896673-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint3) -> UInt32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD3<UInt32>) -> UInt32\nReturns the minimum value in a vector.\nfunc reduce_max(SIMD3<UInt32>) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint3) -> UInt32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD3<UInt32>) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690585-max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint3, simd_uint3) -> simd_uint3\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<UInt32>, UInt32) -> SIMD3<UInt32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<UInt32>, SIMD3<UInt32>) -> SIMD3<UInt32>\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_uint3, simd_uint3) -> simd_uint3\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<UInt32>, SIMD3<UInt32>) -> SIMD3<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "vector_uint3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vector_uint3",
    "html": "See Also\nAlternative Type Alias\ntypealias uint3\nDeprecated"
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918523-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uint_sat(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690576-max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint3, simd_uint3) -> simd_uint3\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<UInt32>, UInt32) -> SIMD3<UInt32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<UInt32>, SIMD3<UInt32>) -> SIMD3<UInt32>\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_uint3, simd_uint3) -> simd_uint3\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<UInt32>, UInt32) -> SIMD3<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896484-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uint_sat(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896474-simd_min",
    "html": "See Also\nExtrema Functions\nfunc min(SIMD3<UInt32>, UInt32) -> SIMD3<UInt32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<UInt32>, SIMD3<UInt32>) -> SIMD3<UInt32>\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_uint3, simd_uint3) -> simd_uint3\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<UInt32>, UInt32) -> SIMD3<UInt32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<UInt32>, SIMD3<UInt32>) -> SIMD3<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896718-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_uint3) -> simd_bool\nReturns true if the high-order bit of every element is set; false otherwise.\nfunc simd_bitselect(simd_uint3, simd_uint3, simd_int3) -> simd_uint3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424075-abs",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int3) -> simd_int3\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_int3, simd_int3, simd_int3) -> simd_int3\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD3<Int32>, min: Int32, max: Int32) -> SIMD3<Int32>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD3<Int32>, min: SIMD3<Int32>, max: SIMD3<Int32>) -> SIMD3<Int32>\nReturns each element in a vector clamped to a specified scalar range.\nfunc simd_equal(simd_float3, simd_float3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690544-min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint3, simd_uint3) -> simd_uint3\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<UInt32>, SIMD3<UInt32>) -> SIMD3<UInt32>\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_uint3, simd_uint3) -> simd_uint3\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<UInt32>, UInt32) -> SIMD3<UInt32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<UInt32>, SIMD3<UInt32>) -> SIMD3<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690528-min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint3, simd_uint3) -> simd_uint3\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<UInt32>, UInt32) -> SIMD3<UInt32>\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_uint3, simd_uint3) -> simd_uint3\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<UInt32>, UInt32) -> SIMD3<UInt32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<UInt32>, SIMD3<UInt32>) -> SIMD3<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896520-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uint3) -> simd_bool\nReturns true if the high-order bit of any element is set; false otherwise.\nfunc simd_all(simd_uint3) -> simd_bool\nReturns true if the high-order bit of every element is set; false otherwise."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896681-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint3, simd_uint3) -> simd_uint3\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<UInt32>, UInt32) -> SIMD3<UInt32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD3<UInt32>, SIMD3<UInt32>) -> SIMD3<UInt32>\nReturns the minimum value of each element in a vector.\nfunc max(SIMD3<UInt32>, UInt32) -> SIMD3<UInt32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD3<UInt32>, SIMD3<UInt32>) -> SIMD3<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "uint3 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/uint3",
    "html": "See Also\nAlternative Type Alias\ntypealias vector_uint3"
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896689-simd_uint",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar3) -> simd_uint3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort3) -> simd_uint3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_double3) -> simd_uint3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690578-max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint2, simd_uint2) -> simd_uint2\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<UInt32>, UInt32) -> SIMD2<UInt32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<UInt32>, SIMD2<UInt32>) -> SIMD2<UInt32>\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_uint2, simd_uint2) -> simd_uint2\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<UInt32>, SIMD2<UInt32>) -> SIMD2<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_make_uint3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867745-simd_make_uint3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_uint3(UInt32) -> simd_uint3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector3(UInt32, UInt32, UInt32) -> simd_uint3\nReturns a new vector from the specified scalar values.\nfunc simd_make_uint3_undef(UInt32) -> simd_uint3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_uint3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917231-simd_make_uint3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_uint3(simd_uint2) -> simd_uint3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint3(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector.\nfunc simd_make_uint3(simd_uint4) -> simd_uint3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uint3(simd_uint16) -> simd_uint3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint3_undef(simd_uint2) -> simd_uint3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896759-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_uint2) -> simd_bool\nReturns true if the high-order bit of every element is set; false otherwise.\nfunc simd_bitselect(simd_uint2, simd_uint2, simd_int2) -> simd_uint2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_uint3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917555-simd_make_uint3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_uint3(simd_uint2) -> simd_uint3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uint3(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector.\nfunc simd_make_uint3(simd_uint4) -> simd_uint3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uint3(simd_uint8) -> simd_uint3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uint3_undef(simd_uint2) -> simd_uint3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919027-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918219-simd_uint",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896628-simd_uint",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883642-simd_make_uint3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_uint3(simd_uint3) -> simd_uint3\nReturns a new vector from the specified vector.\nfunc simd_make_uint3(simd_uint4) -> simd_uint3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uint3(simd_uint8) -> simd_uint3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uint3(simd_uint16) -> simd_uint3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uint3_undef(simd_uint2) -> simd_uint3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917919-simd_uint",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896407-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uint2) -> simd_bool\nReturns true if the high-order bit of any element is set; false otherwise.\nfunc simd_bitselect(simd_uint2, simd_uint2, simd_int2) -> simd_uint2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918447-simd_uint",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883416-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uint2) -> simd_bool\nReturns true if the high-order bit of any element is set; false otherwise.\nfunc simd_all(simd_uint2) -> simd_bool\nReturns true if the high-order bit of every element is set; false otherwise."
  },
  {
    "title": "max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690594-max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint2, simd_uint2) -> simd_uint2\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<UInt32>, UInt32) -> SIMD2<UInt32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<UInt32>, SIMD2<UInt32>) -> SIMD2<UInt32>\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_uint2, simd_uint2) -> simd_uint2\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<UInt32>, UInt32) -> SIMD2<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "vector_uint2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vector_uint2",
    "html": "See Also\nAlternative Type Alias\ntypealias uint2\nDeprecated"
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918632-simd_uint",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918732-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918050-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917939-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896591-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873851-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918689-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918326-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918318-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918148-simd_uint_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uint_sat(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint_sat(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint_sat(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint_sat(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint_sat(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint_sat(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint_sat(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916963-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_char8, simd_char8) -> simd_char8\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916983-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_char8, simd_char8) -> simd_char8\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916725-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_char8) -> simd_bool\nfunc simd_bitselect(simd_char8, simd_char8, simd_char8) -> simd_char8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917152-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_char8) -> CChar\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_char8) -> CChar\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917061-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_char8, simd_char8, simd_char8) -> simd_char8\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_char8, simd_char8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918234-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917831-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917064-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_char8) -> simd_char8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_char8, simd_char8, simd_char8) -> simd_char8\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918153-simd_char",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916937-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_char8) -> simd_char8\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_char8, simd_char8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916840-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_char8) -> CChar\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_char8) -> CChar\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918557-simd_char",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917926-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918655-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916837-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_char8) -> CChar\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_char8) -> CChar\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918128-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896419-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint2) -> UInt32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD2<UInt32>) -> UInt32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_uint2) -> UInt32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD2<UInt32>) -> UInt32\nReturns the maximum value in a vector.\nfunc reduce_add(SIMD2<UInt32>) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918446-simd_char",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918333-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918751-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "clamp(_:min:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690579-clamp",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uint2, simd_uint2, simd_uint2) -> simd_uint2\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD2<UInt32>, min: UInt32, max: UInt32) -> SIMD2<UInt32>\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_uint2, simd_uint2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896392-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uint2, simd_uint2) -> simd_uint2\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<UInt32>, UInt32) -> SIMD2<UInt32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<UInt32>, SIMD2<UInt32>) -> SIMD2<UInt32>\nReturns the minimum value of each element in a vector.\nfunc max(SIMD2<UInt32>, UInt32) -> SIMD2<UInt32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<UInt32>, SIMD2<UInt32>) -> SIMD2<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896479-simd_min",
    "html": "See Also\nExtrema Functions\nfunc min(SIMD2<UInt32>, UInt32) -> SIMD2<UInt32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<UInt32>, SIMD2<UInt32>) -> SIMD2<UInt32>\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_uint2, simd_uint2) -> simd_uint2\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<UInt32>, UInt32) -> SIMD2<UInt32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<UInt32>, SIMD2<UInt32>) -> SIMD2<UInt32>\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896453-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uint2, simd_uint2, simd_uint2) -> simd_uint2\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD2<UInt32>, min: UInt32, max: UInt32) -> SIMD2<UInt32>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD2<UInt32>, min: SIMD2<UInt32>, max: SIMD2<UInt32>) -> SIMD2<UInt32>\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896506-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc clamp(SIMD2<UInt32>, min: UInt32, max: UInt32) -> SIMD2<UInt32>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD2<UInt32>, min: SIMD2<UInt32>, max: SIMD2<UInt32>) -> SIMD2<UInt32>\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_uint2, simd_uint2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1690543-reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uint2) -> UInt32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD2<UInt32>) -> UInt32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_uint2) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint2) -> UInt32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD2<UInt32>) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896703-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc reduce_min(SIMD2<UInt32>) -> UInt32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_uint2) -> UInt32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD2<UInt32>) -> UInt32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uint2) -> UInt32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD2<UInt32>) -> UInt32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_uint2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883382-simd_make_uint2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_uint2(simd_uint3) -> simd_uint2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_uint2(simd_uint4) -> simd_uint2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uint2(simd_uint8) -> simd_uint2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uint2(simd_uint16) -> simd_uint2\nReturns a new vector by truncating the specified sixteen-element vector."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918592-simd_char",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896692-simd_make_uint2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_uint2(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector.\nfunc simd_make_uint2(simd_uint3) -> simd_uint2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_uint2(simd_uint8) -> simd_uint2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uint2(simd_uint16) -> simd_uint2\nReturns a new vector by truncating the specified sixteen-element vector."
  },
  {
    "title": "simd_make_uint2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896516-simd_make_uint2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_uint2(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector.\nfunc simd_make_uint2(simd_uint4) -> simd_uint2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uint2(simd_uint8) -> simd_uint2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uint2(simd_uint16) -> simd_uint2\nReturns a new vector by truncating the specified sixteen-element vector."
  },
  {
    "title": "simd_make_uint2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917688-simd_make_uint2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_uint2(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector.\nfunc simd_make_uint2(simd_uint3) -> simd_uint2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_uint2(simd_uint4) -> simd_uint2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uint2(simd_uint16) -> simd_uint2\nReturns a new vector by truncating the specified sixteen-element vector."
  },
  {
    "title": "simd_make_uint2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917306-simd_make_uint2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_uint2(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector.\nfunc simd_make_uint2(simd_uint3) -> simd_uint2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_uint2(simd_uint4) -> simd_uint2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uint2(simd_uint8) -> simd_uint2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_make_char32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917631-simd_make_char32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_char32(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char32) -> simd_char32\nReturns a new vector from the specified vector.\nfunc simd_make_char32(simd_char64) -> simd_char32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc simd_make_char32_undef(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918068-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918432-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_char4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917491-simd_make_char4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_char4(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char4) -> simd_char4\nReturns a new vector from the specified vector.\nfunc simd_make_char4(simd_char8) -> simd_char4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char4(simd_char16) -> simd_char4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char4(simd_char32) -> simd_char4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char4(simd_char64) -> simd_char4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc simd_make_char4_undef(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char4_undef(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918300-simd_char",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_char4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917378-simd_make_char4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Value\nfunc simd_make_char4(simd_char2, CChar, CChar) -> simd_char4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_char4(simd_char3, CChar) -> simd_char4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_char3, CChar) -> simd_char4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_char4(CChar, CChar, simd_char2) -> simd_char4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_char4(CChar, simd_char2, CChar) -> simd_char4\nReturns a new vector from a scalar value, a vector, and a scalar value."
  },
  {
    "title": "simd_make_char8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867662-simd_make_char8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_char8(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char8) -> simd_char8\nReturns a new vector from the specified vector.\nfunc simd_make_char8(simd_char16) -> simd_char8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char8(simd_char32) -> simd_char8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_char8(simd_char64) -> simd_char8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc simd_make_char8_undef(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917732-simd_make_char8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_char8(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char8) -> simd_char8\nReturns a new vector from the specified vector.\nfunc simd_make_char8(simd_char16) -> simd_char8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char8(simd_char32) -> simd_char8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_char8(simd_char64) -> simd_char8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc simd_make_char8_undef(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918020-simd_char",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_char4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917719-simd_make_char4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_char4(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char4) -> simd_char4\nReturns a new vector from the specified vector.\nfunc simd_make_char4(simd_char8) -> simd_char4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char4(simd_char16) -> simd_char4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char4(simd_char32) -> simd_char4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc simd_make_char4_undef(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char4_undef(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918098-simd_uint",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916729-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_char4) -> simd_bool\nfunc simd_all(simd_char4) -> simd_bool"
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916759-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_char32) -> simd_bool\nfunc simd_all(simd_char32) -> simd_bool"
  },
  {
    "title": "simd_make_char32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917664-simd_make_char32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_char32(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char32) -> simd_char32\nReturns a new vector from the specified vector.\nfunc simd_make_char32(simd_char64) -> simd_char32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc simd_make_char32_undef(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uint2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867737-simd_make_uint2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_uint2(UInt32) -> simd_uint2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector2(UInt32, UInt32) -> simd_uint2\nReturns a new vector from the specified scalar values.\nfunc simd_make_uint2_undef(UInt32) -> simd_uint2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917830-simd_char",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918994-vector2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_uint2(UInt32) -> simd_uint2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_uint2(UInt32, UInt32) -> simd_uint2\nReturns a new vector from the specified scalar values.\nfunc simd_make_uint2_undef(UInt32) -> simd_uint2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917994-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917865-simd_uint",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uint2_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867705-simd_make_uint2_undef",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_uint2(UInt32) -> simd_uint2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_uint2(UInt32, UInt32) -> simd_uint2\nReturns a new vector from the specified scalar values.\nfunc vector2(UInt32, UInt32) -> simd_uint2\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918704-simd_uint",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896551-simd_uint",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_int2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uint(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873857-simd_uint",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uint(simd_char2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uint(simd_uchar2) -> simd_uint2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uint(simd_short2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uint(simd_ushort2) -> simd_uint2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uint(simd_uint2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_long2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_ulong2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uint(simd_float2) -> simd_uint2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uint(simd_double2) -> simd_uint2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917914-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917911-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_char32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917450-simd_make_char32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_char32(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char64) -> simd_char32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc simd_make_char32_undef(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896655-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc reduce_min(SIMD4<Int32>) -> Int32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_int4) -> Int32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD4<Int32>) -> Int32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_int4) -> Int32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD4<Int32>) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918325-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917142-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_char4, simd_char4, simd_char4) -> simd_char4\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_char4, simd_char4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "clamp(_:min:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424889-clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int4) -> simd_int4\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD4<Int32>) -> SIMD4<Int32>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_int4, simd_int4, simd_int4) -> simd_int4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Int32>, min: SIMD4<Int32>, max: SIMD4<Int32>) -> SIMD4<Int32>\nReturns each element in a vector clamped to a specified scalar range.\nfunc simd_equal(simd_int4, simd_int4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917811-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918422-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896460-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int4) -> simd_int4\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD4<Int32>) -> SIMD4<Int32>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_int4, simd_int4, simd_int4) -> simd_int4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Int32>, min: Int32, max: Int32) -> SIMD4<Int32>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Int32>, min: SIMD4<Int32>, max: SIMD4<Int32>) -> SIMD4<Int32>\nReturns each element in a vector clamped to a specified scalar range."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918045-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918169-simd_char",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918503-simd_char",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector32(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1574339-vector32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_char32(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char32) -> simd_char32\nReturns a new vector from the specified vector.\nfunc simd_make_char32(simd_char64) -> simd_char32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc simd_make_char32_undef(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917712-simd_make_char32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_char32(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char32) -> simd_char32\nReturns a new vector from the specified vector.\nfunc simd_make_char32(simd_char64) -> simd_char32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc simd_make_char32_undef(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918198-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896620-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_int4) -> simd_bool\nReturns true if the high-order bit of any element is set; false otherwise.\nfunc simd_all(simd_int4) -> simd_bool\nReturns true if the high-order bit of every element is set; false otherwise."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918047-simd_char",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_char8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917506-simd_make_char8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_char8(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char8) -> simd_char8\nReturns a new vector from the specified vector.\nfunc simd_make_char8(simd_char32) -> simd_char8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_char8(simd_char64) -> simd_char8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc simd_make_char8_undef(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917250-simd_make_char8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_char8(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char16) -> simd_char8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char8(simd_char32) -> simd_char8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_char8(simd_char64) -> simd_char8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc simd_make_char8_undef(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917889-simd_char",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_char8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917482-simd_make_char8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_char8(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char8) -> simd_char8\nReturns a new vector from the specified vector.\nfunc simd_make_char8(simd_char16) -> simd_char8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char8(simd_char32) -> simd_char8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_char8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc simd_make_char8_undef(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918207-simd_char",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1574342-vector8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_char8(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char8) -> simd_char8\nReturns a new vector from the specified vector.\nfunc simd_make_char8(simd_char16) -> simd_char8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char8(simd_char32) -> simd_char8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_char8(simd_char64) -> simd_char8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc simd_make_char8_undef(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918224-simd_char",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_char8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917600-simd_make_char8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_char8(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char8) -> simd_char8\nReturns a new vector from the specified vector.\nfunc simd_make_char8(simd_char16) -> simd_char8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char8(simd_char64) -> simd_char8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc simd_make_char8_undef(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917475-simd_make_char8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_char8(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char8) -> simd_char8\nReturns a new vector from the specified vector.\nfunc simd_make_char8(simd_char16) -> simd_char8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char8(simd_char32) -> simd_char8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_char8(simd_char64) -> simd_char8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc simd_make_char8_undef(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918524-simd_char",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918378-simd_char",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919031-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_char2) -> CChar\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_char2) -> CChar\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_char4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917623-simd_make_char4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_char4(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char4) -> simd_char4\nReturns a new vector from the specified vector.\nfunc simd_make_char4(simd_char8) -> simd_char4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char4(simd_char16) -> simd_char4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char4(simd_char32) -> simd_char4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char4(simd_char64) -> simd_char4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc simd_make_char4_undef(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char4_undef(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918403-simd_char",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_char4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917499-simd_make_char4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_char4(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char8) -> simd_char4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char4(simd_char16) -> simd_char4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char4(simd_char32) -> simd_char4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char4(simd_char64) -> simd_char4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc simd_make_char4_undef(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char4_undef(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916784-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_char4) -> simd_bool\nfunc simd_bitselect(simd_char4, simd_char4, simd_char4) -> simd_char4"
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918356-simd_char",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917170-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_char32) -> simd_char32\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_char32, simd_char32) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919036-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_char2) -> CChar\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_char2) -> CChar\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_make_char4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917697-simd_make_char4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_char4(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char4) -> simd_char4\nReturns a new vector from the specified vector.\nfunc simd_make_char4(simd_char8) -> simd_char4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char4(simd_char32) -> simd_char4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char4(simd_char64) -> simd_char4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc simd_make_char4_undef(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char4_undef(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918377-simd_char",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918270-simd_char",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918275-simd_char",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918170-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_char4(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char4) -> simd_char4\nReturns a new vector from the specified vector.\nfunc simd_make_char4(simd_char8) -> simd_char4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char4(simd_char16) -> simd_char4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char4(simd_char32) -> simd_char4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char4(simd_char64) -> simd_char4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc simd_make_char4_undef(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char4_undef(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918608-simd_char",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_uchar8) -> simd_char8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort8) -> simd_char8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float8) -> simd_char8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double8) -> simd_char8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_char8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917247-simd_make_char8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_char8(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char8) -> simd_char8\nReturns a new vector from the specified vector.\nfunc simd_make_char8(simd_char16) -> simd_char8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char8(simd_char32) -> simd_char8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_char8(simd_char64) -> simd_char8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc simd_make_char8_undef(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917678-simd_make_char8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_char8_undef(CChar) -> simd_char8\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916817-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_char32) -> simd_bool\nfunc simd_bitselect(simd_char32, simd_char32, simd_char32) -> simd_char32\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_char8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917320-simd_make_char8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_char8(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char3) -> simd_char8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char8(simd_char8) -> simd_char8\nReturns a new vector from the specified vector.\nfunc simd_make_char8(simd_char16) -> simd_char8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char8(simd_char32) -> simd_char8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_char8(simd_char64) -> simd_char8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_char4, simd_char4) -> simd_char8\nReturns a new vector from the specified vectors.\nfunc simd_make_char8_undef(simd_char2) -> simd_char8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char8_undef(simd_char4) -> simd_char8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917284-simd_make_char4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_char4(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char4) -> simd_char4\nReturns a new vector from the specified vector.\nfunc simd_make_char4(simd_char8) -> simd_char4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char4(simd_char16) -> simd_char4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char4(simd_char32) -> simd_char4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char4(simd_char64) -> simd_char4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc simd_make_char4_undef(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917093-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_char32, simd_char32) -> simd_char32\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916888-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_char32, simd_char32) -> simd_char32\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916811-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_char32) -> simd_bool\nfunc simd_bitselect(simd_char32, simd_char32, simd_char32) -> simd_char32\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917856-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char32) -> simd_char32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_short32) -> simd_char32\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort32) -> simd_char32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_make_char32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917304-simd_make_char32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_char32(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char32) -> simd_char32\nReturns a new vector from the specified vector.\nfunc simd_make_char32(simd_char64) -> simd_char32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc simd_make_char32_undef(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873854-simd_char",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917880-simd_char",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char32) -> simd_char32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar32) -> simd_char32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_ushort32) -> simd_char32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916853-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_char4) -> CChar\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_char4) -> CChar\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_char32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917504-simd_make_char32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_char32(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char32) -> simd_char32\nReturns a new vector from the specified vector.\nfunc simd_make_char32(simd_char64) -> simd_char32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc simd_make_char32_undef(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918467-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char32) -> simd_char32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar32) -> simd_char32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ushort32) -> simd_char32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918368-simd_char",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char32) -> simd_char32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar32) -> simd_char32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short32) -> simd_char32\nReturns a new vector from the specified vector of 16-bit, signed integer elements."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917148-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_char4) -> CChar\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_char4) -> CChar\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917861-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918406-simd_char",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917896-simd_char",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_uchar32) -> simd_char32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short32) -> simd_char32\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort32) -> simd_char32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916705-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_char4) -> simd_bool\nfunc simd_bitselect(simd_char4, simd_char4, simd_char4) -> simd_char4"
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918600-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917206-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_char4) -> simd_char4\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_char4, simd_char4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916984-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_char4, simd_char4) -> simd_char4\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916911-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_char4) -> simd_char4\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_char4, simd_char4, simd_char4) -> simd_char4\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918474-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918388-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918596-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918373-simd_char",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917971-simd_char",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_char4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917568-simd_make_char4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_char4(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char4) -> simd_char4\nReturns a new vector from the specified vector.\nfunc simd_make_char4(simd_char8) -> simd_char4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char4(simd_char16) -> simd_char4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char4(simd_char32) -> simd_char4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char4(simd_char64) -> simd_char4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc simd_make_char4_undef(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917740-simd_make_char4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc vector4(CChar, CChar, CChar, CChar) -> simd_char4\nReturns a new vector from the specified scalar values.\nfunc simd_make_char4(CChar, CChar, CChar, CChar) -> simd_char4\nReturns a new vector from the specified scalar values.\nfunc simd_make_char4_undef(CChar) -> simd_char4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_char4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917507-simd_make_char4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_char4(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char4) -> simd_char4\nReturns a new vector from the specified vector.\nfunc simd_make_char4(simd_char8) -> simd_char4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char4(simd_char16) -> simd_char4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char4(simd_char32) -> simd_char4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char4(simd_char64) -> simd_char4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc simd_make_char4_undef(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char4_undef(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867690-simd_make_char4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_char4(CChar) -> simd_char4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector4(CChar, CChar, CChar, CChar) -> simd_char4\nReturns a new vector from the specified scalar values.\nfunc simd_make_char4_undef(CChar) -> simd_char4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424533-max",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int4, simd_int4) -> simd_int4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Int32>, Int32) -> SIMD4<Int32>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_int4, simd_int4) -> simd_int4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Int32>, Int32) -> SIMD4<Int32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Int32>, SIMD4<Int32>) -> SIMD4<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_make_char4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917414-simd_make_char4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_char4(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char4) -> simd_char4\nReturns a new vector from the specified vector.\nfunc simd_make_char4(simd_char8) -> simd_char4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char4(simd_char16) -> simd_char4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char4(simd_char64) -> simd_char4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc simd_make_char4_undef(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char4_undef(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918309-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Value\nfunc simd_make_char4(simd_char2, CChar, CChar) -> simd_char4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_char4(simd_char3, CChar) -> simd_char4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_char4(CChar, CChar, simd_char2) -> simd_char4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_char4(CChar, simd_char2, CChar) -> simd_char4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_char4(CChar, simd_char3) -> simd_char4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_char4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917583-simd_make_char4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_char4(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char4(simd_char4) -> simd_char4\nReturns a new vector from the specified vector.\nfunc simd_make_char4(simd_char16) -> simd_char4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char4(simd_char32) -> simd_char4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char4(simd_char64) -> simd_char4\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_char2, simd_char2) -> simd_char4\nReturns a new vector from the specified vectors.\nfunc simd_make_char4_undef(simd_char2) -> simd_char4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char4_undef(simd_char3) -> simd_char4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917459-simd_make_char4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Value\nfunc simd_make_char4(simd_char3, CChar) -> simd_char4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_char3, CChar) -> simd_char4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_char4(CChar, CChar, simd_char2) -> simd_char4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_char4(CChar, simd_char2, CChar) -> simd_char4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_char4(CChar, simd_char3) -> simd_char4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_char4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917400-simd_make_char4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Value\nfunc simd_make_char4(simd_char2, CChar, CChar) -> simd_char4\nReturns a new vector from a vector and scalar values.\nfunc vector4(simd_char3, CChar) -> simd_char4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_char4(CChar, CChar, simd_char2) -> simd_char4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_char4(CChar, simd_char2, CChar) -> simd_char4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_char4(CChar, simd_char3) -> simd_char4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_char4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917636-simd_make_char4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Value\nfunc simd_make_char4(simd_char2, CChar, CChar) -> simd_char4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_char4(simd_char3, CChar) -> simd_char4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_char3, CChar) -> simd_char4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_char4(CChar, simd_char2, CChar) -> simd_char4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_char4(CChar, simd_char3) -> simd_char4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "vector4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918997-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_char4(CChar) -> simd_char4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_char4(CChar, CChar, CChar, CChar) -> simd_char4\nReturns a new vector from the specified scalar values.\nfunc simd_make_char4_undef(CChar) -> simd_char4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917155-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_char32) -> CChar\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_char32) -> CChar\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918691-simd_char",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar4) -> simd_char4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort4) -> simd_char4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float4) -> simd_char4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double4) -> simd_char4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918673-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_char4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917446-simd_make_char4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Value\nfunc simd_make_char4(simd_char2, CChar, CChar) -> simd_char4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_char4(simd_char3, CChar) -> simd_char4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_char3, CChar) -> simd_char4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_char4(CChar, CChar, simd_char2) -> simd_char4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_char4(CChar, simd_char3) -> simd_char4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_char2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917677-simd_make_char2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_char2(simd_char3) -> simd_char2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_char2(simd_char4) -> simd_char2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_char2(simd_char8) -> simd_char2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char2(simd_char16) -> simd_char2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char2(simd_char32) -> simd_char2\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char2(simd_char64) -> simd_char2\nReturns a new vector by truncating the specified sixty four-element vector."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918108-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919035-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_char2, simd_char2) -> simd_char2\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_make_int4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883351-simd_make_int4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_int4(simd_int2) -> simd_int4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int4(simd_int3) -> simd_int4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int4(simd_int4) -> simd_int4\nReturns a new vector from the specified vector.\nfunc simd_make_int4(simd_int8) -> simd_int4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_int4(simd_int16) -> simd_int4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int4(simd_int2, simd_int2) -> simd_int4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_int2, simd_int2) -> simd_int4\nReturns a new vector from the specified vectors.\nfunc simd_make_int4_undef(simd_int3) -> simd_int4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917368-simd_make_char32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_char32(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char32) -> simd_char32\nReturns a new vector from the specified vector.\nfunc simd_make_char32(simd_char64) -> simd_char32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc simd_make_char32_undef(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917254-simd_make_char32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_char32(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char32) -> simd_char32\nReturns a new vector from the specified vector.\nfunc simd_make_char32(simd_char64) -> simd_char32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc simd_make_char32_undef(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917620-simd_make_char32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_char32(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char32) -> simd_char32\nReturns a new vector from the specified vector.\nfunc simd_make_char32(simd_char64) -> simd_char32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc simd_make_char32_undef(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_int4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867669-simd_make_int4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_int4(Int32) -> simd_int4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_int4(Int32, Int32, Int32, Int32) -> simd_int4\nReturns a new vector from the specified scalar values.\nfunc vector4(Int32, Int32, Int32, Int32) -> simd_int4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_char32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917584-simd_make_char32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_char32(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char32) -> simd_char32\nReturns a new vector from the specified vector.\nfunc simd_make_char32(simd_char64) -> simd_char32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_char32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc simd_make_char32_undef(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char32(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867706-simd_make_char32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_char32(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char32) -> simd_char32\nReturns a new vector from the specified vector.\nfunc simd_make_char32(simd_char64) -> simd_char32\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc simd_make_char32_undef(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917244-simd_make_char32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_char32(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_char32(simd_char32) -> simd_char32\nReturns a new vector from the specified vector.\nfunc simd_make_char32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_char16, simd_char16) -> simd_char32\nReturns a new vector from the specified vectors.\nfunc simd_make_char32_undef(simd_char2) -> simd_char32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char3) -> simd_char32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char4) -> simd_char32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char8) -> simd_char32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_char32_undef(simd_char16) -> simd_char32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918571-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_uchar32) -> simd_char32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short32) -> simd_char32\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort32) -> simd_char32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_make_char32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917748-simd_make_char32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Scalar Values\nfunc simd_make_char32_undef(CChar) -> simd_char32\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_char32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867666-simd_make_char32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Scalar Values\nfunc simd_make_char32(CChar) -> simd_char32\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918613-simd_char",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char32) -> simd_char32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_short32) -> simd_char32\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort32) -> simd_char32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425437-reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int4) -> Int32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD4<Int32>) -> Int32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_int4) -> Int32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD4<Int32>) -> Int32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_int4) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918287-simd_char",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918649-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char32) -> simd_char32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar32) -> simd_char32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short32) -> simd_char32\nReturns a new vector from the specified vector of 16-bit, signed integer elements."
  },
  {
    "title": "simd_make_char2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917525-simd_make_char2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_char2(simd_char2) -> simd_char2\nReturns a new vector from the specified vector.\nfunc simd_make_char2(simd_char3) -> simd_char2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_char2(simd_char4) -> simd_char2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_char2(simd_char8) -> simd_char2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char2(simd_char16) -> simd_char2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char2(simd_char32) -> simd_char2\nReturns a new vector by truncating the specified thirty two-element vector."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918060-simd_char",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918723-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918375-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873856-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918545-simd_char",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424517-reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int4) -> Int32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_int4) -> Int32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD4<Int32>) -> Int32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_int4) -> Int32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD4<Int32>) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917874-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918703-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896513-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896438-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_int4) -> simd_bool\nReturns true if the high-order bit of any element is set; false otherwise.\nfunc simd_bitselect(simd_int4, simd_int4, simd_int4) -> simd_int4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896532-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int4) -> Int32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD4<Int32>) -> Int32\nReturns the minimum value in a vector.\nfunc reduce_max(SIMD4<Int32>) -> Int32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_int4) -> Int32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD4<Int32>) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "vector_int4 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vector_int4",
    "html": "See Also\nAlternative Type Alias\ntypealias int4\nDeprecated"
  },
  {
    "title": "min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425991-min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int4, simd_int4) -> simd_int4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Int32>, Int32) -> SIMD4<Int32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Int32>, SIMD4<Int32>) -> SIMD4<Int32>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_int4, simd_int4) -> simd_int4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Int32>, Int32) -> SIMD4<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896676-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_int4) -> simd_bool\nReturns true if the high-order bit of every element is set; false otherwise.\nfunc simd_bitselect(simd_int4, simd_int4, simd_int4) -> simd_int4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_int4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883267-simd_make_int4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_int4(simd_int2, Int32, Int32) -> simd_int4\nReturns a new vector from a vector and scalar values.\nfunc vector4(simd_int3, Int32) -> simd_int4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_int4(Int32, Int32, simd_int2) -> simd_int4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_int4(Int32, simd_int2, Int32) -> simd_int4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_int4(Int32, simd_int3) -> simd_int4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_int4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883498-simd_make_int4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_int4(simd_int2, Int32, Int32) -> simd_int4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_int4(simd_int3, Int32) -> simd_int4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_int3, Int32) -> simd_int4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_int4(Int32, Int32, simd_int2) -> simd_int4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_int4(Int32, simd_int2, Int32) -> simd_int4\nReturns a new vector from a scalar value, a vector, and a scalar value."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918125-simd_int",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918757-simd_int",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918142-simd_int",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917194-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_char32, simd_char32, simd_char32) -> simd_char32\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_char32, simd_char32) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917806-simd_int",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916688-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_int8) -> simd_bool\nfunc simd_bitselect(simd_int8, simd_int8, simd_int8) -> simd_int8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917199-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_int8, simd_int8) -> simd_int8\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916971-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int8, simd_int8) -> simd_int8\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917019-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int8) -> Int32\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_int8) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916903-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_int8) -> Int32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_int8) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917062-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int8) -> simd_int8\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_int8, simd_int8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916967-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_char32) -> simd_char32\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_char32, simd_char32, simd_char32) -> simd_char32\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917151-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_char32) -> CChar\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_char32) -> CChar\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919038-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_char2) -> simd_bool\nfunc simd_all(simd_char2) -> simd_bool"
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919000-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_char2) -> simd_char2\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_char2, simd_char2, simd_char2) -> simd_char2\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917130-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_char32) -> CChar\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_char32) -> CChar\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919040-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_char2) -> simd_bool\nfunc simd_bitselect(simd_char2, simd_char2, simd_char2) -> simd_char2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919033-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_char2, simd_char2) -> simd_char2\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919039-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_char2) -> simd_bool\nfunc simd_bitselect(simd_char2, simd_char2, simd_char2) -> simd_char2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919034-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_char2) -> simd_char2\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_char2, simd_char2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_make_char2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917542-simd_make_char2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_char2(simd_char2) -> simd_char2\nReturns a new vector from the specified vector.\nfunc simd_make_char2(simd_char4) -> simd_char2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_char2(simd_char8) -> simd_char2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char2(simd_char16) -> simd_char2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char2(simd_char32) -> simd_char2\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char2(simd_char64) -> simd_char2\nReturns a new vector by truncating the specified sixty four-element vector."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919037-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_char2) -> CChar\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_char2) -> CChar\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918305-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919032-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_char2, simd_char2, simd_char2) -> simd_char2\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_char2, simd_char2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_make_char2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917599-simd_make_char2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_char2(CChar, CChar) -> simd_char2\nReturns a new vector from the specified scalar values.\nfunc vector2(CChar, CChar) -> simd_char2\nReturns a new vector from the specified scalar values.\nfunc simd_make_char2_undef(CChar) -> simd_char2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_int8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917310-simd_make_int8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_int8(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int8) -> simd_int8\nReturns a new vector from the specified vector.\nfunc simd_make_int8(simd_int16) -> simd_int8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc simd_make_int8_undef(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896428-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896494-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896670-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_int4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917680-simd_make_int4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_int4(simd_int2) -> simd_int4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int4(simd_int3) -> simd_int4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int4(simd_int4) -> simd_int4\nReturns a new vector from the specified vector.\nfunc simd_make_int4(simd_int8) -> simd_int4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_int4(simd_int2, simd_int2) -> simd_int4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_int2, simd_int2) -> simd_int4\nReturns a new vector from the specified vectors.\nfunc simd_make_int4_undef(simd_int2) -> simd_int4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int4_undef(simd_int3) -> simd_int4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_int4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867735-simd_make_int4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_int4(Int32) -> simd_int4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector4(Int32, Int32, Int32, Int32) -> simd_int4\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_int4_undef(Int32) -> simd_int4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918754-simd_ushort",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_int4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896411-simd_make_int4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_int4(simd_int2) -> simd_int4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int4(simd_int3) -> simd_int4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int4(simd_int8) -> simd_int4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_int4(simd_int16) -> simd_int4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int4(simd_int2, simd_int2) -> simd_int4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_int2, simd_int2) -> simd_int4\nReturns a new vector from the specified vectors.\nfunc simd_make_int4_undef(simd_int2) -> simd_int4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int4_undef(simd_int3) -> simd_int4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918657-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918614-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_int4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883399-simd_make_int4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_int4(simd_int3) -> simd_int4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int4(simd_int4) -> simd_int4\nReturns a new vector from the specified vector.\nfunc simd_make_int4(simd_int8) -> simd_int4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_int4(simd_int16) -> simd_int4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int4(simd_int2, simd_int2) -> simd_int4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_int2, simd_int2) -> simd_int4\nReturns a new vector from the specified vectors.\nfunc simd_make_int4_undef(simd_int2) -> simd_int4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int4_undef(simd_int3) -> simd_int4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "vector4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1640315-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_int4(Int32) -> simd_int4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_int4(Int32, Int32, Int32, Int32) -> simd_int4\nReturns a new vector from the specified scalar values.\nfunc simd_make_int4_undef(Int32) -> simd_int4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_int4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896511-simd_make_int4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_int4(simd_int2) -> simd_int4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int4(simd_int3) -> simd_int4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int4(simd_int4) -> simd_int4\nReturns a new vector from the specified vector.\nfunc simd_make_int4(simd_int8) -> simd_int4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_int4(simd_int16) -> simd_int4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int4(simd_int2, simd_int2) -> simd_int4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_int2, simd_int2) -> simd_int4\nReturns a new vector from the specified vectors.\nfunc simd_make_int4_undef(simd_int2) -> simd_int4\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916755-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_int8) -> simd_bool\nfunc simd_bitselect(simd_int8, simd_int8, simd_int8) -> simd_int8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2092179-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_int4(simd_int2) -> simd_int4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int4(simd_int3) -> simd_int4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int4(simd_int4) -> simd_int4\nReturns a new vector from the specified vector.\nfunc simd_make_int4(simd_int8) -> simd_int4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_int4(simd_int16) -> simd_int4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int4(simd_int2, simd_int2) -> simd_int4\nReturns a new vector from the specified vectors.\nfunc simd_make_int4_undef(simd_int2) -> simd_int4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int4_undef(simd_int3) -> simd_int4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_char2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917716-simd_make_char2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_char2(simd_char2) -> simd_char2\nReturns a new vector from the specified vector.\nfunc simd_make_char2(simd_char3) -> simd_char2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_char2(simd_char4) -> simd_char2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_char2(simd_char16) -> simd_char2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char2(simd_char32) -> simd_char2\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char2(simd_char64) -> simd_char2\nReturns a new vector by truncating the specified sixty four-element vector."
  },
  {
    "title": "simd_make_int4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883366-simd_make_int4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_int4(Int32, Int32, Int32, Int32) -> simd_int4\nReturns a new vector from the specified scalar values.\nfunc vector4(Int32, Int32, Int32, Int32) -> simd_int4\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_int4_undef(Int32) -> simd_int4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_char2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917684-simd_make_char2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_char2(simd_char2) -> simd_char2\nReturns a new vector from the specified vector.\nfunc simd_make_char2(simd_char3) -> simd_char2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_char2(simd_char8) -> simd_char2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char2(simd_char16) -> simd_char2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char2(simd_char32) -> simd_char2\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char2(simd_char64) -> simd_char2\nReturns a new vector by truncating the specified sixty four-element vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916879-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int8) -> Int32\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_int8) -> Int32\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918727-simd_char",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918161-simd_char",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918993-vector2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_char2(CChar) -> simd_char2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_char2(CChar, CChar) -> simd_char2\nReturns a new vector from the specified scalar values.\nfunc simd_make_char2_undef(CChar) -> simd_char2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918441-simd_char",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_char2_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867665-simd_make_char2_undef",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_char2(CChar) -> simd_char2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_char2(CChar, CChar) -> simd_char2\nReturns a new vector from the specified scalar values.\nfunc vector2(CChar, CChar) -> simd_char2\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "simd_make_char2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867711-simd_make_char2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_char2(CChar) -> simd_char2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector2(CChar, CChar) -> simd_char2\nReturns a new vector from the specified scalar values.\nfunc simd_make_char2_undef(CChar) -> simd_char2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_char2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917574-simd_make_char2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_char2(simd_char2) -> simd_char2\nReturns a new vector from the specified vector.\nfunc simd_make_char2(simd_char3) -> simd_char2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_char2(simd_char4) -> simd_char2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_char2(simd_char8) -> simd_char2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char2(simd_char16) -> simd_char2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_char2(simd_char64) -> simd_char2\nReturns a new vector by truncating the specified sixty four-element vector."
  },
  {
    "title": "simd_make_char2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917488-simd_make_char2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_char2(simd_char2) -> simd_char2\nReturns a new vector from the specified vector.\nfunc simd_make_char2(simd_char3) -> simd_char2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_char2(simd_char4) -> simd_char2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_char2(simd_char8) -> simd_char2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_char2(simd_char32) -> simd_char2\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_char2(simd_char64) -> simd_char2\nReturns a new vector by truncating the specified sixty four-element vector."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918086-simd_char",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918222-simd_char",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918067-simd_char",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_char(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918429-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918310-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918504-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "int4 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/int4",
    "html": "See Also\nAlternative Type Alias\ntypealias vector_int4"
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918658-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896687-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int4) -> simd_int4\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD4<Int32>) -> SIMD4<Int32>\nReturns the absolute value of each element in a vector.\nfunc clamp(SIMD4<Int32>, min: Int32, max: Int32) -> SIMD4<Int32>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Int32>, min: SIMD4<Int32>, max: SIMD4<Int32>) -> SIMD4<Int32>\nReturns each element in a vector clamped to a specified scalar range.\nfunc simd_equal(simd_int4, simd_int4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896737-simd_max",
    "html": "See Also\nExtrema Functions\nfunc max(SIMD4<Int32>, Int32) -> SIMD4<Int32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Int32>, SIMD4<Int32>) -> SIMD4<Int32>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_int4, simd_int4) -> simd_int4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Int32>, Int32) -> SIMD4<Int32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Int32>, SIMD4<Int32>) -> SIMD4<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425910-reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int4) -> Int32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD4<Int32>) -> Int32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_int4) -> Int32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_int4) -> Int32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD4<Int32>) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424113-min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int4, simd_int4) -> simd_int4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Int32>, Int32) -> SIMD4<Int32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Int32>, SIMD4<Int32>) -> SIMD4<Int32>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_int4, simd_int4) -> simd_int4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Int32>, SIMD4<Int32>) -> SIMD4<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896409-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int4) -> Int32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD4<Int32>) -> Int32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_int4) -> Int32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD4<Int32>) -> Int32\nReturns the maximum value in a vector.\nfunc reduce_add(SIMD4<Int32>) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_char_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918044-simd_char_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_char_sat(simd_char2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_char_sat(simd_uchar2) -> simd_char2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_char_sat(simd_short2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_char_sat(simd_ushort2) -> simd_char2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_char_sat(simd_int2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_char_sat(simd_uint2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_long2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_char_sat(simd_ulong2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_char_sat(simd_float2) -> simd_char2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_char_sat(simd_double2) -> simd_char2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424839-max",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int4, simd_int4) -> simd_int4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Int32>, SIMD4<Int32>) -> SIMD4<Int32>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_int4, simd_int4) -> simd_int4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Int32>, Int32) -> SIMD4<Int32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Int32>, SIMD4<Int32>) -> SIMD4<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "clamp(_:min:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424945-clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int4) -> simd_int4\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD4<Int32>) -> SIMD4<Int32>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_int4, simd_int4, simd_int4) -> simd_int4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Int32>, min: Int32, max: Int32) -> SIMD4<Int32>\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_int4, simd_int4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896452-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int4, simd_int4) -> simd_int4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Int32>, Int32) -> SIMD4<Int32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Int32>, SIMD4<Int32>) -> SIMD4<Int32>\nReturns the maximum value of each element in a vector.\nfunc min(SIMD4<Int32>, Int32) -> SIMD4<Int32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Int32>, SIMD4<Int32>) -> SIMD4<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896785-simd_abs",
    "html": "See Also\nCommon Functions\nfunc abs(SIMD4<Int32>) -> SIMD4<Int32>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_int4, simd_int4, simd_int4) -> simd_int4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Int32>, min: Int32, max: Int32) -> SIMD4<Int32>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Int32>, min: SIMD4<Int32>, max: SIMD4<Int32>) -> SIMD4<Int32>\nReturns each element in a vector clamped to a specified scalar range.\nfunc simd_equal(simd_int4, simd_int4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_make_int4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883368-simd_make_int4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_int4(simd_int2, Int32, Int32) -> simd_int4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_int4(simd_int3, Int32) -> simd_int4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_int3, Int32) -> simd_int4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_int4(Int32, simd_int2, Int32) -> simd_int4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_int4(Int32, simd_int3) -> simd_int4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_int4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883526-simd_make_int4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_int4(simd_int2, Int32, Int32) -> simd_int4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_int4(simd_int3, Int32) -> simd_int4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_int3, Int32) -> simd_int4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_int4(Int32, Int32, simd_int2) -> simd_int4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_int4(Int32, simd_int3) -> simd_int4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918760-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918008-simd_int",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918203-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918329-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_int8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917579-simd_make_int8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_int8(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int8) -> simd_int8\nReturns a new vector from the specified vector.\nfunc simd_make_int8(simd_int16) -> simd_int8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc simd_make_int8_undef(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_int8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917540-simd_make_int8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_int8(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int8) -> simd_int8\nReturns a new vector from the specified vector.\nfunc simd_make_int8(simd_int16) -> simd_int8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc simd_make_int8_undef(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_int8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917714-simd_make_int8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_int8(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int8) -> simd_int8\nReturns a new vector from the specified vector.\nfunc simd_make_int8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc simd_make_int8_undef(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_int8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867744-simd_make_int8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_int8(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int8) -> simd_int8\nReturns a new vector from the specified vector.\nfunc simd_make_int8(simd_int16) -> simd_int8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc vector8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc simd_make_int8_undef(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_int8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917363-simd_make_int8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_int8(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int8) -> simd_int8\nReturns a new vector from the specified vector.\nfunc simd_make_int8(simd_int16) -> simd_int8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc simd_make_int8_undef(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "vector8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918258-vector8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_int8(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int8) -> simd_int8\nReturns a new vector from the specified vector.\nfunc simd_make_int8(simd_int16) -> simd_int8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc simd_make_int8_undef(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918617-simd_int",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918226-simd_int",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918262-simd_int",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_int8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867719-simd_make_int8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_int8(Int32) -> simd_int8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918387-simd_int",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918100-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918012-simd_int",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918636-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918581-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918165-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896632-simd_int",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918444-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896743-simd_int",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917810-simd_ushort",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918650-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918160-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_int4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917668-simd_make_int4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_int4(simd_int2) -> simd_int4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int4(simd_int3) -> simd_int4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int4(simd_int4) -> simd_int4\nReturns a new vector from the specified vector.\nfunc simd_make_int4(simd_int16) -> simd_int4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int4(simd_int2, simd_int2) -> simd_int4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_int2, simd_int2) -> simd_int4\nReturns a new vector from the specified vectors.\nfunc simd_make_int4_undef(simd_int2) -> simd_int4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int4_undef(simd_int3) -> simd_int4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_int4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883657-simd_make_int4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_int4(simd_int2) -> simd_int4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int4(simd_int3) -> simd_int4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int4(simd_int4) -> simd_int4\nReturns a new vector from the specified vector.\nfunc simd_make_int4(simd_int8) -> simd_int4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_int4(simd_int16) -> simd_int4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc vector4(simd_int2, simd_int2) -> simd_int4\nReturns a new vector from the specified vectors.\nfunc simd_make_int4_undef(simd_int2) -> simd_int4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int4_undef(simd_int3) -> simd_int4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_int4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896439-simd_make_int4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_int4(simd_int2) -> simd_int4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int4(simd_int4) -> simd_int4\nReturns a new vector from the specified vector.\nfunc simd_make_int4(simd_int8) -> simd_int4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_int4(simd_int16) -> simd_int4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int4(simd_int2, simd_int2) -> simd_int4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_int2, simd_int2) -> simd_int4\nReturns a new vector from the specified vectors.\nfunc simd_make_int4_undef(simd_int2) -> simd_int4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int4_undef(simd_int3) -> simd_int4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918265-simd_ushort",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918167-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917079-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_ushort2) -> UInt16\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ushort2) -> UInt16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_ushort2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917626-simd_make_ushort2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_ushort2(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector.\nfunc simd_make_ushort2(simd_ushort3) -> simd_ushort2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ushort2(simd_ushort4) -> simd_ushort2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ushort2(simd_ushort16) -> simd_ushort2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort2(simd_ushort32) -> simd_ushort2\nReturns a new vector by truncating the specified thirty two-element vector."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918529-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918728-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918714-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ushort_sat(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916749-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ushort2) -> simd_bool\nfunc simd_all(simd_ushort2) -> simd_bool"
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917860-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918399-simd_ushort",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918246-simd_ushort",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916959-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ushort2) -> UInt16\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_ushort2) -> UInt16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918383-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ushort_sat(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_make_int4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883602-simd_make_int4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_int4(simd_int3, Int32) -> simd_int4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_int3, Int32) -> simd_int4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_int4(Int32, Int32, simd_int2) -> simd_int4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_int4(Int32, simd_int2, Int32) -> simd_int4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_int4(Int32, simd_int3) -> simd_int4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916788-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ushort2) -> simd_bool\nfunc simd_bitselect(simd_ushort2, simd_ushort2, simd_short2) -> simd_ushort2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916773-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ushort4) -> simd_bool\nfunc simd_bitselect(simd_ushort4, simd_ushort4, simd_short4) -> simd_ushort4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916699-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_ushort4) -> simd_bool\nfunc simd_bitselect(simd_ushort4, simd_ushort4, simd_short4) -> simd_ushort4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917964-simd_ushort",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917991-simd_ushort",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918597-simd_int",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918640-simd_ushort",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_float16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2092180-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_int4(simd_int2, Int32, Int32) -> simd_int4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_int4(simd_int3, Int32) -> simd_int4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_int4(Int32, Int32, simd_int2) -> simd_int4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_int4(Int32, simd_int2, Int32) -> simd_int4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_int4(Int32, simd_int3) -> simd_int4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_int8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917317-simd_make_int8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_int8(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int8) -> simd_int8\nReturns a new vector from the specified vector.\nfunc simd_make_int8(simd_int16) -> simd_int8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc simd_make_int8_undef(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_int8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917575-simd_make_int8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_int8(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int16) -> simd_int8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc simd_make_int8_undef(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896618-simd_int",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896694-simd_int",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918288-simd_int",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918071-simd_int",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918601-simd_int",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar4) -> simd_int4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort4) -> simd_int4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float4) -> simd_int4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double4) -> simd_int4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917077-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_int8, simd_int8, simd_int8) -> simd_int8\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_int8, simd_int8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916785-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_int8) -> simd_bool\nfunc simd_all(simd_int8) -> simd_bool"
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917200-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int8) -> simd_int8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_int8, simd_int8, simd_int8) -> simd_int8\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918475-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918620-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918159-simd_int",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_int8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917685-simd_make_int8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_int8(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int4) -> simd_int8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_int8(simd_int8) -> simd_int8\nReturns a new vector from the specified vector.\nfunc simd_make_int8(simd_int16) -> simd_int8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_int8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_int4, simd_int4) -> simd_int8\nReturns a new vector from the specified vectors.\nfunc simd_make_int8_undef(simd_int2) -> simd_int8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_int8_undef(simd_int3) -> simd_int8\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917948-simd_ushort",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_int8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917661-simd_make_int8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_int8_undef(Int32) -> simd_int8\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918626-simd_int",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918113-simd_int",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917984-simd_int",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918480-simd_int",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918359-simd_ushort",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918677-simd_int",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ushort4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917441-simd_make_ushort4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ushort4(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector.\nfunc simd_make_ushort4(simd_ushort8) -> simd_ushort4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort4(simd_ushort16) -> simd_ushort4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort4(simd_ushort32) -> simd_ushort4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc vector4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort4_undef(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort4_undef(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917372-simd_make_ushort4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ushort4(simd_ushort2, UInt16, UInt16) -> simd_ushort4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ushort4(simd_ushort3, UInt16) -> simd_ushort4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ushort3, UInt16) -> simd_ushort4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ushort4(UInt16, simd_ushort2, UInt16) -> simd_ushort4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ushort4(UInt16, simd_ushort3) -> simd_ushort4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917851-simd_ushort",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873846-simd_ushort",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ushort4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917234-simd_make_ushort4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ushort4(simd_ushort2, UInt16, UInt16) -> simd_ushort4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ushort4(simd_ushort3, UInt16) -> simd_ushort4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ushort3, UInt16) -> simd_ushort4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ushort4(UInt16, UInt16, simd_ushort2) -> simd_ushort4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ushort4(UInt16, simd_ushort3) -> simd_ushort4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917966-simd_ushort",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ushort2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917456-simd_make_ushort2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_ushort2(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector.\nfunc simd_make_ushort2(simd_ushort3) -> simd_ushort2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ushort2(simd_ushort4) -> simd_ushort2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ushort2(simd_ushort8) -> simd_ushort2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort2(simd_ushort16) -> simd_ushort2\nReturns a new vector by truncating the specified sixteen-element vector."
  },
  {
    "title": "simd_make_ushort4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917324-simd_make_ushort4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_ushort4(UInt16, UInt16, UInt16, UInt16) -> simd_ushort4\nReturns a new vector from the specified scalar values.\nfunc vector4(UInt16, UInt16, UInt16, UInt16) -> simd_ushort4\nReturns a new vector from the specified scalar values.\nfunc simd_make_ushort4_undef(UInt16) -> simd_ushort4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918357-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ushort4(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector.\nfunc simd_make_ushort4(simd_ushort8) -> simd_ushort4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort4(simd_ushort16) -> simd_ushort4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort4(simd_ushort32) -> simd_ushort4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort4_undef(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort4_undef(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916948-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_ushort2, simd_ushort2) -> simd_ushort2\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916752-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_ushort2) -> simd_bool\nfunc simd_bitselect(simd_ushort2, simd_ushort2, simd_short2) -> simd_ushort2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_ushort4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917548-simd_make_ushort4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ushort4(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector.\nfunc simd_make_ushort4(simd_ushort8) -> simd_ushort4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort4(simd_ushort16) -> simd_ushort4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort4(simd_ushort32) -> simd_ushort4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort4_undef(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort4_undef(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort2_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867726-simd_make_ushort2_undef",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_ushort2(UInt16) -> simd_ushort2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ushort2(UInt16, UInt16) -> simd_ushort2\nReturns a new vector from the specified scalar values.\nfunc vector2(UInt16, UInt16) -> simd_ushort2\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916878-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ushort2) -> UInt16\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ushort2) -> UInt16\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918464-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918172-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917877-simd_ushort",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918516-simd_ushort",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917961-simd_ushort",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918700-simd_ushort",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873847-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916802-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ushort4) -> simd_bool\nfunc simd_all(simd_ushort4) -> simd_bool"
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918295-simd_ushort",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918354-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918105-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918191-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917953-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918312-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918135-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ushort_sat(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916881-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_equal(simd_ushort4, simd_ushort4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918355-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar8) -> simd_int8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort8) -> simd_int8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float8) -> simd_int8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double8) -> simd_int8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916938-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_ushort4) -> UInt16\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ushort4) -> UInt16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917001-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ushort4) -> UInt16\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ushort4) -> UInt16\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917113-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ushort4, simd_ushort4) -> simd_ushort4\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918566-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ushort_sat(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917140-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_ushort4, simd_ushort4) -> simd_ushort4\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918110-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ushort_sat(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917046-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ushort4) -> UInt16\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_ushort4) -> UInt16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917906-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917924-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ushort_sat(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918070-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ushort_sat(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_make_ushort16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917727-simd_make_ushort16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_ushort16(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector.\nfunc simd_make_ushort16(simd_ushort32) -> simd_ushort16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort16_undef(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918307-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ushort_sat(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918139-simd_ushort",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918156-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ushort_sat(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918669-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_ushort_sat(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918374-simd_ushort",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918302-simd_ushort",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916711-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ushort8) -> simd_bool\nfunc simd_all(simd_ushort8) -> simd_bool"
  },
  {
    "title": "vector16(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918250-vector16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_ushort16(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector.\nfunc simd_make_ushort16(simd_ushort32) -> simd_ushort16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort16_undef(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917211-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_ushort8, simd_ushort8) -> simd_ushort8\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916901-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_short4, simd_short4, simd_short4) -> simd_short4\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_short4, simd_short4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_make_ushort8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917659-simd_make_ushort8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ushort8(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector.\nfunc simd_make_ushort8(simd_ushort16) -> simd_ushort8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort8(simd_ushort32) -> simd_ushort8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_ushort8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort8_undef(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917331-simd_make_ushort8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ushort8(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort16) -> simd_ushort8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort8(simd_ushort32) -> simd_ushort8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_ushort8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort8_undef(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916991-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ushort4, simd_ushort4, simd_ushort4) -> simd_ushort4\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_make_ushort8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917625-simd_make_ushort8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ushort8(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector.\nfunc simd_make_ushort8(simd_ushort16) -> simd_ushort8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort8(simd_ushort32) -> simd_ushort8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_ushort8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort8_undef(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918490-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_int16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "vector8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918724-vector8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ushort8(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector.\nfunc simd_make_ushort8(simd_ushort16) -> simd_ushort8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort8(simd_ushort32) -> simd_ushort8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_ushort8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort8_undef(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867677-simd_make_ushort8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ushort8(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector.\nfunc simd_make_ushort8(simd_ushort16) -> simd_ushort8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort8(simd_ushort32) -> simd_ushort8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc vector8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort8_undef(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917428-simd_make_ushort8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ushort8(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector.\nfunc simd_make_ushort8(simd_ushort32) -> simd_ushort8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_ushort8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort8_undef(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917235-simd_make_ushort8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ushort8(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector.\nfunc simd_make_ushort8(simd_ushort16) -> simd_ushort8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort8(simd_ushort32) -> simd_ushort8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_ushort8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort8_undef(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917566-simd_make_ushort8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ushort8(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector.\nfunc simd_make_ushort8(simd_ushort16) -> simd_ushort8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort8(simd_ushort32) -> simd_ushort8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_ushort8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort8_undef(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917679-simd_make_ushort8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_ushort8_undef(UInt16) -> simd_ushort8\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918653-simd_ushort",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918330-simd_ushort",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_ushort8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867668-simd_make_ushort8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_ushort8(UInt16) -> simd_ushort8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917970-simd_ushort",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918543-simd_ushort",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918481-simd_ushort",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918206-simd_ushort",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char4) -> simd_ushort4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_short4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float4) -> simd_ushort4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double4) -> simd_ushort4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ushort4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917516-simd_make_ushort4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ushort4(simd_ushort2, UInt16, UInt16) -> simd_ushort4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ushort4(simd_ushort3, UInt16) -> simd_ushort4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ushort3, UInt16) -> simd_ushort4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ushort4(UInt16, UInt16, simd_ushort2) -> simd_ushort4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ushort4(UInt16, simd_ushort2, UInt16) -> simd_ushort4\nReturns a new vector from a scalar value, a vector, and a scalar value."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918643-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ushort4(simd_ushort2, UInt16, UInt16) -> simd_ushort4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_ushort4(simd_ushort3, UInt16) -> simd_ushort4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ushort4(UInt16, UInt16, simd_ushort2) -> simd_ushort4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ushort4(UInt16, simd_ushort2, UInt16) -> simd_ushort4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ushort4(UInt16, simd_ushort3) -> simd_ushort4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_ushort4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917610-simd_make_ushort4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ushort4(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector.\nfunc simd_make_ushort4(simd_ushort16) -> simd_ushort4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort4(simd_ushort32) -> simd_ushort4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort4_undef(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort4_undef(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917493-simd_make_ushort4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ushort4(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector.\nfunc simd_make_ushort4(simd_ushort8) -> simd_ushort4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort4(simd_ushort16) -> simd_ushort4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort4(simd_ushort32) -> simd_ushort4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort4_undef(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort4_undef(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917521-simd_make_ushort4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ushort4(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector.\nfunc simd_make_ushort4(simd_ushort8) -> simd_ushort4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort4(simd_ushort16) -> simd_ushort4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort4_undef(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort4_undef(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917743-simd_make_ushort4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ushort4(simd_ushort2, UInt16, UInt16) -> simd_ushort4\nReturns a new vector from a vector and scalar values.\nfunc vector4(simd_ushort3, UInt16) -> simd_ushort4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ushort4(UInt16, UInt16, simd_ushort2) -> simd_ushort4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ushort4(UInt16, simd_ushort2, UInt16) -> simd_ushort4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ushort4(UInt16, simd_ushort3) -> simd_ushort4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_ushort4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917699-simd_make_ushort4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ushort4(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort8) -> simd_ushort4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort4(simd_ushort16) -> simd_ushort4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort4(simd_ushort32) -> simd_ushort4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort4_undef(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort4_undef(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917586-simd_make_ushort4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ushort4(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector.\nfunc simd_make_ushort4(simd_ushort8) -> simd_ushort4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort4(simd_ushort32) -> simd_ushort4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort4_undef(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort4_undef(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917232-simd_make_ushort4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_ushort4(simd_ushort3, UInt16) -> simd_ushort4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_ushort3, UInt16) -> simd_ushort4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_ushort4(UInt16, UInt16, simd_ushort2) -> simd_ushort4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_ushort4(UInt16, simd_ushort2, UInt16) -> simd_ushort4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_ushort4(UInt16, simd_ushort3) -> simd_ushort4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_ushort4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867736-simd_make_ushort4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_ushort4(UInt16) -> simd_ushort4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector4(UInt16, UInt16, UInt16, UInt16) -> simd_ushort4\nReturns a new vector from the specified scalar values.\nfunc simd_make_ushort4_undef(UInt16) -> simd_ushort4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_ushort4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917371-simd_make_ushort4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ushort4(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector.\nfunc simd_make_ushort4(simd_ushort8) -> simd_ushort4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort4(simd_ushort16) -> simd_ushort4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort4(simd_ushort32) -> simd_ushort4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort4_undef(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "vector4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917998-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_ushort4(UInt16) -> simd_ushort4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ushort4(UInt16, UInt16, UInt16, UInt16) -> simd_ushort4\nReturns a new vector from the specified scalar values.\nfunc simd_make_ushort4_undef(UInt16) -> simd_ushort4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_ushort4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867750-simd_make_ushort4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_ushort4(UInt16) -> simd_ushort4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ushort4(UInt16, UInt16, UInt16, UInt16) -> simd_ushort4\nReturns a new vector from the specified scalar values.\nfunc vector4(UInt16, UInt16, UInt16, UInt16) -> simd_ushort4\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "simd_make_ushort2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917480-simd_make_ushort2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_ushort2(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector.\nfunc simd_make_ushort2(simd_ushort3) -> simd_ushort2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ushort2(simd_ushort8) -> simd_ushort2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort2(simd_ushort16) -> simd_ushort2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort2(simd_ushort32) -> simd_ushort2\nReturns a new vector by truncating the specified thirty two-element vector."
  },
  {
    "title": "simd_make_ushort4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917451-simd_make_ushort4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_ushort4(simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort4(simd_ushort4) -> simd_ushort4\nReturns a new vector from the specified vector.\nfunc simd_make_ushort4(simd_ushort8) -> simd_ushort4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort4(simd_ushort16) -> simd_ushort4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort4(simd_ushort32) -> simd_ushort4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_ushort2, simd_ushort2) -> simd_ushort4\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort4_undef(simd_ushort3) -> simd_ushort4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918451-simd_ushort",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ushort2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917649-simd_make_ushort2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_ushort2(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector.\nfunc simd_make_ushort2(simd_ushort3) -> simd_ushort2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ushort2(simd_ushort4) -> simd_ushort2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ushort2(simd_ushort8) -> simd_ushort2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort2(simd_ushort32) -> simd_ushort2\nReturns a new vector by truncating the specified thirty two-element vector."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916917-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ushort2, simd_ushort2, simd_ushort2) -> simd_ushort2\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "vector2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917816-vector2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_ushort2(UInt16) -> simd_ushort2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ushort2(UInt16, UInt16) -> simd_ushort2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ushort2_undef(UInt16) -> simd_ushort2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918551-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916947-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_equal(simd_ushort2, simd_ushort2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_make_ushort2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917238-simd_make_ushort2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_ushort2(simd_ushort3) -> simd_ushort2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ushort2(simd_ushort4) -> simd_ushort2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ushort2(simd_ushort8) -> simd_ushort2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort2(simd_ushort16) -> simd_ushort2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort2(simd_ushort32) -> simd_ushort2\nReturns a new vector by truncating the specified thirty two-element vector."
  },
  {
    "title": "simd_make_ushort2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917279-simd_make_ushort2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_ushort2(UInt16, UInt16) -> simd_ushort2\nReturns a new vector from the specified scalar values.\nfunc vector2(UInt16, UInt16) -> simd_ushort2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ushort2_undef(UInt16) -> simd_ushort2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_ushort2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917242-simd_make_ushort2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_ushort2(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector.\nfunc simd_make_ushort2(simd_ushort4) -> simd_ushort2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ushort2(simd_ushort8) -> simd_ushort2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ushort2(simd_ushort16) -> simd_ushort2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort2(simd_ushort32) -> simd_ushort2\nReturns a new vector by truncating the specified thirty two-element vector."
  },
  {
    "title": "simd_make_ushort2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867679-simd_make_ushort2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_ushort2(UInt16) -> simd_ushort2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector2(UInt16, UInt16) -> simd_ushort2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ushort2_undef(UInt16) -> simd_ushort2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918037-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917076-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_short2) -> Int16\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_short2) -> Int16\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918382-simd_ushort",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918089-simd_ushort",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918593-simd_ushort",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918662-simd_ushort",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918507-simd_short",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ushort16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917283-simd_make_ushort16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_ushort16(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector.\nfunc simd_make_ushort16(simd_ushort32) -> simd_ushort16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort16_undef(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917936-simd_ushort",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918099-simd_ushort",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917958-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ushort16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917749-simd_make_ushort16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_ushort16(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector.\nfunc simd_make_ushort16(simd_ushort32) -> simd_ushort16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort16_undef(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916753-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ushort16) -> simd_bool\nfunc simd_bitselect(simd_ushort16, simd_ushort16, simd_short16) -> simd_ushort16\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918521-simd_ushort",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_ushort16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917293-simd_make_ushort16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_ushort16(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector.\nfunc simd_make_ushort16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort16_undef(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917942-simd_ushort",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_ushort16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917333-simd_make_ushort16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_ushort16(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort32) -> simd_ushort16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort16_undef(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917528-simd_make_ushort16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_ushort16(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector.\nfunc simd_make_ushort16(simd_ushort32) -> simd_ushort16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort16_undef(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917074-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ushort16) -> UInt16\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_ushort16) -> UInt16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917163-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_ushort16, simd_ushort16) -> simd_ushort16\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916696-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ushort16) -> simd_bool\nfunc simd_all(simd_ushort16) -> simd_bool"
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917168-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ushort16) -> UInt16\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ushort16) -> UInt16\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916813-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_ushort16) -> simd_bool\nfunc simd_bitselect(simd_ushort16, simd_ushort16, simd_short16) -> simd_ushort16\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_ushort16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917509-simd_make_ushort16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_ushort16(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector.\nfunc simd_make_ushort16(simd_ushort32) -> simd_ushort16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort16_undef(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917833-simd_ushort",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_short16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_float16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_ushort16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867734-simd_make_ushort16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Scalar Values\nfunc simd_make_ushort16(UInt16) -> simd_ushort16\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_make_ushort16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917696-simd_make_ushort16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_ushort16(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector.\nfunc simd_make_ushort16(simd_ushort32) -> simd_ushort16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort16_undef(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917307-simd_make_ushort16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_ushort16(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector.\nfunc simd_make_ushort16(simd_ushort32) -> simd_ushort16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort16_undef(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918452-simd_ushort",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_uchar16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_float16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_ushort16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917564-simd_make_ushort16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_ushort16(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector.\nfunc simd_make_ushort16(simd_ushort32) -> simd_ushort16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_ushort16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort16_undef(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917728-simd_make_ushort16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Scalar Values\nfunc simd_make_ushort16_undef(UInt16) -> simd_ushort16\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918487-simd_ushort",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918660-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_uchar16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918058-simd_ushort",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_uint16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_float16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917978-simd_ushort",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_int16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_float16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918136-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_short16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918095-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917915-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_uint16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917819-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_float16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918697-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917193-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ushort32) -> UInt16\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ushort32) -> UInt16\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918679-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char32) -> simd_ushort32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar32) -> simd_ushort32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917196-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_equal(simd_ushort16, simd_ushort16) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917855-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char32) -> simd_ushort32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar32) -> simd_ushort32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short32) -> simd_ushort32\nReturns a new vector from the specified vector of 16-bit, signed integer elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918555-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918531-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918217-simd_short",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917023-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_short4, simd_short4) -> simd_short4\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916900-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ushort8, simd_ushort8, simd_ushort8) -> simd_ushort8\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916736-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_ushort8) -> simd_bool\nfunc simd_bitselect(simd_ushort8, simd_ushort8, simd_short8) -> simd_ushort8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917176-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ushort8, simd_ushort8) -> simd_ushort8\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917044-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_equal(simd_ushort32, simd_ushort32) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918398-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918168-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917082-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ushort8) -> UInt16\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_ushort8) -> UInt16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918395-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918430-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar2) -> simd_ushort2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort2) -> simd_ushort2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float2) -> simd_ushort2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double2) -> simd_ushort2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ushort8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917386-simd_make_ushort8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ushort8(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector.\nfunc simd_make_ushort8(simd_ushort16) -> simd_ushort8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort8(simd_ushort32) -> simd_ushort8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_ushort8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort8_undef(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916982-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ushort8) -> UInt16\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ushort8) -> UInt16\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_make_ushort8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917268-simd_make_ushort8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_ushort8(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort8(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector.\nfunc simd_make_ushort8(simd_ushort16) -> simd_ushort8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_ushort8(simd_ushort32) -> simd_ushort8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_ushort8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_ushort4, simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort8_undef(simd_ushort2) -> simd_ushort8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort3) -> simd_ushort8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort8_undef(simd_ushort4) -> simd_ushort8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917050-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_equal(simd_ushort8, simd_ushort8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916682-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ushort8) -> simd_bool\nfunc simd_bitselect(simd_ushort8, simd_ushort8, simd_short8) -> simd_ushort8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918584-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917167-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_ushort8) -> UInt16\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ushort8) -> UInt16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916936-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_short4) -> simd_short4\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_short4, simd_short4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916807-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_short4) -> simd_bool\nfunc simd_all(simd_short4) -> simd_bool"
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917017-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_short4) -> Int16\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_short4) -> Int16\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918663-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918413-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918542-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917299-simd_make_short2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_short2(simd_short2) -> simd_short2\nReturns a new vector from the specified vector.\nfunc simd_make_short2(simd_short3) -> simd_short2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_short2(simd_short4) -> simd_short2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_short2(simd_short8) -> simd_short2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short2(simd_short32) -> simd_short2\nReturns a new vector by truncating the specified thirty two-element vector."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918256-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918510-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918589-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916847-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ushort16, simd_ushort16) -> simd_ushort16\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_make_ushort32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917416-simd_make_ushort32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_ushort32(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector.\nfunc simd_make_ushort32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort32_undef(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917547-simd_make_ushort32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_ushort32(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector.\nfunc simd_make_ushort32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort32_undef(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916689-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ushort32) -> simd_bool\nfunc simd_all(simd_ushort32) -> simd_bool"
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917828-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_short_sat(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_make_ushort32(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867691-simd_make_ushort32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_ushort32(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector.\nfunc vector32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort32_undef(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917091-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_short2) -> simd_short2\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_short2, simd_short2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917118-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_short2) -> Int16\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_short2) -> Int16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_ushort32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917674-simd_make_ushort32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_ushort32(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort32_undef(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917275-simd_make_short4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_short4(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short8) -> simd_short4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short4(simd_short16) -> simd_short4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short4(simd_short32) -> simd_short4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc simd_make_short4_undef(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short4_undef(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918722-simd_ushort",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917927-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918505-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918371-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_uchar8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ushort32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917342-simd_make_ushort32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_ushort32(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector.\nfunc simd_make_ushort32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort32_undef(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867746-simd_make_ushort32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Scalar Values\nfunc simd_make_ushort32(UInt16) -> simd_ushort32\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916706-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_ushort32) -> simd_bool\nfunc simd_bitselect(simd_ushort32, simd_ushort32, simd_short32) -> simd_ushort32\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_ushort32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917245-simd_make_ushort32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_ushort32(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector.\nfunc simd_make_ushort32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort32_undef(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917392-simd_make_ushort32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_ushort32(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector.\nfunc simd_make_ushort32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort32_undef(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917565-simd_make_ushort32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_ushort32(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector.\nfunc simd_make_ushort32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort32_undef(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918176-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char8) -> simd_ushort8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_short8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort8) -> simd_ushort8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_int8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort_sat(simd_uint8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_long8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_ulong8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_float8) -> simd_ushort8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ushort_sat(simd_double8) -> simd_ushort8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ushort16(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867723-simd_make_ushort16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_ushort16(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort16(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector.\nfunc simd_make_ushort16(simd_ushort32) -> simd_ushort16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc vector16(simd_ushort8, simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort16_undef(simd_ushort2) -> simd_ushort16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort3) -> simd_ushort16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort4) -> simd_ushort16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort16_undef(simd_ushort8) -> simd_ushort16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918001-simd_ushort",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar16) -> simd_ushort16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort16) -> simd_ushort16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ushort(simd_int16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ushort(simd_float16) -> simd_ushort16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917031-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ushort16, simd_ushort16, simd_ushort16) -> simd_ushort16\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918298-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916992-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_ushort16) -> UInt16\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ushort16) -> UInt16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_short2_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867716-simd_make_short2_undef",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_short2(Int16) -> simd_short2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_short2(Int16, Int16) -> simd_short2\nReturns a new vector from the specified scalar values.\nfunc vector2(Int16, Int16) -> simd_short2\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918687-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916709-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long2) -> simd_bool\nfunc simd_all(simd_long2) -> simd_bool\nfunc simd_all(simd_long2) -> simd_bool\nfunc simd_bitselect(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918284-simd_short",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918380-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917192-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long2) -> simd_long2\nReturns the absolute value of each element in a vector.\nfunc simd_abs(simd_long2) -> simd_long2\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_long2, simd_long2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_long2, simd_long2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917008-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_ushort32, simd_ushort32) -> simd_ushort32\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918036-simd_short",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918761-simd_short",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917181-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ushort32) -> UInt16\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_ushort32) -> UInt16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917187-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ushort32, simd_ushort32, simd_ushort32) -> simd_ushort32\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918548-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917805-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917183-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_ushort32) -> UInt16\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ushort32) -> UInt16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917852-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916873-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_short4) -> simd_short4\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_short4, simd_short4, simd_short4) -> simd_short4\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917835-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short_sat(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917853-simd_short",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916939-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_short4) -> Int16\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_short4) -> Int16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918554-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916769-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_short4) -> simd_bool\nfunc simd_bitselect(simd_short4, simd_short4, simd_short4) -> simd_short4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918627-simd_short",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_long2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917561-simd_make_long2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_long2(simd_long2) -> simd_long2\nReturns a new vector from the specified vector.\nfunc simd_make_long2(simd_long2) -> simd_long2\nReturns a new vector from the specified vector.\nfunc simd_make_long2(simd_long3) -> simd_long2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_long2(simd_long4) -> simd_long2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long2(simd_long4) -> simd_long2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long2(simd_long8) -> simd_long2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long2(simd_long8) -> simd_long2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_make_ushort32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917356-simd_make_ushort32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_ushort32(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector.\nfunc simd_make_ushort32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort32_undef(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918201-simd_short",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918699-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_short_sat(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916816-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ushort32) -> simd_bool\nfunc simd_bitselect(simd_ushort32, simd_ushort32, simd_short32) -> simd_ushort32\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_ushort32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917544-simd_make_ushort32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_ushort32(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector.\nfunc simd_make_ushort32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort32_undef(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917154-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_short3, simd_short3, simd_short3) -> simd_short3\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_short3, simd_short3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917976-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_short_sat(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918717-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_short_sat(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918301-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_short_sat(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918306-simd_short",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917404-simd_make_short4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_short4(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short4) -> simd_short4\nReturns a new vector from the specified vector.\nfunc simd_make_short4(simd_short8) -> simd_short4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short4(simd_short16) -> simd_short4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short4(simd_short32) -> simd_short4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc simd_make_short4_undef(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short4_undef(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917349-simd_make_short4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_short4(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short4) -> simd_short4\nReturns a new vector from the specified vector.\nfunc simd_make_short4(simd_short8) -> simd_short4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short4(simd_short16) -> simd_short4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short4(simd_short32) -> simd_short4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc simd_make_short4_undef(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917857-simd_short",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918311-simd_short",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector32(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918317-vector32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_ushort32(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector.\nfunc simd_make_ushort32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort32_undef(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916898-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_short3, simd_short3) -> simd_short3\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918213-simd_ushort",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_uchar32) -> simd_ushort32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short32) -> simd_ushort32\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917873-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917878-simd_ushort",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char32) -> simd_ushort32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar32) -> simd_ushort32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_make_ushort32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917311-simd_make_ushort32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_ushort32(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector.\nfunc simd_make_ushort32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort32_undef(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_ushort32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917549-simd_make_ushort32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_ushort32(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort3) -> simd_ushort32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_ushort32(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector.\nfunc simd_make_ushort32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_ushort16, simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified vectors.\nfunc simd_make_ushort32_undef(simd_ushort2) -> simd_ushort32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort4) -> simd_ushort32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort8) -> simd_ushort32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_ushort32_undef(simd_ushort16) -> simd_ushort32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917601-simd_make_short2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_short2(simd_short2) -> simd_short2\nReturns a new vector from the specified vector.\nfunc simd_make_short2(simd_short3) -> simd_short2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_short2(simd_short4) -> simd_short2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_short2(simd_short16) -> simd_short2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short2(simd_short32) -> simd_short2\nReturns a new vector by truncating the specified thirty two-element vector."
  },
  {
    "title": "simd_make_short2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917492-simd_make_short2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_short2(simd_short2) -> simd_short2\nReturns a new vector from the specified vector.\nfunc simd_make_short2(simd_short4) -> simd_short2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_short2(simd_short8) -> simd_short2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short2(simd_short16) -> simd_short2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short2(simd_short32) -> simd_short2\nReturns a new vector by truncating the specified thirty two-element vector."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916781-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_short2) -> simd_bool\nfunc simd_bitselect(simd_short2, simd_short2, simd_short2) -> simd_short2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918572-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_uchar32) -> simd_ushort32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort_sat(simd_short32) -> simd_ushort32\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917920-simd_ushort",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char32) -> simd_ushort32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_short32) -> simd_ushort32\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_make_ushort32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917455-simd_make_ushort32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Scalar Values\nfunc simd_make_ushort32_undef(UInt16) -> simd_ushort32\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_ushort_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918289-simd_ushort_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ushort_sat(simd_char32) -> simd_ushort32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort_sat(simd_short32) -> simd_ushort32\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ushort_sat(simd_ushort32) -> simd_ushort32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_ushort(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918675-simd_ushort",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Vectors of Other Types\nfunc simd_ushort(simd_char32) -> simd_ushort32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ushort(simd_uchar32) -> simd_ushort32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ushort(simd_short32) -> simd_ushort32\nReturns a new vector from the specified vector of 16-bit, signed integer elements."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916965-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_short4, simd_short4) -> simd_short4\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916691-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_short4) -> simd_bool\nfunc simd_bitselect(simd_short4, simd_short4, simd_short4) -> simd_short4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916933-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_short4) -> Int16\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_short4) -> Int16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918173-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918668-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_short4(Int16) -> simd_short4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_short4(Int16, Int16, Int16, Int16) -> simd_short4\nReturns a new vector from the specified scalar values.\nfunc simd_make_short4_undef(Int16) -> simd_short4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_short4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917233-simd_make_short4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_short4(simd_short2, Int16, Int16) -> simd_short4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_short4(simd_short3, Int16) -> simd_short4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_short3, Int16) -> simd_short4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_short4(Int16, simd_short2, Int16) -> simd_short4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_short4(Int16, simd_short3) -> simd_short4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_short4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917718-simd_make_short4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_short4(simd_short3, Int16) -> simd_short4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_short3, Int16) -> simd_short4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_short4(Int16, Int16, simd_short2) -> simd_short4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_short4(Int16, simd_short2, Int16) -> simd_short4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_short4(Int16, simd_short3) -> simd_short4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_short4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917531-simd_make_short4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_short4(simd_short2, Int16, Int16) -> simd_short4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_short4(simd_short3, Int16) -> simd_short4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_short3, Int16) -> simd_short4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_short4(Int16, Int16, simd_short2) -> simd_short4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_short4(Int16, simd_short2, Int16) -> simd_short4\nReturns a new vector from a scalar value, a vector, and a scalar value."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918379-simd_short",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918263-simd_short",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917932-simd_short",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918394-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867693-simd_make_short4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_short4(Int16) -> simd_short4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector4(Int16, Int16, Int16, Int16) -> simd_short4\nReturns a new vector from the specified scalar values.\nfunc simd_make_short4_undef(Int16) -> simd_short4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918268-simd_short",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917298-simd_make_short4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_short4(simd_short2, Int16, Int16) -> simd_short4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_short4(simd_short3, Int16) -> simd_short4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_short3, Int16) -> simd_short4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_short4(Int16, Int16, simd_short2) -> simd_short4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_short4(Int16, simd_short3) -> simd_short4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918264-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_short4(simd_short2, Int16, Int16) -> simd_short4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_short4(simd_short3, Int16) -> simd_short4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_short4(Int16, Int16, simd_short2) -> simd_short4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_short4(Int16, simd_short2, Int16) -> simd_short4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_short4(Int16, simd_short3) -> simd_short4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918499-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918753-simd_short",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918637-simd_short",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918279-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917933-simd_short",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917334-simd_make_short4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_short4(Int16, Int16, Int16, Int16) -> simd_short4\nReturns a new vector from the specified scalar values.\nfunc vector4(Int16, Int16, Int16, Int16) -> simd_short4\nReturns a new vector from the specified scalar values.\nfunc simd_make_short4_undef(Int16) -> simd_short4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_short4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917471-simd_make_short4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_short4(simd_short2, Int16, Int16) -> simd_short4\nReturns a new vector from a vector and scalar values.\nfunc vector4(simd_short3, Int16) -> simd_short4\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_short4(Int16, Int16, simd_short2) -> simd_short4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_short4(Int16, simd_short2, Int16) -> simd_short4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_short4(Int16, simd_short3) -> simd_short4\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_short4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867658-simd_make_short4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_short4(Int16) -> simd_short4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_short4(Int16, Int16, Int16, Int16) -> simd_short4\nReturns a new vector from the specified scalar values.\nfunc vector4(Int16, Int16, Int16, Int16) -> simd_short4\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918344-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918465-simd_short",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar4) -> simd_short4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort4) -> simd_short4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint4) -> simd_short4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_double4) -> simd_short4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917618-simd_make_short3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_short3(simd_short2) -> simd_short3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short3(simd_short3) -> simd_short3\neturns a new vector from the specified vector.\nfunc simd_make_short3(simd_short8) -> simd_short3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short3(simd_short16) -> simd_short3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short3(simd_short32) -> simd_short3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short3_undef(simd_short2) -> simd_short3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917049-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_short3) -> Int16\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_short3) -> Int16\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916981-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_short3) -> Int16\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_short3) -> Int16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917169-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_short3) -> Int16\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_short3) -> Int16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917881-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short_sat(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917619-simd_make_short3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_short3(simd_short2) -> simd_short3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short3(simd_short3) -> simd_short3\neturns a new vector from the specified vector.\nfunc simd_make_short3(simd_short4) -> simd_short3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_short3(simd_short8) -> simd_short3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short3(simd_short16) -> simd_short3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short3_undef(simd_short2) -> simd_short3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917744-simd_make_short3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_short3(Int16, Int16, Int16) -> simd_short3\nReturns a new vector from the specified scalar values.\nfunc vector3(Int16, Int16, Int16) -> simd_short3\nReturns a new vector from the specified scalar values.\nfunc simd_make_short3_undef(Int16) -> simd_short3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_short3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917715-simd_make_short3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_short3(simd_short2, Int16) -> simd_short3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_short2, Int16) -> simd_short3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918285-simd_short",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918414-simd_short",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918011-simd_short",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918046-simd_short",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918200-simd_short",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917473-simd_make_short4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_short4(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short4) -> simd_short4\nReturns a new vector from the specified vector.\nfunc simd_make_short4(simd_short8) -> simd_short4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short4(simd_short16) -> simd_short4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short4(simd_short32) -> simd_short4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc simd_make_short4_undef(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918063-simd_short",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918731-simd_short",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917956-simd_short",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918205-simd_short",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918166-simd_short",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918260-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short_sat(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918365-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short_sat(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917381-simd_make_short4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_short4(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short4) -> simd_short4\nReturns a new vector from the specified vector.\nfunc simd_make_short4(simd_short8) -> simd_short4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short4(simd_short16) -> simd_short4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short4(simd_short32) -> simd_short4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc vector4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc simd_make_short4_undef(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short4_undef(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917502-simd_make_short4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_short4(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short4) -> simd_short4\nReturns a new vector from the specified vector.\nfunc simd_make_short4(simd_short8) -> simd_short4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short4(simd_short16) -> simd_short4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc simd_make_short4_undef(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short4_undef(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918026-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_short4(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short4) -> simd_short4\nReturns a new vector from the specified vector.\nfunc simd_make_short4(simd_short8) -> simd_short4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short4(simd_short16) -> simd_short4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short4(simd_short32) -> simd_short4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc simd_make_short4_undef(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short4_undef(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916792-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_short2) -> simd_bool\nfunc simd_all(simd_short2) -> simd_bool"
  },
  {
    "title": "simd_make_short4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917591-simd_make_short4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_short4(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short4) -> simd_short4\nReturns a new vector from the specified vector.\nfunc simd_make_short4(simd_short16) -> simd_short4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short4(simd_short32) -> simd_short4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc simd_make_short4_undef(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short4_undef(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917420-simd_make_short4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_short4(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short4) -> simd_short4\nReturns a new vector from the specified vector.\nfunc simd_make_short4(simd_short8) -> simd_short4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short4(simd_short32) -> simd_short4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc simd_make_short4_undef(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short4_undef(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917652-simd_make_short4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_short4(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short4(simd_short4) -> simd_short4\nReturns a new vector from the specified vector.\nfunc simd_make_short4(simd_short8) -> simd_short4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short4(simd_short16) -> simd_short4\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short4(simd_short32) -> simd_short4\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_short2, simd_short2) -> simd_short4\nReturns a new vector from the specified vectors.\nfunc simd_make_short4_undef(simd_short2) -> simd_short4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short4_undef(simd_short3) -> simd_short4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916777-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_short2) -> simd_bool\nfunc simd_bitselect(simd_short2, simd_short2, simd_short2) -> simd_short2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916907-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_short2, simd_short2) -> simd_short2\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917087-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_short2, simd_short2) -> simd_short2\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917072-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_short2) -> Int16\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_short2) -> Int16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916862-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_short2, simd_short2, simd_short2) -> simd_short2\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_short2, simd_short2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_make_short2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917388-simd_make_short2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_short2(simd_short2) -> simd_short2\nReturns a new vector from the specified vector.\nfunc simd_make_short2(simd_short3) -> simd_short2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_short2(simd_short8) -> simd_short2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short2(simd_short16) -> simd_short2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short2(simd_short32) -> simd_short2\nReturns a new vector by truncating the specified thirty two-element vector."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916943-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_short2) -> simd_short2\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_short2, simd_short2, simd_short2) -> simd_short2\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917947-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_make_short2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917534-simd_make_short2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_short2(simd_short3) -> simd_short2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_short2(simd_short4) -> simd_short2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_short2(simd_short8) -> simd_short2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short2(simd_short16) -> simd_short2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short2(simd_short32) -> simd_short2\nReturns a new vector by truncating the specified thirty two-element vector."
  },
  {
    "title": "simd_make_short2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917429-simd_make_short2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_short2(Int16, Int16) -> simd_short2\nReturns a new vector from the specified scalar values.\nfunc vector2(Int16, Int16) -> simd_short2\nReturns a new vector from the specified scalar values.\nfunc simd_make_short2_undef(Int16) -> simd_short2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_short2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917486-simd_make_short2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_short2(simd_short2) -> simd_short2\nReturns a new vector from the specified vector.\nfunc simd_make_short2(simd_short3) -> simd_short2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_short2(simd_short4) -> simd_short2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_short2(simd_short8) -> simd_short2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short2(simd_short16) -> simd_short2\nReturns a new vector by truncating the specified sixteen-element vector."
  },
  {
    "title": "simd_make_short2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867648-simd_make_short2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_short2(Int16) -> simd_short2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector2(Int16, Int16) -> simd_short2\nReturns a new vector from the specified scalar values.\nfunc simd_make_short2_undef(Int16) -> simd_short2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873859-simd_short",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918402-simd_short",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918404-vector2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_short2(Int16) -> simd_short2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_short2(Int16, Int16) -> simd_short2\nReturns a new vector from the specified scalar values.\nfunc simd_make_short2_undef(Int16) -> simd_short2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918328-simd_short",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918120-simd_short",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916731-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_uchar8) -> simd_bool\nfunc simd_bitselect(simd_uchar8, simd_uchar8, simd_char8) -> simd_uchar8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918304-simd_short",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_long2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917374-simd_make_long2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_long2(simd_long2) -> simd_long2\nReturns a new vector from the specified vector.\nfunc simd_make_long2(simd_long3) -> simd_long2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_long2(simd_long3) -> simd_long2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_long2(simd_long4) -> simd_long2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long2(simd_long4) -> simd_long2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long2(simd_long8) -> simd_long2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long2(simd_long8) -> simd_long2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_make_uchar2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917671-simd_make_uchar2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_uchar2(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector.\nfunc simd_make_uchar2(simd_uchar4) -> simd_uchar2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uchar2(simd_uchar8) -> simd_uchar2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar2(simd_uchar16) -> simd_uchar2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar2(simd_uchar32) -> simd_uchar2\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar2(simd_uchar64) -> simd_uchar2\nReturns a new vector by truncating the specified sixty four-element vector."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918332-simd_short",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918715-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916985-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long2) -> simd_long2\nReturns the absolute value of each element in a vector.\nfunc simd_abs(simd_long2) -> simd_long2\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_long2, simd_long2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873849-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917983-simd_long",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917845-simd_long",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918028-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916776-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long2) -> simd_bool\nfunc simd_any(simd_long2) -> simd_bool\nfunc simd_all(simd_long2) -> simd_bool\nfunc simd_bitselect(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918734-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918549-simd_long",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918130-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918327-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917197-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_long2, simd_long2) -> simd_long2\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_long2, simd_long2) -> simd_long2\nReturns the maximum value of each element in a vector.\nfunc simd_max(simd_long2, simd_long2) -> simd_long2\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918624-simd_long",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867702-simd_make_uchar16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Scalar Values\nfunc simd_make_uchar16(UInt8) -> simd_uchar16\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917189-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uchar8) -> UInt8\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_uchar8) -> UInt8\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918556-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_short_sat(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873860-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_short_sat(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918565-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_short_sat(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918515-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_short_sat(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917141-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_short3, simd_short3) -> simd_short3\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916782-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_short3) -> simd_bool\nfunc simd_bitselect(simd_short3, simd_short3, simd_short3) -> simd_short3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916766-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_short3) -> simd_bool\nfunc simd_all(simd_short3) -> simd_bool"
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917195-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_short3) -> simd_short3\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_short3, simd_short3, simd_short3) -> simd_short3\nReturns the absolute value of each element in a vector."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918340-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar2) -> simd_short2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort2) -> simd_short2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_uint2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float2) -> simd_short2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_short_sat(simd_double2) -> simd_short2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_make_short3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917640-simd_make_short3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_short3(simd_short2) -> simd_short3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short3(simd_short3) -> simd_short3\neturns a new vector from the specified vector.\nfunc simd_make_short3(simd_short4) -> simd_short3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_short3(simd_short8) -> simd_short3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short3(simd_short32) -> simd_short3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short3_undef(simd_short2) -> simd_short3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917985-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short_sat(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917917-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short_sat(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916746-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_short3) -> simd_bool\nfunc simd_bitselect(simd_short3, simd_short3, simd_short3) -> simd_short3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_short3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917666-simd_make_short3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc vector3(simd_short2, Int16) -> simd_short3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_short3(Int16, simd_short2) -> simd_short3\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918385-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short_sat(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916954-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_short3) -> simd_short3\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_short3, simd_short3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918218-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short_sat(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917350-simd_make_short3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_short3(simd_short2) -> simd_short3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short3(simd_short3) -> simd_short3\neturns a new vector from the specified vector.\nfunc simd_make_short3(simd_short4) -> simd_short3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_short3(simd_short16) -> simd_short3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short3(simd_short32) -> simd_short3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short3_undef(simd_short2) -> simd_short3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "vector3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918511-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_short3(simd_short2, Int16) -> simd_short3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_short3(Int16, simd_short2) -> simd_short3\nReturns a new vector from a scalar value and a vector."
  },
  {
    "title": "simd_make_short3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917512-simd_make_short3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_short3(simd_short2) -> simd_short3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short3(simd_short4) -> simd_short3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_short3(simd_short8) -> simd_short3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short3(simd_short16) -> simd_short3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short3(simd_short32) -> simd_short3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short3_undef(simd_short2) -> simd_short3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917982-simd_short",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917641-simd_make_short3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_short3(simd_short3) -> simd_short3\neturns a new vector from the specified vector.\nfunc simd_make_short3(simd_short4) -> simd_short3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_short3(simd_short8) -> simd_short3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short3(simd_short16) -> simd_short3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short3(simd_short32) -> simd_short3\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short3_undef(simd_short2) -> simd_short3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917478-simd_make_short3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_short3(simd_short2) -> simd_short3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short3(simd_short3) -> simd_short3\neturns a new vector from the specified vector.\nfunc simd_make_short3(simd_short4) -> simd_short3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_short3(simd_short8) -> simd_short3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_short3(simd_short16) -> simd_short3\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short3(simd_short32) -> simd_short3\nReturns a new vector by truncating the specified thirty two-element vector."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918610-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "vector3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918003-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_short3(Int16) -> simd_short3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_short3(Int16, Int16, Int16) -> simd_short3\nReturns a new vector from the specified scalar values.\nfunc simd_make_short3_undef(Int16) -> simd_short3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_short3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867675-simd_make_short3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_short3(Int16) -> simd_short3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector3(Int16, Int16, Int16) -> simd_short3\nReturns a new vector from the specified scalar values.\nfunc simd_make_short3_undef(Int16) -> simd_short3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_short3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867708-simd_make_short3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_short3(Int16) -> simd_short3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_short3(Int16, Int16, Int16) -> simd_short3\nReturns a new vector from the specified scalar values.\nfunc vector3(Int16, Int16, Int16) -> simd_short3\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918321-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873858-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917616-simd_make_uchar8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uchar8(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector.\nfunc simd_make_uchar8(simd_uchar16) -> simd_uchar8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar8(simd_uchar32) -> simd_uchar8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_uchar8(simd_uchar64) -> simd_uchar8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8_undef(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918652-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873855-simd_uchar",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918435-simd_long",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918634-simd_uchar",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917253-simd_make_uchar2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_uchar2(UInt8, UInt8) -> simd_uchar2\nReturns a new vector from the specified scalar values.\nfunc vector2(UInt8, UInt8) -> simd_uchar2\nReturns a new vector from the specified scalar values.\nfunc simd_make_uchar2_undef(UInt8) -> simd_uchar2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916876-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_uchar2) -> UInt8\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uchar2) -> UInt8\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918102-simd_uchar",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916702-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long2) -> simd_bool\nfunc simd_any(simd_long2) -> simd_bool\nfunc simd_all(simd_long2) -> simd_bool\nfunc simd_all(simd_long2) -> simd_bool\nfunc simd_bitselect(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918747-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918629-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918294-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917841-simd_long",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918411-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917085-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_equal(simd_uchar2, simd_uchar2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918676-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short_sat(simd_uint3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918349-simd_uchar",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918274-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar3) -> simd_short3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort3) -> simd_short3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements\nfunc simd_short_sat(simd_int3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_long3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float3) -> simd_short3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double3) -> simd_short3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917870-simd_uchar",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918106-simd_uchar",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918257-simd_uchar",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918212-simd_uchar",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918133-simd_uchar",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918112-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918216-simd_uchar",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918537-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916734-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long2) -> simd_bool\nfunc simd_any(simd_long2) -> simd_bool\nfunc simd_all(simd_long2) -> simd_bool\nfunc simd_all(simd_long2) -> simd_bool\nfunc simd_bitselect(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916690-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long2) -> simd_bool\nfunc simd_any(simd_long2) -> simd_bool\nfunc simd_all(simd_long2) -> simd_bool\nfunc simd_bitselect(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916805-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long2) -> simd_bool\nfunc simd_all(simd_long2) -> simd_bool\nfunc simd_all(simd_long2) -> simd_bool\nfunc simd_bitselect(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916915-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_long2, simd_long2) -> simd_long2\nReturns the minimum value of each element in a vector.\nfunc simd_min(simd_long2, simd_long2) -> simd_long2\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_long2, simd_long2) -> simd_long2\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917126-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_long2, simd_long2) -> simd_long2\nReturns the minimum value of each element in a vector.\nfunc simd_min(simd_long2, simd_long2) -> simd_long2\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_long2, simd_long2) -> simd_long2\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917143-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long2) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_long2) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long2) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_long2) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long2) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917018-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_long2, simd_long2) -> simd_long2\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_long2, simd_long2) -> simd_long2\nReturns the maximum value of each element in a vector.\nfunc simd_max(simd_long2, simd_long2) -> simd_long2\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916924-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long2) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_long2) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long2) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_long2) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long2) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916999-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long2) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_long2) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long2) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long2) -> simd_long1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_long2) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916872-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long2) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_long2) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long2) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long2) -> simd_long1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_long2) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917055-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long2) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long2) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_long2) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long2) -> simd_long1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_long2) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916883-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long2) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long2) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_long2) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long2) -> simd_long1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_long2) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917184-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long2) -> simd_long2\nReturns the absolute value of each element in a vector.\nfunc simd_abs(simd_long2) -> simd_long2\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_long2, simd_long2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_long2, simd_long2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916918-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long2) -> simd_long2\nReturns the absolute value of each element in a vector.\nfunc simd_abs(simd_long2) -> simd_long2\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_long2, simd_long2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917138-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long2) -> simd_long2\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_long2, simd_long2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_long2, simd_long2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918664-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917220-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long2) -> simd_long2\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_long2, simd_long2, simd_long2) -> simd_long2\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_long2, simd_long2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_long2, simd_long2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918033-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918742-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918247-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916897-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uchar2, simd_uchar2) -> simd_uchar2\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "vector8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918094-vector8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uchar8(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector.\nfunc simd_make_uchar8(simd_uchar16) -> simd_uchar8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar8(simd_uchar32) -> simd_uchar8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_uchar8(simd_uchar64) -> simd_uchar8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8_undef(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918324-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916940-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uchar8) -> UInt8\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_uchar8) -> UInt8\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917202-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uchar2) -> UInt8\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_uchar2) -> UInt8\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918315-simd_uchar",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_int16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_float16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917848-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918748-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917908-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating point elements."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916779-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uchar2) -> simd_bool\nfunc simd_bitselect(simd_uchar2, simd_uchar2, simd_char2) -> simd_uchar2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916921-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ulong2, simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_ulong2, simd_ulong2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_ulong2, simd_ulong2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918076-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918051-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918721-simd_uchar",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918259-simd_long",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917149-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uchar8, simd_uchar8) -> simd_uchar8\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918569-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918755-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_long2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917462-simd_make_long2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_long2(simd_long2) -> simd_long2\nReturns a new vector from the specified vector.\nfunc simd_make_long2(simd_long3) -> simd_long2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_long2(simd_long3) -> simd_long2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_long2(simd_long4) -> simd_long2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long2(simd_long4) -> simd_long2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long2(simd_long8) -> simd_long2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long2(simd_long8) -> simd_long2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_make_long2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917639-simd_make_long2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_long2(simd_long2) -> simd_long2\nReturns a new vector from the specified vector.\nfunc simd_make_long2(simd_long2) -> simd_long2\nReturns a new vector from the specified vector.\nfunc simd_make_long2(simd_long3) -> simd_long2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_long2(simd_long4) -> simd_long2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long2(simd_long4) -> simd_long2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long2(simd_long8) -> simd_long2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long2(simd_long8) -> simd_long2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_make_long2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917321-simd_make_long2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_long2(simd_long2) -> simd_long2\nReturns a new vector from the specified vector.\nfunc simd_make_long2(simd_long2) -> simd_long2\nReturns a new vector from the specified vector.\nfunc simd_make_long2(simd_long3) -> simd_long2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_long2(simd_long3) -> simd_long2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_long2(simd_long4) -> simd_long2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long2(simd_long8) -> simd_long2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long2(simd_long8) -> simd_long2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_make_long2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917690-simd_make_long2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_long2(simd_long2) -> simd_long2\nReturns a new vector from the specified vector.\nfunc simd_make_long2(simd_long2) -> simd_long2\nReturns a new vector from the specified vector.\nfunc simd_make_long2(simd_long3) -> simd_long2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_long2(simd_long3) -> simd_long2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_long2(simd_long4) -> simd_long2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long2(simd_long4) -> simd_long2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long2(simd_long8) -> simd_long2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_make_long2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917532-simd_make_long2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_long2(simd_long2) -> simd_long2\nReturns a new vector from the specified vector.\nfunc simd_make_long2(simd_long2) -> simd_long2\nReturns a new vector from the specified vector.\nfunc simd_make_long2(simd_long3) -> simd_long2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_long2(simd_long3) -> simd_long2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_long2(simd_long4) -> simd_long2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long2(simd_long8) -> simd_long2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long2(simd_long8) -> simd_long2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_make_long2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917552-simd_make_long2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_long2(simd_long2) -> simd_long2\nReturns a new vector from the specified vector.\nfunc simd_make_long2(simd_long2) -> simd_long2\nReturns a new vector from the specified vector.\nfunc simd_make_long2(simd_long3) -> simd_long2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_long2(simd_long3) -> simd_long2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_long2(simd_long4) -> simd_long2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long2(simd_long4) -> simd_long2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long2(simd_long8) -> simd_long2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_make_long2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917264-simd_make_long2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_long2(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc simd_make_long2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc simd_make_long2_undef(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long2_undef(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_long2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917343-simd_make_long2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_long2(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc simd_make_long2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc simd_make_long2_undef(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long2_undef(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_uchar2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917323-simd_make_uchar2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_uchar2(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector.\nfunc simd_make_uchar2(simd_uchar3) -> simd_uchar2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_uchar2(simd_uchar4) -> simd_uchar2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uchar2(simd_uchar8) -> simd_uchar2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar2(simd_uchar32) -> simd_uchar2\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar2(simd_uchar64) -> simd_uchar2\nReturns a new vector by truncating the specified sixty four-element vector."
  },
  {
    "title": "simd_make_uchar2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917339-simd_make_uchar2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_uchar2(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector.\nfunc simd_make_uchar2(simd_uchar3) -> simd_uchar2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_uchar2(simd_uchar4) -> simd_uchar2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uchar2(simd_uchar8) -> simd_uchar2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar2(simd_uchar16) -> simd_uchar2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar2(simd_uchar64) -> simd_uchar2\nReturns a new vector by truncating the specified sixty four-element vector."
  },
  {
    "title": "simd_make_long2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919016-simd_make_long2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_long2(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long2(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc simd_make_long2_undef(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long2_undef(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_long2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867727-simd_make_long2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_long2(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long2(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc simd_make_long2_undef(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long2_undef(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918671-simd_long",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918254-vector2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_long2(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long2(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc simd_make_long2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc simd_make_long2_undef(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long2_undef(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918392-simd_long",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873845-simd_long",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918745-simd_long",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_long2_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867721-simd_make_long2_undef",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_long2(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long2(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc simd_make_long2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc simd_make_long2_undef(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918391-simd_long",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar2) -> simd_long2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort2) -> simd_long2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float2) -> simd_long2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double2) -> simd_long2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar2_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867714-simd_make_uchar2_undef",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_uchar2(UInt8) -> simd_uchar2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_uchar2(UInt8, UInt8) -> simd_uchar2\nReturns a new vector from the specified scalar values.\nfunc vector2(UInt8, UInt8) -> simd_uchar2\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "simd_make_uchar2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917563-simd_make_uchar2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_uchar2(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector.\nfunc simd_make_uchar2(simd_uchar3) -> simd_uchar2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_uchar2(simd_uchar8) -> simd_uchar2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar2(simd_uchar16) -> simd_uchar2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar2(simd_uchar32) -> simd_uchar2\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar2(simd_uchar64) -> simd_uchar2\nReturns a new vector by truncating the specified sixty four-element vector."
  },
  {
    "title": "simd_make_uchar2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917653-simd_make_uchar2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_uchar2(simd_uchar3) -> simd_uchar2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_uchar2(simd_uchar4) -> simd_uchar2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uchar2(simd_uchar8) -> simd_uchar2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar2(simd_uchar16) -> simd_uchar2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar2(simd_uchar32) -> simd_uchar2\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar2(simd_uchar64) -> simd_uchar2\nReturns a new vector by truncating the specified sixty four-element vector."
  },
  {
    "title": "simd_make_uchar2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867699-simd_make_uchar2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_uchar2(UInt8) -> simd_uchar2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector2(UInt8, UInt8) -> simd_uchar2\nReturns a new vector from the specified scalar values.\nfunc simd_make_uchar2_undef(UInt8) -> simd_uchar2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_uchar2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917637-simd_make_uchar2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_uchar2(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector.\nfunc simd_make_uchar2(simd_uchar3) -> simd_uchar2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_uchar2(simd_uchar4) -> simd_uchar2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uchar2(simd_uchar8) -> simd_uchar2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_uchar2(simd_uchar16) -> simd_uchar2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar2(simd_uchar32) -> simd_uchar2\nReturns a new vector by truncating the specified thirty two-element vector."
  },
  {
    "title": "simd_make_uchar2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917569-simd_make_uchar2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_uchar2(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector.\nfunc simd_make_uchar2(simd_uchar3) -> simd_uchar2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_uchar2(simd_uchar4) -> simd_uchar2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_uchar2(simd_uchar16) -> simd_uchar2\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar2(simd_uchar32) -> simd_uchar2\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar2(simd_uchar64) -> simd_uchar2\nReturns a new vector by truncating the specified sixty four-element vector."
  },
  {
    "title": "simd_make_long2_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919015-simd_make_long2_undef",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_long2(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long2(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc simd_make_long2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc simd_make_long2_undef(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "vector2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918582-vector2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_long2(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long2(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc simd_make_long2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_long1, simd_long1) -> simd_long2\nReturns a new vector from the specified scalar values.\nfunc simd_make_long2_undef(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long2_undef(simd_long1) -> simd_long2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "vector2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917967-vector2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_uchar2(UInt8) -> simd_uchar2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_uchar2(UInt8, UInt8) -> simd_uchar2\nReturns a new vector from the specified scalar values.\nfunc simd_make_uchar2_undef(UInt8) -> simd_uchar2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918752-simd_uchar",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918157-simd_uchar",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar2) -> simd_uchar2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short2) -> simd_uchar2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_int2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float2) -> simd_uchar2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double2) -> simd_uchar2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917190-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uchar2, simd_uchar2, simd_uchar2) -> simd_uchar2\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_make_uchar8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917469-simd_make_uchar8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uchar8(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector.\nfunc simd_make_uchar8(simd_uchar16) -> simd_uchar8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar8(simd_uchar32) -> simd_uchar8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_uchar8(simd_uchar64) -> simd_uchar8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8_undef(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917597-simd_make_uchar8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uchar8(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector.\nfunc simd_make_uchar8(simd_uchar16) -> simd_uchar8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar8(simd_uchar64) -> simd_uchar8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8_undef(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917391-simd_make_uchar8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uchar8(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar16) -> simd_uchar8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar8(simd_uchar32) -> simd_uchar8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_uchar8(simd_uchar64) -> simd_uchar8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8_undef(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917526-simd_make_uchar8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uchar8(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector.\nfunc simd_make_uchar8(simd_uchar16) -> simd_uchar8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar8(simd_uchar32) -> simd_uchar8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_uchar8(simd_uchar64) -> simd_uchar8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8_undef(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917120-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uchar16, simd_uchar16, simd_uchar16) -> simd_uchar16\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_make_uchar8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917337-simd_make_uchar8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uchar8(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector.\nfunc simd_make_uchar8(simd_uchar16) -> simd_uchar8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar8(simd_uchar32) -> simd_uchar8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_uchar8(simd_uchar64) -> simd_uchar8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8_undef(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916774-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uchar16) -> simd_bool\nfunc simd_all(simd_uchar16) -> simd_bool"
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918496-simd_uchar",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867672-simd_make_uchar8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_uchar8(UInt8) -> simd_uchar8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918369-simd_uchar",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918743-simd_uchar",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918672-simd_uchar",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918508-simd_uchar",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918659-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918021-simd_uchar",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917058-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_uchar16, simd_uchar16) -> simd_uchar16\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916795-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uchar16) -> simd_bool\nfunc simd_bitselect(simd_uchar16, simd_uchar16, simd_char16) -> simd_uchar16\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918129-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917145-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uchar16) -> UInt8\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_uchar16) -> UInt8\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916869-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uchar16) -> UInt8\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_uchar16) -> UInt8\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917227-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_uchar16, simd_uchar16) -> simd_uchar16\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917030-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_equal(simd_uchar16, simd_uchar16) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916677-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_uchar16) -> simd_bool\nfunc simd_bitselect(simd_uchar16, simd_uchar16, simd_char16) -> simd_uchar16\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916767-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uchar8) -> simd_bool\nfunc simd_all(simd_uchar8) -> simd_bool"
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916675-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uchar8) -> simd_bool\nfunc simd_bitselect(simd_uchar8, simd_uchar8, simd_char8) -> simd_uchar8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918017-simd_uchar",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_short16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_float16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918180-simd_uchar",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918564-simd_uchar",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_uint16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_float16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916875-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_uchar8, simd_uchar8) -> simd_uchar8\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918750-simd_uchar",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_float16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918267-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918579-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_short16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917981-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_uint16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918567-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_int16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918069-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ushort16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916751-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong2) -> simd_bool\nfunc simd_any(simd_ulong2) -> simd_bool\nfunc simd_all(simd_ulong2) -> simd_bool\nfunc simd_all(simd_ulong2) -> simd_bool\nfunc simd_bitselect(simd_ulong2, simd_ulong2, simd_long2) -> simd_ulong2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918707-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_float16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916683-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong2) -> simd_bool\nfunc simd_any(simd_ulong2) -> simd_bool\nfunc simd_all(simd_ulong2) -> simd_bool\nfunc simd_all(simd_ulong2) -> simd_bool\nfunc simd_bitselect(simd_ulong2, simd_ulong2, simd_long2) -> simd_ulong2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916955-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_uchar2, simd_uchar2) -> simd_uchar2\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916815-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong2) -> simd_bool\nfunc simd_any(simd_ulong2) -> simd_bool\nfunc simd_all(simd_ulong2) -> simd_bool\nfunc simd_bitselect(simd_ulong2, simd_ulong2, simd_long2) -> simd_ulong2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_ulong2, simd_ulong2, simd_long2) -> simd_ulong2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916747-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_uchar2) -> simd_bool\nfunc simd_all(simd_uchar2) -> simd_bool"
  },
  {
    "title": "simd_make_ulong2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917301-simd_make_ulong2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_ulong2(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong2_undef(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong2_undef(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916714-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong2) -> simd_bool\nfunc simd_any(simd_ulong2) -> simd_bool\nfunc simd_all(simd_ulong2) -> simd_bool\nfunc simd_bitselect(simd_ulong2, simd_ulong2, simd_long2) -> simd_ulong2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_ulong2, simd_ulong2, simd_long2) -> simd_ulong2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917033-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_uchar8) -> UInt8\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uchar8) -> UInt8\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918066-simd_ulong",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916704-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_uchar2) -> simd_bool\nfunc simd_bitselect(simd_uchar2, simd_uchar2, simd_char2) -> simd_uchar2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917096-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_equal(simd_uchar8, simd_uchar8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917095-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_uchar8, simd_uchar8, simd_uchar8) -> simd_uchar8\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917038-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_uchar2) -> UInt8\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_uchar2) -> UInt8\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918209-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917101-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong2) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong2) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_ulong2) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong2) -> simd_ulong1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_ulong2) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425448-min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int2, simd_int2) -> simd_int2\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<Int32>, SIMD2<Int32>) -> SIMD2<Int32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<Int32>, Int32) -> SIMD2<Int32>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_int2, simd_int2) -> simd_int2\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<Int32>, SIMD2<Int32>) -> SIMD2<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917871-simd_ulong",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916995-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ulong2, simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_ulong2, simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_ulong2, simd_ulong2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917116-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ulong2, simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_ulong2, simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_ulong2, simd_ulong2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917840-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917993-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_make_uchar8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917325-simd_make_uchar8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uchar8(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector.\nfunc simd_make_uchar8(simd_uchar16) -> simd_uchar8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar8(simd_uchar32) -> simd_uchar8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_uchar8(simd_uchar64) -> simd_uchar8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8_undef(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918220-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "simd_make_uchar8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917608-simd_make_uchar8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uchar8(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector.\nfunc simd_make_uchar8(simd_uchar32) -> simd_uchar8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_uchar8(simd_uchar64) -> simd_uchar8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8_undef(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867729-simd_make_uchar8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uchar8(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector.\nfunc simd_make_uchar8(simd_uchar16) -> simd_uchar8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar8(simd_uchar32) -> simd_uchar8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_uchar8(simd_uchar64) -> simd_uchar8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8_undef(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917384-simd_make_uchar8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uchar8(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector.\nfunc simd_make_uchar8(simd_uchar16) -> simd_uchar8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar8(simd_uchar32) -> simd_uchar8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc vector8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8_undef(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917681-simd_make_uchar8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_uchar8(simd_uchar2) -> simd_uchar8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar8(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector.\nfunc simd_make_uchar8(simd_uchar16) -> simd_uchar8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_uchar8(simd_uchar32) -> simd_uchar8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_uchar8(simd_uchar64) -> simd_uchar8\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8(simd_uchar4, simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar8_undef(simd_uchar3) -> simd_uchar8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar8_undef(simd_uchar4) -> simd_uchar8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917256-simd_make_uchar8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_uchar8_undef(UInt8) -> simd_uchar8\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918005-simd_uchar",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918628-simd_uchar",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918462-simd_uchar",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918530-simd_uchar",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_uchar(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917723-simd_make_uchar16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uchar16(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector.\nfunc simd_make_uchar16(simd_uchar32) -> simd_uchar16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar16(simd_uchar64) -> simd_uchar16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16_undef(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917449-simd_make_uchar16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uchar16(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector.\nfunc simd_make_uchar16(simd_uchar32) -> simd_uchar16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar16(simd_uchar64) -> simd_uchar16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16_undef(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917251-simd_make_uchar16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uchar16(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector.\nfunc simd_make_uchar16(simd_uchar32) -> simd_uchar16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar16(simd_uchar64) -> simd_uchar16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16_undef(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917296-simd_make_uchar16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uchar16(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector.\nfunc simd_make_uchar16(simd_uchar32) -> simd_uchar16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar16(simd_uchar64) -> simd_uchar16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16_undef(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918384-simd_uchar",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918498-simd_uchar",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_short16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar(simd_ushort16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_float16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_uchar(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918607-simd_uchar",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_uchar(simd_char16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_uchar(simd_ushort16) -> simd_uchar16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar(simd_int16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar(simd_uint16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar(simd_float16) -> simd_uchar16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_uchar16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917644-simd_make_uchar16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uchar16(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector.\nfunc simd_make_uchar16(simd_uchar64) -> simd_uchar16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16_undef(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917581-simd_make_uchar16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Scalar Values\nfunc simd_make_uchar16_undef(UInt8) -> simd_uchar16\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_uchar16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917423-simd_make_uchar16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uchar16(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector.\nfunc simd_make_uchar16(simd_uchar32) -> simd_uchar16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar16(simd_uchar64) -> simd_uchar16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16_undef(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917702-simd_make_uchar16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uchar16(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector.\nfunc simd_make_uchar16(simd_uchar32) -> simd_uchar16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar16(simd_uchar64) -> simd_uchar16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16_undef(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917280-simd_make_uchar16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uchar16(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector.\nfunc simd_make_uchar16(simd_uchar32) -> simd_uchar16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar16(simd_uchar64) -> simd_uchar16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16_undef(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917537-simd_make_uchar16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uchar16(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector.\nfunc simd_make_uchar16(simd_uchar32) -> simd_uchar16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc vector16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16_undef(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917518-simd_make_uchar16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uchar16(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar32) -> simd_uchar16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar16(simd_uchar64) -> simd_uchar16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16_undef(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar16(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867655-simd_make_uchar16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uchar16(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector.\nfunc simd_make_uchar16(simd_uchar32) -> simd_uchar16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar16(simd_uchar64) -> simd_uchar16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16_undef(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_uchar_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918192-simd_uchar_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_uchar_sat(simd_char8) -> simd_uchar8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_uchar_sat(simd_short8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ushort8) -> simd_uchar8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_int8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_uchar_sat(simd_uint8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_long8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_ulong8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_uchar_sat(simd_float8) -> simd_uchar8\nReturns a new vector from the specified vector of 32-bit, floating point elements.\nfunc simd_uchar_sat(simd_double8) -> simd_uchar8\nReturns a new vector from the specified vector of 64-bit, floating point elements."
  },
  {
    "title": "vector16(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918297-vector16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uchar16(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector.\nfunc simd_make_uchar16(simd_uchar32) -> simd_uchar16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar16(simd_uchar64) -> simd_uchar16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc simd_make_uchar16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16_undef(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_uchar16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917587-simd_make_uchar16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_uchar16(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar4) -> simd_uchar16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_uchar16(simd_uchar16) -> simd_uchar16\nReturns a new vector from the specified vector.\nfunc simd_make_uchar16(simd_uchar32) -> simd_uchar16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_uchar16(simd_uchar64) -> simd_uchar16\nReturns a new vector by truncating the specified sixty four-element vector.\nfunc vector16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16(simd_uchar8, simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified vectors.\nfunc simd_make_uchar16_undef(simd_uchar2) -> simd_uchar16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar3) -> simd_uchar16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_uchar16_undef(simd_uchar8) -> simd_uchar16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917083-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_uchar16) -> UInt8\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_uchar16) -> UInt8\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918053-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918587-simd_int",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_int2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917605-simd_make_int2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_int2(simd_int2) -> simd_int2\nReturns a new vector from the specified vector.\nfunc simd_make_int2(simd_int3) -> simd_int2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_int2(simd_int4) -> simd_int2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_int2(simd_int8) -> simd_int2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_make_int2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883372-simd_make_int2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_int2(Int32, Int32) -> simd_int2\nReturns a new vector from the specified scalar values.\nfunc vector2(Int32, Int32) -> simd_int2\nReturns a new vector from the specified scalar values.\nfunc simd_make_int2_undef(Int32) -> simd_int2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918701-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918221-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918290-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917838-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873850-simd_ulong",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918470-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917814-vector2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_ulong2(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong2(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong2_undef(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong2_undef(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918538-simd_ulong",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong2_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919023-simd_make_ulong2_undef",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_ulong2(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong2(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong2_undef(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918604-simd_ulong",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918152-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918104-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916722-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long3) -> simd_bool\nfunc simd_any(simd_long3) -> simd_bool\nfunc simd_all(simd_long3) -> simd_bool\nfunc simd_bitselect(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_ulong2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917670-simd_make_ulong2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_ulong2(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector.\nfunc simd_make_ulong2(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector.\nfunc simd_make_ulong2(simd_ulong3) -> simd_ulong2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ulong2(simd_ulong4) -> simd_ulong2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong2(simd_ulong4) -> simd_ulong2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong2(simd_ulong8) -> simd_ulong2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong2(simd_ulong8) -> simd_ulong2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_make_ulong2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917286-simd_make_ulong2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_ulong2(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector.\nfunc simd_make_ulong2(simd_ulong3) -> simd_ulong2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ulong2(simd_ulong3) -> simd_ulong2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ulong2(simd_ulong4) -> simd_ulong2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong2(simd_ulong4) -> simd_ulong2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong2(simd_ulong8) -> simd_ulong2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong2(simd_ulong8) -> simd_ulong2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917846-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917687-simd_make_ulong2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_ulong2(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector.\nfunc simd_make_ulong2(simd_ulong3) -> simd_ulong2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ulong2(simd_ulong3) -> simd_ulong2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ulong2(simd_ulong4) -> simd_ulong2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong2(simd_ulong4) -> simd_ulong2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong2(simd_ulong8) -> simd_ulong2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong2(simd_ulong8) -> simd_ulong2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_make_ulong2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917538-simd_make_ulong2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_ulong2(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector.\nfunc simd_make_ulong2(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector.\nfunc simd_make_ulong2(simd_ulong3) -> simd_ulong2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ulong2(simd_ulong3) -> simd_ulong2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ulong2(simd_ulong4) -> simd_ulong2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong2(simd_ulong8) -> simd_ulong2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong2(simd_ulong8) -> simd_ulong2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_make_ulong2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919024-simd_make_ulong2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_ulong2(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong2(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong2_undef(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong2_undef(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_ulong2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917523-simd_make_ulong2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_ulong2(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector.\nfunc simd_make_ulong2(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector.\nfunc simd_make_ulong2(simd_ulong3) -> simd_ulong2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ulong2(simd_ulong4) -> simd_ulong2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong2(simd_ulong4) -> simd_ulong2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong2(simd_ulong8) -> simd_ulong2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong2(simd_ulong8) -> simd_ulong2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_make_ulong2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917595-simd_make_ulong2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_ulong2(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector.\nfunc simd_make_ulong2(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector.\nfunc simd_make_ulong2(simd_ulong3) -> simd_ulong2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ulong2(simd_ulong3) -> simd_ulong2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ulong2(simd_ulong4) -> simd_ulong2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong2(simd_ulong4) -> simd_ulong2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong2(simd_ulong8) -> simd_ulong2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_make_ulong2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917576-simd_make_ulong2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_ulong2(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector.\nfunc simd_make_ulong2(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector.\nfunc simd_make_ulong2(simd_ulong3) -> simd_ulong2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ulong2(simd_ulong3) -> simd_ulong2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ulong2(simd_ulong4) -> simd_ulong2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong2(simd_ulong8) -> simd_ulong2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_ulong2(simd_ulong8) -> simd_ulong2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_make_ulong2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917693-simd_make_ulong2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_ulong2(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong2_undef(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong2_undef(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "vector2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918065-vector2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_ulong2(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong2(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong2_undef(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong2_undef(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_ulong2_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867741-simd_make_ulong2_undef",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_ulong2(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong2(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong2_undef(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916895-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long3) -> simd_long3\nReturns the absolute value of each element in a vector.\nfunc simd_abs(simd_long3) -> simd_long3\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_long3, simd_long3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_long3, simd_long3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896783-simd_int",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917817-simd_ulong",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918114-simd_ulong",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918526-simd_ulong",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918348-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873931-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int2) -> simd_int2\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD2<Int32>) -> SIMD2<Int32>\nReturns the absolute value of each element in a vector.\nfunc clamp(SIMD2<Int32>, min: SIMD2<Int32>, max: SIMD2<Int32>) -> SIMD2<Int32>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD2<Int32>, min: Int32, max: Int32) -> SIMD2<Int32>\nReturns each element in a vector clamped to a specified scalar range.\nfunc simd_equal(simd_int2, simd_int2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425358-abs",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int2) -> simd_int2\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_int2, simd_int2, simd_int2) -> simd_int2\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD2<Int32>, min: SIMD2<Int32>, max: SIMD2<Int32>) -> SIMD2<Int32>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD2<Int32>, min: Int32, max: Int32) -> SIMD2<Int32>\nReturns each element in a vector clamped to a specified scalar range.\nfunc simd_equal(simd_int2, simd_int2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873936-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int2) -> simd_int2\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD2<Int32>) -> SIMD2<Int32>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_int2, simd_int2, simd_int2) -> simd_int2\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD2<Int32>, min: SIMD2<Int32>, max: SIMD2<Int32>) -> SIMD2<Int32>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD2<Int32>, min: Int32, max: Int32) -> SIMD2<Int32>\nReturns each element in a vector clamped to a specified scalar range."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916855-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long3) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_long3) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long3) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_long3) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long3) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916745-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long3) -> simd_bool\nfunc simd_all(simd_long3) -> simd_bool\nfunc simd_all(simd_long3) -> simd_bool\nfunc simd_bitselect(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916738-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong2) -> simd_bool\nfunc simd_all(simd_ulong2) -> simd_bool\nfunc simd_all(simd_ulong2) -> simd_bool\nfunc simd_bitselect(simd_ulong2, simd_ulong2, simd_long2) -> simd_ulong2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_ulong2, simd_ulong2, simd_long2) -> simd_ulong2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916793-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_ulong2) -> simd_bool\nfunc simd_all(simd_ulong2) -> simd_bool\nfunc simd_all(simd_ulong2) -> simd_bool\nfunc simd_bitselect(simd_ulong2, simd_ulong2, simd_long2) -> simd_ulong2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_ulong2, simd_ulong2, simd_long2) -> simd_ulong2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917088-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long3) -> simd_long3\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_long3, simd_long3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_long3, simd_long3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916846-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns the maximum value of each element in a vector.\nfunc simd_max(simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917036-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns the minimum value of each element in a vector.\nfunc simd_min(simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917084-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns the minimum value of each element in a vector.\nfunc simd_min(simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916845-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns the maximum value of each element in a vector.\nfunc simd_max(simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916839-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong2) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_ulong2) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong2) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_ulong2) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong2) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917106-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong2) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong2) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_ulong2) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong2) -> simd_ulong1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_ulong2) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873848-simd_int",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916953-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong2) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_ulong2) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong2) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_ulong2) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong2) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "vector_int2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vector_int2",
    "html": "See Also\nAlternative Type Alias\ntypealias int2\nDeprecated"
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917127-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong2) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_ulong2) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong2) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong2) -> simd_ulong1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_ulong2) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916852-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_ulong2) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_ulong2) -> simd_ulong1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_ulong2) -> simd_ulong1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_ulong2) -> simd_ulong1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_ulong2) -> simd_ulong1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "int2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/int2",
    "html": "See Also\nAlternative Type Alias\ntypealias vector_int2"
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916934-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_ulong2, simd_ulong2, simd_ulong2) -> simd_ulong2\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_ulong2, simd_ulong2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_ulong2, simd_ulong2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918343-simd_ulong",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2874085-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_int2) -> simd_bool\nReturns true if the high-order bit of any element is set; false otherwise.\nfunc simd_all(simd_int2) -> simd_bool\nReturns true if the high-order bit of every element is set; false otherwise."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918433-simd_ulong",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2874086-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_int2) -> simd_bool\nReturns true if the high-order bit of any element is set; false otherwise.\nfunc simd_bitselect(simd_int2, simd_int2, simd_int2) -> simd_int2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2874087-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_int2) -> simd_bool\nReturns true if the high-order bit of every element is set; false otherwise.\nfunc simd_bitselect(simd_int2, simd_int2, simd_int2) -> simd_int2\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_make_int2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896596-simd_make_int2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_int2(simd_int2) -> simd_int2\nReturns a new vector from the specified vector.\nfunc simd_make_int2(simd_int4) -> simd_int2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_int2(simd_int8) -> simd_int2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_int2(simd_int16) -> simd_int2\nReturns a new vector by truncating the specified sixteen-element vector."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918187-simd_ulong",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425033-min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int2, simd_int2) -> simd_int2\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<Int32>, SIMD2<Int32>) -> SIMD2<Int32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<Int32>, Int32) -> SIMD2<Int32>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_int2, simd_int2) -> simd_int2\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<Int32>, Int32) -> SIMD2<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873932-simd_max",
    "html": "See Also\nExtrema Functions\nfunc max(SIMD2<Int32>, SIMD2<Int32>) -> SIMD2<Int32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<Int32>, Int32) -> SIMD2<Int32>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_int2, simd_int2) -> simd_int2\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<Int32>, SIMD2<Int32>) -> SIMD2<Int32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<Int32>, Int32) -> SIMD2<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425249-reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int2) -> Int32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD2<Int32>) -> Int32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_int2) -> Int32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD2<Int32>) -> Int32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_int2) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918184-simd_long",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873937-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc reduce_min(SIMD2<Int32>) -> Int32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_int2) -> Int32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD2<Int32>) -> Int32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_int2) -> Int32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD2<Int32>) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_int2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867704-simd_make_int2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_int2(Int32) -> simd_int2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector2(Int32, Int32) -> simd_int2\nReturns a new vector from the specified scalar values.\nfunc simd_make_int2_undef(Int32) -> simd_int2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424048-max",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int2, simd_int2) -> simd_int2\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<Int32>, Int32) -> SIMD2<Int32>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_int2, simd_int2) -> simd_int2\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<Int32>, SIMD2<Int32>) -> SIMD2<Int32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<Int32>, Int32) -> SIMD2<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896571-simd_int",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873935-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int2) -> Int32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD2<Int32>) -> Int32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_int2) -> Int32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD2<Int32>) -> Int32\nReturns the maximum value in a vector.\nfunc reduce_add(SIMD2<Int32>) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "vector2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1640312-vector2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_int2(Int32) -> simd_int2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_int2(Int32, Int32) -> simd_int2\nReturns a new vector from the specified scalar values.\nfunc simd_make_int2_undef(Int32) -> simd_int2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_int2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917642-simd_make_int2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_int2(simd_int2) -> simd_int2\nReturns a new vector from the specified vector.\nfunc simd_make_int2(simd_int3) -> simd_int2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_int2(simd_int4) -> simd_int2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_int2(simd_int16) -> simd_int2\nReturns a new vector by truncating the specified sixteen-element vector."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918431-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918331-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873853-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918477-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_ulong_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918678-simd_ulong_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_ulong_sat(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong_sat(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong_sat(simd_uint2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong_sat(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong_sat(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917609-simd_make_ulong2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_ulong2(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector.\nfunc simd_make_ulong2(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector.\nfunc simd_make_ulong2(simd_ulong3) -> simd_ulong2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ulong2(simd_ulong3) -> simd_ulong2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_ulong2(simd_ulong4) -> simd_ulong2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong2(simd_ulong4) -> simd_ulong2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_ulong2(simd_ulong8) -> simd_ulong2\nReturns a new vector by truncating the specified eight-element vector."
  },
  {
    "title": "simd_ulong(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918052-simd_ulong",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_ulong(simd_char2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_ulong(simd_uchar2) -> simd_ulong2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_ulong(simd_short2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_ulong(simd_ushort2) -> simd_ulong2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_ulong(simd_int2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_long2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_ulong2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_ulong(simd_float2) -> simd_ulong2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_ulong(simd_double2) -> simd_ulong2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_ulong2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867749-simd_make_ulong2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_ulong2(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong2(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_ulong2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc vector2(simd_ulong1, simd_ulong1) -> simd_ulong2\nReturns a new vector from the specified scalar values.\nfunc simd_make_ulong2_undef(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_ulong2_undef(simd_ulong1) -> simd_ulong2\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917186-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long3) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long3) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_long3) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long3) -> simd_long1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_long3) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "vector3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918245-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_long3(simd_long1, simd_long2) -> simd_long3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long3(simd_long1, simd_long2) -> simd_long3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_long3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918625-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918647-simd_long",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916884-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_long3, simd_long3) -> simd_long3\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_long3, simd_long3) -> simd_long3\nReturns the maximum value of each element in a vector.\nfunc simd_max(simd_long3, simd_long3) -> simd_long3\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917875-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917022-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long3) -> simd_long3\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_long3, simd_long3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_long3, simd_long3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "vImageCVImageFormat.Format.formatARGB2101010LEPacked | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/formatargb2101010lepacked",
    "html": "See Also\nRGBA and ARGB format constants\ncase format16LE5551\nA little-endian 16-bit, RGBA pixel format with 5 bits per color channel and 1-bit alpha.\ncase format32ABGR\nA 32-bit, ABGR pixel format with 8 bits per channel.\ncase format32ARGB\nA 32-bit, ARGB pixel format with 8 bits per channel.\ncase format32BGRA\nA 32-bit, BGRA pixel format with 8 bits per channel.\ncase format32RGBA\nA 32-bit, RGBA pixel format with 8 bits per channel.\ncase format64ARGB\nA 64-bit, ARGB pixel format with 8 bits per channel.\ncase format64RGBAHalf\nA little-endian 64-bit, RGBA pixel format with 16 bits per channel.\ncase format128RGBAFloat\nA little-endian 128-bit, RGBA pixel format with 32 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.formatOneComponent32Float | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/formatonecomponent32float",
    "html": "See Also\nSingle-component format constants\ncase formatOneComponent8\nAn 8-bit, single-component pixel format with black equal to zero.\ncase formatOneComponent16Half\nA little-endian 16-bit, single-componennt pixel format."
  },
  {
    "title": "vImageCVImageFormat.Format.format8IndexedGray_WhiteIsZero | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format8indexedgray_whiteiszero",
    "html": "Discussion\n\nThis pixel format supports color spaces that are CGColorSpaceModel.indexed.\n\nSee Also\nIndexed color format constants\ncase format1Monochrome\nA 1-bit indexed pixel format.\ncase format1IndexedGray_WhiteIsZero\nA 1-bit indexed pixel format with white equal to zero.\ncase format2Indexed\nA 2-bit indexed pixel format.\ncase format2IndexedGray_WhiteIsZero\nA 2-bit indexed pixel format with white equal to zero.\ncase format4Indexed\nA 4-bit indexed pixel format.\ncase format4IndexedGray_WhiteIsZero\nA 4-bit indexed pixel format with white equal to zero.\ncase format8Indexed\nAn 8-bit indexed pixel format."
  },
  {
    "title": "vImageCVImageFormat.Format.format4444YpCbCrA8R | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format4444ypcbcra8r",
    "html": "See Also\nYpCbCr with alpha format constants\ncase format422YpCbCr_4A_8BiPlanar\nA two-plane pixel format that contains a video-range 8-bit YpCbCr 4:2:2 plane and an 8-bit alpha plane.\ncase format4444AYpCbCr8\nA full-range alpha, video-range luminance and chrominance YpCbCrA 4:4:4:4 pixel format with 8 bits per channel and ordered AYpCbCr.\ncase format4444YpCbCrA8\nA component YpCbCrA 4:4:4:4 pixel format with 8 bits per channel and ordered CbYpCrA.\ncase format4444AYpCbCr16\nA full-range alpha, video-range luminance and chrominance YpCbCrA 4:4:4:4 pixel format with 16 bits per channel and ordered AYpCbCr."
  },
  {
    "title": "max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1426341-max",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int2, simd_int2) -> simd_int2\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<Int32>, SIMD2<Int32>) -> SIMD2<Int32>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_int2, simd_int2) -> simd_int2\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<Int32>, SIMD2<Int32>) -> SIMD2<Int32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<Int32>, Int32) -> SIMD2<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873929-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_int2, simd_int2) -> simd_int2\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<Int32>, SIMD2<Int32>) -> SIMD2<Int32>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD2<Int32>, Int32) -> SIMD2<Int32>\nReturns the maximum value of each element in a vector.\nfunc min(SIMD2<Int32>, SIMD2<Int32>) -> SIMD2<Int32>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD2<Int32>, Int32) -> SIMD2<Int32>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424828-reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int2) -> Int32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD2<Int32>) -> Int32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_int2) -> Int32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_int2) -> Int32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD2<Int32>) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_make_int2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896558-simd_make_int2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_int2(simd_int2) -> simd_int2\nReturns a new vector from the specified vector.\nfunc simd_make_int2(simd_int3) -> simd_int2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_int2(simd_int8) -> simd_int2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_int2(simd_int16) -> simd_int2\nReturns a new vector by truncating the specified sixteen-element vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873926-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int2) -> Int32\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD2<Int32>) -> Int32\nReturns the minimum value in a vector.\nfunc reduce_max(SIMD2<Int32>) -> Int32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_int2) -> Int32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD2<Int32>) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425454-reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_int2) -> Int32\nReturns the minimum value in a vector.\nfunc simd_reduce_max(simd_int2) -> Int32\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD2<Int32>) -> Int32\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_int2) -> Int32\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD2<Int32>) -> Int32\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919026-simd_int",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917951-simd_int",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_int2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883285-simd_make_int2",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Other Vectors\nfunc simd_make_int2(simd_int3) -> simd_int2\nReturns a new vector by truncating the specified three-element vector.\nfunc simd_make_int2(simd_int4) -> simd_int2\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_int2(simd_int8) -> simd_int2\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_int2(simd_int16) -> simd_int2\nReturns a new vector by truncating the specified sixteen-element vector."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918018-simd_int",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918552-simd_int",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_int2_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867709-simd_make_int2_undef",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Scalar Values\nfunc simd_make_int2(Int32) -> simd_int2\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_int2(Int32, Int32) -> simd_int2\nReturns a new vector from the specified scalar values.\nfunc vector2(Int32, Int32) -> simd_int2\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918390-simd_int",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917888-simd_int",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918240-simd_int",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vImageCVImageFormat.Format.format24BGR | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format24bgr",
    "html": "See Also\nRGB format constants\ncase format16LE555\nA little-endian 16-bit, RGB pixel format with 5 bits per channel.\ncase format16LE565\nA little-endian 16-bit, RGB pixel format with 5 bits for red and blue, and 6 bits for green.\ncase format16BE555\nA big-endian 16-bit, RGB pixel format with 5 bits per channel.\ncase format16BE565\nA big-endian 16-bit, RGB pixel format with 5 bits for red and blue, and 6 bits for green.\ncase format24RGB\nA 24-bit, RGB pixel format with 8 bits per channel.\ncase format30RGB\nA big-endian 30-bit, RGB pixel format with 10 bits per channel.\ncase format30RGBLEPackedWideGamut\nA little-endian 30-bit, wide-gamut RGB pixel format with 10 bits per channel.\ncase format48RGB\nA big-endian 48-bit, RGB pixel format with 16 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format16BE555 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format16be555",
    "html": "See Also\nRGB format constants\ncase format16LE555\nA little-endian 16-bit, RGB pixel format with 5 bits per channel.\ncase format16LE565\nA little-endian 16-bit, RGB pixel format with 5 bits for red and blue, and 6 bits for green.\ncase format16BE565\nA big-endian 16-bit, RGB pixel format with 5 bits for red and blue, and 6 bits for green.\ncase format24RGB\nA 24-bit, RGB pixel format with 8 bits per channel.\ncase format24BGR\nA 24-bit, BGR pixel format with 8 bits per channel.\ncase format30RGB\nA big-endian 30-bit, RGB pixel format with 10 bits per channel.\ncase format30RGBLEPackedWideGamut\nA little-endian 30-bit, wide-gamut RGB pixel format with 10 bits per channel.\ncase format48RGB\nA big-endian 48-bit, RGB pixel format with 16 bits per channel."
  },
  {
    "title": "simd_make_short16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917472-simd_make_short16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_short16(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short16) -> simd_short16\nReturns a new vector from the specified vector.\nfunc simd_make_short16(simd_short32) -> simd_short16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc simd_make_short16_undef(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/3241443",
    "html": "Parameters\na\n\nThe left-hand-side value.\n\nb\n\nThe right-hand-side value.\n\nReturn Value\n\nA Boolean value that indicates whether two values are equal.\n\nSee Also\nComparing values\nstatic func != (vImageCVImageFormat.Format, vImageCVImageFormat.Format) -> Bool\nReturns a Boolean value that indicates whether two values aren’t equal."
  },
  {
    "title": "simd_make_long3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917720-simd_make_long3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918338-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918182-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918472-simd_long",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_long3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917604-simd_make_long3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917570-simd_make_long3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867731-simd_make_long3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_long3(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long3(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc simd_make_long3_undef(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long3_undef(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_long3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919018-simd_make_long3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_long3(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long3(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc simd_make_long3_undef(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long3_undef(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_long3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917559-simd_make_long3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917338-simd_make_long3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918072-simd_long",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917419-simd_make_short8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_short8(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short8) -> simd_short8\nReturns a new vector from the specified vector.\nfunc simd_make_short8(simd_short16) -> simd_short8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short8(simd_short32) -> simd_short8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_short8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc simd_make_short8_undef(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918193-simd_long",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_long3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917630-simd_make_long3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_long3(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc simd_make_long3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc simd_make_long3_undef(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long3_undef(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_long3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917361-simd_make_long3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_long3(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc simd_make_long3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc simd_make_long3_undef(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long3_undef(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917903-simd_long",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "vImageCVImageFormat.Format.formatDisparityFloat32 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/formatdisparityfloat32",
    "html": "Discussion\n\nUnits are 1 / meters, that is, (pixelShift / (pixelFocalLength * baselineInMeters)).\n\nSee Also\nDisparity format constants\ncase formatDisparityFloat16\nA 16-bit disparity pixel format that describes the normalized shift when comparing two images."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/3241508-hash",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nRelationships\nFrom Protocol\nHashable\nSee Also\nProviding a hash value\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "vector3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918252-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_long3(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long3(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc simd_make_long3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc simd_make_long3_undef(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long3_undef(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918605-simd_long",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_long3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917421-simd_make_long3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_long3(simd_long1, simd_long2) -> simd_long3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long3(simd_long1, simd_long2) -> simd_long3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917836-simd_long",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918495-simd_long",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917132-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_short8) -> Int16\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_short8) -> Int16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/3241442",
    "html": "Parameters\nlhs\n\nThe left-hand-side value.\n\nrhs\n\nThe right-hand-side value.\n\nReturn Value\n\nA Boolean value that indicates whether two values aren’t equal.\n\nSee Also\nComparing values\nstatic func == (vImageCVImageFormat.Format, vImageCVImageFormat.Format) -> Bool\nReturns a Boolean value that indicates whether two values are equal."
  },
  {
    "title": "simd_int(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896735-simd_int",
    "html": "See Also\nFunctions to Create Two-Element Vectors From Vectors of Other Types\nfunc simd_int(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919028-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917820-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918048-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896539-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918759-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873852-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_int_sat(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917191-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_long3, simd_long3) -> simd_long3\nReturns the minimum value of each element in a vector.\nfunc simd_min(simd_long3, simd_long3) -> simd_long3\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_long3, simd_long3) -> simd_long3\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916720-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long3) -> simd_bool\nfunc simd_any(simd_long3) -> simd_bool\nfunc simd_all(simd_long3) -> simd_bool\nfunc simd_all(simd_long3) -> simd_bool\nfunc simd_bitselect(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916678-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long3) -> simd_bool\nfunc simd_all(simd_long3) -> simd_bool\nfunc simd_all(simd_long3) -> simd_bool\nfunc simd_bitselect(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916902-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long3) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_long3) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long3) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long3) -> simd_long1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_long3) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896545-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_float2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_int_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896665-simd_int_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_int_sat(simd_char2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_int_sat(simd_uchar2) -> simd_int2\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_int_sat(simd_short2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_int_sat(simd_ushort2) -> simd_int2\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_int_sat(simd_int2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_int_sat(simd_uint2) -> simd_int2\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_long2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_ulong2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_int_sat(simd_double2) -> simd_int2\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917010-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long3) -> simd_long3\nReturns the absolute value of each element in a vector.\nfunc simd_abs(simd_long3) -> simd_long3\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_long3, simd_long3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916723-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long3) -> simd_bool\nfunc simd_any(simd_long3) -> simd_bool\nfunc simd_all(simd_long3) -> simd_bool\nfunc simd_all(simd_long3) -> simd_bool\nfunc simd_bitselect(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916909-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long3) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long3) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_long3) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long3) -> simd_long1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_long3) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916994-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_long3, simd_long3) -> simd_long3\nReturns the minimum value of each element in a vector.\nfunc simd_max(simd_long3, simd_long3) -> simd_long3\nReturns the maximum value of each element in a vector.\nfunc simd_max(simd_long3, simd_long3) -> simd_long3\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916975-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long3) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_long3) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long3) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long3) -> simd_long1\nReturns the sum of all elements in a vector.\nfunc simd_reduce_add(simd_long3) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917097-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_long3) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_min(simd_long3) -> simd_long1\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_long3) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_max(simd_long3) -> simd_long1\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_long3) -> simd_long1\nReturns the sum of all elements in a vector."
  },
  {
    "title": "clamp(_:min:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425726-clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int2) -> simd_int2\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD2<Int32>) -> SIMD2<Int32>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_int2, simd_int2, simd_int2) -> simd_int2\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD2<Int32>, min: SIMD2<Int32>, max: SIMD2<Int32>) -> SIMD2<Int32>\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_int2, simd_int2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "clamp(_:min:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425740-clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_int2) -> simd_int2\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD2<Int32>) -> SIMD2<Int32>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_int2, simd_int2, simd_int2) -> simd_int2\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD2<Int32>, min: Int32, max: Int32) -> SIMD2<Int32>\nReturns each element in a vector clamped to a specified scalar range.\nfunc simd_equal(simd_int2, simd_int2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873927-simd_abs",
    "html": "See Also\nCommon Functions\nfunc abs(SIMD2<Int32>) -> SIMD2<Int32>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_int2, simd_int2, simd_int2) -> simd_int2\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD2<Int32>, min: SIMD2<Int32>, max: SIMD2<Int32>) -> SIMD2<Int32>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD2<Int32>, min: Int32, max: Int32) -> SIMD2<Int32>\nReturns each element in a vector clamped to a specified scalar range.\nfunc simd_equal(simd_int2, simd_int2) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916962-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long3) -> simd_long3\nReturns the absolute value of each element in a vector.\nfunc simd_abs(simd_long3) -> simd_long3\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns each element in a vector clamped to a specified range.\nfunc simd_clamp(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_long3, simd_long3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917166-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_long3) -> simd_long3\nReturns the absolute value of each element in a vector.\nfunc simd_abs(simd_long3) -> simd_long3\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_long3, simd_long3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_equal(simd_long3, simd_long3) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916768-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_long3) -> simd_bool\nfunc simd_any(simd_long3) -> simd_bool\nfunc simd_all(simd_long3) -> simd_bool\nfunc simd_bitselect(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_long3, simd_long3, simd_long3) -> simd_long3\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "vImageCVImageFormat.Format.format1Monochrome | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format1monochrome",
    "html": "Discussion\n\nThis pixel format supports color spaces that are either CGColorSpaceModel.monochrome or CGColorSpaceModel.indexed.\n\nSee Also\nIndexed color format constants\ncase format1IndexedGray_WhiteIsZero\nA 1-bit indexed pixel format with white equal to zero.\ncase format2Indexed\nA 2-bit indexed pixel format.\ncase format2IndexedGray_WhiteIsZero\nA 2-bit indexed pixel format with white equal to zero.\ncase format4Indexed\nA 4-bit indexed pixel format.\ncase format4IndexedGray_WhiteIsZero\nA 4-bit indexed pixel format with white equal to zero.\ncase format8Indexed\nAn 8-bit indexed pixel format.\ncase format8IndexedGray_WhiteIsZero\nAn 8-bit indexed pixel format with white equal to zero."
  },
  {
    "title": "vImageCVImageFormat.Format.format422YpCbCr_4A_8BiPlanar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format422ypcbcr_4a_8biplanar",
    "html": "See Also\nYpCbCr with alpha format constants\ncase format4444AYpCbCr8\nA full-range alpha, video-range luminance and chrominance YpCbCrA 4:4:4:4 pixel format with 8 bits per channel and ordered AYpCbCr.\ncase format4444YpCbCrA8\nA component YpCbCrA 4:4:4:4 pixel format with 8 bits per channel and ordered CbYpCrA.\ncase format4444YpCbCrA8R\nA component YpCbCrA 4:4:4:4 rendering format with 8 bits per channel, full-range alpha, zero-biased YUV, and ordered AYpCbCr.\ncase format4444AYpCbCr16\nA full-range alpha, video-range luminance and chrominance YpCbCrA 4:4:4:4 pixel format with 16 bits per channel and ordered AYpCbCr."
  },
  {
    "title": "vImageCVImageFormat.Format.formatDepthFloat16 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/formatdepthfloat16",
    "html": "See Also\nDepth format constants\ncase formatDepthFloat32\nA 32-bit depth pixel format that describes the distance to an object in meters."
  },
  {
    "title": "vImageCVImageFormat.Format.format4444AYpCbCr16 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format4444aypcbcr16",
    "html": "See Also\nYpCbCr with alpha format constants\ncase format422YpCbCr_4A_8BiPlanar\nA two-plane pixel format that contains a video-range 8-bit YpCbCr 4:2:2 plane and an 8-bit alpha plane.\ncase format4444AYpCbCr8\nA full-range alpha, video-range luminance and chrominance YpCbCrA 4:4:4:4 pixel format with 8 bits per channel and ordered AYpCbCr.\ncase format4444YpCbCrA8\nA component YpCbCrA 4:4:4:4 pixel format with 8 bits per channel and ordered CbYpCrA.\ncase format4444YpCbCrA8R\nA component YpCbCrA 4:4:4:4 rendering format with 8 bits per channel, full-range alpha, zero-biased YUV, and ordered AYpCbCr."
  },
  {
    "title": "vImageCVImageFormat.Format.format444YpCbCr10BiPlanarFullRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format444ypcbcr10biplanarfullrange",
    "html": "Discussion\n\nThis format defines luminance data in the range 0...1023, and stores 10 bits in the most significant bits of 16 bits.\n\nSee Also\n4:4:4 YpCbCr format constants\ncase format444YpCbCr8\nA video-range, component YpCbCr 4:4:4 pixel format with 8 bits per channel and ordered CrYpCb.\ncase format444YpCbCr10\nA component YpCbCr 4:4:4 pixel format with 10 bits per channel.\ncase format444YpCbCr10BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:4:4 pixel format with 10 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format444YpCbCr10BiPlanarVideoRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format444ypcbcr10biplanarvideorange",
    "html": "Discussion\n\nThis format defines luminance and chrominance data in the range 64...940, and stores 10 bits in the most significant bits of 16 bits.\n\nSee Also\n4:4:4 YpCbCr format constants\ncase format444YpCbCr8\nA video-range, component YpCbCr 4:4:4 pixel format with 8 bits per channel and ordered CrYpCb.\ncase format444YpCbCr10\nA component YpCbCr 4:4:4 pixel format with 10 bits per channel.\ncase format444YpCbCr10BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:4:4 pixel format with 10 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format444YpCbCr8 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format444ypcbcr8",
    "html": "See Also\n4:4:4 YpCbCr format constants\ncase format444YpCbCr10\nA component YpCbCr 4:4:4 pixel format with 10 bits per channel.\ncase format444YpCbCr10BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:4:4 pixel format with 10 bits per channel.\ncase format444YpCbCr10BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:4:4 pixel format with 10 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format422YpCbCr10BiPlanarVideoRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format422ypcbcr10biplanarvideorange",
    "html": "Discussion\n\nThis format defines luminance and chrominance data in the range 64...940, and stores 10 bits in the most significant bits of 16 bits.\n\nSee Also\n4:2:2 YpCbCr format constants\ncase format422YpCbCr8\nA component YpCbCr 4:2:2 pixel format with 8 bits per channel and ordered CbYp₀CrYp₁.\ncase format422YpCbCr8_yuvs\nA component YpCbCr 4:2:2 pixel format with 8 bits per channel and ordered Yp₀CbYp₁Cr.\ncase format422YpCbCr8FullRange\nA full-range, component YpCbCr 4:2:2 pixel format with 8 bits per channel.\ncase format422YpCbCr10\nA component YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr10BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr16\nA video-range, two-plane YpCbCr 4:2:2 pixel format with 16 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format422YpCbCr16 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format422ypcbcr16",
    "html": "Discussion\n\nThis format defines luminance and chrominance data in the range 4096...61440.\n\nSee Also\n4:2:2 YpCbCr format constants\ncase format422YpCbCr8\nA component YpCbCr 4:2:2 pixel format with 8 bits per channel and ordered CbYp₀CrYp₁.\ncase format422YpCbCr8_yuvs\nA component YpCbCr 4:2:2 pixel format with 8 bits per channel and ordered Yp₀CbYp₁Cr.\ncase format422YpCbCr8FullRange\nA full-range, component YpCbCr 4:2:2 pixel format with 8 bits per channel.\ncase format422YpCbCr10\nA component YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr10BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr10BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:2:2 pixel format with 10 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format16LE555 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format16le555",
    "html": "See Also\nRGB format constants\ncase format16LE565\nA little-endian 16-bit, RGB pixel format with 5 bits for red and blue, and 6 bits for green.\ncase format16BE555\nA big-endian 16-bit, RGB pixel format with 5 bits per channel.\ncase format16BE565\nA big-endian 16-bit, RGB pixel format with 5 bits for red and blue, and 6 bits for green.\ncase format24RGB\nA 24-bit, RGB pixel format with 8 bits per channel.\ncase format24BGR\nA 24-bit, BGR pixel format with 8 bits per channel.\ncase format30RGB\nA big-endian 30-bit, RGB pixel format with 10 bits per channel.\ncase format30RGBLEPackedWideGamut\nA little-endian 30-bit, wide-gamut RGB pixel format with 10 bits per channel.\ncase format48RGB\nA big-endian 48-bit, RGB pixel format with 16 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format16LE565 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format16le565",
    "html": "See Also\nRGB format constants\ncase format16LE555\nA little-endian 16-bit, RGB pixel format with 5 bits per channel.\ncase format16BE555\nA big-endian 16-bit, RGB pixel format with 5 bits per channel.\ncase format16BE565\nA big-endian 16-bit, RGB pixel format with 5 bits for red and blue, and 6 bits for green.\ncase format24RGB\nA 24-bit, RGB pixel format with 8 bits per channel.\ncase format24BGR\nA 24-bit, BGR pixel format with 8 bits per channel.\ncase format30RGB\nA big-endian 30-bit, RGB pixel format with 10 bits per channel.\ncase format30RGBLEPackedWideGamut\nA little-endian 30-bit, wide-gamut RGB pixel format with 10 bits per channel.\ncase format48RGB\nA big-endian 48-bit, RGB pixel format with 16 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format16BE565 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format16be565",
    "html": "See Also\nRGB format constants\ncase format16LE555\nA little-endian 16-bit, RGB pixel format with 5 bits per channel.\ncase format16LE565\nA little-endian 16-bit, RGB pixel format with 5 bits for red and blue, and 6 bits for green.\ncase format16BE555\nA big-endian 16-bit, RGB pixel format with 5 bits per channel.\ncase format24RGB\nA 24-bit, RGB pixel format with 8 bits per channel.\ncase format24BGR\nA 24-bit, BGR pixel format with 8 bits per channel.\ncase format30RGB\nA big-endian 30-bit, RGB pixel format with 10 bits per channel.\ncase format30RGBLEPackedWideGamut\nA little-endian 30-bit, wide-gamut RGB pixel format with 10 bits per channel.\ncase format48RGB\nA big-endian 48-bit, RGB pixel format with 16 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format24RGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format24rgb",
    "html": "See Also\nRGB format constants\ncase format16LE555\nA little-endian 16-bit, RGB pixel format with 5 bits per channel.\ncase format16LE565\nA little-endian 16-bit, RGB pixel format with 5 bits for red and blue, and 6 bits for green.\ncase format16BE555\nA big-endian 16-bit, RGB pixel format with 5 bits per channel.\ncase format16BE565\nA big-endian 16-bit, RGB pixel format with 5 bits for red and blue, and 6 bits for green.\ncase format24BGR\nA 24-bit, BGR pixel format with 8 bits per channel.\ncase format30RGB\nA big-endian 30-bit, RGB pixel format with 10 bits per channel.\ncase format30RGBLEPackedWideGamut\nA little-endian 30-bit, wide-gamut RGB pixel format with 10 bits per channel.\ncase format48RGB\nA big-endian 48-bit, RGB pixel format with 16 bits per channel."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918709-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918690-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918019-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918097-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918179-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917864-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918202-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long_sat(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918396-simd_long_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_long_sat(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long_sat(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long_sat(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long_sat(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long_sat(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long_sat(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long_sat(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917934-simd_long",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_long3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917545-simd_make_long3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_long3(simd_long1, simd_long2) -> simd_long3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_long3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_long3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867647-simd_make_long3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_long3(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long3(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc simd_make_long3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc simd_make_long3_undef(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_long3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917300-simd_make_long3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "vector3(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917854-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_long3(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long3(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc simd_make_long3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc simd_make_long3_undef(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements undefined.\nfunc simd_make_long3_undef(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_long3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917330-simd_make_long3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_long3(simd_long1, simd_long2) -> simd_long3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_long3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_long3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917635-simd_make_long3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917634-simd_make_long3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long3_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2919009-simd_make_long3_undef",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Scalar Values\nfunc simd_make_long3(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long3(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_long3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc simd_make_long3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc vector3(simd_long1, simd_long1, simd_long1) -> simd_long3\nReturns a new vector from the specified scalar values.\nfunc simd_make_long3_undef(simd_long1) -> simd_long3\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_long3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917598-simd_make_long3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917409-simd_make_long3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Other Vectors\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long3) -> simd_long3\nReturns a new vector from the specified vector.\nfunc simd_make_long3(simd_long4) -> simd_long3\nReturns a new vector by truncating the specified four-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3(simd_long8) -> simd_long3\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_long3_undef(simd_long2) -> simd_long3\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_long3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917698-simd_make_long3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_long3(simd_long1, simd_long2) -> simd_long3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long3(simd_long1, simd_long2) -> simd_long3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "vector3(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918339-vector3",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_long3(simd_long1, simd_long2) -> simd_long3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long3(simd_long1, simd_long2) -> simd_long3\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_long3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value.\nfunc simd_make_long3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value.\nfunc vector3(simd_long2, simd_long1) -> simd_long3\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918642-simd_long",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_int3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_long(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918469-simd_long",
    "html": "See Also\nFunctions to Create Three-Element Vectors From Vectors of Other Types\nfunc simd_long(simd_char3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_long(simd_uchar3) -> simd_long3\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_long(simd_short3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_long(simd_ushort3) -> simd_long3\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_long(simd_uint3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_long3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_ulong3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_long(simd_float3) -> simd_long3\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_long(simd_double3) -> simd_long3\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918763-simd_short",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917802-simd_short",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/3241509-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nProviding a hash value\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "vImageCVImageFormat.Format.format422YpCbCr10 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format422ypcbcr10",
    "html": "See Also\n4:2:2 YpCbCr format constants\ncase format422YpCbCr8\nA component YpCbCr 4:2:2 pixel format with 8 bits per channel and ordered CbYp₀CrYp₁.\ncase format422YpCbCr8_yuvs\nA component YpCbCr 4:2:2 pixel format with 8 bits per channel and ordered Yp₀CbYp₁Cr.\ncase format422YpCbCr8FullRange\nA full-range, component YpCbCr 4:2:2 pixel format with 8 bits per channel.\ncase format422YpCbCr10BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr10BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr16\nA video-range, two-plane YpCbCr 4:2:2 pixel format with 16 bits per channel."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916674-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_short8) -> simd_bool\nfunc simd_all(simd_short8) -> simd_bool"
  },
  {
    "title": "vImageCVImageFormat.Format.format422YpCbCr8FullRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format422ypcbcr8fullrange",
    "html": "See Also\n4:2:2 YpCbCr format constants\ncase format422YpCbCr8\nA component YpCbCr 4:2:2 pixel format with 8 bits per channel and ordered CbYp₀CrYp₁.\ncase format422YpCbCr8_yuvs\nA component YpCbCr 4:2:2 pixel format with 8 bits per channel and ordered Yp₀CbYp₁Cr.\ncase format422YpCbCr10\nA component YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr10BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr10BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr16\nA video-range, two-plane YpCbCr 4:2:2 pixel format with 16 bits per channel."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916857-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_short8, simd_short8) -> simd_short8\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916858-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_short8) -> simd_short8\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_short8, simd_short8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918229-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917175-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_short8) -> Int16\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_short8) -> Int16\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_make_short32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917656-simd_make_short32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_short32(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short32) -> simd_short32\nReturns a new vector from the specified vector.\nfunc simd_make_short32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc simd_make_short32_undef(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916814-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_short8) -> simd_bool\nfunc simd_bitselect(simd_short8, simd_short8, simd_short8) -> simd_short8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "vImageCVImageFormat.Format.formatTwoComponent32Float | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/formattwocomponent32float",
    "html": "See Also\nTwo-component format constants\ncase formatTwoComponent8\nAn 8-bit, two-component pixel format with black equal to zero.\ncase formatTwoComponent16Half\nA little-endian 16-bit, two-component pixel format."
  },
  {
    "title": "vImageCVImageFormat.Format.formatTwoComponent16Half | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/formattwocomponent16half",
    "html": "See Also\nTwo-component format constants\ncase formatTwoComponent8\nAn 8-bit, two-component pixel format with black equal to zero.\ncase formatTwoComponent32Float\nA little-endian 32-bit, two-component pixel format."
  },
  {
    "title": "vImageCVImageFormat.Format.formatDepthFloat32 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/formatdepthfloat32",
    "html": "See Also\nDepth format constants\ncase formatDepthFloat16\nA 16-bit depth pixel format that describes the distance to an object in meters."
  },
  {
    "title": "vImageCVImageFormat.Format.formatTwoComponent8 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/formattwocomponent8",
    "html": "See Also\nTwo-component format constants\ncase formatTwoComponent16Half\nA little-endian 16-bit, two-component pixel format.\ncase formatTwoComponent32Float\nA little-endian 32-bit, two-component pixel format."
  },
  {
    "title": "vImageCVImageFormat.Format.formatOneComponent16Half | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/formatonecomponent16half",
    "html": "See Also\nSingle-component format constants\ncase formatOneComponent8\nAn 8-bit, single-component pixel format with black equal to zero.\ncase formatOneComponent32Float\nA little-endian 32-bit, single-component pixel format."
  },
  {
    "title": "vImageCVImageFormat.Format.formatOneComponent8 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/formatonecomponent8",
    "html": "See Also\nSingle-component format constants\ncase formatOneComponent16Half\nA little-endian 16-bit, single-componennt pixel format.\ncase formatOneComponent32Float\nA little-endian 32-bit, single-component pixel format."
  },
  {
    "title": "vImageCVImageFormat.Format.formatDisparityFloat16 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/formatdisparityfloat16",
    "html": "Discussion\n\nUnits are 1 / meters, that is, (pixelShift / (pixelFocalLength * baselineInMeters)).\n\nSee Also\nDisparity format constants\ncase formatDisparityFloat32\nA 32-bit disparity pixel format that describes the normalized shift when comparing two images."
  },
  {
    "title": "vImageCVImageFormat.Format.format2Indexed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format2indexed",
    "html": "Discussion\n\nThis pixel format supports color spaces that are either CGColorSpaceModel.monochrome or CGColorSpaceModel.indexed.\n\nSee Also\nIndexed color format constants\ncase format1Monochrome\nA 1-bit indexed pixel format.\ncase format1IndexedGray_WhiteIsZero\nA 1-bit indexed pixel format with white equal to zero.\ncase format2IndexedGray_WhiteIsZero\nA 2-bit indexed pixel format with white equal to zero.\ncase format4Indexed\nA 4-bit indexed pixel format.\ncase format4IndexedGray_WhiteIsZero\nA 4-bit indexed pixel format with white equal to zero.\ncase format8Indexed\nAn 8-bit indexed pixel format.\ncase format8IndexedGray_WhiteIsZero\nAn 8-bit indexed pixel format with white equal to zero."
  },
  {
    "title": "vImageCVImageFormat.Format.format1IndexedGray_WhiteIsZero | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format1indexedgray_whiteiszero",
    "html": "Discussion\n\nThis pixel format supports color spaces that are CGColorSpaceModel.indexed.\n\nSee Also\nIndexed color format constants\ncase format1Monochrome\nA 1-bit indexed pixel format.\ncase format2Indexed\nA 2-bit indexed pixel format.\ncase format2IndexedGray_WhiteIsZero\nA 2-bit indexed pixel format with white equal to zero.\ncase format4Indexed\nA 4-bit indexed pixel format.\ncase format4IndexedGray_WhiteIsZero\nA 4-bit indexed pixel format with white equal to zero.\ncase format8Indexed\nAn 8-bit indexed pixel format.\ncase format8IndexedGray_WhiteIsZero\nAn 8-bit indexed pixel format with white equal to zero."
  },
  {
    "title": "vImageCVImageFormat.Format.format4IndexedGray_WhiteIsZero | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format4indexedgray_whiteiszero",
    "html": "Discussion\n\nThis pixel format supports color spaces that are CGColorSpaceModel.indexed.\n\nSee Also\nIndexed color format constants\ncase format1Monochrome\nA 1-bit indexed pixel format.\ncase format1IndexedGray_WhiteIsZero\nA 1-bit indexed pixel format with white equal to zero.\ncase format2Indexed\nA 2-bit indexed pixel format.\ncase format2IndexedGray_WhiteIsZero\nA 2-bit indexed pixel format with white equal to zero.\ncase format4Indexed\nA 4-bit indexed pixel format.\ncase format8Indexed\nAn 8-bit indexed pixel format.\ncase format8IndexedGray_WhiteIsZero\nAn 8-bit indexed pixel format with white equal to zero."
  },
  {
    "title": "vImageCVImageFormat.Format.format8Indexed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format8indexed",
    "html": "Discussion\n\nThis pixel format supports color spaces that are either CGColorSpaceModel.monochrome or CGColorSpaceModel.indexed.\n\nSee Also\nIndexed color format constants\ncase format1Monochrome\nA 1-bit indexed pixel format.\ncase format1IndexedGray_WhiteIsZero\nA 1-bit indexed pixel format with white equal to zero.\ncase format2Indexed\nA 2-bit indexed pixel format.\ncase format2IndexedGray_WhiteIsZero\nA 2-bit indexed pixel format with white equal to zero.\ncase format4Indexed\nA 4-bit indexed pixel format.\ncase format4IndexedGray_WhiteIsZero\nA 4-bit indexed pixel format with white equal to zero.\ncase format8IndexedGray_WhiteIsZero\nAn 8-bit indexed pixel format with white equal to zero."
  },
  {
    "title": "vImageCVImageFormat.Format.format2IndexedGray_WhiteIsZero | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format2indexedgray_whiteiszero",
    "html": "Discussion\n\nThis pixel format supports color spaces that are CGColorSpaceModel.indexed.\n\nSee Also\nIndexed color format constants\ncase format1Monochrome\nA 1-bit indexed pixel format.\ncase format1IndexedGray_WhiteIsZero\nA 1-bit indexed pixel format with white equal to zero.\ncase format2Indexed\nA 2-bit indexed pixel format.\ncase format4Indexed\nA 4-bit indexed pixel format.\ncase format4IndexedGray_WhiteIsZero\nA 4-bit indexed pixel format with white equal to zero.\ncase format8Indexed\nAn 8-bit indexed pixel format.\ncase format8IndexedGray_WhiteIsZero\nAn 8-bit indexed pixel format with white equal to zero."
  },
  {
    "title": "vImageCVImageFormat.Format.format4Indexed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format4indexed",
    "html": "Discussion\n\nThis pixel format supports color spaces that are either CGColorSpaceModel.monochrome or CGColorSpaceModel.indexed.\n\nSee Also\nIndexed color format constants\ncase format1Monochrome\nA 1-bit indexed pixel format.\ncase format1IndexedGray_WhiteIsZero\nA 1-bit indexed pixel format with white equal to zero.\ncase format2Indexed\nA 2-bit indexed pixel format.\ncase format2IndexedGray_WhiteIsZero\nA 2-bit indexed pixel format with white equal to zero.\ncase format4IndexedGray_WhiteIsZero\nA 4-bit indexed pixel format with white equal to zero.\ncase format8Indexed\nAn 8-bit indexed pixel format.\ncase format8IndexedGray_WhiteIsZero\nAn 8-bit indexed pixel format with white equal to zero."
  },
  {
    "title": "vImageCVImageFormat.Format.format4444AYpCbCr8 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format4444aypcbcr8",
    "html": "See Also\nYpCbCr with alpha format constants\ncase format422YpCbCr_4A_8BiPlanar\nA two-plane pixel format that contains a video-range 8-bit YpCbCr 4:2:2 plane and an 8-bit alpha plane.\ncase format4444YpCbCrA8\nA component YpCbCrA 4:4:4:4 pixel format with 8 bits per channel and ordered CbYpCrA.\ncase format4444YpCbCrA8R\nA component YpCbCrA 4:4:4:4 rendering format with 8 bits per channel, full-range alpha, zero-biased YUV, and ordered AYpCbCr.\ncase format4444AYpCbCr16\nA full-range alpha, video-range luminance and chrominance YpCbCrA 4:4:4:4 pixel format with 16 bits per channel and ordered AYpCbCr."
  },
  {
    "title": "vImageCVImageFormat.Format.format4444YpCbCrA8 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format4444ypcbcra8",
    "html": "See Also\nYpCbCr with alpha format constants\ncase format422YpCbCr_4A_8BiPlanar\nA two-plane pixel format that contains a video-range 8-bit YpCbCr 4:2:2 plane and an 8-bit alpha plane.\ncase format4444AYpCbCr8\nA full-range alpha, video-range luminance and chrominance YpCbCrA 4:4:4:4 pixel format with 8 bits per channel and ordered AYpCbCr.\ncase format4444YpCbCrA8R\nA component YpCbCrA 4:4:4:4 rendering format with 8 bits per channel, full-range alpha, zero-biased YUV, and ordered AYpCbCr.\ncase format4444AYpCbCr16\nA full-range alpha, video-range luminance and chrominance YpCbCrA 4:4:4:4 pixel format with 16 bits per channel and ordered AYpCbCr."
  },
  {
    "title": "vImageCVImageFormat.Format.format14Bayer_RGGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format14bayer_rggb",
    "html": "See Also\nBayer format constants\ncase format14Bayer_BGGR\nA little-endian 14-bit Bayer pixel format with even rows ordered blue-green and odd rows ordered green-red.\ncase format14Bayer_GBRG\nA little-endian 14-bit Bayer pixel format with even rows ordered green-blue and odd rows ordered red-green.\ncase format14Bayer_GRBG\nA little-endian 14-bit Bayer pixel format with even rows ordered green-red and odd rows ordered blue-green."
  },
  {
    "title": "vImageCVImageFormat.Format.format444YpCbCr10 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format444ypcbcr10",
    "html": "See Also\n4:4:4 YpCbCr format constants\ncase format444YpCbCr8\nA video-range, component YpCbCr 4:4:4 pixel format with 8 bits per channel and ordered CrYpCb.\ncase format444YpCbCr10BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:4:4 pixel format with 10 bits per channel.\ncase format444YpCbCr10BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:4:4 pixel format with 10 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format14Bayer_GRBG | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format14bayer_grbg",
    "html": "See Also\nBayer format constants\ncase format14Bayer_BGGR\nA little-endian 14-bit Bayer pixel format with even rows ordered blue-green and odd rows ordered green-red.\ncase format14Bayer_GBRG\nA little-endian 14-bit Bayer pixel format with even rows ordered green-blue and odd rows ordered red-green.\ncase format14Bayer_RGGB\nA little-endian 14-bit Bayer pixel format with even rows ordered red-green and odd rows ordered green-blue."
  },
  {
    "title": "vImageCVImageFormat.Format.format14Bayer_GBRG | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format14bayer_gbrg",
    "html": "See Also\nBayer format constants\ncase format14Bayer_BGGR\nA little-endian 14-bit Bayer pixel format with even rows ordered blue-green and odd rows ordered green-red.\ncase format14Bayer_GRBG\nA little-endian 14-bit Bayer pixel format with even rows ordered green-red and odd rows ordered blue-green.\ncase format14Bayer_RGGB\nA little-endian 14-bit Bayer pixel format with even rows ordered red-green and odd rows ordered green-blue."
  },
  {
    "title": "vImageCVImageFormat.Format.format422YpCbCr8 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format422ypcbcr8",
    "html": "See Also\n4:2:2 YpCbCr format constants\ncase format422YpCbCr8_yuvs\nA component YpCbCr 4:2:2 pixel format with 8 bits per channel and ordered Yp₀CbYp₁Cr.\ncase format422YpCbCr8FullRange\nA full-range, component YpCbCr 4:2:2 pixel format with 8 bits per channel.\ncase format422YpCbCr10\nA component YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr10BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr10BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr16\nA video-range, two-plane YpCbCr 4:2:2 pixel format with 16 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format30RGBLEPackedWideGamut | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format30rgblepackedwidegamut",
    "html": "See Also\nRGB format constants\ncase format16LE555\nA little-endian 16-bit, RGB pixel format with 5 bits per channel.\ncase format16LE565\nA little-endian 16-bit, RGB pixel format with 5 bits for red and blue, and 6 bits for green.\ncase format16BE555\nA big-endian 16-bit, RGB pixel format with 5 bits per channel.\ncase format16BE565\nA big-endian 16-bit, RGB pixel format with 5 bits for red and blue, and 6 bits for green.\ncase format24RGB\nA 24-bit, RGB pixel format with 8 bits per channel.\ncase format24BGR\nA 24-bit, BGR pixel format with 8 bits per channel.\ncase format30RGB\nA big-endian 30-bit, RGB pixel format with 10 bits per channel.\ncase format48RGB\nA big-endian 48-bit, RGB pixel format with 16 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format32RGBA | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format32rgba",
    "html": "See Also\nRGBA and ARGB format constants\ncase format16LE5551\nA little-endian 16-bit, RGBA pixel format with 5 bits per color channel and 1-bit alpha.\ncase format32ABGR\nA 32-bit, ABGR pixel format with 8 bits per channel.\ncase format32ARGB\nA 32-bit, ARGB pixel format with 8 bits per channel.\ncase format32BGRA\nA 32-bit, BGRA pixel format with 8 bits per channel.\ncase format64ARGB\nA 64-bit, ARGB pixel format with 8 bits per channel.\ncase format64RGBAHalf\nA little-endian 64-bit, RGBA pixel format with 16 bits per channel.\ncase format128RGBAFloat\nA little-endian 128-bit, RGBA pixel format with 32 bits per channel.\ncase formatARGB2101010LEPacked\nA little-endian ARGB2101010 full-range ARGB pixel format."
  },
  {
    "title": "vImageCVImageFormat.Format.format32BGRA | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format32bgra",
    "html": "See Also\nRGBA and ARGB format constants\ncase format16LE5551\nA little-endian 16-bit, RGBA pixel format with 5 bits per color channel and 1-bit alpha.\ncase format32ABGR\nA 32-bit, ABGR pixel format with 8 bits per channel.\ncase format32ARGB\nA 32-bit, ARGB pixel format with 8 bits per channel.\ncase format32RGBA\nA 32-bit, RGBA pixel format with 8 bits per channel.\ncase format64ARGB\nA 64-bit, ARGB pixel format with 8 bits per channel.\ncase format64RGBAHalf\nA little-endian 64-bit, RGBA pixel format with 16 bits per channel.\ncase format128RGBAFloat\nA little-endian 128-bit, RGBA pixel format with 32 bits per channel.\ncase formatARGB2101010LEPacked\nA little-endian ARGB2101010 full-range ARGB pixel format."
  },
  {
    "title": "vImageCVImageFormat.Format.format16LE5551 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format16le5551",
    "html": "See Also\nRGBA and ARGB format constants\ncase format32ABGR\nA 32-bit, ABGR pixel format with 8 bits per channel.\ncase format32ARGB\nA 32-bit, ARGB pixel format with 8 bits per channel.\ncase format32BGRA\nA 32-bit, BGRA pixel format with 8 bits per channel.\ncase format32RGBA\nA 32-bit, RGBA pixel format with 8 bits per channel.\ncase format64ARGB\nA 64-bit, ARGB pixel format with 8 bits per channel.\ncase format64RGBAHalf\nA little-endian 64-bit, RGBA pixel format with 16 bits per channel.\ncase format128RGBAFloat\nA little-endian 128-bit, RGBA pixel format with 32 bits per channel.\ncase formatARGB2101010LEPacked\nA little-endian ARGB2101010 full-range ARGB pixel format."
  },
  {
    "title": "vImageCVImageFormat.Format.format14Bayer_BGGR | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format14bayer_bggr",
    "html": "Discussion\n\nSee Also\nBayer format constants\ncase format14Bayer_GBRG\nA little-endian 14-bit Bayer pixel format with even rows ordered green-blue and odd rows ordered red-green.\ncase format14Bayer_GRBG\nA little-endian 14-bit Bayer pixel format with even rows ordered green-red and odd rows ordered blue-green.\ncase format14Bayer_RGGB\nA little-endian 14-bit Bayer pixel format with even rows ordered red-green and odd rows ordered green-blue."
  },
  {
    "title": "vImageCVImageFormat.Format.format64ARGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format64argb",
    "html": "See Also\nRGBA and ARGB format constants\ncase format16LE5551\nA little-endian 16-bit, RGBA pixel format with 5 bits per color channel and 1-bit alpha.\ncase format32ABGR\nA 32-bit, ABGR pixel format with 8 bits per channel.\ncase format32ARGB\nA 32-bit, ARGB pixel format with 8 bits per channel.\ncase format32BGRA\nA 32-bit, BGRA pixel format with 8 bits per channel.\ncase format32RGBA\nA 32-bit, RGBA pixel format with 8 bits per channel.\ncase format64RGBAHalf\nA little-endian 64-bit, RGBA pixel format with 16 bits per channel.\ncase format128RGBAFloat\nA little-endian 128-bit, RGBA pixel format with 32 bits per channel.\ncase formatARGB2101010LEPacked\nA little-endian ARGB2101010 full-range ARGB pixel format."
  },
  {
    "title": "vImageCVImageFormat.Format.format420YpCbCr10BiPlanarVideoRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format420ypcbcr10biplanarvideorange",
    "html": "Discussion\n\nThis format defines luminance and chrominance data in the range 64...940, and stores 10 bits in the most significant bits of 16 bits.\n\nSee Also\n4:2:0 YpCbCr format constants\ncase format420YpCbCr8Planar\nA planar YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr8BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr8BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr8PlanarFullRange\nA full-range, planar YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr10BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:2:0 pixel format with 10 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format64RGBAHalf | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format64rgbahalf",
    "html": "See Also\nRGBA and ARGB format constants\ncase format16LE5551\nA little-endian 16-bit, RGBA pixel format with 5 bits per color channel and 1-bit alpha.\ncase format32ABGR\nA 32-bit, ABGR pixel format with 8 bits per channel.\ncase format32ARGB\nA 32-bit, ARGB pixel format with 8 bits per channel.\ncase format32BGRA\nA 32-bit, BGRA pixel format with 8 bits per channel.\ncase format32RGBA\nA 32-bit, RGBA pixel format with 8 bits per channel.\ncase format64ARGB\nA 64-bit, ARGB pixel format with 8 bits per channel.\ncase format128RGBAFloat\nA little-endian 128-bit, RGBA pixel format with 32 bits per channel.\ncase formatARGB2101010LEPacked\nA little-endian ARGB2101010 full-range ARGB pixel format."
  },
  {
    "title": "vImageCVImageFormat.Format.format420YpCbCr8Planar | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format420ypcbcr8planar",
    "html": "See Also\n4:2:0 YpCbCr format constants\ncase format420YpCbCr8BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr8BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr8PlanarFullRange\nA full-range, planar YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr10BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:2:0 pixel format with 10 bits per channel.\ncase format420YpCbCr10BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:2:0 pixel format with 10 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format32AlphaGray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format32alphagray",
    "html": "See Also\nMonochrome format constants\ncase format16Gray\nA big-endian 16-bit grayscale pixel format with black equal to zero."
  },
  {
    "title": "vImageCVImageFormat.Format.format420YpCbCr10BiPlanarFullRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format420ypcbcr10biplanarfullrange",
    "html": "Discussion\n\nThis format defines luminance data in the range 0...1023, and stores 10 bits in the most significant bits of 16 bits.\n\nSee Also\n4:2:0 YpCbCr format constants\ncase format420YpCbCr8Planar\nA planar YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr8BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr8BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr8PlanarFullRange\nA full-range, planar YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr10BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:2:0 pixel format with 10 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format30RGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format30rgb",
    "html": "See Also\nRGB format constants\ncase format16LE555\nA little-endian 16-bit, RGB pixel format with 5 bits per channel.\ncase format16LE565\nA little-endian 16-bit, RGB pixel format with 5 bits for red and blue, and 6 bits for green.\ncase format16BE555\nA big-endian 16-bit, RGB pixel format with 5 bits per channel.\ncase format16BE565\nA big-endian 16-bit, RGB pixel format with 5 bits for red and blue, and 6 bits for green.\ncase format24RGB\nA 24-bit, RGB pixel format with 8 bits per channel.\ncase format24BGR\nA 24-bit, BGR pixel format with 8 bits per channel.\ncase format30RGBLEPackedWideGamut\nA little-endian 30-bit, wide-gamut RGB pixel format with 10 bits per channel.\ncase format48RGB\nA big-endian 48-bit, RGB pixel format with 16 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format128RGBAFloat | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format128rgbafloat",
    "html": "See Also\nRGBA and ARGB format constants\ncase format16LE5551\nA little-endian 16-bit, RGBA pixel format with 5 bits per color channel and 1-bit alpha.\ncase format32ABGR\nA 32-bit, ABGR pixel format with 8 bits per channel.\ncase format32ARGB\nA 32-bit, ARGB pixel format with 8 bits per channel.\ncase format32BGRA\nA 32-bit, BGRA pixel format with 8 bits per channel.\ncase format32RGBA\nA 32-bit, RGBA pixel format with 8 bits per channel.\ncase format64ARGB\nA 64-bit, ARGB pixel format with 8 bits per channel.\ncase format64RGBAHalf\nA little-endian 64-bit, RGBA pixel format with 16 bits per channel.\ncase formatARGB2101010LEPacked\nA little-endian ARGB2101010 full-range ARGB pixel format."
  },
  {
    "title": "vImageCVImageFormat.Format.format32ARGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format32argb",
    "html": "See Also\nRGBA and ARGB format constants\ncase format16LE5551\nA little-endian 16-bit, RGBA pixel format with 5 bits per color channel and 1-bit alpha.\ncase format32ABGR\nA 32-bit, ABGR pixel format with 8 bits per channel.\ncase format32BGRA\nA 32-bit, BGRA pixel format with 8 bits per channel.\ncase format32RGBA\nA 32-bit, RGBA pixel format with 8 bits per channel.\ncase format64ARGB\nA 64-bit, ARGB pixel format with 8 bits per channel.\ncase format64RGBAHalf\nA little-endian 64-bit, RGBA pixel format with 16 bits per channel.\ncase format128RGBAFloat\nA little-endian 128-bit, RGBA pixel format with 32 bits per channel.\ncase formatARGB2101010LEPacked\nA little-endian ARGB2101010 full-range ARGB pixel format."
  },
  {
    "title": "vImageCVImageFormat.Format.format420YpCbCr8BiPlanarVideoRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format420ypcbcr8biplanarvideorange",
    "html": "Discussion\n\nThis format defines luminance data in the range 16...235 and chrominance data in the range 16...240.\n\nSee Also\n4:2:0 YpCbCr format constants\ncase format420YpCbCr8Planar\nA planar YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr8BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr8PlanarFullRange\nA full-range, planar YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr10BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:2:0 pixel format with 10 bits per channel.\ncase format420YpCbCr10BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:2:0 pixel format with 10 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format420YpCbCr8BiPlanarFullRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format420ypcbcr8biplanarfullrange",
    "html": "Discussion\n\nThis format defines luminance data in the range 0...255 and chrominance data in the range 1...255.\n\nSee Also\n4:2:0 YpCbCr format constants\ncase format420YpCbCr8Planar\nA planar YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr8BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr8PlanarFullRange\nA full-range, planar YpCbCr 4:2:0 pixel format with 8 bits per channel.\ncase format420YpCbCr10BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:2:0 pixel format with 10 bits per channel.\ncase format420YpCbCr10BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:2:0 pixel format with 10 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format32ABGR | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format32abgr",
    "html": "See Also\nRGBA and ARGB format constants\ncase format16LE5551\nA little-endian 16-bit, RGBA pixel format with 5 bits per color channel and 1-bit alpha.\ncase format32ARGB\nA 32-bit, ARGB pixel format with 8 bits per channel.\ncase format32BGRA\nA 32-bit, BGRA pixel format with 8 bits per channel.\ncase format32RGBA\nA 32-bit, RGBA pixel format with 8 bits per channel.\ncase format64ARGB\nA 64-bit, ARGB pixel format with 8 bits per channel.\ncase format64RGBAHalf\nA little-endian 64-bit, RGBA pixel format with 16 bits per channel.\ncase format128RGBAFloat\nA little-endian 128-bit, RGBA pixel format with 32 bits per channel.\ncase formatARGB2101010LEPacked\nA little-endian ARGB2101010 full-range ARGB pixel format."
  },
  {
    "title": "vImageCVImageFormat.Format.format16Gray | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format16gray",
    "html": "See Also\nMonochrome format constants\ncase format32AlphaGray\nA big-endian 16-bit grayscale with alpha pixel format with black equal to zero."
  },
  {
    "title": "vImageCVImageFormat.Format.format48RGB | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format48rgb",
    "html": "See Also\nRGB format constants\ncase format16LE555\nA little-endian 16-bit, RGB pixel format with 5 bits per channel.\ncase format16LE565\nA little-endian 16-bit, RGB pixel format with 5 bits for red and blue, and 6 bits for green.\ncase format16BE555\nA big-endian 16-bit, RGB pixel format with 5 bits per channel.\ncase format16BE565\nA big-endian 16-bit, RGB pixel format with 5 bits for red and blue, and 6 bits for green.\ncase format24RGB\nA 24-bit, RGB pixel format with 8 bits per channel.\ncase format24BGR\nA 24-bit, BGR pixel format with 8 bits per channel.\ncase format30RGB\nA big-endian 30-bit, RGB pixel format with 10 bits per channel.\ncase format30RGBLEPackedWideGamut\nA little-endian 30-bit, wide-gamut RGB pixel format with 10 bits per channel."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917164-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_short32) -> simd_short32\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_short32, simd_short32) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_make_short16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917269-simd_make_short16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_short16(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short16) -> simd_short16\nReturns a new vector from the specified vector.\nfunc simd_make_short16(simd_short32) -> simd_short16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc simd_make_short16_undef(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917826-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_float16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_short16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917425-simd_make_short16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_short16(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short16) -> simd_short16\nReturns a new vector from the specified vector.\nfunc simd_make_short16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc simd_make_short16_undef(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917646-simd_make_short8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_short8(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short16) -> simd_short8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short8(simd_short32) -> simd_short8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_short8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc simd_make_short8_undef(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918197-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917489-simd_make_short16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_short16(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short16) -> simd_short16\nReturns a new vector from the specified vector.\nfunc simd_make_short16(simd_short32) -> simd_short16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc simd_make_short16_undef(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917379-simd_make_short16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_short16(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short16) -> simd_short16\nReturns a new vector from the specified vector.\nfunc simd_make_short16(simd_short32) -> simd_short16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc simd_make_short16_undef(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918308-simd_short",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917452-simd_make_short16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_short16(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short16) -> simd_short16\nReturns a new vector from the specified vector.\nfunc simd_make_short16(simd_short32) -> simd_short16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc simd_make_short16_undef(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917434-simd_make_short8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_short8(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short8) -> simd_short8\nReturns a new vector from the specified vector.\nfunc simd_make_short8(simd_short16) -> simd_short8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short8(simd_short32) -> simd_short8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_short8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc simd_make_short8_undef(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917402-simd_make_short16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Scalar Values\nfunc simd_make_short16_undef(Int16) -> simd_short16\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_short8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917327-simd_make_short8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_short8(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short8) -> simd_short8\nReturns a new vector from the specified vector.\nfunc simd_make_short8(simd_short16) -> simd_short8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short8(simd_short32) -> simd_short8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_short8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc simd_make_short8_undef(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917533-simd_make_short16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_short16(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short16) -> simd_short16\nReturns a new vector from the specified vector.\nfunc simd_make_short16(simd_short32) -> simd_short16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc simd_make_short16_undef(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867748-simd_make_short16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Scalar Values\nfunc simd_make_short16(Int16) -> simd_short16\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_make_short8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867720-simd_make_short8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_short8(Int16) -> simd_short8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917969-simd_short",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_short16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_float16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918536-simd_short",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917872-simd_short",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_uchar16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_float16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918117-simd_short",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_ushort16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_float16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918733-simd_short",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vImageCVImageFormat.Format.format422YpCbCr8_yuvs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format422ypcbcr8_yuvs",
    "html": "See Also\n4:2:2 YpCbCr format constants\ncase format422YpCbCr8\nA component YpCbCr 4:2:2 pixel format with 8 bits per channel and ordered CbYp₀CrYp₁.\ncase format422YpCbCr8FullRange\nA full-range, component YpCbCr 4:2:2 pixel format with 8 bits per channel.\ncase format422YpCbCr10\nA component YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr10BiPlanarFullRange\nA full-range, two-plane YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr10BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr16\nA video-range, two-plane YpCbCr 4:2:2 pixel format with 16 bits per channel."
  },
  {
    "title": "vImageCVImageFormat.Format.format422YpCbCr10BiPlanarFullRange | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/format/format422ypcbcr10biplanarfullrange",
    "html": "Discussion\n\nThis format defines luminance data in the range 0...1023.\n\nSee Also\n4:2:2 YpCbCr format constants\ncase format422YpCbCr8\nA component YpCbCr 4:2:2 pixel format with 8 bits per channel and ordered CbYp₀CrYp₁.\ncase format422YpCbCr8_yuvs\nA component YpCbCr 4:2:2 pixel format with 8 bits per channel and ordered Yp₀CbYp₁Cr.\ncase format422YpCbCr8FullRange\nA full-range, component YpCbCr 4:2:2 pixel format with 8 bits per channel.\ncase format422YpCbCr10\nA component YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr10BiPlanarVideoRange\nA video-range, two-plane YpCbCr 4:2:2 pixel format with 10 bits per channel.\ncase format422YpCbCr16\nA video-range, two-plane YpCbCr 4:2:2 pixel format with 16 bits per channel."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916825-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_short16) -> simd_bool\nfunc simd_all(simd_short16) -> simd_bool"
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917832-simd_short",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_uint16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_float16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917825-simd_short",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918057-simd_short",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_int16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_float16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918199-simd_short",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918078-simd_short",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917094-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_short8) -> simd_short8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_short8, simd_short8, simd_short8) -> simd_short8\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916791-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_short8) -> simd_bool\nfunc simd_bitselect(simd_short8, simd_short8, simd_short8) -> simd_short8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916850-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_short8) -> Int16\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_short8) -> Int16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916771-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_short16) -> simd_bool\nfunc simd_bitselect(simd_short16, simd_short16, simd_short16) -> simd_short16\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916742-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_short16) -> simd_bool\nfunc simd_bitselect(simd_short16, simd_short16, simd_short16) -> simd_short16\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916894-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_short8, simd_short8, simd_short8) -> simd_short8\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_short8, simd_short8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916997-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_short16, simd_short16) -> simd_short16\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917910-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917153-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_short16, simd_short16) -> simd_short16\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917923-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917136-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_short16) -> Int16\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_short16) -> Int16\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916944-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_short16) -> Int16\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_short16) -> Int16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918124-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917219-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_short16) -> Int16\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_short16) -> Int16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917086-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_short32, simd_short32) -> simd_short32\nReturns the maximum value of each element in a vector."
  },
  {
    "title": "vImageCVImageFormat.ChromaSiting.topLeft | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/chromasiting/topleft",
    "html": "See Also\nChrominance siting constants\ncase top\nThe chrominance sample is horizontally centered, but co-sited with the top row of luminance samples.\ncase bottom\nThe chrominance sample is horizontally centered, but co-sited with the bottom row of luminance samples.\ncase bottomLeft\nThe chrominance sample is co-sited with the bottom-left luminance sample.\ncase left\nThe chrominance sample is horizontally co-sited with the left column of luminance samples, but centered vertically.\ncase center\nThe chrominance sample is fully centered.\ncase dv420\nThe Cr and Cb samples are alternately co-sited with the left luminance samples of the same field."
  },
  {
    "title": "simd_make_short32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867698-simd_make_short32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Scalar Values\nfunc simd_make_short32(Int16) -> simd_short32\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_make_short32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917657-simd_make_short32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_short32(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short32) -> simd_short32\nReturns a new vector from the specified vector.\nfunc simd_make_short32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc simd_make_short32_undef(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_any(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916772-simd_any",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_all(simd_short32) -> simd_bool\nfunc simd_bitselect(simd_short32, simd_short32, simd_short32) -> simd_short32\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "vector32(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917859-vector32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_short32(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short32) -> simd_short32\nReturns a new vector from the specified vector.\nfunc simd_make_short32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc simd_make_short32_undef(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917262-simd_make_short32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_short32(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short32) -> simd_short32\nReturns a new vector from the specified vector.\nfunc simd_make_short32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc simd_make_short32_undef(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918683-simd_short",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917336-simd_make_short32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_short32(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc simd_make_short32_undef(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918758-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_short16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917866-simd_short",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918434-simd_short",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918461-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918603-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_uint16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916961-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_short16, simd_short16, simd_short16) -> simd_short16\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_short16, simd_short16) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_make_short8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867660-simd_make_short8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_short8(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short8) -> simd_short8\nReturns a new vector from the specified vector.\nfunc simd_make_short8(simd_short16) -> simd_short8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short8(simd_short32) -> simd_short8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc vector8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc simd_make_short8_undef(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918115-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916835-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_short16) -> simd_short16\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_short16, simd_short16, simd_short16) -> simd_short16\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_make_short8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917435-simd_make_short8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_short8(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short8) -> simd_short8\nReturns a new vector from the specified vector.\nfunc simd_make_short8(simd_short16) -> simd_short8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short8(simd_short32) -> simd_short8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_short8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc simd_make_short8_undef(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short16_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917312-simd_make_short16_undef",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_short16(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short16) -> simd_short16\nReturns a new vector from the specified vector.\nfunc simd_make_short16(simd_short32) -> simd_short16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc simd_make_short16_undef(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917270-simd_make_short8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_short8_undef(Int16) -> simd_short8\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918149-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements."
  },
  {
    "title": "simd_make_short16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917458-simd_make_short16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_short16(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short32) -> simd_short16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc simd_make_short16_undef(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918081-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917370-simd_make_short8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_short8(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short8) -> simd_short8\nReturns a new vector from the specified vector.\nfunc simd_make_short8(simd_short16) -> simd_short8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short8(simd_short32) -> simd_short8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_short8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc simd_make_short8_undef(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short16(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917710-simd_make_short16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_short16(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short16) -> simd_short16\nReturns a new vector from the specified vector.\nfunc simd_make_short16(simd_short32) -> simd_short16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc vector16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc simd_make_short16_undef(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916841-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_short16) -> simd_short16\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_short16, simd_short16) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_make_short8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917277-simd_make_short8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_short8(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short8) -> simd_short8\nReturns a new vector from the specified vector.\nfunc simd_make_short8(simd_short16) -> simd_short8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc simd_make_short8_undef(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918073-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917294-simd_make_short8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_short8(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short8) -> simd_short8\nReturns a new vector from the specified vector.\nfunc simd_make_short8(simd_short16) -> simd_short8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short8(simd_short32) -> simd_short8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_short8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc simd_make_short8_undef(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918423-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_short8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917313-simd_make_short8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_short8(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short8) -> simd_short8\nReturns a new vector from the specified vector.\nfunc simd_make_short8(simd_short32) -> simd_short8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_short8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc vector8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc simd_make_short8_undef(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "vector8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917868-vector8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_short8(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short8(simd_short8) -> simd_short8\nReturns a new vector from the specified vector.\nfunc simd_make_short8(simd_short16) -> simd_short8\nReturns a new vector by truncating the specified sixteen-element vector.\nfunc simd_make_short8(simd_short32) -> simd_short8\nReturns a new vector by truncating the specified thrity two-element vector.\nfunc simd_make_short8(simd_short4, simd_short4) -> simd_short8\nReturns a new vector from the specified vectors.\nfunc simd_make_short8_undef(simd_short2) -> simd_short8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short3) -> simd_short8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short8_undef(simd_short4) -> simd_short8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short16(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867725-simd_make_short16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_short16(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short16) -> simd_short16\nReturns a new vector from the specified vector.\nfunc simd_make_short16(simd_short32) -> simd_short16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc vector16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc simd_make_short16_undef(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918174-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vector16(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918646-vector16",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Other Vectors\nfunc simd_make_short16(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short16(simd_short16) -> simd_short16\nReturns a new vector from the specified vector.\nfunc simd_make_short16(simd_short32) -> simd_short16\nReturns a new vector by truncating the specified thirty two-element vector.\nfunc simd_make_short16(simd_short8, simd_short8) -> simd_short16\nReturns a new vector from the specified vectors.\nfunc simd_make_short16_undef(simd_short2) -> simd_short16\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short3) -> simd_short16\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short4) -> simd_short16\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short16_undef(simd_short8) -> simd_short16\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918335-simd_short",
    "html": "See Also\nFunctions to Create Sixteen-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_float16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "BNNSActivationFunctionTanhShrink | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctiontanhshrink",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nx − tanh(x)\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "simd_make_short32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917571-simd_make_short32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_short32(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short32) -> simd_short32\nReturns a new vector from the specified vector.\nfunc simd_make_short32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc simd_make_short32_undef(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements undefined."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparseorder_t/2868042-init",
    "html": "See Also\nRaw Values\ninit(rawValue: UInt8)\nvar rawValue: UInt8"
  },
  {
    "title": "simd_all(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916786-simd_all",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_short32) -> simd_bool\nfunc simd_bitselect(simd_short32, simd_short32, simd_short32) -> simd_short32\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918228-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short_sat(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916797-simd_bitselect",
    "html": "See Also\nLogic and Bitwise Functions\nfunc simd_any(simd_short32) -> simd_bool\nfunc simd_all(simd_short32) -> simd_bool"
  },
  {
    "title": "simd_make_short32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917437-simd_make_short32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_short32(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short32) -> simd_short32\nReturns a new vector from the specified vector.\nfunc simd_make_short32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc simd_make_short32_undef(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917737-simd_make_short32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_short32(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short32) -> simd_short32\nReturns a new vector from the specified vector.\nfunc simd_make_short32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc simd_make_short32_undef(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916956-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_short32, simd_short32) -> simd_short32\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916893-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_short32) -> Int16\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_short32) -> Int16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916861-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_short32) -> simd_short32\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_short32, simd_short32, simd_short32) -> simd_short32\nReturns each element in a vector clamped to a specified range."
  },
  {
    "title": "simd_make_short32(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867661-simd_make_short32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_short32(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short32) -> simd_short32\nReturns a new vector from the specified vector.\nfunc vector32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc simd_make_short32_undef(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917144-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_short32) -> Int16\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_short32) -> Int16\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916964-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_short32) -> Int16\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_short32) -> Int16\nReturns the maximum value in a vector."
  },
  {
    "title": "simd_make_short32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917266-simd_make_short32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_short32(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short32) -> simd_short32\nReturns a new vector from the specified vector.\nfunc simd_make_short32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc simd_make_short32_undef(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917541-simd_make_short32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_short32(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short32) -> simd_short32\nReturns a new vector from the specified vector.\nfunc simd_make_short32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc simd_make_short32_undef(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_short32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917691-simd_make_short32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_short32(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short32) -> simd_short32\nReturns a new vector from the specified vector.\nfunc simd_make_short32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc simd_make_short32_undef(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918016-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ushort16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_short32_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917328-simd_make_short32_undef",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Other Vectors\nfunc simd_make_short32(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short4) -> simd_short32\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements set to zero.\nfunc simd_make_short32(simd_short32) -> simd_short32\nReturns a new vector from the specified vector.\nfunc simd_make_short32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc vector32(simd_short16, simd_short16) -> simd_short32\nReturns a new vector from the specified vectors.\nfunc simd_make_short32_undef(simd_short2) -> simd_short32\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short3) -> simd_short32\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short8) -> simd_short32\nReturns a new vector from the specified eight-element vector, and other elements undefined.\nfunc simd_make_short32_undef(simd_short16) -> simd_short32\nReturns a new vector from the specified sixteen-element vector, and other elements undefined."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918022-simd_short",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_uchar32) -> simd_short32\nReturns a new vector from the specified vector of 8-bit, unsigned integer element.\nfunc simd_short(simd_short32) -> simd_short32\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort32) -> simd_short32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918630-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char32) -> simd_short32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_short32) -> simd_short32\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort32) -> simd_short32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917208-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_short32, simd_short32, simd_short32) -> simd_short32\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_short32, simd_short32) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918666-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_uchar32) -> simd_short32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short32) -> simd_short32\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort32) -> simd_short32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918075-simd_short",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char32) -> simd_short32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_short32) -> simd_short32\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort32) -> simd_short32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918238-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char32) -> simd_short32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar32) -> simd_short32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_ushort32) -> simd_short32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918239-simd_short",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char32) -> simd_short32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar32) -> simd_short32\nReturns a new vector from the specified vector of 8-bit, unsigned integer element.\nfunc simd_short(simd_short32) -> simd_short32\nReturns a new vector from the specified vector of 16-bit, signed integer elements."
  },
  {
    "title": "bitCountPerPlanarPixel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/multipleplanepixelformat/3951427-bitcountperplanarpixel",
    "html": "Required"
  },
  {
    "title": "vImageCVImageFormat.ChromaSiting.top | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/chromasiting/top",
    "html": "See Also\nChrominance siting constants\ncase topLeft\nThe chrominance sample is co-sited with the top-left luminance sample.\ncase bottom\nThe chrominance sample is horizontally centered, but co-sited with the bottom row of luminance samples.\ncase bottomLeft\nThe chrominance sample is co-sited with the bottom-left luminance sample.\ncase left\nThe chrominance sample is horizontally co-sited with the left column of luminance samples, but centered vertically.\ncase center\nThe chrominance sample is fully centered.\ncase dv420\nThe Cr and Cb samples are alternately co-sited with the left luminance samples of the same field."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918038-simd_short",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918517-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char32) -> simd_short32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar32) -> simd_short32\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short32) -> simd_short32\nReturns a new vector from the specified vector of 16-bit, signed integer elements."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917818-simd_short",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar8) -> simd_short8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short(simd_short8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short(simd_ushort8) -> simd_short8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short(simd_int8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short(simd_uint8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short(simd_long8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, signed integer element.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_ulong8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_short(simd_float8) -> simd_short8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_short(simd_double8) -> simd_short8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918230-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_uchar16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_ushort16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_short_sat(simd_int16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_short_sat(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918426-simd_short_sat",
    "html": "See Also\nFunctions to Perform Saturating Conversion From Vectors of Other Types\nfunc simd_short_sat(simd_char16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short_sat(simd_uchar16) -> simd_short16\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_short_sat(simd_short16) -> simd_short16\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_short_sat(simd_int16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_short_sat(simd_uint16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_short_sat(simd_float16) -> simd_short16\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "BNNSActivationFunctionSoftShrink | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionsoftshrink",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nabs(x) < abs(alpha)\n    0 if abs(x) < abs(alpha)\nelse\n    x-copysign(alpha, x)\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10 and an alpha of 5:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "sinpi(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804809-sinpi",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double8) -> simd_double8\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double8) -> simd_double8\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double8) -> simd_double8\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double8, simd_double8) -> simd_double8\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double8) -> simd_double8\nReturns the sine of each element in a vector.\nfunc sincos(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "BNNSActivationFunctionSELU | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionselu",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\n// λ and ɑ have the values given by Klambauer, Unterthiner and Mayr \n// (~1.0507 and ~1.6733, respectively)\n\n\nif x < 0\n    λɑ(exp(x)-1)\nelse\n    λx\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "BNNSActivationFunctionSoftmax | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionsoftmax",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following formula:\n\nThe softmax function transforms a vector of real numbers into a vector of probabilities. Each probability in the result is in the range 0...1, and the sum of the probabilities is 1.\n\nThe following code shows how to apply the softmax function to a vector that contains seven elements:\n\nlet inputs: [Float] = [3, 5, 1, 6, 2, 1, 4]\nlet count = inputs.count\nvar outputs = [Float](repeating: 0,\n                      count: count)\n\n\nvar inDescription = BNNSVectorDescriptor(size: count,\n                                         data_type: .float)\nvar outDescription = BNNSVectorDescriptor(size: count,\n                                          data_type: .float)\nvar activation = BNNSActivation(function: .softmax)\nvar filterParameters = BNNSFilterParameters()\n\n\nlet activationLayer = BNNSFilterCreateVectorActivationLayer(&inDescription,\n                                                            &outDescription,\n                                                            &activation,\n                                                            &filterParameters)\n\n\nBNNSFilterApply(activationLayer, inputs, &outputs)\n\n\nOn return, the softmax function calculates the following values:\n\nInputs\n\n\t\n\nOutputs\n\n\n\n\n3.0\n\n\t\n\n0.031415492\n\n\n\n\n5.0\n\n\t\n\n0.23213086\n\n\n\n\n1.0\n\n\t\n\n0.004251625\n\n\n\n\n6.0\n\n\t\n\n0.63099706\n\n\n\n\n2.0\n\n\t\n\n0.011557114\n\n\n\n\n1.0\n\n\t\n\n0.004251625\n\n\n\n\n4.0\n\n\t\n\n0.08539616\n\nChanging the fourth element in inputs to 10 increases its probability to almost 1.0:\n\nInputs\n\n\t\n\nOutputs\n\n\n\n\n3.0\n\n\t\n\n0.00090221845\n\n\n\n\n5.0\n\n\t\n\n0.0066665425\n\n\n\n\n1.0\n\n\t\n\n0.00012210199\n\n\n\n\n10.0\n\n\t\n\n0.98940265\n\n\n\n\n2.0\n\n\t\n\n0.00033190762\n\n\n\n\n1.0\n\n\t\n\n0.00012210199\n\n\n\n\n4.0\n\n\t\n\n0.002452484\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "BNNSActivationFunctionPReLUPerChannel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionpreluperchannel",
    "html": "Discussion\n\nImportant\n\nThis activation is only valid for use with layouts of type BNNSDataLayoutImageCHW.\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "BNNSActivationFunctionHardSwish | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionhardswish",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nHardSwish(x) = x * (ReLU6(x + 3.0) * 1.0/6.0)\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "==(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/chromasiting/3241431",
    "html": "Parameters\na\n\nThe left-hand-side value.\n\nb\n\nThe right-hand-side value.\n\nReturn Value\n\nA Boolean value that indicates whether two values are equal.\n\nSee Also\nComparing values\nstatic func != (vImageCVImageFormat.ChromaSiting, vImageCVImageFormat.ChromaSiting) -> Bool\nReturns a Boolean value that indicates whether two values aren’t equal."
  },
  {
    "title": "BNNSActivationFunctionLogSigmoid | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionlogsigmoid",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nlog(sigmoid(x))\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "vImageCVImageFormat.ChromaSiting.bottom | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/chromasiting/bottom",
    "html": "See Also\nChrominance siting constants\ncase top\nThe chrominance sample is horizontally centered, but co-sited with the top row of luminance samples.\ncase topLeft\nThe chrominance sample is co-sited with the top-left luminance sample.\ncase bottomLeft\nThe chrominance sample is co-sited with the bottom-left luminance sample.\ncase left\nThe chrominance sample is horizontally co-sited with the left column of luminance samples, but centered vertically.\ncase center\nThe chrominance sample is fully centered.\ncase dv420\nThe Cr and Cb samples are alternately co-sited with the left luminance samples of the same field."
  },
  {
    "title": "vImageCVImageFormat.ChromaSiting.bottomLeft | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/chromasiting/bottomleft",
    "html": "See Also\nChrominance siting constants\ncase top\nThe chrominance sample is horizontally centered, but co-sited with the top row of luminance samples.\ncase topLeft\nThe chrominance sample is co-sited with the top-left luminance sample.\ncase bottom\nThe chrominance sample is horizontally centered, but co-sited with the bottom row of luminance samples.\ncase left\nThe chrominance sample is horizontally co-sited with the left column of luminance samples, but centered vertically.\ncase center\nThe chrominance sample is fully centered.\ncase dv420\nThe Cr and Cb samples are alternately co-sited with the left luminance samples of the same field."
  },
  {
    "title": "adaptiveWithSingularities(maxIntervals:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/quadrature/integrator/3240685-adaptivewithsingularities",
    "html": "See Also\nIntegrators\ncase qng\nNon-adaptive automatic integrator that uses Gauss-Kronrod-Patterson quadrature coefficients.\nstatic let nonAdaptive: Quadrature.Integrator\nNon-adaptive automatic integrator that uses Gauss-Kronrod-Patterson quadrature coefficients.\ncase qag(pointsPerInterval: Quadrature.QAGPointsPerInterval, maxIntervals: Int)\nGlobally adaptive integrator.\nstatic func adaptive(pointsPerInterval: Quadrature.QAGPointsPerInterval, maxIntervals: Int) -> Quadrature.Integrator\nGlobally adaptive integrator.\ncase qags(maxIntervals: Int)\nGlobally adaptive integrator that is based on 21-point or 15-point Gauss–Kronrod quadrature within each subinterval."
  },
  {
    "title": "nonAdaptive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/quadrature/integrator/3240686-nonadaptive",
    "html": "See Also\nIntegrators\ncase qng\nNon-adaptive automatic integrator that uses Gauss-Kronrod-Patterson quadrature coefficients.\ncase qag(pointsPerInterval: Quadrature.QAGPointsPerInterval, maxIntervals: Int)\nGlobally adaptive integrator.\nstatic func adaptive(pointsPerInterval: Quadrature.QAGPointsPerInterval, maxIntervals: Int) -> Quadrature.Integrator\nGlobally adaptive integrator.\ncase qags(maxIntervals: Int)\nGlobally adaptive integrator that is based on 21-point or 15-point Gauss–Kronrod quadrature within each subinterval.\nstatic func adaptiveWithSingularities(maxIntervals: Int) -> Quadrature.Integrator\nGlobally adaptive integrator that is based on 21-point or 15-point Gauss–Kronrod quadrature within each subinterval."
  },
  {
    "title": "G_Cr | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage_argbtoypcbcrmatrix/1546133-g_cr",
    "html": "See Also\nConversion Matrix Elements\nvar R_Yp: Float\nThe R_Yp value in the conversion matrix.\nvar G_Yp: Float\nThe G_Yp value in the conversion matrix.\nvar B_Yp: Float\nThe B_Yp value in the conversion matrix.\nvar R_Cb: Float\nThe R_Cb value in the conversion matrix.\nvar G_Cb: Float\nThe G_Cb value in the conversion matrix.\nvar B_Cb_R_Cr: Float\nThe B_Cb_R_Cr value in the conversion matrix.\nvar B_Cr: Float\nThe B_Cr value in the conversion matrix."
  },
  {
    "title": "Quadrature.Error.invalidArgument | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/quadrature/error/invalidargument",
    "html": "See Also\nErrors\ncase badIntegrandBehaviour\ncase generic\ncase integrateMaxEval\ncase `internal`"
  },
  {
    "title": "Quadrature.Integrator.qags(maxIntervals:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/quadrature/integrator/qags_maxintervals",
    "html": "See Also\nIntegrators\ncase qng\nNon-adaptive automatic integrator that uses Gauss-Kronrod-Patterson quadrature coefficients.\nstatic let nonAdaptive: Quadrature.Integrator\nNon-adaptive automatic integrator that uses Gauss-Kronrod-Patterson quadrature coefficients.\ncase qag(pointsPerInterval: Quadrature.QAGPointsPerInterval, maxIntervals: Int)\nGlobally adaptive integrator.\nstatic func adaptive(pointsPerInterval: Quadrature.QAGPointsPerInterval, maxIntervals: Int) -> Quadrature.Integrator\nGlobally adaptive integrator.\nstatic func adaptiveWithSingularities(maxIntervals: Int) -> Quadrature.Integrator\nGlobally adaptive integrator that is based on 21-point or 15-point Gauss–Kronrod quadrature within each subinterval."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/quadrature/error/3240678-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "simd_make_short32(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917632-simd_make_short32",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Scalar Values\nfunc simd_make_short32_undef(Int16) -> simd_short32\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_short(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917839-simd_short",
    "html": "See Also\nFunctions to Create Thirty Two-Element Vectors From Vectors of Other Types\nfunc simd_short(simd_char32) -> simd_short32\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_short(simd_uchar32) -> simd_short32\nReturns a new vector from the specified vector of 8-bit, unsigned integer element.\nfunc simd_short(simd_ushort32) -> simd_short32\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements."
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimageypcbcrtype/1546960-rawvalue",
    "html": "See Also\nRaw Values\ninit(UInt32)\ninit(rawValue: UInt32)"
  },
  {
    "title": "kvImage_ARGBToYpCbCrMatrix_ITU_R_601_4 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/kvimage_argbtoypcbcrmatrix_itu_r_601_4",
    "html": "See Also\nConversion Matrices\nvar kvImage_ARGBToYpCbCrMatrix_ITU_R_709_2: UnsafePointer<vImage_ARGBToYpCbCrMatrix>!\nRGB-to-Y'CbCr conversion matrix for ITU Recommendation BT.709-2."
  },
  {
    "title": "vImageConvert_RGBFFFtoPlanarF(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533181-vimageconvert_rgbffftoplanarf",
    "html": "Parameters\nrgbSrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to separate.\n\nredDest\n\nA pointer to a vImage buffer data structure that represents the red channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\ngreenDest\n\nA pointer to a vImage buffer data structure that represents the green channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\nblueDest\n\nA pointer to a vImage buffer data structure that represents the blue channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe source image and the destination buffers, must all have the same height and the same width. This function works in place for one destination buffer. You must allocated the others separately.\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "BNNSActivationFunctionTanh | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctiontanh",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\ntanh(x)\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "BNNSActivationFunctionSoftsign | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionsoftsign",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nx / (1 + abs(x))\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "BNNSActivationFunctionSoftplus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionsoftplus",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nalpha * log( 1 + exp(beta*x) )\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10, with an alpha of 1.0, and a beta of 0.5:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "BNNSActivationFunctionSiLU | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionsilu",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nSiLU(x) = x * sigmoid(x)\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimageargbtype/1546649-init",
    "html": "See Also\nRaw Values\ninit(rawValue: UInt32)\nvar rawValue: UInt32"
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparsetriangle_t/2868071-rawvalue",
    "html": "See Also\nRaw Values\ninit(UInt8)\ninit(rawValue: UInt8)"
  },
  {
    "title": "vImageCVImageFormat.ChromaSiting.center | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/chromasiting/center",
    "html": "See Also\nChrominance siting constants\ncase top\nThe chrominance sample is horizontally centered, but co-sited with the top row of luminance samples.\ncase topLeft\nThe chrominance sample is co-sited with the top-left luminance sample.\ncase bottom\nThe chrominance sample is horizontally centered, but co-sited with the bottom row of luminance samples.\ncase bottomLeft\nThe chrominance sample is co-sited with the bottom-left luminance sample.\ncase left\nThe chrominance sample is horizontally co-sited with the left column of luminance samples, but centered vertically.\ncase dv420\nThe Cr and Cb samples are alternately co-sited with the left luminance samples of the same field."
  },
  {
    "title": "BNNSActivationFunctionHardSigmoid | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionhardsigmoid",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nmax(0, min(1, alpha*x + beta))\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10, an alpha of 1.0, and a beta of 0.5:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparseorder_t/2868220-init",
    "html": "See Also\nRaw Values\ninit(UInt8)\nvar rawValue: UInt8"
  },
  {
    "title": "BNNSActivationFunctionLogSoftmax | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionlogsoftmax",
    "html": "See Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "isnan(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804688-isnan",
    "html": "See Also\nClassification Functions\nfunc isfinite(simd_double8) -> simd_long8\nReturns true for each element that is finite in a vector.\nfunc isinf(simd_double8) -> simd_long8\nReturns true for each element that is infinite in a vector.\nfunc isnormal(simd_double8) -> simd_long8\nReturns true for each element that is normal in a vector."
  },
  {
    "title": "BNNSActivationFunctionGumbelMax | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctiongumbelmax",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\n GumbleMax(X)_i = MAX(−log(−log(alpha*Uniform(0,1)+beta)+beta) + Xj) \n\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "vImageCVImageFormat.ChromaSiting.left | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/chromasiting/left",
    "html": "See Also\nChrominance siting constants\ncase top\nThe chrominance sample is horizontally centered, but co-sited with the top row of luminance samples.\ncase topLeft\nThe chrominance sample is co-sited with the top-left luminance sample.\ncase bottom\nThe chrominance sample is horizontally centered, but co-sited with the bottom row of luminance samples.\ncase bottomLeft\nThe chrominance sample is co-sited with the bottom-left luminance sample.\ncase center\nThe chrominance sample is fully centered.\ncase dv420\nThe Cr and Cb samples are alternately co-sited with the left luminance samples of the same field."
  },
  {
    "title": "!=(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/chromasiting/3241430",
    "html": "Parameters\na\n\nThe left-hand-side value.\n\nb\n\nThe right-hand-side value.\n\nReturn Value\n\nA Boolean value that indicates whether two values aren’t equal.\n\nSee Also\nComparing values\nstatic func == (vImageCVImageFormat.ChromaSiting, vImageCVImageFormat.ChromaSiting) -> Bool\nReturns a Boolean value that indicates whether two values are equal."
  },
  {
    "title": "vImageCVImageFormat.ChromaSiting.dv420 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/chromasiting/dv420",
    "html": "See Also\nChrominance siting constants\ncase top\nThe chrominance sample is horizontally centered, but co-sited with the top row of luminance samples.\ncase topLeft\nThe chrominance sample is co-sited with the top-left luminance sample.\ncase bottom\nThe chrominance sample is horizontally centered, but co-sited with the bottom row of luminance samples.\ncase bottomLeft\nThe chrominance sample is co-sited with the bottom-left luminance sample.\ncase left\nThe chrominance sample is horizontally co-sited with the left column of luminance samples, but centered vertically.\ncase center\nThe chrominance sample is fully centered."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/chromasiting/3241437-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable\nSee Also\nProviding a hash value\nfunc hash(into: inout Hasher)\nHashes the essential components of this value by feeding them into the given hasher."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimagecvimageformat/chromasiting/3241436-hash",
    "html": "Parameters\nhasher\n\nThe hasher to use when combining the components of this instance.\n\nRelationships\nFrom Protocol\nHashable\nSee Also\nProviding a hash value\nvar hashValue: Int\nThe hash value."
  },
  {
    "title": "BNNSActivationFunctionGumbel | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctiongumbel",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\n−log(−log(alpha*Uniform(0,1)+beta)+beta)\n\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "Quadrature.Integrator.qag(pointsPerInterval:maxIntervals:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/quadrature/integrator/qag_pointsperinterval_maxintervals",
    "html": "See Also\nIntegrators\ncase qng\nNon-adaptive automatic integrator that uses Gauss-Kronrod-Patterson quadrature coefficients.\nstatic let nonAdaptive: Quadrature.Integrator\nNon-adaptive automatic integrator that uses Gauss-Kronrod-Patterson quadrature coefficients.\nstatic func adaptive(pointsPerInterval: Quadrature.QAGPointsPerInterval, maxIntervals: Int) -> Quadrature.Integrator\nGlobally adaptive integrator.\ncase qags(maxIntervals: Int)\nGlobally adaptive integrator that is based on 21-point or 15-point Gauss–Kronrod quadrature within each subinterval.\nstatic func adaptiveWithSingularities(maxIntervals: Int) -> Quadrature.Integrator\nGlobally adaptive integrator that is based on 21-point or 15-point Gauss–Kronrod quadrature within each subinterval."
  },
  {
    "title": "adaptive(pointsPerInterval:maxIntervals:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/quadrature/integrator/3240684-adaptive",
    "html": "See Also\nIntegrators\ncase qng\nNon-adaptive automatic integrator that uses Gauss-Kronrod-Patterson quadrature coefficients.\nstatic let nonAdaptive: Quadrature.Integrator\nNon-adaptive automatic integrator that uses Gauss-Kronrod-Patterson quadrature coefficients.\ncase qag(pointsPerInterval: Quadrature.QAGPointsPerInterval, maxIntervals: Int)\nGlobally adaptive integrator.\ncase qags(maxIntervals: Int)\nGlobally adaptive integrator that is based on 21-point or 15-point Gauss–Kronrod quadrature within each subinterval.\nstatic func adaptiveWithSingularities(maxIntervals: Int) -> Quadrature.Integrator\nGlobally adaptive integrator that is based on 21-point or 15-point Gauss–Kronrod quadrature within each subinterval."
  },
  {
    "title": "Quadrature.Error.generic | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/quadrature/error/generic",
    "html": "See Also\nErrors\ncase badIntegrandBehaviour\ncase integrateMaxEval\ncase `internal`\ncase invalidArgument"
  },
  {
    "title": "Quadrature.Error.badIntegrandBehaviour | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/quadrature/error/badintegrandbehaviour",
    "html": "See Also\nErrors\ncase generic\ncase integrateMaxEval\ncase `internal`\ncase invalidArgument"
  },
  {
    "title": "Quadrature.Integrator.qng | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/quadrature/integrator/qng",
    "html": "See Also\nIntegrators\nstatic let nonAdaptive: Quadrature.Integrator\nNon-adaptive automatic integrator that uses Gauss-Kronrod-Patterson quadrature coefficients.\ncase qag(pointsPerInterval: Quadrature.QAGPointsPerInterval, maxIntervals: Int)\nGlobally adaptive integrator.\nstatic func adaptive(pointsPerInterval: Quadrature.QAGPointsPerInterval, maxIntervals: Int) -> Quadrature.Integrator\nGlobally adaptive integrator.\ncase qags(maxIntervals: Int)\nGlobally adaptive integrator that is based on 21-point or 15-point Gauss–Kronrod quadrature within each subinterval.\nstatic func adaptiveWithSingularities(maxIntervals: Int) -> Quadrature.Integrator\nGlobally adaptive integrator that is based on 21-point or 15-point Gauss–Kronrod quadrature within each subinterval."
  },
  {
    "title": "Quadrature.Error.internal | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/quadrature/error/internal",
    "html": "See Also\nErrors\ncase badIntegrandBehaviour\ncase generic\ncase integrateMaxEval\ncase invalidArgument"
  },
  {
    "title": "Quadrature.Error.integrateMaxEval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/quadrature/error/integratemaxeval",
    "html": "See Also\nErrors\ncase badIntegrandBehaviour\ncase generic\ncase `internal`\ncase invalidArgument"
  },
  {
    "title": "BNNSActivationFunctionThreshold | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionthreshold",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nif x <= alpha\n    beta\nelse\n    x\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10, an alpha of 0.0, and a beta of 5.0:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input."
  },
  {
    "title": "simd_muladd(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916832-simd_muladd",
    "html": "Parameters\nx\n\nThe x in x*y + z.\n\ny\n\nThe y in x*y + z.\n\nz\n\nThe z in x*y + z.\n\nReturn Value\n\nThe result of x*y + z.\n\nSee Also\nMath Functions\nfunc cbrt(simd_double8) -> simd_double8\nReturns the cube root of each element in a vector.\nfunc erf(simd_double8) -> simd_double8\nReturns the error function for each element in a vector.\nfunc erfc(simd_double8) -> simd_double8\nReturns the complementary error function for each element in a vector.\nfunc fma(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double8, simd_double8) -> simd_double8\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double8, simd_double8) -> simd_double8\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double8) -> simd_double8\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double8, simd_double8) -> simd_double8\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double8, simd_double8) -> simd_double8\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double8, simd_double8) -> simd_double8\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double8) -> simd_double8\nReturns each element in a vector rounded to the nearest integer.\nfunc tgamma(simd_double8) -> simd_double8\nReturns the gamma function for each element in a vector."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/quadrature/error/3240677-hash",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "lgamma(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804706-lgamma",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double8) -> simd_double8\nReturns the cube root of each element in a vector.\nfunc erf(simd_double8) -> simd_double8\nReturns the error function for each element in a vector.\nfunc erfc(simd_double8) -> simd_double8\nReturns the complementary error function for each element in a vector.\nfunc fma(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double8, simd_double8) -> simd_double8\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double8, simd_double8) -> simd_double8\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc nextafter(simd_double8, simd_double8) -> simd_double8\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double8, simd_double8) -> simd_double8\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double8, simd_double8) -> simd_double8\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double8) -> simd_double8\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double8) -> simd_double8\nReturns the gamma function for each element in a vector."
  },
  {
    "title": "tgamma(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804845-tgamma",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double8) -> simd_double8\nReturns the cube root of each element in a vector.\nfunc erf(simd_double8) -> simd_double8\nReturns the error function for each element in a vector.\nfunc erfc(simd_double8) -> simd_double8\nReturns the complementary error function for each element in a vector.\nfunc fma(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double8, simd_double8) -> simd_double8\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double8, simd_double8) -> simd_double8\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double8) -> simd_double8\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double8, simd_double8) -> simd_double8\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double8, simd_double8) -> simd_double8\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double8, simd_double8) -> simd_double8\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double8) -> simd_double8\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors."
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparseorder_t/2868177-rawvalue",
    "html": "See Also\nRaw Values\ninit(UInt8)\ninit(rawValue: UInt8)"
  },
  {
    "title": "simd_precise_project(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917766-simd_precise_project",
    "html": "See Also\nGeometry Functions\nfunc simd_dot(simd_double8, simd_double8) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double8) -> simd_double8\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double8) -> simd_double8\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double8) -> simd_double8\nReturns the precise normalized vector.\nfunc simd_project(simd_double8, simd_double8) -> simd_double8\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double8, simd_double8) -> simd_double8\nReturns the fast projected vector."
  },
  {
    "title": "G_Yp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage_argbtoypcbcrmatrix/1546990-g_yp",
    "html": "See Also\nConversion Matrix Elements\nvar R_Yp: Float\nThe R_Yp value in the conversion matrix.\nvar B_Yp: Float\nThe B_Yp value in the conversion matrix.\nvar R_Cb: Float\nThe R_Cb value in the conversion matrix.\nvar G_Cb: Float\nThe G_Cb value in the conversion matrix.\nvar B_Cb_R_Cr: Float\nThe B_Cb_R_Cr value in the conversion matrix.\nvar G_Cr: Float\nThe G_Cr value in the conversion matrix.\nvar B_Cr: Float\nThe B_Cr value in the conversion matrix."
  },
  {
    "title": "vImageConvert_RGB16UToARGB8888(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533005-vimageconvert_rgb16utoargb8888",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\npermuteMap\n\nAn array of four 8-bit integers with the values 0, 1, and 2, in some order. Each value specifies a channel from the source image that should be copied to that channel in the destination image. 0 denotes the red channel, 1 the green channel, and 2 the blue channel. \n\ncopyMask\n\nA mask to choose between the result and the backgroundColor.\n\n1000 uses the first channel of backgroundColor as the value of channel A in the result.\n\n0100 uses the second channel of backgroundColor as the value of channel R in the result.\n\n0010 uses the third channel of backgroundColor as the value of channel G in the result.\n\n0001 uses the fourth channel of backgroundColor as the value of channel B in the result.\n\nbackgroundColor\n\nA pointer to 8-bit ARGB values that replace the result pixels based on the copy mask.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThis function doesn't work in place.\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "simd_distance_squared(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917770-simd_distance_squared",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double8) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double8) -> Double\nReturns the fast length of a vector.\nfunc simd_precise_length(simd_double8) -> Double\nReturns the precise length of a vector.\nfunc simd_length_squared(simd_double8) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double8, simd_double8) -> Double\nReturns the distance between two vectors.\nfunc simd_fast_distance(simd_double8, simd_double8) -> Double\nReturns the fast distance between two vectors.\nfunc simd_precise_distance(simd_double8, simd_double8) -> Double\nReturns the precise distance between two vectors."
  },
  {
    "title": "vImageConvert_RGBA8888toRGB565_dithered(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1642347-vimageconvert_rgba8888torgb565_d",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\ntempBuffer\n\nA pointer to a region of memory that vImage can use as a scratch space for storing temporary data.\n\ndither\n\nThe dithering method, which should be kvImageConvert_DitherOrdered or kvImageConvert_DitherOrderedReproducible.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe calculation for each pixel is:\n\nuint32_t red   = (8bitRedChannel   * (31 << 8) + 127) / 255;\nuint32_t green = (8bitGreenChannel * (63 << 8) + 127) / 255;\nuint32_t blue  = (8bitBlueChannel  * (31 << 8) + 127) / 255;\nred   += dither_noise + (1 << 7);\ngreen += dither_noise + (1 << 7);\nblue  += dither_noise + (1 << 7);\nred    = red >> 8;\ngreen  = green >> 8;\nblue   = blue >> 8;\nuint16_t RGB565pixel =  (red << 11) | (green << 5) | blue;\n\n\nThis function supports the following dithering options:\n\nkvImageConvert_DitherOrdered\n\nPrecomputed blue noise is added to the image before the values are rounded to the destination format. The offset into the blue noise is randomized per call to avoid visible artifacts if you do your own tiling or call the function on sequential frames of video.\n\nkvImageConvert_DitherOrderedReproducible\n\nPrecomputed blue noise is added to the image before the values are rounded to the destination format. The offset into the blue noise is the same for every call to allow users to get reproducible results.\n\nThis function can operate in place, provided that src->data == dest->data, src->rowBytes >= dest >rowBytes, and the kvImageDoNotTile flag is used if src->rowBytes > dest->rowBytes.\n\nSee Also\nConverting from RGBA Formats\nfunc vImageConvert_RGBAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_RGBA1010102ToARGB16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16Q12 format image.\nfunc vImageConvert_RGBA1010102ToARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16U format image.\nfunc vImageConvert_RGBA1010102ToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB8888 format image.\nfunc vImageConvert_RGBA16UtoRGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA16U image to an RGB16U image.\nfunc vImageConvert_RGBA5551toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGB565 image, with loss of alpha.\nfunc vImageConvert_RGBA5551toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGBA8888 image.\nfunc vImageConvert_RGBA8888toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBA8888 image to a three-channel RGB888 image by removing the alpha channel.\nfunc vImageConvert_RGBA8888toRGBA5551_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGBA5551 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGB565 image.\nfunc vImageConvert_RGBA8888toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGBA5551 image."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917156-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_double8) -> simd_double8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns each element in a vector clamped to a specified range.\nfunc simd_fract(simd_double8) -> simd_double8\nReturns the fractional part of each element in a vector.\nfunc simd_sign(simd_double8) -> simd_double8\nReturns the sign of each element in a vector.\nfunc simd_step(simd_double8, simd_double8) -> simd_double8\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "vImageConvert_RGBFFFtoRGB888_dithered(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533289-vimageconvert_rgbffftorgb888_dit",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\nmaxFloat\n\nThe encoding for 1.0 in the src buffer, full intensity. Typically, this is 1.0 for floating-point data in the range [0,1], but if your data is [0,65535], pass 65535.\n\nA separate value is provided for each of the three channels.\n\nminFloat\n\nThe encoding for 0.0 in the src buffer, no light. Typically, this is 0.0 for floating-point data in the range [0,1], but if your data is [-0.5,0.5], pass -0.5.\n\nA separate value is provided for each of the three channels.\n\ndither\n\nType of dithering, if any, to apply to the image.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThis function supports the following dithering options:\n\nkvImageConvert_DitherNone\n\nThis option applies no dithering. Input values are rounded to the nearest value representable in the destination format.\n\nkvImageConvert_DitherOrdered\n\nPrecomputed blue noise is added to the image before the values are rounded to the destination format. The offset into the blue noise is randomized per call to avoid visible artifacts if you do your own tiling or call the function on sequential frames of video.\n\nkvImageConvert_DitherOrderedReproducible\n\nPrecomputed blue noise is added to the image before the values are rounded to the destination format. The offset into the blue noise is the same for every call to allow users to get reproducible results.\n\nkvImageConvert_DitherFloydSteinberg\n\nFloyd-Steinberg dithering is applied to the image.\n\nkvImageConvert_DitherAtkinson\n\nAtkinson dithering is applied to the image.\n\nYou can further influence the ordered dither methods by shaping the noise distribution using the Gaussian and uniform options below. These options are OR-ed with kvImageConvert_DitherOrdered or kvImageConvert_DitherOrderedReproducible:\n\nkvImageConvert_OrderedGaussianBlue\n\nWhen using an ordered dither pattern, distribute the noise according to a Gaussian distribution. This generally gives more pleasing images—less noisy and perhaps a little more saturated—but color fidelity can suffer. Its effect is between kvImageConvert_DitherNone and kvImageConvert_DitherOrdered | kvImageConvert_DitherUniform. This option is the default for kvImageConvert_DitherOrdered and kvImageConvert_DitherOrderedReproducible.\n\nkvImageConvert_OrderedUniformBlue\n\nWhen using an ordered dither pattern, distribute the noise uniformly. This generally gives the best color fidelity, but the resulting image is noisier and more obviously dithered. This is usually the best choice when low bit depth content is drawn next to high bit depth content and in other circumstances where subtle changes to color arising from the conversion could be easily noticed. It may be a poor choice when the image is likely to be enlarged—which would cause the noise to become more evident—and for very flat or synthetic content with little inherent noise. You can avoid the enlargement problem by enlarging first at high bit depth, then converting to lower bit depth.\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "cosh(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804571-cosh",
    "html": "See Also\nHyperbolic Functions\nfunc acosh(simd_double8) -> simd_double8\nReturns the inverse hyperbolic cosine of each element in a vector.\nfunc asinh(simd_double8) -> simd_double8\nReturns the inverse hyperbolic sine of each element in a vector.\nfunc atanh(simd_double8) -> simd_double8\nReturns the inverse hyperbolic tangent of each element in a vector.\nfunc sinh(simd_double8) -> simd_double8\nReturns the hyperbolic sine of each element in a vector.\nfunc tanh(simd_double8) -> simd_double8\nReturns the hyperbolic tangent of each element in a vector."
  },
  {
    "title": "simd_norm_inf(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917759-simd_norm_inf",
    "html": "See Also\nVector Norm Functions\nfunc simd_norm_one(simd_double8) -> Double\nReturns the sum of the absolute values of a vector."
  },
  {
    "title": "vImageConvert_RGBA8888toRGBA5551(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1642450-vimageconvert_rgba8888torgba5551",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe RGBA5551 format has 16-bit pixels with 1 bit for alpha and 5 bits each for red, green, and blue. The function calculates the 16-bit pixels in the destination image as follows:\n\n    uint32_t alpha = (8bitAlphaChannel      + 127) / 255\n    uint32_t red   = (8bitRedChannel   * 31 + 127) / 255\n    uint32_t green = (8bitGreenChannel * 31 + 127) / 255\n    uint32_t blue  = (8bitBlueChannel  * 31 + 127) / 255\n    uint16_t ARGB1555pixel = (alpha << 15) | (red <<  10) | (green << 5) | blue\n\nSee Also\nConverting from RGBA Formats\nfunc vImageConvert_RGBAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_RGBA1010102ToARGB16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16Q12 format image.\nfunc vImageConvert_RGBA1010102ToARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16U format image.\nfunc vImageConvert_RGBA1010102ToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB8888 format image.\nfunc vImageConvert_RGBA16UtoRGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA16U image to an RGB16U image.\nfunc vImageConvert_RGBA5551toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGB565 image, with loss of alpha.\nfunc vImageConvert_RGBA5551toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGBA8888 image.\nfunc vImageConvert_RGBA8888toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBA8888 image to a three-channel RGB888 image by removing the alpha channel.\nfunc vImageConvert_RGBA8888toRGBA5551_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGBA5551 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGB565 image."
  },
  {
    "title": "vImageConvert_RGBA8888toRGB565(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533162-vimageconvert_rgba8888torgb565",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe alpha channel in the RGBA8888 image is ignored. (The RGB565 format has 16-bit pixels with 5 bits for red, 6 for green, and 5 for blue.) The function calculates the pixels in the destination image as follows:\n\n    uint32_t red   = (8bitRedChannel   * (31*2) + 255) / (255*2)\n    uint32_t green = (8bitGreenChannel * 63 + 127) / 255\n    uint32_t blue  = (8bitBlueChannel  * 31 + 127) / 255\n    uint16_t RGB565pixel = (red << 11) | (green <<  5) | blue\n\nSee Also\nConverting from RGBA Formats\nfunc vImageConvert_RGBAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_RGBA1010102ToARGB16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16Q12 format image.\nfunc vImageConvert_RGBA1010102ToARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16U format image.\nfunc vImageConvert_RGBA1010102ToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB8888 format image.\nfunc vImageConvert_RGBA16UtoRGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA16U image to an RGB16U image.\nfunc vImageConvert_RGBA5551toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGB565 image, with loss of alpha.\nfunc vImageConvert_RGBA5551toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGBA8888 image.\nfunc vImageConvert_RGBA8888toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBA8888 image to a three-channel RGB888 image by removing the alpha channel.\nfunc vImageConvert_RGBA8888toRGBA5551_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGBA5551 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBA8888toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGBA5551 image."
  },
  {
    "title": "init(R_Yp:G_Yp:B_Yp:R_Cb:G_Cb:B_Cb_R_Cr:G_Cr:B_Cr:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage_argbtoypcbcrmatrix/1545948-init",
    "html": "Parameters\nR_Yp\n\nThe R_Yp in the conversion matrix.\n\nG_Yp\n\nThe G_Yp in the conversion matrix.\n\nB_Yp\n\nThe B_Yp in the conversion matrix.\n\nR_Cb\n\nThe R_Cb in the conversion matrix.\n\nG_Cb\n\nThe G_Cb in the conversion matrix.\n\nB_Cb_R_Cr\n\nThe B_Cb_R_Cr in the conversion matrix.\n\nG_Cr\n\nThe G_Cr in the conversion matrix.\n\nB_Cr\n\nThe B_Cr in the conversion matrix.\n\nDiscussion\n\nThe 3 x 3 matrix is given by:\n\nSee Also\nCreating a Conversion Matrix\ninit()\nCreates a 3 x 3 zero matrix for converting RGB to Y'CbCr."
  },
  {
    "title": "simd_norm_one(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917791-simd_norm_one",
    "html": "See Also\nVector Norm Functions\nfunc simd_norm_inf(simd_double8) -> Double\nReturns the maximum absolute value of a vector."
  },
  {
    "title": "vImageConvert_BGRA8888toRGB565(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533285-vimageconvert_bgra8888torgb565",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe alpha channel in the BGRA8888 image is ignored. (The RGB565 format has 16-bit pixels with 5 bits for red, 6 for green, and 5 for blue.) The function calculates the pixels in the destination image as follows:\n\n    uint32_t red   = (8bitRedChannel   * (31*2) + 255) / (255*2)\n    uint32_t green = (8bitGreenChannel * 63 + 127) / 255\n    uint32_t blue  = (8bitBlueChannel  * 31 + 127) / 255\n    uint16_t RGB565pixel = (red << 11) | (green <<  5) | blue\n\nSee Also\nConverting from BGRA Formats\nfunc vImageConvert_BGRAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel BGRAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_BGRXFFFFToPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates a BGRXFFFF image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_BGRA16UtoRGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a BGRA16 image to an RGB16U image.\nfunc vImageConvert_BGRA8888toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a four-channel BGRA8888 image to a three-channel RGB888 image by removing the alpha channel.\nfunc vImageConvert_BGRX8888ToPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates a BGRX8888 image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_BGRA8888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts a BGRA8888 image to an RGB565 image with dithering."
  },
  {
    "title": "log(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804715-log",
    "html": "See Also\nExponential and Logarithmic Functions\nfunc exp(simd_double8) -> simd_double8\nReturns e raised to the power of each element in a vector.\nfunc exp2(simd_double8) -> simd_double8\nReturns 2 raised to the power of each element in a vector.\nfunc exp10(simd_double8) -> simd_double8\nReturns 10 raised to the power of each element in a vector.\nfunc expm1(simd_double8) -> simd_double8\nReturns eˣ-1 for each element in a vector.\nfunc log2(simd_double8) -> simd_double8\nReturns the base 2 logarithm of each element in a vector.\nfunc log10(simd_double8) -> simd_double8\nReturns the base 10 logarithm of each element in a vector.\nfunc log1p(simd_double8) -> simd_double8\nReturns log(1+x) of each element in a vector."
  },
  {
    "title": "simd_fast_length(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917774-simd_fast_length",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double8) -> Double\nReturns the length of a vector.\nfunc simd_precise_length(simd_double8) -> Double\nReturns the precise length of a vector.\nfunc simd_length_squared(simd_double8) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double8, simd_double8) -> Double\nReturns the distance between two vectors.\nfunc simd_fast_distance(simd_double8, simd_double8) -> Double\nReturns the fast distance between two vectors.\nfunc simd_precise_distance(simd_double8, simd_double8) -> Double\nReturns the precise distance between two vectors.\nfunc simd_distance_squared(simd_double8, simd_double8) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "kvImage_ARGBToYpCbCrMatrix_ITU_R_709_2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/kvimage_argbtoypcbcrmatrix_itu_r_709_2",
    "html": "See Also\nConversion Matrices\nvar kvImage_ARGBToYpCbCrMatrix_ITU_R_601_4: UnsafePointer<vImage_ARGBToYpCbCrMatrix>!\nRGB-to-Y'CbCr conversion matrix for ITU Recommendation BT.601-4."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimageypcbcrtype/1546616-init",
    "html": "See Also\nRaw Values\ninit(rawValue: UInt32)\nvar rawValue: UInt32"
  },
  {
    "title": "R_Yp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage_argbtoypcbcrmatrix/1545112-r_yp",
    "html": "See Also\nConversion Matrix Elements\nvar G_Yp: Float\nThe G_Yp value in the conversion matrix.\nvar B_Yp: Float\nThe B_Yp value in the conversion matrix.\nvar R_Cb: Float\nThe R_Cb value in the conversion matrix.\nvar G_Cb: Float\nThe G_Cb value in the conversion matrix.\nvar B_Cb_R_Cr: Float\nThe B_Cb_R_Cr value in the conversion matrix.\nvar G_Cr: Float\nThe G_Cr value in the conversion matrix.\nvar B_Cr: Float\nThe B_Cr value in the conversion matrix."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimageypcbcrtype/1545250-init",
    "html": "See Also\nRaw Values\ninit(UInt32)\nvar rawValue: UInt32"
  },
  {
    "title": "vImageConvert_RGBA1010102ToARGB16Q12(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533235-vimageconvert_rgba1010102toargb1",
    "html": "Parameters\nsrc\n\nA pointer to the vImage buffer that references 10-bit RGB interleaved source pixels.\n\ndest\n\nA pointer to the vImage buffer that references 16Q12 ARGB interleaved destination pixels.\n\nRGB101010RangeMin\n\nThe minimum value for the range of 10-bit RGB pixels.\n\nRGB101010RangeMax\n\nThe maximum value for the range of 10-bit RGB pixels.\n\npermuteMap\n\nAn array of four 8-bit integers with the values 0, 1, 2, and 3, in some order. Each value specifies a channel from the source image that should be copied to that channel in the destination image. 0 denotes the alpha channel, 1 the red channel, 2 the green channel, and 3 the blue channel. \n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nRGB101010RangeMin and RGB101010RangeMax are available for non-full-range pixel values. You can set full-range pixel values as:\n\n RGB101010RangeMin  = 0;\n RGB101010RangeMax  = 1023;\n\n\nThe per-pixel operation is:\n\n     uint32_t *srcPixel = src.data;\n     uint32_t pixel = ntohl(srcPixel[0]);\n     srcPixel += 1;\n      \n     int32_t A2  = pixel & 0x3;\n     int32_t R10 = (pixel >> 22) & 0x3ff;\n     int32_t G10 = (pixel >> 12) & 0x3ff;\n     int32_t B10 = (pixel >>  2) & 0x3ff;\n     int32_t range10 = RGB101010RangeMax - RGB101010RangeMin;\n      \n     int16_t R16, G16, B16;\n     A2  = (A2 * 4096 + 1) / 3;\n     R16 = ((R10 - RGB101010RangeMin) * 4096 + (range10 >> 1)) / range10;\n     G16 = ((G10 - RGB101010RangeMin) * 4096 + (range10 >> 1)) / range10;\n     B16 = ((B10 - RGB101010RangeMin) * 4096 + (range10 >> 1)) / range10;\n      \n     R16 = CLAMP(INT16_MIN, R16, INT16_MAX);\n     G16 = CLAMP(INT16_MIN, G16, INT16_MAX);\n     B16 = CLAMP(INT16_MIN, B16, INT16_MAX);\n      \n     int16_t ARGB[4];\n     ARGB[0] = A2;\n     ARGB[1] = R16;\n     ARGB[2] = G16;\n     ARGB[3] = B16;\n      \n     int16_t *destPixel = dest.data;\n     destPixel[0] = ARGB[permuteMap[0]];\n     destPixel[1] = ARGB[permuteMap[1]];\n     destPixel[2] = ARGB[permuteMap[2]];\n     destPixel[3] = ARGB[permuteMap[3]];\n     destPixel += 4;\n\n\n\n\nSee Also\nConverting from RGBA Formats\nfunc vImageConvert_RGBAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_RGBA1010102ToARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16U format image.\nfunc vImageConvert_RGBA1010102ToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB8888 format image.\nfunc vImageConvert_RGBA16UtoRGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA16U image to an RGB16U image.\nfunc vImageConvert_RGBA5551toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGB565 image, with loss of alpha.\nfunc vImageConvert_RGBA5551toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGBA8888 image.\nfunc vImageConvert_RGBA8888toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBA8888 image to a three-channel RGB888 image by removing the alpha channel.\nfunc vImageConvert_RGBA8888toRGBA5551_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGBA5551 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGB565 image.\nfunc vImageConvert_RGBA8888toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGBA5551 image."
  },
  {
    "title": "BNNSActivationFunctionSigmoid | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionsigmoid",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the logistic function:\n\n1.0 / (1.0 + exp(-x))\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "init(opaque:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage_argbtoypcbcr/1546676-init",
    "html": "See Also\nRaw Values\ninit()\nvar opaque: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)"
  },
  {
    "title": "BNNSActivationFunctionRectifiedLinear | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionrectifiedlinear",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\n0 if x<0, and x if x>=0\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "BNNSActivationFunctionScaledTanh | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionscaledtanh",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nalpha*tanh(x*beta)\n\n\nUse alpha and beta to specify the scale and input multiplier:\n\nvar activation = BNNSActivation(function: .scaledTanh, \n                                alpha: 1, \n                                beta: 0.5)\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "opaque | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage_argbtoypcbcr/1544778-opaque",
    "html": "See Also\nRaw Values\ninit()\ninit(opaque: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8))"
  },
  {
    "title": "BNNSActivationFunctionLinear | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionlinear",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nalpha*x\n\n\nUse alpha to specify the multiplier:\n\nvar activation = BNNSActivation(function: .linear,\n                                alpha: 0.2)\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "vImageConvert_RGB888toRGBA8888(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533228-vimageconvert_rgb888torgba8888",
    "html": "Parameters\nrgbSrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\naSrc\n\nA pointer to a vImage buffer structure that contains a Planar8 alpha plane to use as the alpha values for in the destination image. If you pass NULL, the function assigns the value of the alpha parameter for all pixels in the destination image.\n\nalpha\n\nAn alpha value for all pixels in the destination image. The function ignores this value if the aSrc parameter is not NULL.\n\nrgbaDest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\npremultiply\n\nPass true if the data should be premultiplied by the alpha value; false otherwise.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThis function cannot be used in place.\n\nIf premultiply is true, then this function computes r = (a * r + 127) / 255, g = (a * g + 127) / 255, and b = (a * b + 127) / 255. Otherwise, this function copies the planes as-is.\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three Planar8 images.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "BNNSActivationFunctionLeakyRectifiedLinear | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionleakyrectifiedlinear",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nalpha*x if x<0, and x if x>=0\n\n\nUse alpha to specify the multiplier for values less than zero range:\n\nvar activation = BNNSActivation(function: .leakyRectifiedLinear, \n                                alpha: 0.25)\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "vImageConvert_RGB888toPlanar8(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533040-vimageconvert_rgb888toplanar8",
    "html": "Parameters\nrgbSrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to separate.\n\nredDest\n\nAA pointer to a vImage buffer data structure that represents the red channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\ngreenDest\n\nA pointer to a vImage buffer data structure that represents the green channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\nblueDest\n\nA pointer to a vImage buffer data structure that represents the blue channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe source image and the destination buffers, must all have the same height and the same width. This function works in place for one destination buffer. You must allocate the others separately.\n\nSee Also\nConverting from RGB Formats\nfunc vImageConvert_RGBFFFtoPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGBFFF image into three PlanarF images.\nfunc vImageConvert_RGBFFFtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<Pixel_F>, UnsafePointer<Pixel_F>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBFFFF image to an RGB8888 image with dithering.\nfunc vImageConvert_RGB16UToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<UInt8>, UInt8, UnsafePointer<UInt8>, vImage_Flags) -> vImage_Error\nConverts and permutes an RGB16U image into an ARGB8888 image.\nfunc vImageConvert_RGB16UtoARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an ARGB16U image.\nfunc vImageConvert_RGB16UtoRGBA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGBA16U image.\nfunc vImageConvert_RGB16UtoBGRA16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_16U, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an BGRA16U image.\nfunc vImageConvert_RGB16UtoRGB888_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB16U image to an RGB888 image with dithering.\nfunc vImageConvert_RGB16UtoPlanar16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB16U image into three Planar16U images.\nfunc vImageConvert_RGB565toPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB565 image into three Planar8 images.\nfunc vImageConvert_RGB565toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGB888 image.\nfunc vImageConvert_RGB565toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an RGBA5551 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toRGBA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an RGBA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into an ARGB8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB565toARGB1555(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB565 image to an ARGB1555 image with dithering, setting destination alpha to one.\nfunc vImageConvert_RGB565toBGRA8888(Pixel_8, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGB565 image into a BGRA8888 image, using the provided 8-bit alpha value.\nfunc vImageConvert_RGB888toARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts an RGB888 image into an ARGB8888 image, using the provided alpha value (either as planar or pixel data).\nfunc vImageConvert_RGB888toBGRA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel BGRA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_8, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGB888 image to a four-channel RGBA8888 image, with optional premultiplication.\nfunc vImageConvert_RGB888toPlanar16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an RGB888 image into three 16Q12 images.\nfunc vImageConvert_RGB888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGB888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBFFFtoARGBFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel ARGBFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoBGRAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel BGRAFFFF image, with optional premultiplication.\nfunc vImageConvert_RGBFFFtoRGBAFFFF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>!, Pixel_F, UnsafePointer<vImage_Buffer>, Bool, vImage_Flags) -> vImage_Error\nConverts a three-channel RGBFFF image to a four-channel RGBAFFFF image, with optional premultiplication."
  },
  {
    "title": "BNNSActivationFunctionLinearWithBias | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionlinearwithbias",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nalpha*x + beta\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10, an alpha of 2.0, and a beta of 10.0:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparsetriangle_t/2868190-init",
    "html": "See Also\nRaw Values\ninit(UInt8)\nvar rawValue: UInt8"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparsetriangle_t/2868094-init",
    "html": "See Also\nRaw Values\ninit(rawValue: UInt8)\nvar rawValue: UInt8"
  },
  {
    "title": "init(Yp:Cr_R:Cr_G:Cb_G:Cb_B:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage_ypcbcrtoargbmatrix/1545850-init",
    "html": "Parameters\nYp\n\nThe Yp in the conversion matrix.\n\nCr_R\n\nThe Cr_R in the conversion matrix.\n\nCr_G\n\nThe Cr_G in the conversion matrix.\n\nCb_G\n\nThe Cb_G in the conversion matrix.\n\nCb_B\n\nThe Cb_B in the conversion matrix.\n\nReturn Value\n\nA 3 x 3 matrix for converting Y'CbCr signals to RGB.\n\nDiscussion\n\nThe 3 x 3 matrix is given by:\n\nSee Also\nCreating a Conversion Matrix\ninit()\nCreates a 3 x 3 zero matrix for converting Y'CbCr signals to RGB."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimageargbtype/1544847-init",
    "html": "See Also\nRaw Values\ninit(UInt32)\nvar rawValue: UInt32"
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimageargbtype/1546640-rawvalue",
    "html": "See Also\nRaw Values\ninit(UInt32)\ninit(rawValue: UInt32)"
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage_argbtoypcbcr/1546980-init",
    "html": "See Also\nRaw Values\ninit(opaque: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8))\nvar opaque: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)"
  },
  {
    "title": "BNNSActivationFunctionGELUApproximation2 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctiongeluapproximation2",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nx * (ReLU 6(x + 3.0) * 1.0 / 6.0)\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10, an alpha of 0.1, and a beta of 1.0. The thinner, dashed line shows, for comparison, the result of BNNSActivationFunctionGELUApproximation using the same alpha and beta values:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "BNNSActivationFunctionHardShrink | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionhardshrink",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nabs(x) < abs(alpha)\n    0\nelse\n    x\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10 and an alpha of 5:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "init(rawValue:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparsecontrol_t/2868122-init",
    "html": "See Also\nRaw Values\ninit(UInt32)\nvar rawValue: UInt32"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparsecontrol_t/2868218-init",
    "html": "See Also\nRaw Values\ninit(rawValue: UInt32)\nvar rawValue: UInt32"
  },
  {
    "title": "BNNSActivationFunctionIdentity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionidentity",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nx\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "BNNSActivationFunctionCELU | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctioncelu",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nif x < 0\n    alpha*(exp(x/alpha) - 1) \nelse\n    x\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10 and an alpha of 1:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "BNNSActivationFunctionAbs | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionabs",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nabs(x)\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "BNNSActivationFunctionELU | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionelu",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nif x < 0\n    alpha*(exp(x) - 1)\nelse\n    x\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10 and an alpha of 1:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "BNNSActivationFunctionGELUApproximation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctiongeluapproximation",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\n0.5f * x * (1.0f + tanh(alpha*(x + beta * x * x * x)))\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10, an alpha of 0.1 and a beta of 1.0:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "rawValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/sparsecontrol_t/2868032-rawvalue",
    "html": "See Also\nRaw Values\ninit(UInt32)\ninit(rawValue: UInt32)"
  },
  {
    "title": "BNNSActivationFunctionClampedLeakyRectifiedLinear | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionclampedleakyrectifiedlinear",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nif x < 0\n    min(alpha*x, beta)\nelse\n    min(x, beta) \n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10, an alpha of 1 and a beta of 5:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClamp\nAn activation function that returns its input clamped to the specified range.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "BNNSActivationFunctionClamp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/bnnsactivationfunction/bnnsactivationfunctionclamp",
    "html": "Discussion\n\nThis constant defines an activation function that returns values using the following operation:\n\nmin(max(x, alpha), beta)\n\n\nUse alpha and beta to specify the clamping range:\n\nvar activation = BNNSActivation(function: .clamp, \n                                alpha: -5, \n                                beta: 5)\n\n\nThe following illustrates the output that the activation function generates from inputs in the range -10...10:\n\nSee Also\nActivation Functions\nBNNSActivationFunctionAbs\nAn activation function that returns the absolute value of its input.\nBNNSActivationFunctionCELU\nAn activation function that evaluates the continuously differentiable exponential linear units (CELU) on its input.\nBNNSActivationFunctionClampedLeakyRectifiedLinear\nAn activation function that returns its input clamped to beta when that is greater than or equal to zero, otherwise it returns its input multiplied by alpha clamped to beta.\nBNNSActivationFunctionELU\nAn activation function that evaluates the exponential linear units (ELU) on its input.\nBNNSActivationFunctionGELUApproximation\nAn activation function that evaluates the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGELUApproximation2\nAn activation function that provides a fast evaluation of the Gaussian error linear units (GELU) approximation on its input.\nBNNSActivationFunctionGumbel\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionGumbelMax\nAn activation function that returns random numbers from the Gumbel distribution.\nBNNSActivationFunctionHardShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input.\nBNNSActivationFunctionHardSigmoid\nAn activation function that returns the hard sigmoid function of its input.\nBNNSActivationFunctionHardSwish\nAn activation function that returns the hard swish function of its input.\nBNNSActivationFunctionIdentity\nAn activation function that returns its input.\nBNNSActivationFunctionLeakyRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns its input multiplied by a specified value.\nBNNSActivationFunctionIntegerLinearSaturate\nAn activation function that returns an arithmetic shift, preserving sign.\nBNNSActivationFunctionIntegerLinearSaturatePerChannel\nAn activation function that returns an arithmetic shift, preserving sign for each channel.\nBNNSActivationFunctionLinearWithBias\nAn activation function that returns its input multiplied by a scale and added to a bias.\nBNNSActivationFunctionLogSigmoid\nAn activation function that returns the logarithm of the sigmoid function of its input.\nBNNSActivationFunctionLogSoftmax\nAn activation function that returns the logarithm of the softmax function of its input.\nBNNSActivationFunctionLinear\nAn activation function that returns its input multiplied by a specified value.\nBNNSActivationFunctionPReLUPerChannel\nAn activation function provides per-channel alpha values to Leaky Rectified Linear.\nBNNSActivationFunctionRectifiedLinear\nAn activation function that returns its input when that is greater than or equal to zero, otherwise it returns zero.\nBNNSActivationFunctionScaledTanh\nAn activation function that returns the scaled hyperbolic tangent of its input.\nBNNSActivationFunctionSELU\nAn activation function that evaluates the scaled exponential linear units (SELU) on its input.\nBNNSActivationFunctionSigmoid\nAn activation function that returns the sigmoid function of its input.\nBNNSActivationFunctionSiLU\nAn activation function that returns the sigmoid linear unit (SiLU) function of its input.\nBNNSActivationFunctionSoftmax\nAn activation function that returns the softmax function of its input.\nBNNSActivationFunctionSoftShrink\nAn activation function that returns zero when the absolute input is less than alpha, otherwise it returns its input minus alpha.\nBNNSActivationFunctionSoftplus\nAn activation function that returns the softplus function of its input.\nBNNSActivationFunctionSoftsign\nAn activation function that returns the softsign function of its input.\nBNNSActivationFunctionTanh\nAn activation function that returns the hyperbolic tangent of its input.\nBNNSActivationFunctionTanhShrink\nAn activation function that returns its input minus the hyperbolic tangent of its input.\nBNNSActivationFunctionThreshold\nAn activation function that returns beta if its input is less than a specified threshold, otherwise it returns its input."
  },
  {
    "title": "isnormal(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804697-isnormal",
    "html": "See Also\nClassification Functions\nfunc isfinite(simd_double8) -> simd_long8\nReturns true for each element that is finite in a vector.\nfunc isinf(simd_double8) -> simd_long8\nReturns true for each element that is infinite in a vector.\nfunc isnan(simd_double8) -> simd_long8\nReturns true for each element that is not a number (NaN) in a vector."
  },
  {
    "title": "acos(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804490-acos",
    "html": "See Also\nTrigonometric Functions\nfunc asin(simd_double8) -> simd_double8\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double8) -> simd_double8\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double8, simd_double8) -> simd_double8\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double8) -> simd_double8\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double8) -> simd_double8\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "remainder(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804769-remainder",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double8) -> simd_double8\nReturns the cube root of each element in a vector.\nfunc erf(simd_double8) -> simd_double8\nReturns the error function for each element in a vector.\nfunc erfc(simd_double8) -> simd_double8\nReturns the complementary error function for each element in a vector.\nfunc fma(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double8, simd_double8) -> simd_double8\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double8, simd_double8) -> simd_double8\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double8) -> simd_double8\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double8, simd_double8) -> simd_double8\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double8, simd_double8) -> simd_double8\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc round(simd_double8) -> simd_double8\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double8) -> simd_double8\nReturns the gamma function for each element in a vector."
  },
  {
    "title": "fma(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804643-fma",
    "html": "Parameters\nx\n\nThe x in x*y + z.\n\ny\n\nThe y in x*y + z.\n\nz\n\nThe z in x*y + z.\n\nReturn Value\n\nThe result of x*y + z.\n\nSee Also\nMath Functions\nfunc cbrt(simd_double8) -> simd_double8\nReturns the cube root of each element in a vector.\nfunc erf(simd_double8) -> simd_double8\nReturns the error function for each element in a vector.\nfunc erfc(simd_double8) -> simd_double8\nReturns the complementary error function for each element in a vector.\nfunc fmod(simd_double8, simd_double8) -> simd_double8\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double8, simd_double8) -> simd_double8\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double8) -> simd_double8\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double8, simd_double8) -> simd_double8\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double8, simd_double8) -> simd_double8\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double8, simd_double8) -> simd_double8\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double8) -> simd_double8\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double8) -> simd_double8\nReturns the gamma function for each element in a vector."
  },
  {
    "title": "simd_select(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916804-simd_select",
    "html": "See Also\nLogic Functions\nfunc simd_select(simd_double8, simd_double8, simd_long8) -> simd_double8\nReturns a vector that contains elements from either the first or second parameter, based on the high-order bit of the corresponding element in the third parameter.\nfunc simd_bitselect(simd_double8, simd_double8, simd_long8) -> simd_double8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_double8, simd_double8, simd_long8) -> simd_double8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916757-simd_bitselect",
    "html": "See Also\nLogic Functions\nfunc simd_select(simd_double8, simd_double8, simd_long8) -> simd_double8\nReturns a vector that contains elements from either the first or second parameter, based on the high-order bit of the corresponding element in the third parameter.\nfunc simd_select(simd_double8, simd_double8, simd_long8) -> simd_double8\nReturns a vector that contains elements from either the first or second parameter, based on the high-order bit of the corresponding element in the third parameter.\nfunc simd_bitselect(simd_double8, simd_double8, simd_long8) -> simd_double8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "erfc(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804598-erfc",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double8) -> simd_double8\nReturns the cube root of each element in a vector.\nfunc erf(simd_double8) -> simd_double8\nReturns the error function for each element in a vector.\nfunc fma(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double8, simd_double8) -> simd_double8\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double8, simd_double8) -> simd_double8\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double8) -> simd_double8\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double8, simd_double8) -> simd_double8\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double8, simd_double8) -> simd_double8\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double8, simd_double8) -> simd_double8\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double8) -> simd_double8\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double8) -> simd_double8\nReturns the gamma function for each element in a vector."
  },
  {
    "title": "hypot(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804661-hypot",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double8) -> simd_double8\nReturns the cube root of each element in a vector.\nfunc erf(simd_double8) -> simd_double8\nReturns the error function for each element in a vector.\nfunc erfc(simd_double8) -> simd_double8\nReturns the complementary error function for each element in a vector.\nfunc fma(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double8, simd_double8) -> simd_double8\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc lgamma(simd_double8) -> simd_double8\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double8, simd_double8) -> simd_double8\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double8, simd_double8) -> simd_double8\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double8, simd_double8) -> simd_double8\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double8) -> simd_double8\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double8) -> simd_double8\nReturns the gamma function for each element in a vector."
  },
  {
    "title": "tanh(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804827-tanh",
    "html": "See Also\nHyperbolic Functions\nfunc acosh(simd_double8) -> simd_double8\nReturns the inverse hyperbolic cosine of each element in a vector.\nfunc asinh(simd_double8) -> simd_double8\nReturns the inverse hyperbolic sine of each element in a vector.\nfunc atanh(simd_double8) -> simd_double8\nReturns the inverse hyperbolic tangent of each element in a vector.\nfunc cosh(simd_double8) -> simd_double8\nReturns the hyperbolic cosine of each element in a vector.\nfunc sinh(simd_double8) -> simd_double8\nReturns the hyperbolic sine of each element in a vector."
  },
  {
    "title": "cbrt(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804553-cbrt",
    "html": "See Also\nMath Functions\nfunc erf(simd_double8) -> simd_double8\nReturns the error function for each element in a vector.\nfunc erfc(simd_double8) -> simd_double8\nReturns the complementary error function for each element in a vector.\nfunc fma(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double8, simd_double8) -> simd_double8\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double8, simd_double8) -> simd_double8\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double8) -> simd_double8\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double8, simd_double8) -> simd_double8\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double8, simd_double8) -> simd_double8\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double8, simd_double8) -> simd_double8\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double8) -> simd_double8\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double8) -> simd_double8\nReturns the gamma function for each element in a vector."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916700-simd_bitselect",
    "html": "See Also\nLogic Functions\nfunc simd_select(simd_double8, simd_double8, simd_long8) -> simd_double8\nReturns a vector that contains elements from either the first or second parameter, based on the high-order bit of the corresponding element in the third parameter.\nfunc simd_select(simd_double8, simd_double8, simd_long8) -> simd_double8\nReturns a vector that contains elements from either the first or second parameter, based on the high-order bit of the corresponding element in the third parameter.\nfunc simd_bitselect(simd_double8, simd_double8, simd_long8) -> simd_double8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_select(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916780-simd_select",
    "html": "See Also\nLogic Functions\nfunc simd_select(simd_double8, simd_double8, simd_long8) -> simd_double8\nReturns a vector that contains elements from either the first or second parameter, based on the high-order bit of the corresponding element in the third parameter.\nfunc simd_bitselect(simd_double8, simd_double8, simd_long8) -> simd_double8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_double8, simd_double8, simd_long8) -> simd_double8\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "B_Cr | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage_argbtoypcbcrmatrix/1544586-b_cr",
    "html": "See Also\nConversion Matrix Elements\nvar R_Yp: Float\nThe R_Yp value in the conversion matrix.\nvar G_Yp: Float\nThe G_Yp value in the conversion matrix.\nvar B_Yp: Float\nThe B_Yp value in the conversion matrix.\nvar R_Cb: Float\nThe R_Cb value in the conversion matrix.\nvar G_Cb: Float\nThe G_Cb value in the conversion matrix.\nvar B_Cb_R_Cr: Float\nThe B_Cb_R_Cr value in the conversion matrix.\nvar G_Cr: Float\nThe G_Cr value in the conversion matrix."
  },
  {
    "title": "simd_sign(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916906-simd_sign",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_double8) -> simd_double8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_double8, simd_double8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_fract(simd_double8) -> simd_double8\nReturns the fractional part of each element in a vector.\nfunc simd_step(simd_double8, simd_double8) -> simd_double8\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "asinh(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804517-asinh",
    "html": "See Also\nHyperbolic Functions\nfunc acosh(simd_double8) -> simd_double8\nReturns the inverse hyperbolic cosine of each element in a vector.\nfunc atanh(simd_double8) -> simd_double8\nReturns the inverse hyperbolic tangent of each element in a vector.\nfunc cosh(simd_double8) -> simd_double8\nReturns the hyperbolic cosine of each element in a vector.\nfunc sinh(simd_double8) -> simd_double8\nReturns the hyperbolic sine of each element in a vector.\nfunc tanh(simd_double8) -> simd_double8\nReturns the hyperbolic tangent of each element in a vector."
  },
  {
    "title": "acosh(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804499-acosh",
    "html": "See Also\nHyperbolic Functions\nfunc asinh(simd_double8) -> simd_double8\nReturns the inverse hyperbolic sine of each element in a vector.\nfunc atanh(simd_double8) -> simd_double8\nReturns the inverse hyperbolic tangent of each element in a vector.\nfunc cosh(simd_double8) -> simd_double8\nReturns the hyperbolic cosine of each element in a vector.\nfunc sinh(simd_double8) -> simd_double8\nReturns the hyperbolic sine of each element in a vector.\nfunc tanh(simd_double8) -> simd_double8\nReturns the hyperbolic tangent of each element in a vector."
  },
  {
    "title": "G_Cb | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage_argbtoypcbcrmatrix/1545504-g_cb",
    "html": "See Also\nConversion Matrix Elements\nvar R_Yp: Float\nThe R_Yp value in the conversion matrix.\nvar G_Yp: Float\nThe G_Yp value in the conversion matrix.\nvar B_Yp: Float\nThe B_Yp value in the conversion matrix.\nvar R_Cb: Float\nThe R_Cb value in the conversion matrix.\nvar B_Cb_R_Cr: Float\nThe B_Cb_R_Cr value in the conversion matrix.\nvar G_Cr: Float\nThe G_Cr value in the conversion matrix.\nvar B_Cr: Float\nThe B_Cr value in the conversion matrix."
  },
  {
    "title": "B_Cb_R_Cr | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage_argbtoypcbcrmatrix/1544906-b_cb_r_cr",
    "html": "See Also\nConversion Matrix Elements\nvar R_Yp: Float\nThe R_Yp value in the conversion matrix.\nvar G_Yp: Float\nThe G_Yp value in the conversion matrix.\nvar B_Yp: Float\nThe B_Yp value in the conversion matrix.\nvar R_Cb: Float\nThe R_Cb value in the conversion matrix.\nvar G_Cb: Float\nThe G_Cb value in the conversion matrix.\nvar G_Cr: Float\nThe G_Cr value in the conversion matrix.\nvar B_Cr: Float\nThe B_Cr value in the conversion matrix."
  },
  {
    "title": "simd_length(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917764-simd_length",
    "html": "See Also\nLength and Distance Functions\nfunc simd_fast_length(simd_double8) -> Double\nReturns the fast length of a vector.\nfunc simd_precise_length(simd_double8) -> Double\nReturns the precise length of a vector.\nfunc simd_length_squared(simd_double8) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double8, simd_double8) -> Double\nReturns the distance between two vectors.\nfunc simd_fast_distance(simd_double8, simd_double8) -> Double\nReturns the fast distance between two vectors.\nfunc simd_precise_distance(simd_double8, simd_double8) -> Double\nReturns the precise distance between two vectors.\nfunc simd_distance_squared(simd_double8, simd_double8) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "vImageConvert_RGBA1010102ToARGB16U(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533251-vimageconvert_rgba1010102toargb1",
    "html": "Parameters\nsrc\n\nA pointer to the vImage buffer that references 10-bit RGB interleaved source pixels.\n\ndest\n\nA pointer to the vImage buffer that references 16-bit ARGB interleaved destination pixels.\n\nRGB101010RangeMin\n\nThe minimum value for the range of 10-bit RGB pixels.\n\nRGB101010RangeMax\n\nThe maximum value for the range of 10-bit RGB pixels.\n\npermuteMap\n\nAn array of four 8-bit integers with the values 0, 1, 2, and 3, in some order. Each value specifies a channel from the source image that should be copied to that channel in the destination image. 0 denotes the alpha channel, 1 the red channel, 2 the green channel, and 3 the blue channel. \n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nRGB101010RangeMin and RGB101010RangeMax are available for non-full-range pixel values. You can set full-range pixel values as:\n\n RGB101010RangeMin  = 0;\n RGB101010RangeMax  = 1023;\n\n\nThe per-pixel operation is:\n\n     uint32_t *srcPixel = src.data;\n     uint32_t pixel = ntohl(srcPixel[0]);\n     srcPixel += 1;\n      \n     int32_t A2  = pixel & 0x3;\n     int32_t R10 = (pixel >> 22) & 0x3ff;\n     int32_t G10 = (pixel >> 12) & 0x3ff;\n     int32_t B10 = (pixel >>  2) & 0x3ff;\n     int32_t range10 = RGB101010RangeMax - RGB101010RangeMin;\n      \n     A2  = (A2 * USHRT_MAX + 1) / 3;\n     R10 = ((R10 - RGB101010RangeMin) * USHRT_MAX + (range10 >> 1)) / range10;\n     G10 = ((G10 - RGB101010RangeMin) * USHRT_MAX + (range10 >> 1)) / range10;\n     B10 = ((B10 - RGB101010RangeMin) * USHRT_MAX + (range10 >> 1)) / range10;\n      \n     uint16_t R16, G16, B16;\n     R16 = CLAMP(0, R10, USHRT_MAX);\n     G16 = CLAMP(0, G10, USHRT_MAX);\n     B16 = CLAMP(0, B10, USHRT_MAX);\n      \n     uint16_t ARGB[4];\n     ARGB[0] = A2;\n     ARGB[1] = R16;\n     ARGB[2] = G16;\n     ARGB[3] = B16;\n      \n     uint16_t *destPixel = dest.data;\n     destPixel[0] = ARGB[permuteMap[0]];\n     destPixel[1] = ARGB[permuteMap[1]];\n     destPixel[2] = ARGB[permuteMap[2]];\n     destPixel[3] = ARGB[permuteMap[3]];\n     destPixel += 4;\n\n\n\n\nSee Also\nConverting from RGBA Formats\nfunc vImageConvert_RGBAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_RGBA1010102ToARGB16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16Q12 format image.\nfunc vImageConvert_RGBA1010102ToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB8888 format image.\nfunc vImageConvert_RGBA16UtoRGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA16U image to an RGB16U image.\nfunc vImageConvert_RGBA5551toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGB565 image, with loss of alpha.\nfunc vImageConvert_RGBA5551toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGBA8888 image.\nfunc vImageConvert_RGBA8888toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBA8888 image to a three-channel RGB888 image by removing the alpha channel.\nfunc vImageConvert_RGBA8888toRGBA5551_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGBA5551 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGB565 image.\nfunc vImageConvert_RGBA8888toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGBA5551 image."
  },
  {
    "title": "vImageConvert_BGRA16UtoRGB16U(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533183-vimageconvert_bgra16utorgb16u",
    "html": "Parameters\nrgbaSrc\n\nA pointer to a vImage buffer structure that contains the BGRA interleaved source pixels.\n\nrgbDest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe conversion from BGRA16 to RGB16U is:\n\n rgbDest[i*3+0] = rgbaSrc[i*4+2];\n rgbDest[i*3+1] = rgbaSrc[i*4+1];\n rgbDest[i*3+2] = rgbaSrc[i*4+0];\n\n\nThis function doesn't operate in place.\n\nSee Also\nConverting from BGRA Formats\nfunc vImageConvert_BGRAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel BGRAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_BGRXFFFFToPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates a BGRXFFFF image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_BGRA8888toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a four-channel BGRA8888 image to a three-channel RGB888 image by removing the alpha channel.\nfunc vImageConvert_BGRX8888ToPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates a BGRX8888 image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_BGRA8888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts a BGRA8888 image to an RGB565 image with dithering.\nfunc vImageConvert_BGRA8888toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a BGRA8888 image into an RGB565 image."
  },
  {
    "title": "simd_project(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917767-simd_project",
    "html": "See Also\nGeometry Functions\nfunc simd_dot(simd_double8, simd_double8) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double8) -> simd_double8\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double8) -> simd_double8\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double8) -> simd_double8\nReturns the precise normalized vector.\nfunc simd_fast_project(simd_double8, simd_double8) -> simd_double8\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double8, simd_double8) -> simd_double8\nReturns the precise projected vector."
  },
  {
    "title": "simd_precise_normalize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917782-simd_precise_normalize",
    "html": "Parameters\n__x\n\nThe vector to normalize.\n\nReturn Value\n\nThe normalized vector.\n\nDiscussion\n\nThis function returns an undefined value if the supplied vector has zero length or is poorly scaled such that an intermediate computation overflows or underflows.\n\nSee Also\nGeometry Functions\nfunc simd_dot(simd_double8, simd_double8) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double8) -> simd_double8\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double8) -> simd_double8\nReturns the fast normalized vector.\nfunc simd_project(simd_double8, simd_double8) -> simd_double8\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double8, simd_double8) -> simd_double8\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double8, simd_double8) -> simd_double8\nReturns the precise projected vector."
  },
  {
    "title": "R_Cb | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage_argbtoypcbcrmatrix/1546970-r_cb",
    "html": "See Also\nConversion Matrix Elements\nvar R_Yp: Float\nThe R_Yp value in the conversion matrix.\nvar G_Yp: Float\nThe G_Yp value in the conversion matrix.\nvar B_Yp: Float\nThe B_Yp value in the conversion matrix.\nvar G_Cb: Float\nThe G_Cb value in the conversion matrix.\nvar B_Cb_R_Cr: Float\nThe B_Cb_R_Cr value in the conversion matrix.\nvar G_Cr: Float\nThe G_Cr value in the conversion matrix.\nvar B_Cr: Float\nThe B_Cr value in the conversion matrix."
  },
  {
    "title": "simd_normalize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917788-simd_normalize",
    "html": "Parameters\n__x\n\nThe vector to normalize.\n\nReturn Value\n\nThe normalized vector.\n\nDiscussion\n\nThis function returns an undefined value if the supplied vector has zero length or is poorly scaled such that an intermediate computation overflows or underflows.\n\nSee Also\nGeometry Functions\nfunc simd_dot(simd_double8, simd_double8) -> Double\nReturns the dot product of two vectors.\nfunc simd_fast_normalize(simd_double8) -> simd_double8\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double8) -> simd_double8\nReturns the precise normalized vector.\nfunc simd_project(simd_double8, simd_double8) -> simd_double8\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double8, simd_double8) -> simd_double8\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double8, simd_double8) -> simd_double8\nReturns the precise projected vector."
  },
  {
    "title": "simd_fast_normalize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917785-simd_fast_normalize",
    "html": "Parameters\n__x\n\nThe vector to normalize.\n\nReturn Value\n\nThe normalized vector.\n\nDiscussion\n\nThis function returns an undefined value if the supplied vector has zero length or is poorly scaled such that an intermediate computation overflows or underflows.\n\nSee Also\nGeometry Functions\nfunc simd_dot(simd_double8, simd_double8) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double8) -> simd_double8\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_precise_normalize(simd_double8) -> simd_double8\nReturns the precise normalized vector.\nfunc simd_project(simd_double8, simd_double8) -> simd_double8\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double8, simd_double8) -> simd_double8\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double8, simd_double8) -> simd_double8\nReturns the precise projected vector."
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage_argbtoypcbcrmatrix/1546494-init",
    "html": "Return Value\n\nA 3 x 3 zero matrix for converting RGB to Y'CbCr.\n\nSee Also\nCreating a Conversion Matrix\ninit(R_Yp: Float, G_Yp: Float, B_Yp: Float, R_Cb: Float, G_Cb: Float, B_Cb_R_Cr: Float, G_Cr: Float, B_Cr: Float)\nCreates a 3 x 3 matrix for converting RGB to Y'CbCr."
  },
  {
    "title": "B_Yp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage_argbtoypcbcrmatrix/1545280-b_yp",
    "html": "See Also\nConversion Matrix Elements\nvar R_Yp: Float\nThe R_Yp value in the conversion matrix.\nvar G_Yp: Float\nThe G_Yp value in the conversion matrix.\nvar R_Cb: Float\nThe R_Cb value in the conversion matrix.\nvar G_Cb: Float\nThe G_Cb value in the conversion matrix.\nvar B_Cb_R_Cr: Float\nThe B_Cb_R_Cr value in the conversion matrix.\nvar G_Cr: Float\nThe G_Cr value in the conversion matrix.\nvar B_Cr: Float\nThe B_Cr value in the conversion matrix."
  },
  {
    "title": "asin(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804508-asin",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double8) -> simd_double8\nReturns the arccosine of each element in a vector.\nfunc atan(simd_double8) -> simd_double8\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double8, simd_double8) -> simd_double8\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double8) -> simd_double8\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double8) -> simd_double8\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "planeCount | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/multipleplanepixelformat/3951428-planecount",
    "html": "Required"
  },
  {
    "title": "norm_inf(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425601-norm_inf",
    "html": "See Also\nVector Norm Functions\nfunc simd_norm_one(simd_double4) -> Double\nReturns the sum of the absolute values of a vector.\nfunc norm_one(SIMD4<Double>) -> Double\nReturns the sum of the absolute values of a vector.\nfunc simd_norm_inf(simd_double4) -> Double\nReturns the maximum absolute value of a vector."
  },
  {
    "title": "exp(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804607-exp",
    "html": "See Also\nExponential and Logarithmic Functions\nfunc exp2(simd_double8) -> simd_double8\nReturns 2 raised to the power of each element in a vector.\nfunc exp10(simd_double8) -> simd_double8\nReturns 10 raised to the power of each element in a vector.\nfunc expm1(simd_double8) -> simd_double8\nReturns eˣ-1 for each element in a vector.\nfunc log(simd_double8) -> simd_double8\nReturns the natural logarithm of each element in a vector.\nfunc log2(simd_double8) -> simd_double8\nReturns the base 2 logarithm of each element in a vector.\nfunc log10(simd_double8) -> simd_double8\nReturns the base 10 logarithm of each element in a vector.\nfunc log1p(simd_double8) -> simd_double8\nReturns log(1+x) of each element in a vector."
  },
  {
    "title": "length_squared(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425126-length_squared",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double4) -> Double\nReturns the length of a vector.\nfunc length(SIMD4<Double>) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double4) -> Double\nReturns the fast length of a vector.\nfunc simd_precise_length(simd_double4) -> Double\nReturns the precise length of a vector.\nfunc simd_length_squared(simd_double4) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors.\nfunc simd_fast_distance(simd_double4, simd_double4) -> Double\nReturns the fast distance between two vectors.\nfunc simd_precise_distance(simd_double4, simd_double4) -> Double\nReturns the precise distance between two vectors.\nfunc simd_distance_squared(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance_squared(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "simd_dot(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917800-simd_dot",
    "html": "See Also\nGeometry Functions\nfunc simd_normalize(simd_double8) -> simd_double8\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double8) -> simd_double8\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double8) -> simd_double8\nReturns the precise normalized vector.\nfunc simd_project(simd_double8, simd_double8) -> simd_double8\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double8, simd_double8) -> simd_double8\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double8, simd_double8) -> simd_double8\nReturns the precise projected vector."
  },
  {
    "title": "asinh(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804515-asinh",
    "html": "See Also\nHyperbolic Functions\nfunc acosh(simd_double4) -> simd_double4\nReturns the inverse hyperbolic cosine of each element in a vector.\nfunc atanh(simd_double4) -> simd_double4\nReturns the inverse hyperbolic tangent of each element in a vector.\nfunc cosh(simd_double4) -> simd_double4\nReturns the hyperbolic cosine of each element in a vector.\nfunc sinh(simd_double4) -> simd_double4\nReturns the hyperbolic sine of each element in a vector.\nfunc tanh(simd_double4) -> simd_double4\nReturns the hyperbolic tangent of each element in a vector."
  },
  {
    "title": "atanh(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804542-atanh",
    "html": "See Also\nHyperbolic Functions\nfunc acosh(simd_double4) -> simd_double4\nReturns the inverse hyperbolic cosine of each element in a vector.\nfunc asinh(simd_double4) -> simd_double4\nReturns the inverse hyperbolic sine of each element in a vector.\nfunc cosh(simd_double4) -> simd_double4\nReturns the hyperbolic cosine of each element in a vector.\nfunc sinh(simd_double4) -> simd_double4\nReturns the hyperbolic sine of each element in a vector.\nfunc tanh(simd_double4) -> simd_double4\nReturns the hyperbolic tangent of each element in a vector."
  },
  {
    "title": "isfinite(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804668-isfinite",
    "html": "See Also\nClassification Functions\nfunc isinf(simd_double4) -> simd_long4\nReturns true for each element that is infinite in a vector.\nfunc isnan(simd_double4) -> simd_long4\nReturns true for each element that is not a number (NaN) in a vector.\nfunc isnormal(simd_double4) -> simd_long4\nReturns true for each element that is normal in a vector."
  },
  {
    "title": "expm1(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804634-expm1",
    "html": "See Also\nExponential and Logarithmic Functions\nfunc exp(simd_double8) -> simd_double8\nReturns e raised to the power of each element in a vector.\nfunc exp2(simd_double8) -> simd_double8\nReturns 2 raised to the power of each element in a vector.\nfunc exp10(simd_double8) -> simd_double8\nReturns 10 raised to the power of each element in a vector.\nfunc log(simd_double8) -> simd_double8\nReturns the natural logarithm of each element in a vector.\nfunc log2(simd_double8) -> simd_double8\nReturns the base 2 logarithm of each element in a vector.\nfunc log10(simd_double8) -> simd_double8\nReturns the base 10 logarithm of each element in a vector.\nfunc log1p(simd_double8) -> simd_double8\nReturns log(1+x) of each element in a vector."
  },
  {
    "title": "simd_fast_rsqrt(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917157-simd_fast_rsqrt",
    "html": "See Also\nReciprocal and Reciprocal Square Root Functions\nfunc simd_recip(simd_double8) -> simd_double8\nReturns the reciprocal of each element in a vector.\nfunc simd_fast_recip(simd_double8) -> simd_double8\nReturns the fast reciprocal of each element in a vector.\nfunc simd_precise_recip(simd_double8) -> simd_double8\nReturns the precise reciprocal of each element in a vector.\nfunc simd_rsqrt(simd_double8) -> simd_double8\nReturns the reciprocal square root of each element in a vector.\nfunc simd_precise_rsqrt(simd_double8) -> simd_double8\nReturns the precise reciprocal square root of each element in a vector."
  },
  {
    "title": "simd_recip(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916929-simd_recip",
    "html": "See Also\nReciprocal and Reciprocal Square Root Functions\nfunc simd_fast_recip(simd_double8) -> simd_double8\nReturns the fast reciprocal of each element in a vector.\nfunc simd_precise_recip(simd_double8) -> simd_double8\nReturns the precise reciprocal of each element in a vector.\nfunc simd_rsqrt(simd_double8) -> simd_double8\nReturns the reciprocal square root of each element in a vector.\nfunc simd_fast_rsqrt(simd_double8) -> simd_double8\nReturns the fast reciprocal square root of each element in a vector.\nfunc simd_precise_rsqrt(simd_double8) -> simd_double8\nReturns the precise reciprocal square root of each element in a vector."
  },
  {
    "title": "log1p(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804733-log1p",
    "html": "See Also\nExponential and Logarithmic Functions\nfunc exp(simd_double8) -> simd_double8\nReturns e raised to the power of each element in a vector.\nfunc exp2(simd_double8) -> simd_double8\nReturns 2 raised to the power of each element in a vector.\nfunc exp10(simd_double8) -> simd_double8\nReturns 10 raised to the power of each element in a vector.\nfunc expm1(simd_double8) -> simd_double8\nReturns eˣ-1 for each element in a vector.\nfunc log(simd_double8) -> simd_double8\nReturns the natural logarithm of each element in a vector.\nfunc log2(simd_double8) -> simd_double8\nReturns the base 2 logarithm of each element in a vector.\nfunc log10(simd_double8) -> simd_double8\nReturns the base 10 logarithm of each element in a vector."
  },
  {
    "title": "cospi(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804580-cospi",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double8) -> simd_double8\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double8) -> simd_double8\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double8) -> simd_double8\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double8, simd_double8) -> simd_double8\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector.\nfunc sin(simd_double8) -> simd_double8\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double8) -> simd_double8\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "isinf(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804679-isinf",
    "html": "See Also\nClassification Functions\nfunc isfinite(simd_double8) -> simd_long8\nReturns true for each element that is finite in a vector.\nfunc isnan(simd_double8) -> simd_long8\nReturns true for each element that is not a number (NaN) in a vector.\nfunc isnormal(simd_double8) -> simd_long8\nReturns true for each element that is normal in a vector."
  },
  {
    "title": "cos(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804562-cos",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double8) -> simd_double8\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double8) -> simd_double8\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double8) -> simd_double8\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double8, simd_double8) -> simd_double8\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cospi(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double8) -> simd_double8\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double8) -> simd_double8\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "erf(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804589-erf",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double8) -> simd_double8\nReturns the cube root of each element in a vector.\nfunc erfc(simd_double8) -> simd_double8\nReturns the complementary error function for each element in a vector.\nfunc fma(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double8, simd_double8) -> simd_double8\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double8, simd_double8) -> simd_double8\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double8) -> simd_double8\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double8, simd_double8) -> simd_double8\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double8, simd_double8) -> simd_double8\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double8, simd_double8) -> simd_double8\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double8) -> simd_double8\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double8) -> simd_double8\nReturns the gamma function for each element in a vector."
  },
  {
    "title": "simd_rsqrt(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916969-simd_rsqrt",
    "html": "See Also\nReciprocal and Reciprocal Square Root Functions\nfunc simd_recip(simd_double8) -> simd_double8\nReturns the reciprocal of each element in a vector.\nfunc simd_fast_recip(simd_double8) -> simd_double8\nReturns the fast reciprocal of each element in a vector.\nfunc simd_precise_recip(simd_double8) -> simd_double8\nReturns the precise reciprocal of each element in a vector.\nfunc simd_fast_rsqrt(simd_double8) -> simd_double8\nReturns the fast reciprocal square root of each element in a vector.\nfunc simd_precise_rsqrt(simd_double8) -> simd_double8\nReturns the precise reciprocal square root of each element in a vector."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916680-simd_bitselect",
    "html": "See Also\nLogic Functions\nfunc simd_select(simd_double4, simd_double4, simd_long4) -> simd_double4\nReturns a vector that contains elements from either the first or second parameter, based on the high-order bit of the corresponding element in the third parameter.\nfunc simd_select(simd_double4, simd_double4, simd_long4) -> simd_double4\nReturns a vector that contains elements from either the first or second parameter, based on the high-order bit of the corresponding element in the third parameter.\nfunc simd_bitselect(simd_double4, simd_double4, simd_long4) -> simd_double4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "sincos(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/4130682-sincos",
    "html": "Parameters\nx\n\nThe source vector.\n\nReturn Value\n\nA two-element tuple. The first element contains the sines, and the second element contains the cosines.\n\nSee Also\nTrigonometric Functions\nfunc acos(simd_double8) -> simd_double8\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double8) -> simd_double8\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double8) -> simd_double8\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double8, simd_double8) -> simd_double8\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double8) -> simd_double8\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double8) -> simd_double8\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincospi(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "trunc(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424095-trunc",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double4) -> simd_double4\nReturns the cube root of each element in a vector.\nfunc ceil(SIMD4<Double>) -> SIMD4<Double>\nReturns the ceiling of each element in a vector.\nfunc erf(simd_double4) -> simd_double4\nReturns the error function for each element in a vector.\nfunc erfc(simd_double4) -> simd_double4\nReturns the complementary error function for each element in a vector.\nfunc floor(SIMD4<Double>) -> SIMD4<Double>\nReturns the floor of each element in a vector.\nfunc fma(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double4, simd_double4) -> simd_double4\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double4, simd_double4) -> simd_double4\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double4) -> simd_double4\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double4, simd_double4) -> simd_double4\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double4, simd_double4) -> simd_double4\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double4) -> simd_double4\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double4) -> simd_double4\nReturns the gamma function for each element in a vector."
  },
  {
    "title": "atan(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804526-atan",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double8) -> simd_double8\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double8) -> simd_double8\nReturns the arcsine of each element in a vector.\nfunc atan2(simd_double8, simd_double8) -> simd_double8\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double8) -> simd_double8\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double8) -> simd_double8\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "sincospi(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/4130691-sincospi",
    "html": "Parameters\nx\n\nThe source vector.\n\nReturn Value\n\nA two-element tuple. The first element contains the sines, and the second element contains the cosines.\n\nSee Also\nTrigonometric Functions\nfunc acos(simd_double8) -> simd_double8\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double8) -> simd_double8\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double8) -> simd_double8\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double8, simd_double8) -> simd_double8\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double8) -> simd_double8\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double8) -> simd_double8\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector.\nfunc tan(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "tan(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804818-tan",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double8) -> simd_double8\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double8) -> simd_double8\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double8) -> simd_double8\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double8, simd_double8) -> simd_double8\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double8) -> simd_double8\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double8) -> simd_double8\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tanpi(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "tanpi(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804836-tanpi",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double8) -> simd_double8\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double8) -> simd_double8\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double8) -> simd_double8\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double8, simd_double8) -> simd_double8\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double8) -> simd_double8\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double8) -> simd_double8\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector."
  },
  {
    "title": "simd_make_double8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917645-simd_make_double8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_double8_undef(Double) -> simd_double8\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "atan2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804535-atan2",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double8) -> simd_double8\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double8) -> simd_double8\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double8) -> simd_double8\nReturns the arctangent of each element in a vector.\nfunc cos(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double8) -> simd_double8\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double8) -> simd_double8\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "isfinite(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804670-isfinite",
    "html": "See Also\nClassification Functions\nfunc isinf(simd_double8) -> simd_long8\nReturns true for each element that is infinite in a vector.\nfunc isnan(simd_double8) -> simd_long8\nReturns true for each element that is not a number (NaN) in a vector.\nfunc isnormal(simd_double8) -> simd_long8\nReturns true for each element that is normal in a vector."
  },
  {
    "title": "sin(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804791-sin",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double8) -> simd_double8\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double8) -> simd_double8\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double8) -> simd_double8\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double8, simd_double8) -> simd_double8\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double8) -> simd_double8\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sinpi(simd_double8) -> simd_double8\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double8) -> (sin: simd_double8, cos: simd_double8)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double8) -> simd_double8\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "fmod(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804652-fmod",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double8) -> simd_double8\nReturns the cube root of each element in a vector.\nfunc erf(simd_double8) -> simd_double8\nReturns the error function for each element in a vector.\nfunc erfc(simd_double8) -> simd_double8\nReturns the complementary error function for each element in a vector.\nfunc fma(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc hypot(simd_double8, simd_double8) -> simd_double8\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double8) -> simd_double8\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double8, simd_double8) -> simd_double8\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double8, simd_double8) -> simd_double8\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double8, simd_double8) -> simd_double8\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double8) -> simd_double8\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double8) -> simd_double8\nReturns the gamma function for each element in a vector."
  },
  {
    "title": "atanh(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804544-atanh",
    "html": "See Also\nHyperbolic Functions\nfunc acosh(simd_double8) -> simd_double8\nReturns the inverse hyperbolic cosine of each element in a vector.\nfunc asinh(simd_double8) -> simd_double8\nReturns the inverse hyperbolic sine of each element in a vector.\nfunc cosh(simd_double8) -> simd_double8\nReturns the hyperbolic cosine of each element in a vector.\nfunc sinh(simd_double8) -> simd_double8\nReturns the hyperbolic sine of each element in a vector.\nfunc tanh(simd_double8) -> simd_double8\nReturns the hyperbolic tangent of each element in a vector."
  },
  {
    "title": "simd_length_squared(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917769-simd_length_squared",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double8) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double8) -> Double\nReturns the fast length of a vector.\nfunc simd_precise_length(simd_double8) -> Double\nReturns the precise length of a vector.\nfunc simd_distance(simd_double8, simd_double8) -> Double\nReturns the distance between two vectors.\nfunc simd_fast_distance(simd_double8, simd_double8) -> Double\nReturns the fast distance between two vectors.\nfunc simd_precise_distance(simd_double8, simd_double8) -> Double\nReturns the precise distance between two vectors.\nfunc simd_distance_squared(simd_double8, simd_double8) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "simd_fast_distance(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917790-simd_fast_distance",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double8) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double8) -> Double\nReturns the fast length of a vector.\nfunc simd_precise_length(simd_double8) -> Double\nReturns the precise length of a vector.\nfunc simd_length_squared(simd_double8) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double8, simd_double8) -> Double\nReturns the distance between two vectors.\nfunc simd_precise_distance(simd_double8, simd_double8) -> Double\nReturns the precise distance between two vectors.\nfunc simd_distance_squared(simd_double8, simd_double8) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "simd_distance(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917789-simd_distance",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double8) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double8) -> Double\nReturns the fast length of a vector.\nfunc simd_precise_length(simd_double8) -> Double\nReturns the precise length of a vector.\nfunc simd_length_squared(simd_double8) -> Double\nReturns the square of the length of a vector.\nfunc simd_fast_distance(simd_double8, simd_double8) -> Double\nReturns the fast distance between two vectors.\nfunc simd_precise_distance(simd_double8, simd_double8) -> Double\nReturns the precise distance between two vectors.\nfunc simd_distance_squared(simd_double8, simd_double8) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "simd_precise_distance(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917777-simd_precise_distance",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double8) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double8) -> Double\nReturns the fast length of a vector.\nfunc simd_precise_length(simd_double8) -> Double\nReturns the precise length of a vector.\nfunc simd_length_squared(simd_double8) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double8, simd_double8) -> Double\nReturns the distance between two vectors.\nfunc simd_fast_distance(simd_double8, simd_double8) -> Double\nReturns the fast distance between two vectors.\nfunc simd_distance_squared(simd_double8, simd_double8) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "simd_precise_length(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917775-simd_precise_length",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double8) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double8) -> Double\nReturns the fast length of a vector.\nfunc simd_length_squared(simd_double8) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double8, simd_double8) -> Double\nReturns the distance between two vectors.\nfunc simd_fast_distance(simd_double8, simd_double8) -> Double\nReturns the fast distance between two vectors.\nfunc simd_precise_distance(simd_double8, simd_double8) -> Double\nReturns the precise distance between two vectors.\nfunc simd_distance_squared(simd_double8, simd_double8) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918686-simd_double",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_ushort8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918415-simd_double",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918035-simd_double",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_short8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vImageConvert_BGRA8888toRGB888(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533090-vimageconvert_bgra8888torgb888",
    "html": "Parameters\nbgraSrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\nrgbDest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe red, green, and blue channels are simply copied. This function can be used in place.\n\nSee Also\nConverting from BGRA Formats\nfunc vImageConvert_BGRAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel BGRAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_BGRXFFFFToPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates a BGRXFFFF image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_BGRA16UtoRGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a BGRA16 image to an RGB16U image.\nfunc vImageConvert_BGRX8888ToPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates a BGRX8888 image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_BGRA8888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts a BGRA8888 image to an RGB565 image with dithering.\nfunc vImageConvert_BGRA8888toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a BGRA8888 image into an RGB565 image."
  },
  {
    "title": "simd_fast_project(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917755-simd_fast_project",
    "html": "See Also\nGeometry Functions\nfunc simd_dot(simd_double8, simd_double8) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double8) -> simd_double8\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double8) -> simd_double8\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double8) -> simd_double8\nReturns the precise normalized vector.\nfunc simd_project(simd_double8, simd_double8) -> simd_double8\nReturns the first vector projected onto the second vector.\nfunc simd_precise_project(simd_double8, simd_double8) -> simd_double8\nReturns the precise projected vector."
  },
  {
    "title": "simd_make_double8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867747-simd_make_double8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Scalar Values\nfunc simd_make_double8(Double) -> simd_double8\nReturns a new vector with the first element set to a scalar value, and other elements set to zero."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918111-simd_double",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_uchar8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vImageConvert_BGRX8888ToPlanar8(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533037-vimageconvert_bgrx8888toplanar8",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to separate.\n\nblue\n\nA pointer to a vImage buffer data structure that represents the blue channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\ngreen\n\nA pointer to a vImage buffer data structure that represents the green channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\nred\n\nA pointer to a vImage buffer data structure that represents the red channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThis function doesn't work in place.\n\nSee Also\nConverting from BGRA Formats\nfunc vImageConvert_BGRAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel BGRAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_BGRXFFFFToPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates a BGRXFFFF image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_BGRA16UtoRGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a BGRA16 image to an RGB16U image.\nfunc vImageConvert_BGRA8888toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a four-channel BGRA8888 image to a three-channel RGB888 image by removing the alpha channel.\nfunc vImageConvert_BGRA8888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts a BGRA8888 image to an RGB565 image with dithering.\nfunc vImageConvert_BGRA8888toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a BGRA8888 image into an RGB565 image."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917959-simd_double",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "ceil(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424460-ceil",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double4) -> simd_double4\nReturns the cube root of each element in a vector.\nfunc erf(simd_double4) -> simd_double4\nReturns the error function for each element in a vector.\nfunc erfc(simd_double4) -> simd_double4\nReturns the complementary error function for each element in a vector.\nfunc floor(SIMD4<Double>) -> SIMD4<Double>\nReturns the floor of each element in a vector.\nfunc fma(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double4, simd_double4) -> simd_double4\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double4, simd_double4) -> simd_double4\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double4) -> simd_double4\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double4, simd_double4) -> simd_double4\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double4, simd_double4) -> simd_double4\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double4) -> simd_double4\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double4) -> simd_double4\nReturns the gamma function for each element in a vector.\nfunc trunc(SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector rounded toward zero to the nearest integer."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918162-simd_double",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_double8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917813-simd_double",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918091-simd_double",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_uint8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917020-simd_abs",
    "html": "See Also\nCommon Functions\nfunc simd_clamp(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_double8, simd_double8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_fract(simd_double8) -> simd_double8\nReturns the fractional part of each element in a vector.\nfunc simd_sign(simd_double8) -> simd_double8\nReturns the sign of each element in a vector.\nfunc simd_step(simd_double8, simd_double8) -> simd_double8\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916957-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_double8) -> simd_double8\nReturns the absolute value of each element in a vector.\nfunc simd_equal(simd_double8, simd_double8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_fract(simd_double8) -> simd_double8\nReturns the fractional part of each element in a vector.\nfunc simd_sign(simd_double8) -> simd_double8\nReturns the sign of each element in a vector.\nfunc simd_step(simd_double8, simd_double8) -> simd_double8\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "simd_step(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916986-simd_step",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_double8) -> simd_double8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_double8, simd_double8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_fract(simd_double8) -> simd_double8\nReturns the fractional part of each element in a vector.\nfunc simd_sign(simd_double8) -> simd_double8\nReturns the sign of each element in a vector."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917178-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_double8) -> Double\nReturns the miniumum value in a vector.\nfunc simd_reduce_add(simd_double8) -> Double\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_fract(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916945-simd_fract",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_double8) -> simd_double8\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns each element in a vector clamped to a specified range.\nfunc simd_equal(simd_double8, simd_double8) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_sign(simd_double8) -> simd_double8\nReturns the sign of each element in a vector.\nfunc simd_step(simd_double8, simd_double8) -> simd_double8\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916990-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_max(simd_double8) -> Double\nReturns the maximum value in a vector.\nfunc simd_reduce_add(simd_double8) -> Double\nReturns the sum of all elements in a vector."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916908-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_min(simd_double8) -> Double\nReturns the miniumum value in a vector.\nfunc simd_reduce_max(simd_double8) -> Double\nReturns the maximum value in a vector."
  },
  {
    "title": "vImageConvert_BGRA8888toRGB565_dithered(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1642341-vimageconvert_bgra8888torgb565_d",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\ntempBuffer\n\nA pointer to a region of memory that vImage can use as a scratch space for storing temporary data.\n\ndither\n\nThe dithering method, which should be kvImageConvert_DitherOrdered or kvImageConvert_DitherOrderedReproducible.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe calculation for each pixel is:\n\nuint32_t red   = (8bitRedChannel   * (31 << 8) + 127) / 255;\nuint32_t green = (8bitGreenChannel * (63 << 8) + 127) / 255;\nuint32_t blue  = (8bitBlueChannel  * (31 << 8) + 127) / 255;\nred   += dither_noise + (1 << 7);\ngreen += dither_noise + (1 << 7);\nblue  += dither_noise + (1 << 7);\nred    = red >> 8;\ngreen  = green >> 8;\nblue   = blue >> 8;\nuint16_t RGB565pixel =  (red << 11) | (green << 5) | blue;\n\n\nThis function supports the following dithering options:\n\nkvImageConvert_DitherOrdered\n\nPrecomputed blue noise is added to the image before the values are rounded to the destination format. The offset into the blue noise is randomized per call to avoid visible artifacts if you do your own tiling or call the function on sequential frames of video.\n\nkvImageConvert_DitherOrderedReproducible\n\nPrecomputed blue noise is added to the image before the values are rounded to the destination format. The offset into the blue noise is the same for every call to allow users to get reproducible results.\n\nThis function can operate in place, provided that src->data == dest->data, src->rowBytes >= dest >rowBytes, and the kvImageDoNotTile flag is used if src->rowBytes > dest->rowBytes.\n\nSee Also\nConverting from BGRA Formats\nfunc vImageConvert_BGRAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel BGRAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_BGRXFFFFToPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates a BGRXFFFF image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_BGRA16UtoRGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a BGRA16 image to an RGB16U image.\nfunc vImageConvert_BGRA8888toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a four-channel BGRA8888 image to a three-channel RGB888 image by removing the alpha channel.\nfunc vImageConvert_BGRX8888ToPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates a BGRX8888 image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_BGRA8888toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a BGRA8888 image into an RGB565 image."
  },
  {
    "title": "isnan(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804686-isnan",
    "html": "See Also\nClassification Functions\nfunc isfinite(simd_double4) -> simd_long4\nReturns true for each element that is finite in a vector.\nfunc isinf(simd_double4) -> simd_long4\nReturns true for each element that is infinite in a vector.\nfunc isnormal(simd_double4) -> simd_long4\nReturns true for each element that is normal in a vector."
  },
  {
    "title": "distance_squared(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424440-distance_squared",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double4) -> Double\nReturns the length of a vector.\nfunc length(SIMD4<Double>) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double4) -> Double\nReturns the fast length of a vector.\nfunc simd_precise_length(simd_double4) -> Double\nReturns the precise length of a vector.\nfunc simd_length_squared(simd_double4) -> Double\nReturns the square of the length of a vector.\nfunc length_squared(SIMD4<Double>) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors.\nfunc simd_fast_distance(simd_double4, simd_double4) -> Double\nReturns the fast distance between two vectors.\nfunc simd_precise_distance(simd_double4, simd_double4) -> Double\nReturns the precise distance between two vectors.\nfunc simd_distance_squared(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "acosh(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804497-acosh",
    "html": "See Also\nHyperbolic Functions\nfunc asinh(simd_double4) -> simd_double4\nReturns the inverse hyperbolic sine of each element in a vector.\nfunc atanh(simd_double4) -> simd_double4\nReturns the inverse hyperbolic tangent of each element in a vector.\nfunc cosh(simd_double4) -> simd_double4\nReturns the hyperbolic cosine of each element in a vector.\nfunc sinh(simd_double4) -> simd_double4\nReturns the hyperbolic sine of each element in a vector.\nfunc tanh(simd_double4) -> simd_double4\nReturns the hyperbolic tangent of each element in a vector."
  },
  {
    "title": "simd_precise_distance(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896548-simd_precise_distance",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double4) -> Double\nReturns the length of a vector.\nfunc length(SIMD4<Double>) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double4) -> Double\nReturns the fast length of a vector.\nfunc simd_precise_length(simd_double4) -> Double\nReturns the precise length of a vector.\nfunc simd_length_squared(simd_double4) -> Double\nReturns the square of the length of a vector.\nfunc length_squared(SIMD4<Double>) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors.\nfunc simd_fast_distance(simd_double4, simd_double4) -> Double\nReturns the fast distance between two vectors.\nfunc simd_distance_squared(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance_squared(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "simd_distance_squared(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896765-simd_distance_squared",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double4) -> Double\nReturns the length of a vector.\nfunc length(SIMD4<Double>) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double4) -> Double\nReturns the fast length of a vector.\nfunc simd_precise_length(simd_double4) -> Double\nReturns the precise length of a vector.\nfunc simd_length_squared(simd_double4) -> Double\nReturns the square of the length of a vector.\nfunc length_squared(SIMD4<Double>) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors.\nfunc simd_fast_distance(simd_double4, simd_double4) -> Double\nReturns the fast distance between two vectors.\nfunc simd_precise_distance(simd_double4, simd_double4) -> Double\nReturns the precise distance between two vectors.\nfunc distance_squared(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "simd_reflect(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896482-simd_reflect",
    "html": "See Also\nGeometry Functions\nfunc simd_dot(simd_double4, simd_double4) -> Double\nReturns the dot product of two vectors.\nfunc dot(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double4) -> simd_double4\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc normalize(SIMD4<Double>) -> SIMD4<Double>\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double4) -> simd_double4\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double4) -> simd_double4\nReturns the precise normalized vector.\nfunc simd_project(simd_double4, simd_double4) -> simd_double4\nReturns the first vector projected onto the second vector.\nfunc project(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double4, simd_double4) -> simd_double4\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double4, simd_double4) -> simd_double4\nReturns the precise projected vector.\nfunc reflect(SIMD4<Double>, n: SIMD4<Double>) -> SIMD4<Double>\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc simd_refract(simd_double4, simd_double4, Double) -> simd_double4\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta.\nfunc refract(SIMD4<Double>, n: SIMD4<Double>, eta: Double) -> SIMD4<Double>\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta."
  },
  {
    "title": "simd_fast_normalize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896758-simd_fast_normalize",
    "html": "Parameters\n__x\n\nThe vector to normalize.\n\nReturn Value\n\nThe normalized vector.\n\nDiscussion\n\nThis function returns an undefined value if the supplied vector has zero length or is poorly scaled such that an intermediate computation overflows or underflows.\n\nSee Also\nGeometry Functions\nfunc simd_dot(simd_double4, simd_double4) -> Double\nReturns the dot product of two vectors.\nfunc dot(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double4) -> simd_double4\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc normalize(SIMD4<Double>) -> SIMD4<Double>\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_precise_normalize(simd_double4) -> simd_double4\nReturns the precise normalized vector.\nfunc simd_project(simd_double4, simd_double4) -> simd_double4\nReturns the first vector projected onto the second vector.\nfunc project(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double4, simd_double4) -> simd_double4\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double4, simd_double4) -> simd_double4\nReturns the precise projected vector.\nfunc simd_reflect(simd_double4, simd_double4) -> simd_double4\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc reflect(SIMD4<Double>, n: SIMD4<Double>) -> SIMD4<Double>\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc simd_refract(simd_double4, simd_double4, Double) -> simd_double4\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta.\nfunc refract(SIMD4<Double>, n: SIMD4<Double>, eta: Double) -> SIMD4<Double>\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta."
  },
  {
    "title": "simd_precise_rsqrt(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917066-simd_precise_rsqrt",
    "html": "See Also\nReciprocal and Reciprocal Square Root Functions\nfunc simd_recip(simd_double8) -> simd_double8\nReturns the reciprocal of each element in a vector.\nfunc simd_fast_recip(simd_double8) -> simd_double8\nReturns the fast reciprocal of each element in a vector.\nfunc simd_precise_recip(simd_double8) -> simd_double8\nReturns the precise reciprocal of each element in a vector.\nfunc simd_rsqrt(simd_double8) -> simd_double8\nReturns the reciprocal square root of each element in a vector.\nfunc simd_fast_rsqrt(simd_double8) -> simd_double8\nReturns the fast reciprocal square root of each element in a vector."
  },
  {
    "title": "log10(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804724-log10",
    "html": "See Also\nExponential and Logarithmic Functions\nfunc exp(simd_double8) -> simd_double8\nReturns e raised to the power of each element in a vector.\nfunc exp2(simd_double8) -> simd_double8\nReturns 2 raised to the power of each element in a vector.\nfunc exp10(simd_double8) -> simd_double8\nReturns 10 raised to the power of each element in a vector.\nfunc expm1(simd_double8) -> simd_double8\nReturns eˣ-1 for each element in a vector.\nfunc log(simd_double8) -> simd_double8\nReturns the natural logarithm of each element in a vector.\nfunc log2(simd_double8) -> simd_double8\nReturns the base 2 logarithm of each element in a vector.\nfunc log1p(simd_double8) -> simd_double8\nReturns log(1+x) of each element in a vector."
  },
  {
    "title": "log2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804742-log2",
    "html": "See Also\nExponential and Logarithmic Functions\nfunc exp(simd_double8) -> simd_double8\nReturns e raised to the power of each element in a vector.\nfunc exp2(simd_double8) -> simd_double8\nReturns 2 raised to the power of each element in a vector.\nfunc exp10(simd_double8) -> simd_double8\nReturns 10 raised to the power of each element in a vector.\nfunc expm1(simd_double8) -> simd_double8\nReturns eˣ-1 for each element in a vector.\nfunc log(simd_double8) -> simd_double8\nReturns the natural logarithm of each element in a vector.\nfunc log10(simd_double8) -> simd_double8\nReturns the base 10 logarithm of each element in a vector.\nfunc log1p(simd_double8) -> simd_double8\nReturns log(1+x) of each element in a vector."
  },
  {
    "title": "simd_precise_recip(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917013-simd_precise_recip",
    "html": "See Also\nReciprocal and Reciprocal Square Root Functions\nfunc simd_recip(simd_double8) -> simd_double8\nReturns the reciprocal of each element in a vector.\nfunc simd_fast_recip(simd_double8) -> simd_double8\nReturns the fast reciprocal of each element in a vector.\nfunc simd_rsqrt(simd_double8) -> simd_double8\nReturns the reciprocal square root of each element in a vector.\nfunc simd_fast_rsqrt(simd_double8) -> simd_double8\nReturns the fast reciprocal square root of each element in a vector.\nfunc simd_precise_rsqrt(simd_double8) -> simd_double8\nReturns the precise reciprocal square root of each element in a vector."
  },
  {
    "title": "simd_fast_recip(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917223-simd_fast_recip",
    "html": "See Also\nReciprocal and Reciprocal Square Root Functions\nfunc simd_recip(simd_double8) -> simd_double8\nReturns the reciprocal of each element in a vector.\nfunc simd_precise_recip(simd_double8) -> simd_double8\nReturns the precise reciprocal of each element in a vector.\nfunc simd_rsqrt(simd_double8) -> simd_double8\nReturns the reciprocal square root of each element in a vector.\nfunc simd_fast_rsqrt(simd_double8) -> simd_double8\nReturns the fast reciprocal square root of each element in a vector.\nfunc simd_precise_rsqrt(simd_double8) -> simd_double8\nReturns the precise reciprocal square root of each element in a vector."
  },
  {
    "title": "exp2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804625-exp2",
    "html": "See Also\nExponential and Logarithmic Functions\nfunc exp(simd_double8) -> simd_double8\nReturns e raised to the power of each element in a vector.\nfunc exp10(simd_double8) -> simd_double8\nReturns 10 raised to the power of each element in a vector.\nfunc expm1(simd_double8) -> simd_double8\nReturns eˣ-1 for each element in a vector.\nfunc log(simd_double8) -> simd_double8\nReturns the natural logarithm of each element in a vector.\nfunc log2(simd_double8) -> simd_double8\nReturns the base 2 logarithm of each element in a vector.\nfunc log10(simd_double8) -> simd_double8\nReturns the base 10 logarithm of each element in a vector.\nfunc log1p(simd_double8) -> simd_double8\nReturns log(1+x) of each element in a vector."
  },
  {
    "title": "exp10(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804616-exp10",
    "html": "See Also\nExponential and Logarithmic Functions\nfunc exp(simd_double8) -> simd_double8\nReturns e raised to the power of each element in a vector.\nfunc exp2(simd_double8) -> simd_double8\nReturns 2 raised to the power of each element in a vector.\nfunc expm1(simd_double8) -> simd_double8\nReturns eˣ-1 for each element in a vector.\nfunc log(simd_double8) -> simd_double8\nReturns the natural logarithm of each element in a vector.\nfunc log2(simd_double8) -> simd_double8\nReturns the base 2 logarithm of each element in a vector.\nfunc log10(simd_double8) -> simd_double8\nReturns the base 10 logarithm of each element in a vector.\nfunc log1p(simd_double8) -> simd_double8\nReturns log(1+x) of each element in a vector."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916950-simd_max",
    "html": "See Also\nExtrema Functions\nfunc simd_min(simd_double8, simd_double8) -> simd_double8\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_make_double8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917745-simd_make_double8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_double8(simd_double3) -> simd_double8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double4) -> simd_double8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double8) -> simd_double8\nReturns a new vector from the specified vector.\nfunc simd_make_double8(simd_double4, simd_double4) -> simd_double8\nReturns a new vector from the specified vectors.\nfunc simd_make_double8_undef(simd_double2) -> simd_double8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_double8_undef(simd_double3) -> simd_double8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_double8_undef(simd_double4) -> simd_double8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_mix(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917092-simd_mix",
    "html": "See Also\nInterpolation Functions\nfunc simd_smoothstep(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns an elementwise smoothly interpolated value between two vectors."
  },
  {
    "title": "clamp(_:min:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424085-clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_double4) -> simd_double4\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD4<Double>) -> SIMD4<Double>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: Double, max: Double) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc simd_fract(simd_double4) -> simd_double4\nReturns the fractional part of each element in a vector.\nfunc fract(SIMD4<Double>) -> SIMD4<Double>\nReturns the fractional part of each element in a vector.\nfunc simd_equal(simd_double4, simd_double4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_sign(simd_double4) -> simd_double4\nReturns the sign of each element in a vector.\nfunc sign(SIMD4<Double>) -> SIMD4<Double>\nReturns the sign of each element in a vector.\nfunc simd_step(simd_double4, simd_double4) -> simd_double4\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one.\nfunc step(SIMD4<Double>, edge: SIMD4<Double>) -> SIMD4<Double>\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "tan(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804816-tan",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double4) -> simd_double4\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double4) -> simd_double4\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double4) -> simd_double4\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double4, simd_double4) -> simd_double4\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double4) -> simd_double4\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double4) -> simd_double4\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tanpi(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "sin(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804789-sin",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double4) -> simd_double4\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double4) -> simd_double4\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double4) -> simd_double4\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double4, simd_double4) -> simd_double4\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sinpi(simd_double4) -> simd_double4\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "simd_smoothstep(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917041-simd_smoothstep",
    "html": "See Also\nInterpolation Functions\nfunc simd_mix(simd_double8, simd_double8, simd_double8) -> simd_double8\nReturns an elementwise linearly interpolated value between two vectors."
  },
  {
    "title": "simd_make_double8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917424-simd_make_double8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_double8(simd_double2) -> simd_double8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double3) -> simd_double8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double4) -> simd_double8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double8) -> simd_double8\nReturns a new vector from the specified vector.\nfunc simd_make_double8(simd_double4, simd_double4) -> simd_double8\nReturns a new vector from the specified vectors.\nfunc simd_make_double8_undef(simd_double2) -> simd_double8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_double8_undef(simd_double4) -> simd_double8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "kvImageGamma_UseGammaValue_half_precision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/kvimagegamma_usegammavalue_half_precision",
    "html": "See Also\nUser-defined gamma values\nvar kvImageGamma_UseGammaValue: Int\nA user-defined gamma value with full-precision calculation."
  },
  {
    "title": "simd_make_double8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917292-simd_make_double8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_double8(simd_double2) -> simd_double8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double4) -> simd_double8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double8) -> simd_double8\nReturns a new vector from the specified vector.\nfunc simd_make_double8(simd_double4, simd_double4) -> simd_double8\nReturns a new vector from the specified vectors.\nfunc simd_make_double8_undef(simd_double2) -> simd_double8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_double8_undef(simd_double3) -> simd_double8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_double8_undef(simd_double4) -> simd_double8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_double8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917633-simd_make_double8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_double8(simd_double2) -> simd_double8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double3) -> simd_double8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double8) -> simd_double8\nReturns a new vector from the specified vector.\nfunc simd_make_double8(simd_double4, simd_double4) -> simd_double8\nReturns a new vector from the specified vectors.\nfunc simd_make_double8_undef(simd_double2) -> simd_double8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_double8_undef(simd_double3) -> simd_double8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_double8_undef(simd_double4) -> simd_double8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_double8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917717-simd_make_double8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_double8(simd_double2) -> simd_double8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double3) -> simd_double8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double4) -> simd_double8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double8) -> simd_double8\nReturns a new vector from the specified vector.\nfunc simd_make_double8(simd_double4, simd_double4) -> simd_double8\nReturns a new vector from the specified vectors.\nfunc simd_make_double8_undef(simd_double3) -> simd_double8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_double8_undef(simd_double4) -> simd_double8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "isinf(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804677-isinf",
    "html": "See Also\nClassification Functions\nfunc isfinite(simd_double4) -> simd_long4\nReturns true for each element that is finite in a vector.\nfunc isnan(simd_double4) -> simd_long4\nReturns true for each element that is not a number (NaN) in a vector.\nfunc isnormal(simd_double4) -> simd_long4\nReturns true for each element that is normal in a vector."
  },
  {
    "title": "remainder(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804767-remainder",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double4) -> simd_double4\nReturns the cube root of each element in a vector.\nfunc ceil(SIMD4<Double>) -> SIMD4<Double>\nReturns the ceiling of each element in a vector.\nfunc erf(simd_double4) -> simd_double4\nReturns the error function for each element in a vector.\nfunc erfc(simd_double4) -> simd_double4\nReturns the complementary error function for each element in a vector.\nfunc floor(SIMD4<Double>) -> SIMD4<Double>\nReturns the floor of each element in a vector.\nfunc fma(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double4, simd_double4) -> simd_double4\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double4, simd_double4) -> simd_double4\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double4) -> simd_double4\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double4, simd_double4) -> simd_double4\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc round(simd_double4) -> simd_double4\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double4) -> simd_double4\nReturns the gamma function for each element in a vector.\nfunc trunc(SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector rounded toward zero to the nearest integer."
  },
  {
    "title": "simd_make_double8(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867657-simd_make_double8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_double8(simd_double2) -> simd_double8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double3) -> simd_double8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double4) -> simd_double8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double8) -> simd_double8\nReturns a new vector from the specified vector.\nfunc simd_make_double8_undef(simd_double2) -> simd_double8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_double8_undef(simd_double3) -> simd_double8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_double8_undef(simd_double4) -> simd_double8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_double8(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917393-simd_make_double8",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_double8(simd_double2) -> simd_double8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double3) -> simd_double8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double4) -> simd_double8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double4, simd_double4) -> simd_double8\nReturns a new vector from the specified vectors.\nfunc simd_make_double8_undef(simd_double2) -> simd_double8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_double8_undef(simd_double3) -> simd_double8\nReturns a new vector from the specified three-element vector, and other elements undefined.\nfunc simd_make_double8_undef(simd_double4) -> simd_double8\nReturns a new vector from the specified four-element vector, and other elements undefined."
  },
  {
    "title": "cospi(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804578-cospi",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double4) -> simd_double4\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double4) -> simd_double4\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double4) -> simd_double4\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double4, simd_double4) -> simd_double4\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector.\nfunc sin(simd_double4) -> simd_double4\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double4) -> simd_double4\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "cos(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804560-cos",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double4) -> simd_double4\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double4) -> simd_double4\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double4) -> simd_double4\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double4, simd_double4) -> simd_double4\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cospi(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double4) -> simd_double4\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double4) -> simd_double4\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "log1p(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804731-log1p",
    "html": "See Also\nExponential and Logarithmic Functions\nfunc exp(simd_double4) -> simd_double4\nReturns e raised to the power of each element in a vector.\nfunc exp2(simd_double4) -> simd_double4\nReturns 2 raised to the power of each element in a vector.\nfunc exp10(simd_double4) -> simd_double4\nReturns 10 raised to the power of each element in a vector.\nfunc expm1(simd_double4) -> simd_double4\nReturns eˣ-1 for each element in a vector.\nfunc log(simd_double4) -> simd_double4\nReturns the natural logarithm of each element in a vector.\nfunc log2(simd_double4) -> simd_double4\nReturns the base 2 logarithm of each element in a vector.\nfunc log10(simd_double4) -> simd_double4\nReturns the base 10 logarithm of each element in a vector."
  },
  {
    "title": "expm1(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804632-expm1",
    "html": "See Also\nExponential and Logarithmic Functions\nfunc exp(simd_double4) -> simd_double4\nReturns e raised to the power of each element in a vector.\nfunc exp2(simd_double4) -> simd_double4\nReturns 2 raised to the power of each element in a vector.\nfunc exp10(simd_double4) -> simd_double4\nReturns 10 raised to the power of each element in a vector.\nfunc log(simd_double4) -> simd_double4\nReturns the natural logarithm of each element in a vector.\nfunc log2(simd_double4) -> simd_double4\nReturns the base 2 logarithm of each element in a vector.\nfunc log10(simd_double4) -> simd_double4\nReturns the base 10 logarithm of each element in a vector.\nfunc log1p(simd_double4) -> simd_double4\nReturns log(1+x) of each element in a vector."
  },
  {
    "title": "acos(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804488-acos",
    "html": "See Also\nTrigonometric Functions\nfunc asin(simd_double4) -> simd_double4\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double4) -> simd_double4\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double4, simd_double4) -> simd_double4\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double4) -> simd_double4\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double4) -> simd_double4\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "simd_make_double8_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917585-simd_make_double8_undef",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Other Vectors\nfunc simd_make_double8(simd_double2) -> simd_double8\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double3) -> simd_double8\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double4) -> simd_double8\nReturns a new vector from the specified four-element vector, and other elements set to zero.\nfunc simd_make_double8(simd_double8) -> simd_double8\nReturns a new vector from the specified vector.\nfunc simd_make_double8(simd_double4, simd_double4) -> simd_double8\nReturns a new vector from the specified vectors.\nfunc simd_make_double8_undef(simd_double2) -> simd_double8\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_double8_undef(simd_double3) -> simd_double8\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "pow(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804758-pow",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double4) -> simd_double4\nReturns the cube root of each element in a vector.\nfunc ceil(SIMD4<Double>) -> SIMD4<Double>\nReturns the ceiling of each element in a vector.\nfunc erf(simd_double4) -> simd_double4\nReturns the error function for each element in a vector.\nfunc erfc(simd_double4) -> simd_double4\nReturns the complementary error function for each element in a vector.\nfunc floor(SIMD4<Double>) -> SIMD4<Double>\nReturns the floor of each element in a vector.\nfunc fma(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double4, simd_double4) -> simd_double4\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double4, simd_double4) -> simd_double4\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double4) -> simd_double4\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double4, simd_double4) -> simd_double4\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc remainder(simd_double4, simd_double4) -> simd_double4\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double4) -> simd_double4\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double4) -> simd_double4\nReturns the gamma function for each element in a vector.\nfunc trunc(SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector rounded toward zero to the nearest integer."
  },
  {
    "title": "nextafter(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804749-nextafter",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double4) -> simd_double4\nReturns the cube root of each element in a vector.\nfunc ceil(SIMD4<Double>) -> SIMD4<Double>\nReturns the ceiling of each element in a vector.\nfunc erf(simd_double4) -> simd_double4\nReturns the error function for each element in a vector.\nfunc erfc(simd_double4) -> simd_double4\nReturns the complementary error function for each element in a vector.\nfunc floor(SIMD4<Double>) -> SIMD4<Double>\nReturns the floor of each element in a vector.\nfunc fma(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double4, simd_double4) -> simd_double4\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double4, simd_double4) -> simd_double4\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double4) -> simd_double4\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc pow(simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double4, simd_double4) -> simd_double4\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double4) -> simd_double4\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double4) -> simd_double4\nReturns the gamma function for each element in a vector.\nfunc trunc(SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector rounded toward zero to the nearest integer."
  },
  {
    "title": "lgamma(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804704-lgamma",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double4) -> simd_double4\nReturns the cube root of each element in a vector.\nfunc ceil(SIMD4<Double>) -> SIMD4<Double>\nReturns the ceiling of each element in a vector.\nfunc erf(simd_double4) -> simd_double4\nReturns the error function for each element in a vector.\nfunc erfc(simd_double4) -> simd_double4\nReturns the complementary error function for each element in a vector.\nfunc floor(SIMD4<Double>) -> SIMD4<Double>\nReturns the floor of each element in a vector.\nfunc fma(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double4, simd_double4) -> simd_double4\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double4, simd_double4) -> simd_double4\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc nextafter(simd_double4, simd_double4) -> simd_double4\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double4, simd_double4) -> simd_double4\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double4) -> simd_double4\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double4) -> simd_double4\nReturns the gamma function for each element in a vector.\nfunc trunc(SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector rounded toward zero to the nearest integer."
  },
  {
    "title": "erfc(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804596-erfc",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double4) -> simd_double4\nReturns the cube root of each element in a vector.\nfunc ceil(SIMD4<Double>) -> SIMD4<Double>\nReturns the ceiling of each element in a vector.\nfunc erf(simd_double4) -> simd_double4\nReturns the error function for each element in a vector.\nfunc floor(SIMD4<Double>) -> SIMD4<Double>\nReturns the floor of each element in a vector.\nfunc fma(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double4, simd_double4) -> simd_double4\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double4, simd_double4) -> simd_double4\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double4) -> simd_double4\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double4, simd_double4) -> simd_double4\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double4, simd_double4) -> simd_double4\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double4) -> simd_double4\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double4) -> simd_double4\nReturns the gamma function for each element in a vector.\nfunc trunc(SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector rounded toward zero to the nearest integer."
  },
  {
    "title": "erf(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804587-erf",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double4) -> simd_double4\nReturns the cube root of each element in a vector.\nfunc ceil(SIMD4<Double>) -> SIMD4<Double>\nReturns the ceiling of each element in a vector.\nfunc erfc(simd_double4) -> simd_double4\nReturns the complementary error function for each element in a vector.\nfunc floor(SIMD4<Double>) -> SIMD4<Double>\nReturns the floor of each element in a vector.\nfunc fma(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double4, simd_double4) -> simd_double4\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double4, simd_double4) -> simd_double4\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double4) -> simd_double4\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double4, simd_double4) -> simd_double4\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double4, simd_double4) -> simd_double4\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double4) -> simd_double4\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double4) -> simd_double4\nReturns the gamma function for each element in a vector.\nfunc trunc(SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector rounded toward zero to the nearest integer."
  },
  {
    "title": "simd_select(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916765-simd_select",
    "html": "See Also\nLogic Functions\nfunc simd_select(simd_double4, simd_double4, simd_long4) -> simd_double4\nReturns a vector that contains elements from either the first or second parameter, based on the high-order bit of the corresponding element in the third parameter.\nfunc simd_bitselect(simd_double4, simd_double4, simd_long4) -> simd_double4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_double4, simd_double4, simd_long4) -> simd_double4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918223-simd_double",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_short4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918320-simd_double",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_int8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vImageConvert_XRGB2101010ToARGB8888(_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1642591-vimageconvert_xrgb2101010toargb8",
    "html": "Parameters\nsrc\n\nA pointer to the vImage buffer that references 10-bit RGB interleaved source pixels.\n\ndest\n\nA pointer to the vImage buffer that references 8-bit ARGB interleaved destination pixels.\n\nRGB101010RangeMin\n\nThe minimum value for the range of 10-bit RGB pixels.\n\nRGB101010RangeMax\n\nThe maximum value for the range of 10-bit RGB pixels.\n\npermuteMap\n\nAn array of four 8-bit integers with the values 0, 1, 2, and 3, in some order. Each value specifies a channel from the source image that should be copied to that channel in the destination image. 0 denotes the alpha channel, 1 the red channel, 2 the green channel, and 3 the blue channel. \n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nRGB101010RangeMin and RGB101010RangeMax are available for non-full-range pixel values. You can set full-range pixel values as:\n\n RGB101010RangeMin  = 0;\n RGB101010RangeMax  = 1023;\n\n\nThe per-pixel operation is:\n\n uint32_t *srcPixel = src.data;\n uint32_t pixel = ntohl(srcPixel[0]);\n srcPixel += 1;\n \n int32_t R10 = (pixel >> 20) & 0x3ff;\n int32_t G10 = (pixel >> 10) & 0x3ff;\n int32_t B10 = (pixel >>  0) & 0x3ff;\n int32_t range10 = RGB101010RangeMax - RGB101010RangeMin;\n \n R10 = ((R10 - RGB101010RangeMin) * USHRT_MAX + (range10 >> 1)) / range10;\n G10 = ((G10 - RGB101010RangeMin) * USHRT_MAX + (range10 >> 1)) / range10;\n B10 = ((B10 - RGB101010RangeMin) * USHRT_MAX + (range10 >> 1)) / range10;\n \n uint16_t R16, G16, B16;\n R16 = CLAMP(0, R10, USHRT_MAX);\n G16 = CLAMP(0, G10, USHRT_MAX);\n B16 = CLAMP(0, B10, USHRT_MAX);\n \n uint16_t ARGB[4];\n ARGB[0] = alpha;\n ARGB[1] = R16;\n ARGB[2] = G16;\n ARGB[3] = B16;\n \n uint16_t *destPixel = dest.data;\n destPixel[0] = ARGB[permuteMap[0]];\n destPixel[1] = ARGB[permuteMap[1]];\n destPixel[2] = ARGB[permuteMap[2]];\n destPixel[3] = ARGB[permuteMap[3]];\n destPixel += 4;\n\n\nSee Also\nConverting from XRGB Formats\nfunc vImageConvert_XRGBFFFFToPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an XRGBFFFF image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_XRGB8888ToPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an XRGB8888 image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_XRGB2101010ToARGB16F(UnsafePointer<vImage_Buffer>, Pixel_F, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16F format image.\nfunc vImageConvert_XRGB2101010ToARGB16Q12(UnsafePointer<vImage_Buffer>, Pixel_16Q12, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16Q12 format image.\nfunc vImageConvert_XRGB2101010ToARGB16U(UnsafePointer<vImage_Buffer>, UInt16, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16U format image.\nfunc vImageConvert_XRGB2101010ToARGBFFFF(UnsafePointer<vImage_Buffer>, Pixel_F, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGBFFFF format image."
  },
  {
    "title": "vImageConvert_RGBA1010102ToARGB8888(_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533003-vimageconvert_rgba1010102toargb8",
    "html": "Parameters\nsrc\n\nA pointer to the vImage buffer that references 10-bit RGB interleaved source pixels.\n\ndest\n\nA pointer to the vImage buffer that references 8-bit ARGB interleaved destination pixels.\n\nRGB101010RangeMin\n\nThe minimum value for the range of 10-bit RGB pixels.\n\nRGB101010RangeMax\n\nThe maximum value for the range of 10-bit RGB pixels.\n\npermuteMap\n\nAn array of four 8-bit integers with the values 0, 1, 2, and 3, in some order. Each value specifies a channel from the source image that should be copied to that channel in the destination image. 0 denotes the alpha channel, 1 the red channel, 2 the green channel, and 3 the blue channel. \n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nRGB101010RangeMin and RGB101010RangeMax are available for non-full-range pixel values. You can set full-range pixel values as:\n\n RGB101010RangeMin  = 0;\n RGB101010RangeMax  = 1023;\n\n\nThe per-pixel operation is:\n\n uint32_t *srcPixel = src.data;\n uint32_t pixel = ntohl(srcPixel[0]);\n srcPixel += 1;\n \n int32_t A2  = pixel & 0x3;\n int32_t R10 = (pixel >> 22) & 0x3ff;\n int32_t G10 = (pixel >> 12) & 0x3ff;\n int32_t B10 = (pixel >>  2) & 0x3ff;\n int32_t range10 = RGB101010RangeMax - RGB101010RangeMin;\n \n A2  = (A2 * UCHAR_MAX + 1) / 3;\n R10 = ((R10 - RGB101010RangeMin) * UCHAR_MAX + (range10 >> 1)) / range10;\n G10 = ((G10 - RGB101010RangeMin) * UCHAR_MAX + (range10 >> 1)) / range10;\n B10 = ((B10 - RGB101010RangeMin) * UCHAR_MAX + (range10 >> 1)) / range10;\n \n uint8_t R8, G8, B8;\n R8 = CLAMP(0, R10, UCHAR_MAX);\n G8 = CLAMP(0, G10, UCHAR_MAX);\n B8 = CLAMP(0, B10, UCHAR_MAX);\n \n uint8_t ARGB[4];\n ARGB[0] = A2;\n ARGB[1] = R8;\n ARGB[2] = G8;\n ARGB[3] = B8;\n \n uint8_t *destPixel = dest.data;\n destPixel[0] = ARGB[permuteMap[0]];\n destPixel[1] = ARGB[permuteMap[1]];\n destPixel[2] = ARGB[permuteMap[2]];\n destPixel[3] = ARGB[permuteMap[3]];\n destPixel += 4;\n\n\n\n\nSee Also\nConverting from RGBA Formats\nfunc vImageConvert_RGBAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_RGBA1010102ToARGB16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16Q12 format image.\nfunc vImageConvert_RGBA1010102ToARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16U format image.\nfunc vImageConvert_RGBA16UtoRGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA16U image to an RGB16U image.\nfunc vImageConvert_RGBA5551toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGB565 image, with loss of alpha.\nfunc vImageConvert_RGBA5551toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGBA8888 image.\nfunc vImageConvert_RGBA8888toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBA8888 image to a three-channel RGB888 image by removing the alpha channel.\nfunc vImageConvert_RGBA8888toRGBA5551_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGBA5551 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGB565 image.\nfunc vImageConvert_RGBA8888toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGBA5551 image."
  },
  {
    "title": "vImageConvert_RGBA16UtoRGB16U(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533149-vimageconvert_rgba16utorgb16u",
    "html": "Parameters\nrgbaSrc\n\nA pointer to a vImage buffer structure that contains the RGBA interleaved source pixels.\n\nrgbDest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe conversion from RGBA16 to RGB16U is:\n\n rgbDest[i*3+0] = rgbaSrc[i*4+0];\n rgbDest[i*3+1] = rgbaSrc[i*4+1];\n rgbDest[i*3+2] = rgbaSrc[i*4+2];\n\n\nThis function doesn't operate in place.\n\nSee Also\nConverting from RGBA Formats\nfunc vImageConvert_RGBAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_RGBA1010102ToARGB16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16Q12 format image.\nfunc vImageConvert_RGBA1010102ToARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16U format image.\nfunc vImageConvert_RGBA1010102ToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB8888 format image.\nfunc vImageConvert_RGBA5551toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGB565 image, with loss of alpha.\nfunc vImageConvert_RGBA5551toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGBA8888 image.\nfunc vImageConvert_RGBA8888toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBA8888 image to a three-channel RGB888 image by removing the alpha channel.\nfunc vImageConvert_RGBA8888toRGBA5551_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGBA5551 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGB565 image.\nfunc vImageConvert_RGBA8888toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGBA5551 image."
  },
  {
    "title": "vImageConvert_BGRXFFFFToPlanarF(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533129-vimageconvert_bgrxfffftoplanarf",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to separate.\n\nblue\n\nA pointer to a vImage buffer data structure that represents the blue channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\ngreen\n\nA pointer to a vImage buffer data structure that represents the green channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\nred\n\nA pointer to a vImage buffer data structure that represents the red channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThis function doesn't work in place.\n\nSee Also\nConverting from BGRA Formats\nfunc vImageConvert_BGRAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel BGRAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_BGRA16UtoRGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a BGRA16 image to an RGB16U image.\nfunc vImageConvert_BGRA8888toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a four-channel BGRA8888 image to a three-channel RGB888 image by removing the alpha channel.\nfunc vImageConvert_BGRX8888ToPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates a BGRX8888 image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_BGRA8888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts a BGRA8888 image to an RGB565 image with dithering.\nfunc vImageConvert_BGRA8888toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a BGRA8888 image into an RGB565 image."
  },
  {
    "title": "vImageConvert_BGRAFFFFtoRGBFFF(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533214-vimageconvert_bgrafffftorgbfff",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe red, green, and blue channels are simply copied. This function can be used in place.\n\nSee Also\nConverting from BGRA Formats\nfunc vImageConvert_BGRXFFFFToPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates a BGRXFFFF image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_BGRA16UtoRGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a BGRA16 image to an RGB16U image.\nfunc vImageConvert_BGRA8888toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a four-channel BGRA8888 image to a three-channel RGB888 image by removing the alpha channel.\nfunc vImageConvert_BGRX8888ToPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates a BGRX8888 image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_BGRA8888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts a BGRA8888 image to an RGB565 image with dithering.\nfunc vImageConvert_BGRA8888toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a BGRA8888 image into an RGB565 image."
  },
  {
    "title": "vImageConvert_RGBA5551toRGB565(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533288-vimageconvert_rgba5551torgb565",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nIf you need to process the alpha information first—for example, unpremultiplying or flattening—convert to 8-bit per channel first. vImage defines both RGB565 and ARGB1555 to be host-endian formats. On Intel, ARM, and other little-endian systems, they're little-endian uint16_t in memory. On a big-endian system, they're big-endian uint16_t.\n\nSee Also\nConverting from RGBA Formats\nfunc vImageConvert_RGBAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_RGBA1010102ToARGB16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16Q12 format image.\nfunc vImageConvert_RGBA1010102ToARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16U format image.\nfunc vImageConvert_RGBA1010102ToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB8888 format image.\nfunc vImageConvert_RGBA16UtoRGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA16U image to an RGB16U image.\nfunc vImageConvert_RGBA5551toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGBA8888 image.\nfunc vImageConvert_RGBA8888toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBA8888 image to a three-channel RGB888 image by removing the alpha channel.\nfunc vImageConvert_RGBA8888toRGBA5551_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGBA5551 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGB565 image.\nfunc vImageConvert_RGBA8888toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGBA5551 image."
  },
  {
    "title": "vImageConvert_XRGB2101010ToARGB16U(_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1642353-vimageconvert_xrgb2101010toargb1",
    "html": "Parameters\nsrc\n\nA pointer to the vImage buffer that references 10-bit RGB interleaved source pixels.\n\ndest\n\nA pointer to the vImage buffer that references 16-bit ARGB interleaved destination pixels.\n\nRGB101010RangeMin\n\nThe minimum value for the range of 10-bit RGB pixels.\n\nRGB101010RangeMax\n\nThe maximum value for the range of 10-bit RGB pixels.\n\npermuteMap\n\nAn array of four 8-bit integers with the values 0, 1, 2, and 3, in some order. Each value specifies a channel from the source image that should be copied to that channel in the destination image. 0 denotes the alpha channel, 1 the red channel, 2 the green channel, and 3 the blue channel. \n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nRGB101010RangeMin and RGB101010RangeMax are available for non-full-range pixel values. You can set full-range pixel values as:\n\n RGB101010RangeMin  = 0;\n RGB101010RangeMax  = 1023;\n\n\nThe per-pixel operation is:\n\n uint32_t *srcPixel = src.data;\n uint32_t pixel = ntohl(srcPixel[0]);\n srcPixel += 1;\n \n int32_t R10 = (pixel >> 20) & 0x3ff;\n int32_t G10 = (pixel >> 10) & 0x3ff;\n int32_t B10 = (pixel >>  0) & 0x3ff;\n int32_t range10 = RGB101010RangeMax - RGB101010RangeMin;\n \n R10 = ((R10 - RGB101010RangeMin) * USHRT_MAX + (range10 >> 1)) / range10;\n G10 = ((G10 - RGB101010RangeMin) * USHRT_MAX + (range10 >> 1)) / range10;\n B10 = ((B10 - RGB101010RangeMin) * USHRT_MAX + (range10 >> 1)) / range10;\n \n uint16_t R16, G16, B16;\n R16 = CLAMP(0, R10, USHRT_MAX);\n G16 = CLAMP(0, G10, USHRT_MAX);\n B16 = CLAMP(0, B10, USHRT_MAX);\n \n uint16_t ARGB[4];\n ARGB[0] = alpha;\n ARGB[1] = R16;\n ARGB[2] = G16;\n ARGB[3] = B16;\n \n uint16_t *destPixel = dest.data;\n destPixel[0] = ARGB[permuteMap[0]];\n destPixel[1] = ARGB[permuteMap[1]];\n destPixel[2] = ARGB[permuteMap[2]];\n destPixel[3] = ARGB[permuteMap[3]];\n destPixel += 4;\n\n\nSee Also\nConverting from XRGB Formats\nfunc vImageConvert_XRGBFFFFToPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an XRGBFFFF image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_XRGB8888ToPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an XRGB8888 image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_XRGB2101010ToARGB16F(UnsafePointer<vImage_Buffer>, Pixel_F, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16F format image.\nfunc vImageConvert_XRGB2101010ToARGB16Q12(UnsafePointer<vImage_Buffer>, Pixel_16Q12, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16Q12 format image.\nfunc vImageConvert_XRGB2101010ToARGB8888(UnsafePointer<vImage_Buffer>, Pixel_8, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB8888 format image.\nfunc vImageConvert_XRGB2101010ToARGBFFFF(UnsafePointer<vImage_Buffer>, Pixel_F, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGBFFFF format image."
  },
  {
    "title": "vImageConvert_XRGB2101010ToARGBFFFF(_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1642428-vimageconvert_xrgb2101010toargbf",
    "html": "Parameters\nsrc\n\nA pointer to the vImage buffer that references 10-bit RGB interleaved source pixels.\n\ndest\n\nA pointer to the vImage buffer that references 32-bit ARGB interleaved destination pixels.\n\nRGB101010RangeMin\n\nThe minimum value for the range of 10-bit RGB pixels.\n\nRGB101010RangeMax\n\nThe maximum value for the range of 10-bit RGB pixels.\n\npermuteMap\n\nAn array of four 8-bit integers with the values 0, 1, 2, and 3, in some order. Each value specifies a channel from the source image that should be copied to that channel in the destination image. 0 denotes the alpha channel, 1 the red channel, 2 the green channel, and 3 the blue channel. \n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nRGB101010RangeMin and RGB101010RangeMax are available for non-full-range pixel values. You can set full-range pixel values as:\n\n RGB101010RangeMin  = 0;\n RGB101010RangeMax  = 1023;\n\n\nThe per-pixel operation is:\n\n uint32_t *srcPixel = src.data;\n uint32_t pixel = ntohl(srcPixel[0]);\n srcPixel += 1;\n \n int32_t R10 = (pixel >> 20) & 0x3ff;\n int32_t G10 = (pixel >> 10) & 0x3ff;\n int32_t B10 = (pixel >>  0) & 0x3ff;\n int32_t range10 = RGB101010RangeMax - RGB101010RangeMin;\n \n float RF, GF, BF;\n RF = (R10 - RGB101010RangeMin) / (float)range10;\n GF = (G10 - RGB101010RangeMin) / (float)range10;\n BF = (B10 - RGB101010RangeMin) / (float)range10;\n \n if (!(flags & kvImageDoNotClamp)) {\n    RF = CLAMP(RF, 0.0f, 1.0f);\n    GF = CLAMP(GF, 0.0f, 1.0f);\n    BF = CLAMP(BF, 0.0f, 1.0f);\n }\n \n float ARGB[4];\n ARGB[0] = alpha;\n ARGB[1] = RF;\n ARGB[2] = GF;\n ARGB[3] = BF;\n \n float *destPixel = dest.data;\n destRow[0] = ARGB[permuteMap[0]];\n destRow[1] = ARGB[permuteMap[1]];\n destRow[2] = ARGB[permuteMap[2]];\n destRow[3] = ARGB[permuteMap[3]];\n destPixel += 4;\n\n\nSee Also\nConverting from XRGB Formats\nfunc vImageConvert_XRGBFFFFToPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an XRGBFFFF image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_XRGB8888ToPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an XRGB8888 image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_XRGB2101010ToARGB16F(UnsafePointer<vImage_Buffer>, Pixel_F, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16F format image.\nfunc vImageConvert_XRGB2101010ToARGB16Q12(UnsafePointer<vImage_Buffer>, Pixel_16Q12, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16Q12 format image.\nfunc vImageConvert_XRGB2101010ToARGB16U(UnsafePointer<vImage_Buffer>, UInt16, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16U format image.\nfunc vImageConvert_XRGB2101010ToARGB8888(UnsafePointer<vImage_Buffer>, Pixel_8, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB8888 format image."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918693-simd_double",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918080-simd_double",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918528-simd_double",
    "html": "See Also\nFunctions to Create Eight-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar8) -> simd_double8\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort8) -> simd_double8\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float8) -> simd_double8\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double8) -> simd_double8\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "vImageConvert_XRGB8888ToPlanar8(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533026-vimageconvert_xrgb8888toplanar8",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to separate.\n\nred\n\nA pointer to a vImage buffer data structure that represents the red channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\ngreen\n\nA pointer to a vImage buffer data structure that represents the green channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\nblue\n\nA pointer to a vImage buffer data structure that represents the blue channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThis function doesn't work in place.\n\nSee Also\nConverting from XRGB Formats\nfunc vImageConvert_XRGBFFFFToPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an XRGBFFFF image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_XRGB2101010ToARGB16F(UnsafePointer<vImage_Buffer>, Pixel_F, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16F format image.\nfunc vImageConvert_XRGB2101010ToARGB16Q12(UnsafePointer<vImage_Buffer>, Pixel_16Q12, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16Q12 format image.\nfunc vImageConvert_XRGB2101010ToARGB16U(UnsafePointer<vImage_Buffer>, UInt16, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16U format image.\nfunc vImageConvert_XRGB2101010ToARGB8888(UnsafePointer<vImage_Buffer>, Pixel_8, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB8888 format image.\nfunc vImageConvert_XRGB2101010ToARGBFFFF(UnsafePointer<vImage_Buffer>, Pixel_F, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGBFFFF format image."
  },
  {
    "title": "vImageConvert_XRGBFFFFToPlanarF(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533067-vimageconvert_xrgbfffftoplanarf",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to separate.\n\nred\n\nA pointer to a vImage buffer data structure that represents the red channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\ngreen\n\nA pointer to a vImage buffer data structure that represents the green channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\nblue\n\nA pointer to a vImage buffer data structure that represents the blue channel destination. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThis function doesn't work in place.\n\nSee Also\nConverting from XRGB Formats\nfunc vImageConvert_XRGB8888ToPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an XRGB8888 image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_XRGB2101010ToARGB16F(UnsafePointer<vImage_Buffer>, Pixel_F, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16F format image.\nfunc vImageConvert_XRGB2101010ToARGB16Q12(UnsafePointer<vImage_Buffer>, Pixel_16Q12, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16Q12 format image.\nfunc vImageConvert_XRGB2101010ToARGB16U(UnsafePointer<vImage_Buffer>, UInt16, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16U format image.\nfunc vImageConvert_XRGB2101010ToARGB8888(UnsafePointer<vImage_Buffer>, Pixel_8, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB8888 format image.\nfunc vImageConvert_XRGB2101010ToARGBFFFF(UnsafePointer<vImage_Buffer>, Pixel_F, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGBFFFF format image."
  },
  {
    "title": "vImageConvert_RGBA5551toRGBA8888(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1642297-vimageconvert_rgba5551torgba8888",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe RGBA5551 format has 16-bit pixels with 1 bit for alpha and 5 bits each for red, green, and blue. The function calculates the 8-bit pixels in the destination image as follows:\n\n    Pixel8 alpha =  1bitAlphaChannel * 255\n    Pixel8 red   = (5bitRedChannel   * 255 + 15) / 31\n    Pixel8 green = (5bitGreenChannel * 255 + 15) / 31\n    Pixel8 blue  = (5bitBlueChannel  * 255 + 15) / 31\n\nSee Also\nConverting from RGBA Formats\nfunc vImageConvert_RGBAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_RGBA1010102ToARGB16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16Q12 format image.\nfunc vImageConvert_RGBA1010102ToARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16U format image.\nfunc vImageConvert_RGBA1010102ToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB8888 format image.\nfunc vImageConvert_RGBA16UtoRGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA16U image to an RGB16U image.\nfunc vImageConvert_RGBA5551toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGB565 image, with loss of alpha.\nfunc vImageConvert_RGBA8888toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBA8888 image to a three-channel RGB888 image by removing the alpha channel.\nfunc vImageConvert_RGBA8888toRGBA5551_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGBA5551 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGB565 image.\nfunc vImageConvert_RGBA8888toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGBA5551 image."
  },
  {
    "title": "vImageConvert_XRGB2101010ToARGB16Q12(_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1642361-vimageconvert_xrgb2101010toargb1",
    "html": "Parameters\nsrc\n\nA pointer to the vImage buffer that references 10-bit RGB interleaved source pixels.\n\ndest\n\nA pointer to the vImage buffer that references 16Q12 ARGB interleaved destination pixels.\n\nRGB101010RangeMin\n\nThe minimum value for the range of 10-bit RGB pixels.\n\nRGB101010RangeMax\n\nThe maximum value for the range of 10-bit RGB pixels.\n\npermuteMap\n\nAn array of four 8-bit integers with the values 0, 1, 2, and 3, in some order. Each value specifies a channel from the source image that should be copied to that channel in the destination image. 0 denotes the alpha channel, 1 the red channel, 2 the green channel, and 3 the blue channel. \n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nRGB101010RangeMin and RGB101010RangeMax are available for non-full-range pixel values. You can set full-range pixel values as:\n\n RGB101010RangeMin  = 0;\n RGB101010RangeMax  = 1023;\n\n\nThe per-pixel operation is:\n\n uint32_t *srcPixel = src.data;\n srcPixel += 1;\n \n int32_t R10 = (pixel >> 20) & 0x3ff;\n int32_t G10 = (pixel >> 10) & 0x3ff;\n int32_t B10 = (pixel >>  0) & 0x3ff;\n int32_t range10 = RGB101010RangeMax - RGB101010RangeMin;\n \n int16_t R16, G16, B16;\n R16 = ((R10 - RGB101010RangeMin) * 4096 + (range10 >> 1)) / range10;\n G16 = ((G10 - RGB101010RangeMin) * 4096 + (range10 >> 1)) / range10;\n B16 = ((B10 - RGB101010RangeMin) * 4096 + (range10 >> 1)) / range10;\n \n R16 = CLAMP(INT16_MIN, R16, INT16_MAX);\n G16 = CLAMP(INT16_MIN, G16, INT16_MAX);\n B16 = CLAMP(INT16_MIN, B16, INT16_MAX);\n \n int16_t ARGB[4];\n ARGB[0] = alpha;\n ARGB[1] = R16;\n ARGB[2] = G16;\n ARGB[3] = B16;\n \n int16_t *destPixel = dest.data;\n destPixel[0] = ARGB[permuteMap[0]];\n destPixel[1] = ARGB[permuteMap[1]];\n destPixel[2] = ARGB[permuteMap[2]];\n destPixel[3] = ARGB[permuteMap[3]];\n destPixel += 4;\n\n\nSee Also\nConverting from XRGB Formats\nfunc vImageConvert_XRGBFFFFToPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an XRGBFFFF image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_XRGB8888ToPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an XRGB8888 image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_XRGB2101010ToARGB16F(UnsafePointer<vImage_Buffer>, Pixel_F, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16F format image.\nfunc vImageConvert_XRGB2101010ToARGB16U(UnsafePointer<vImage_Buffer>, UInt16, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16U format image.\nfunc vImageConvert_XRGB2101010ToARGB8888(UnsafePointer<vImage_Buffer>, Pixel_8, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB8888 format image.\nfunc vImageConvert_XRGB2101010ToARGBFFFF(UnsafePointer<vImage_Buffer>, Pixel_F, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGBFFFF format image."
  },
  {
    "title": "double4 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/double4",
    "html": "See Also\nAlternative Type Alias\ntypealias vector_double4"
  },
  {
    "title": "vImageConvert_RGBA8888toRGB888(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1533062-vimageconvert_rgba8888torgb888",
    "html": "Parameters\nrgbaSrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\nrgbDest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThe red, green, and blue channels are simply copied. This function can be used in place.\n\nSee Also\nConverting from RGBA Formats\nfunc vImageConvert_RGBAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_RGBA1010102ToARGB16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16Q12 format image.\nfunc vImageConvert_RGBA1010102ToARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16U format image.\nfunc vImageConvert_RGBA1010102ToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB8888 format image.\nfunc vImageConvert_RGBA16UtoRGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA16U image to an RGB16U image.\nfunc vImageConvert_RGBA5551toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGB565 image, with loss of alpha.\nfunc vImageConvert_RGBA5551toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGBA8888 image.\nfunc vImageConvert_RGBA8888toRGBA5551_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGBA5551 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGB565 image.\nfunc vImageConvert_RGBA8888toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGBA5551 image."
  },
  {
    "title": "vImageConvert_XRGB2101010ToARGB16F(_:_:_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1642403-vimageconvert_xrgb2101010toargb1",
    "html": "Parameters\nsrc\n\nA pointer to the vImage buffer that references 10-bit RGB interleaved source pixels.\n\ndest\n\nA pointer to the vImage buffer that references 16-bit float ARGB interleaved destination pixels.\n\nRGB101010RangeMin\n\nThe minimum value for the range of 10-bit RGB pixels.\n\nRGB101010RangeMax\n\nThe maximum value for the range of 10-bit RGB pixels.\n\npermuteMap\n\nAn array of four 8-bit integers with the values 0, 1, 2, and 3, in some order. Each value specifies a channel from the source image that should be copied to that channel in the destination image. 0 denotes the alpha channel, 1 the red channel, 2 the green channel, and 3 the blue channel. \n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nRGB101010RangeMin and RGB101010RangeMax are available for non-full-range pixel values. You can set full-range pixel values as:\n\n RGB101010RangeMin  = 0;\n RGB101010RangeMax  = 1023;\n\n\nThe per-pixel operation is:\n\n uint32_t *srcPixel = src.data;\n uint32_t pixel = ntohl(srcPixel[0]);\n srcPixel += 1;\n \n int32_t R10 = (pixel >> 20) & 0x3ff;\n int32_t G10 = (pixel >> 10) & 0x3ff;\n int32_t B10 = (pixel >>  0) & 0x3ff;\n int32_t range10 = RGB101010RangeMax - RGB101010RangeMin;\n  \n float RF, GF, BF;\n RF = (R10 - RGB101010RangeMin) / (float)range10;\n GF = (G10 - RGB101010RangeMin) / (float)range10;\n BF = (B10 - RGB101010RangeMin) / (float)range10;\n \n if (!(flags & kvImageDoNotClamp)) {\n    RF = CLAMP(RF, 0.0f, 1.0f);\n    GF = CLAMP(GF, 0.0f, 1.0f);\n    BF = CLAMP(BF, 0.0f, 1.0f);\n }\n  \n float ARGB[4];\n ARGB[0] = alpha;\n ARGB[1] = RF;\n ARGB[2] = GF;\n ARGB[3] = BF;\n  \n uint16_t *destPixel = dest.data;\n destPixel[0] = ConvertFloatToHalf(ARGB[permA]);\n destPixel[1] = ConvertFloatToHalf(ARGB[permR]);\n destPixel[2] = ConvertFloatToHalf(ARGB[permG]);\n destPixel[3] = ConvertFloatToHalf(ARGB[permB]);\n destPixel += 4;\n\n\nSee Also\nConverting from XRGB Formats\nfunc vImageConvert_XRGBFFFFToPlanarF(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an XRGBFFFF image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_XRGB8888ToPlanar8(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nSeparates an XRGB8888 image into three planar buffers for red, green, and blue, discarding the fourth channel.\nfunc vImageConvert_XRGB2101010ToARGB16Q12(UnsafePointer<vImage_Buffer>, Pixel_16Q12, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16Q12 format image.\nfunc vImageConvert_XRGB2101010ToARGB16U(UnsafePointer<vImage_Buffer>, UInt16, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB16U format image.\nfunc vImageConvert_XRGB2101010ToARGB8888(UnsafePointer<vImage_Buffer>, Pixel_8, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGB8888 format image.\nfunc vImageConvert_XRGB2101010ToARGBFFFF(UnsafePointer<vImage_Buffer>, Pixel_F, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an XRGB2101010 format image to an ARGBFFFF format image."
  },
  {
    "title": "vImageConvert_RGBA8888toRGBA5551_dithered(_:_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1642566-vimageconvert_rgba8888torgba5551",
    "html": "Parameters\nsrc\n\nA pointer to a vImage buffer structure that contains the source image whose data you want to convert.\n\ndest\n\nA pointer to a vImage buffer data structure. You're responsible for filling out the height, width, and rowBytes fields of this structure, and for allocating a data buffer of the appropriate size. On return, the data buffer this structure points to contains the destination image data. When you no longer need the data buffer, you must deallocate the memory.\n\ntempBuffer\n\nA pointer to a region of memory that vImage can use as a scratch space for storing temporary data.\n\ndither\n\nThe dithering method, which should be kvImageConvert_DitherOrdered or kvImageConvert_DitherOrderedReproducible.\n\nflags\n\nThe options to use when performing the operation. If your code implements its own tiling or its own multithreading, pass kvImageDoNotTile.\n\nReturn Value\n\nkvImageNoError; otherwise, one of the error codes described in Data Types and Constants.\n\nDiscussion\n\nThis function is similar to vImageConvert_RGBA8888toRGBA5551(_:_:_:), except the result is dithered instead of rounded to the nearest RGBA5551 value. It should provide more accurate overall color reproduction and less banding in low-frequency regions of the image.\n\nThis function supports the following dithering options:\n\nkvImageConvert_DitherOrdered\n\nPrecomputed blue noise is added to the image before the values are rounded to the destination format. The offset into the blue noise is randomized per call to avoid visible artifacts if you do your own tiling or call the function on sequential frames of video.\n\nkvImageConvert_DitherOrderedReproducible\n\nPrecomputed blue noise is added to the image before the values are rounded to the destination format. The offset into the blue noise is the same for every call to allow users to get reproducible results.\n\nThis function can work in place provided the following are true:\n\nFor each buffer, buf, that overlaps with dest, buf->data is equal to dest->data and buf->rowBytes >= dest->rowBytes.\n\nIf an overlapping buffer has a different rowBytes from dest, kvImageDoNotTile is also passed in the flags.\n\nSee Also\nConverting from RGBA Formats\nfunc vImageConvert_RGBAFFFFtoRGBFFF(UnsafePointer<vImage_Buffer>!, UnsafePointer<vImage_Buffer>!, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBAFFFF image to a three-channel RGBFFF image by removing the alpha channel.\nfunc vImageConvert_RGBA1010102ToARGB16Q12(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16Q12 format image.\nfunc vImageConvert_RGBA1010102ToARGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB16U format image.\nfunc vImageConvert_RGBA1010102ToARGB8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, Int32, Int32, UnsafePointer<UInt8>!, vImage_Flags) -> vImage_Error\nConverts an RGBA1010102 format image to an ARGB8888 format image.\nfunc vImageConvert_RGBA16UtoRGB16U(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA16U image to an RGB16U image.\nfunc vImageConvert_RGBA5551toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGB565 image, with loss of alpha.\nfunc vImageConvert_RGBA5551toRGBA8888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA5551 image to an RGBA8888 image.\nfunc vImageConvert_RGBA8888toRGB888(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts a four-channel RGBA8888 image to a three-channel RGB888 image by removing the alpha channel.\nfunc vImageConvert_RGBA8888toRGB565_dithered(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, UnsafeMutableRawPointer!, Int32, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image to an RGB565 image with dithering.\nfunc vImageConvert_RGBA8888toRGB565(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGB565 image.\nfunc vImageConvert_RGBA8888toRGBA5551(UnsafePointer<vImage_Buffer>, UnsafePointer<vImage_Buffer>, vImage_Flags) -> vImage_Error\nConverts an RGBA8888 image into an RGBA5551 image."
  },
  {
    "title": "vector_double4 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vector_double4",
    "html": "See Also\nAlternative Type Alias\ntypealias double4\nDeprecated"
  },
  {
    "title": "isnormal(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804695-isnormal",
    "html": "See Also\nClassification Functions\nfunc isfinite(simd_double4) -> simd_long4\nReturns true for each element that is finite in a vector.\nfunc isinf(simd_double4) -> simd_long4\nReturns true for each element that is infinite in a vector.\nfunc isnan(simd_double4) -> simd_long4\nReturns true for each element that is not a number (NaN) in a vector."
  },
  {
    "title": "simd_distance(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896490-simd_distance",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double4) -> Double\nReturns the length of a vector.\nfunc length(SIMD4<Double>) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double4) -> Double\nReturns the fast length of a vector.\nfunc simd_precise_length(simd_double4) -> Double\nReturns the precise length of a vector.\nfunc simd_length_squared(simd_double4) -> Double\nReturns the square of the length of a vector.\nfunc length_squared(SIMD4<Double>) -> Double\nReturns the square of the length of a vector.\nfunc distance(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors.\nfunc simd_fast_distance(simd_double4, simd_double4) -> Double\nReturns the fast distance between two vectors.\nfunc simd_precise_distance(simd_double4, simd_double4) -> Double\nReturns the precise distance between two vectors.\nfunc simd_distance_squared(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance_squared(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425077-max",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_double4, simd_double4) -> simd_double4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Double>, Double) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc fmax(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_double4, simd_double4) -> simd_double4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Double>, Double) -> SIMD4<Double>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the minimum value of each element in a vector.\nfunc fmin(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_project(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896756-simd_project",
    "html": "See Also\nGeometry Functions\nfunc simd_dot(simd_double4, simd_double4) -> Double\nReturns the dot product of two vectors.\nfunc dot(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double4) -> simd_double4\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc normalize(SIMD4<Double>) -> SIMD4<Double>\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double4) -> simd_double4\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double4) -> simd_double4\nReturns the precise normalized vector.\nfunc project(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double4, simd_double4) -> simd_double4\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double4, simd_double4) -> simd_double4\nReturns the precise projected vector.\nfunc simd_reflect(simd_double4, simd_double4) -> simd_double4\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc reflect(SIMD4<Double>, n: SIMD4<Double>) -> SIMD4<Double>\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc simd_refract(simd_double4, simd_double4, Double) -> simd_double4\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta.\nfunc refract(SIMD4<Double>, n: SIMD4<Double>, eta: Double) -> SIMD4<Double>\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta."
  },
  {
    "title": "simd_precise_normalize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896423-simd_precise_normalize",
    "html": "Parameters\n__x\n\nThe vector to normalize.\n\nReturn Value\n\nThe normalized vector.\n\nDiscussion\n\nThis function returns an undefined value if the supplied vector has zero length or is poorly scaled such that an intermediate computation overflows or underflows.\n\nSee Also\nGeometry Functions\nfunc simd_dot(simd_double4, simd_double4) -> Double\nReturns the dot product of two vectors.\nfunc dot(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double4) -> simd_double4\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc normalize(SIMD4<Double>) -> SIMD4<Double>\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double4) -> simd_double4\nReturns the fast normalized vector.\nfunc simd_project(simd_double4, simd_double4) -> simd_double4\nReturns the first vector projected onto the second vector.\nfunc project(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double4, simd_double4) -> simd_double4\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double4, simd_double4) -> simd_double4\nReturns the precise projected vector.\nfunc simd_reflect(simd_double4, simd_double4) -> simd_double4\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc reflect(SIMD4<Double>, n: SIMD4<Double>) -> SIMD4<Double>\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc simd_refract(simd_double4, simd_double4, Double) -> simd_double4\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta.\nfunc refract(SIMD4<Double>, n: SIMD4<Double>, eta: Double) -> SIMD4<Double>\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta."
  },
  {
    "title": "normalize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424278-normalize",
    "html": "Parameters\nx\n\nThe vector to normalize.\n\nReturn Value\n\nThe normalized vector.\n\nDiscussion\n\nThis function returns an undefined value if the supplied vector has zero length or is poorly scaled such that an intermediate computation overflows or underflows.\n\nSee Also\nGeometry Functions\nfunc simd_dot(simd_double4, simd_double4) -> Double\nReturns the dot product of two vectors.\nfunc dot(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double4) -> simd_double4\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double4) -> simd_double4\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double4) -> simd_double4\nReturns the precise normalized vector.\nfunc simd_project(simd_double4, simd_double4) -> simd_double4\nReturns the first vector projected onto the second vector.\nfunc project(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double4, simd_double4) -> simd_double4\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double4, simd_double4) -> simd_double4\nReturns the precise projected vector.\nfunc simd_reflect(simd_double4, simd_double4) -> simd_double4\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc reflect(SIMD4<Double>, n: SIMD4<Double>) -> SIMD4<Double>\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc simd_refract(simd_double4, simd_double4, Double) -> simd_double4\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta.\nfunc refract(SIMD4<Double>, n: SIMD4<Double>, eta: Double) -> SIMD4<Double>\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta."
  },
  {
    "title": "simd_normalize(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896574-simd_normalize",
    "html": "Parameters\n__x\n\nThe vector to normalize.\n\nReturn Value\n\nThe normalized vector.\n\nDiscussion\n\nThis function returns an undefined value if the supplied vector has zero length or is poorly scaled such that an intermediate computation overflows or underflows.\n\nSee Also\nGeometry Functions\nfunc simd_dot(simd_double4, simd_double4) -> Double\nReturns the dot product of two vectors.\nfunc dot(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the dot product of two vectors.\nfunc normalize(SIMD4<Double>) -> SIMD4<Double>\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double4) -> simd_double4\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double4) -> simd_double4\nReturns the precise normalized vector.\nfunc simd_project(simd_double4, simd_double4) -> simd_double4\nReturns the first vector projected onto the second vector.\nfunc project(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double4, simd_double4) -> simd_double4\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double4, simd_double4) -> simd_double4\nReturns the precise projected vector.\nfunc simd_reflect(simd_double4, simd_double4) -> simd_double4\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc reflect(SIMD4<Double>, n: SIMD4<Double>) -> SIMD4<Double>\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc simd_refract(simd_double4, simd_double4, Double) -> simd_double4\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta.\nfunc refract(SIMD4<Double>, n: SIMD4<Double>, eta: Double) -> SIMD4<Double>\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta."
  },
  {
    "title": "dot(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424326-dot",
    "html": "See Also\nGeometry Functions\nfunc simd_dot(simd_double4, simd_double4) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double4) -> simd_double4\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc normalize(SIMD4<Double>) -> SIMD4<Double>\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double4) -> simd_double4\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double4) -> simd_double4\nReturns the precise normalized vector.\nfunc simd_project(simd_double4, simd_double4) -> simd_double4\nReturns the first vector projected onto the second vector.\nfunc project(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double4, simd_double4) -> simd_double4\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double4, simd_double4) -> simd_double4\nReturns the precise projected vector.\nfunc simd_reflect(simd_double4, simd_double4) -> simd_double4\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc reflect(SIMD4<Double>, n: SIMD4<Double>) -> SIMD4<Double>\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc simd_refract(simd_double4, simd_double4, Double) -> simd_double4\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta.\nfunc refract(SIMD4<Double>, n: SIMD4<Double>, eta: Double) -> SIMD4<Double>\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta."
  },
  {
    "title": "simd_dot(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896719-simd_dot",
    "html": "See Also\nGeometry Functions\nfunc dot(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double4) -> simd_double4\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc normalize(SIMD4<Double>) -> SIMD4<Double>\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double4) -> simd_double4\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double4) -> simd_double4\nReturns the precise normalized vector.\nfunc simd_project(simd_double4, simd_double4) -> simd_double4\nReturns the first vector projected onto the second vector.\nfunc project(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double4, simd_double4) -> simd_double4\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double4, simd_double4) -> simd_double4\nReturns the precise projected vector.\nfunc simd_reflect(simd_double4, simd_double4) -> simd_double4\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc reflect(SIMD4<Double>, n: SIMD4<Double>) -> SIMD4<Double>\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc simd_refract(simd_double4, simd_double4, Double) -> simd_double4\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta.\nfunc refract(SIMD4<Double>, n: SIMD4<Double>, eta: Double) -> SIMD4<Double>\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta."
  },
  {
    "title": "log10(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804722-log10",
    "html": "See Also\nExponential and Logarithmic Functions\nfunc exp(simd_double4) -> simd_double4\nReturns e raised to the power of each element in a vector.\nfunc exp2(simd_double4) -> simd_double4\nReturns 2 raised to the power of each element in a vector.\nfunc exp10(simd_double4) -> simd_double4\nReturns 10 raised to the power of each element in a vector.\nfunc expm1(simd_double4) -> simd_double4\nReturns eˣ-1 for each element in a vector.\nfunc log(simd_double4) -> simd_double4\nReturns the natural logarithm of each element in a vector.\nfunc log2(simd_double4) -> simd_double4\nReturns the base 2 logarithm of each element in a vector.\nfunc log1p(simd_double4) -> simd_double4\nReturns log(1+x) of each element in a vector."
  },
  {
    "title": "log(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804713-log",
    "html": "See Also\nExponential and Logarithmic Functions\nfunc exp(simd_double4) -> simd_double4\nReturns e raised to the power of each element in a vector.\nfunc exp2(simd_double4) -> simd_double4\nReturns 2 raised to the power of each element in a vector.\nfunc exp10(simd_double4) -> simd_double4\nReturns 10 raised to the power of each element in a vector.\nfunc expm1(simd_double4) -> simd_double4\nReturns eˣ-1 for each element in a vector.\nfunc log2(simd_double4) -> simd_double4\nReturns the base 2 logarithm of each element in a vector.\nfunc log10(simd_double4) -> simd_double4\nReturns the base 10 logarithm of each element in a vector.\nfunc log1p(simd_double4) -> simd_double4\nReturns log(1+x) of each element in a vector."
  },
  {
    "title": "log2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804740-log2",
    "html": "See Also\nExponential and Logarithmic Functions\nfunc exp(simd_double4) -> simd_double4\nReturns e raised to the power of each element in a vector.\nfunc exp2(simd_double4) -> simd_double4\nReturns 2 raised to the power of each element in a vector.\nfunc exp10(simd_double4) -> simd_double4\nReturns 10 raised to the power of each element in a vector.\nfunc expm1(simd_double4) -> simd_double4\nReturns eˣ-1 for each element in a vector.\nfunc log(simd_double4) -> simd_double4\nReturns the natural logarithm of each element in a vector.\nfunc log10(simd_double4) -> simd_double4\nReturns the base 10 logarithm of each element in a vector.\nfunc log1p(simd_double4) -> simd_double4\nReturns log(1+x) of each element in a vector."
  },
  {
    "title": "exp10(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804614-exp10",
    "html": "See Also\nExponential and Logarithmic Functions\nfunc exp(simd_double4) -> simd_double4\nReturns e raised to the power of each element in a vector.\nfunc exp2(simd_double4) -> simd_double4\nReturns 2 raised to the power of each element in a vector.\nfunc expm1(simd_double4) -> simd_double4\nReturns eˣ-1 for each element in a vector.\nfunc log(simd_double4) -> simd_double4\nReturns the natural logarithm of each element in a vector.\nfunc log2(simd_double4) -> simd_double4\nReturns the base 2 logarithm of each element in a vector.\nfunc log10(simd_double4) -> simd_double4\nReturns the base 10 logarithm of each element in a vector.\nfunc log1p(simd_double4) -> simd_double4\nReturns log(1+x) of each element in a vector."
  },
  {
    "title": "exp2(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804623-exp2",
    "html": "See Also\nExponential and Logarithmic Functions\nfunc exp(simd_double4) -> simd_double4\nReturns e raised to the power of each element in a vector.\nfunc exp10(simd_double4) -> simd_double4\nReturns 10 raised to the power of each element in a vector.\nfunc expm1(simd_double4) -> simd_double4\nReturns eˣ-1 for each element in a vector.\nfunc log(simd_double4) -> simd_double4\nReturns the natural logarithm of each element in a vector.\nfunc log2(simd_double4) -> simd_double4\nReturns the base 2 logarithm of each element in a vector.\nfunc log10(simd_double4) -> simd_double4\nReturns the base 10 logarithm of each element in a vector.\nfunc log1p(simd_double4) -> simd_double4\nReturns log(1+x) of each element in a vector."
  },
  {
    "title": "exp(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804605-exp",
    "html": "See Also\nExponential and Logarithmic Functions\nfunc exp2(simd_double4) -> simd_double4\nReturns 2 raised to the power of each element in a vector.\nfunc exp10(simd_double4) -> simd_double4\nReturns 10 raised to the power of each element in a vector.\nfunc expm1(simd_double4) -> simd_double4\nReturns eˣ-1 for each element in a vector.\nfunc log(simd_double4) -> simd_double4\nReturns the natural logarithm of each element in a vector.\nfunc log2(simd_double4) -> simd_double4\nReturns the base 2 logarithm of each element in a vector.\nfunc log10(simd_double4) -> simd_double4\nReturns the base 10 logarithm of each element in a vector.\nfunc log1p(simd_double4) -> simd_double4\nReturns log(1+x) of each element in a vector."
  },
  {
    "title": "tanpi(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804834-tanpi",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double4) -> simd_double4\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double4) -> simd_double4\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double4) -> simd_double4\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double4, simd_double4) -> simd_double4\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double4) -> simd_double4\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double4) -> simd_double4\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector."
  },
  {
    "title": "floor(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425378-floor",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double4) -> simd_double4\nReturns the cube root of each element in a vector.\nfunc ceil(SIMD4<Double>) -> SIMD4<Double>\nReturns the ceiling of each element in a vector.\nfunc erf(simd_double4) -> simd_double4\nReturns the error function for each element in a vector.\nfunc erfc(simd_double4) -> simd_double4\nReturns the complementary error function for each element in a vector.\nfunc fma(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double4, simd_double4) -> simd_double4\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double4, simd_double4) -> simd_double4\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double4) -> simd_double4\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double4, simd_double4) -> simd_double4\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double4, simd_double4) -> simd_double4\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double4) -> simd_double4\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double4) -> simd_double4\nReturns the gamma function for each element in a vector.\nfunc trunc(SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector rounded toward zero to the nearest integer."
  },
  {
    "title": "simd_select(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916737-simd_select",
    "html": "See Also\nLogic Functions\nfunc simd_select(simd_double4, simd_double4, simd_long4) -> simd_double4\nReturns a vector that contains elements from either the first or second parameter, based on the high-order bit of the corresponding element in the third parameter.\nfunc simd_bitselect(simd_double4, simd_double4, simd_long4) -> simd_double4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter.\nfunc simd_bitselect(simd_double4, simd_double4, simd_long4) -> simd_double4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "fmod(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804650-fmod",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double4) -> simd_double4\nReturns the cube root of each element in a vector.\nfunc ceil(SIMD4<Double>) -> SIMD4<Double>\nReturns the ceiling of each element in a vector.\nfunc erf(simd_double4) -> simd_double4\nReturns the error function for each element in a vector.\nfunc erfc(simd_double4) -> simd_double4\nReturns the complementary error function for each element in a vector.\nfunc floor(SIMD4<Double>) -> SIMD4<Double>\nReturns the floor of each element in a vector.\nfunc fma(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc hypot(simd_double4, simd_double4) -> simd_double4\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double4) -> simd_double4\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double4, simd_double4) -> simd_double4\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double4, simd_double4) -> simd_double4\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double4) -> simd_double4\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double4) -> simd_double4\nReturns the gamma function for each element in a vector.\nfunc trunc(SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector rounded toward zero to the nearest integer."
  },
  {
    "title": "fma(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804641-fma",
    "html": "Parameters\nx\n\nThe x in x*y + z.\n\ny\n\nThe y in x*y + z.\n\nz\n\nThe z in x*y + z.\n\nReturn Value\n\nThe result of x*y + z.\n\nSee Also\nMath Functions\nfunc cbrt(simd_double4) -> simd_double4\nReturns the cube root of each element in a vector.\nfunc ceil(SIMD4<Double>) -> SIMD4<Double>\nReturns the ceiling of each element in a vector.\nfunc erf(simd_double4) -> simd_double4\nReturns the error function for each element in a vector.\nfunc erfc(simd_double4) -> simd_double4\nReturns the complementary error function for each element in a vector.\nfunc floor(SIMD4<Double>) -> SIMD4<Double>\nReturns the floor of each element in a vector.\nfunc fmod(simd_double4, simd_double4) -> simd_double4\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double4, simd_double4) -> simd_double4\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double4) -> simd_double4\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double4, simd_double4) -> simd_double4\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double4, simd_double4) -> simd_double4\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double4) -> simd_double4\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double4) -> simd_double4\nReturns the gamma function for each element in a vector.\nfunc trunc(SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector rounded toward zero to the nearest integer."
  },
  {
    "title": "hypot(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804659-hypot",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double4) -> simd_double4\nReturns the cube root of each element in a vector.\nfunc ceil(SIMD4<Double>) -> SIMD4<Double>\nReturns the ceiling of each element in a vector.\nfunc erf(simd_double4) -> simd_double4\nReturns the error function for each element in a vector.\nfunc erfc(simd_double4) -> simd_double4\nReturns the complementary error function for each element in a vector.\nfunc floor(SIMD4<Double>) -> SIMD4<Double>\nReturns the floor of each element in a vector.\nfunc fma(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double4, simd_double4) -> simd_double4\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc lgamma(simd_double4) -> simd_double4\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double4, simd_double4) -> simd_double4\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double4, simd_double4) -> simd_double4\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double4) -> simd_double4\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double4) -> simd_double4\nReturns the gamma function for each element in a vector.\nfunc trunc(SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector rounded toward zero to the nearest integer."
  },
  {
    "title": "simd_muladd(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896400-simd_muladd",
    "html": "Parameters\nx\n\nThe x in x*y + z.\n\ny\n\nThe y in x*y + z.\n\nz\n\nThe z in x*y + z.\n\nReturn Value\n\nThe result of x*y + z.\n\nSee Also\nMath Functions\nfunc cbrt(simd_double4) -> simd_double4\nReturns the cube root of each element in a vector.\nfunc ceil(SIMD4<Double>) -> SIMD4<Double>\nReturns the ceiling of each element in a vector.\nfunc erf(simd_double4) -> simd_double4\nReturns the error function for each element in a vector.\nfunc erfc(simd_double4) -> simd_double4\nReturns the complementary error function for each element in a vector.\nfunc floor(SIMD4<Double>) -> SIMD4<Double>\nReturns the floor of each element in a vector.\nfunc fma(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double4, simd_double4) -> simd_double4\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double4, simd_double4) -> simd_double4\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double4) -> simd_double4\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double4, simd_double4) -> simd_double4\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double4, simd_double4) -> simd_double4\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double4) -> simd_double4\nReturns each element in a vector rounded to the nearest integer.\nfunc tgamma(simd_double4) -> simd_double4\nReturns the gamma function for each element in a vector.\nfunc trunc(SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector rounded toward zero to the nearest integer."
  },
  {
    "title": "round(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804776-round",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double4) -> simd_double4\nReturns the cube root of each element in a vector.\nfunc ceil(SIMD4<Double>) -> SIMD4<Double>\nReturns the ceiling of each element in a vector.\nfunc erf(simd_double4) -> simd_double4\nReturns the error function for each element in a vector.\nfunc erfc(simd_double4) -> simd_double4\nReturns the complementary error function for each element in a vector.\nfunc floor(SIMD4<Double>) -> SIMD4<Double>\nReturns the floor of each element in a vector.\nfunc fma(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double4, simd_double4) -> simd_double4\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double4, simd_double4) -> simd_double4\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double4) -> simd_double4\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double4, simd_double4) -> simd_double4\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double4, simd_double4) -> simd_double4\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc simd_muladd(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double4) -> simd_double4\nReturns the gamma function for each element in a vector.\nfunc trunc(SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector rounded toward zero to the nearest integer."
  },
  {
    "title": "atan2(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804533-atan2",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double4) -> simd_double4\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double4) -> simd_double4\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double4) -> simd_double4\nReturns the arctangent of each element in a vector.\nfunc cos(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double4) -> simd_double4\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double4) -> simd_double4\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "asin(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804506-asin",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double4) -> simd_double4\nReturns the arccosine of each element in a vector.\nfunc atan(simd_double4) -> simd_double4\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double4, simd_double4) -> simd_double4\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double4) -> simd_double4\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double4) -> simd_double4\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "sincos(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/4130680-sincos",
    "html": "Parameters\nx\n\nThe source vector.\n\nReturn Value\n\nA two-element tuple. The first element contains the sines, and the second element contains the cosines.\n\nSee Also\nTrigonometric Functions\nfunc acos(simd_double4) -> simd_double4\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double4) -> simd_double4\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double4) -> simd_double4\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double4, simd_double4) -> simd_double4\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double4) -> simd_double4\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double4) -> simd_double4\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincospi(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "simd_bitselect(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2916692-simd_bitselect",
    "html": "See Also\nLogic Functions\nfunc simd_select(simd_double4, simd_double4, simd_long4) -> simd_double4\nReturns a vector that contains elements from either the first or second parameter, based on the high-order bit of the corresponding element in the third parameter.\nfunc simd_select(simd_double4, simd_double4, simd_long4) -> simd_double4\nReturns a vector that contains elements from either the first or second parameter, based on the high-order bit of the corresponding element in the third parameter.\nfunc simd_bitselect(simd_double4, simd_double4, simd_long4) -> simd_double4\nReturns a vector that contains elements from either the first or second parameter, based on the corresponding element in the third parameter."
  },
  {
    "title": "sincospi(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/4130689-sincospi",
    "html": "Parameters\nx\n\nThe source vector.\n\nReturn Value\n\nA two-element tuple. The first element contains the sines, and the second element contains the cosines.\n\nSee Also\nTrigonometric Functions\nfunc acos(simd_double4) -> simd_double4\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double4) -> simd_double4\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double4) -> simd_double4\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double4, simd_double4) -> simd_double4\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double4) -> simd_double4\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double4) -> simd_double4\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector.\nfunc tan(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "sinpi(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804807-sinpi",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double4) -> simd_double4\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double4) -> simd_double4\nReturns the arcsine of each element in a vector.\nfunc atan(simd_double4) -> simd_double4\nReturns the arctangent of each element in a vector.\nfunc atan2(simd_double4, simd_double4) -> simd_double4\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double4) -> simd_double4\nReturns the sine of each element in a vector.\nfunc sincos(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "sinh(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804798-sinh",
    "html": "See Also\nHyperbolic Functions\nfunc acosh(simd_double4) -> simd_double4\nReturns the inverse hyperbolic cosine of each element in a vector.\nfunc asinh(simd_double4) -> simd_double4\nReturns the inverse hyperbolic sine of each element in a vector.\nfunc atanh(simd_double4) -> simd_double4\nReturns the inverse hyperbolic tangent of each element in a vector.\nfunc cosh(simd_double4) -> simd_double4\nReturns the hyperbolic cosine of each element in a vector.\nfunc tanh(simd_double4) -> simd_double4\nReturns the hyperbolic tangent of each element in a vector."
  },
  {
    "title": "atan(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804524-atan",
    "html": "See Also\nTrigonometric Functions\nfunc acos(simd_double4) -> simd_double4\nReturns the arccosine of each element in a vector.\nfunc asin(simd_double4) -> simd_double4\nReturns the arcsine of each element in a vector.\nfunc atan2(simd_double4, simd_double4) -> simd_double4\nReturns the arctangent of each pair of corresponding elements in two vectors.\nfunc cos(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector.\nfunc cospi(simd_double4) -> simd_double4\nReturns the cosine of each element in a vector multiplied by pi.\nfunc sin(simd_double4) -> simd_double4\nReturns the sine of each element in a vector.\nfunc sinpi(simd_double4) -> simd_double4\nReturns the sine of each element in a vector multiplied by pi.\nfunc sincos(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector.\nfunc sincospi(simd_double4) -> (sin: simd_double4, cos: simd_double4)\nReturns the sine and cosine of each element in a vector multiplied by pi.\nfunc tan(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector.\nfunc tanpi(simd_double4) -> simd_double4\nReturns the tangent of each element in a vector multiplied by pi."
  },
  {
    "title": "tanh(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804825-tanh",
    "html": "See Also\nHyperbolic Functions\nfunc acosh(simd_double4) -> simd_double4\nReturns the inverse hyperbolic cosine of each element in a vector.\nfunc asinh(simd_double4) -> simd_double4\nReturns the inverse hyperbolic sine of each element in a vector.\nfunc atanh(simd_double4) -> simd_double4\nReturns the inverse hyperbolic tangent of each element in a vector.\nfunc cosh(simd_double4) -> simd_double4\nReturns the hyperbolic cosine of each element in a vector.\nfunc sinh(simd_double4) -> simd_double4\nReturns the hyperbolic sine of each element in a vector."
  },
  {
    "title": "tgamma(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804843-tgamma",
    "html": "See Also\nMath Functions\nfunc cbrt(simd_double4) -> simd_double4\nReturns the cube root of each element in a vector.\nfunc ceil(SIMD4<Double>) -> SIMD4<Double>\nReturns the ceiling of each element in a vector.\nfunc erf(simd_double4) -> simd_double4\nReturns the error function for each element in a vector.\nfunc erfc(simd_double4) -> simd_double4\nReturns the complementary error function for each element in a vector.\nfunc floor(SIMD4<Double>) -> SIMD4<Double>\nReturns the floor of each element in a vector.\nfunc fma(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double4, simd_double4) -> simd_double4\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double4, simd_double4) -> simd_double4\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double4) -> simd_double4\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double4, simd_double4) -> simd_double4\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double4, simd_double4) -> simd_double4\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double4) -> simd_double4\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc trunc(SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector rounded toward zero to the nearest integer."
  },
  {
    "title": "cbrt(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804551-cbrt",
    "html": "See Also\nMath Functions\nfunc ceil(SIMD4<Double>) -> SIMD4<Double>\nReturns the ceiling of each element in a vector.\nfunc erf(simd_double4) -> simd_double4\nReturns the error function for each element in a vector.\nfunc erfc(simd_double4) -> simd_double4\nReturns the complementary error function for each element in a vector.\nfunc floor(SIMD4<Double>) -> SIMD4<Double>\nReturns the floor of each element in a vector.\nfunc fma(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc fmod(simd_double4, simd_double4) -> simd_double4\nReturns the modulus after dividing each element in a vector by the corresponding element in a second vector.\nfunc hypot(simd_double4, simd_double4) -> simd_double4\nReturns the hypotenuse of a right-angled triangle with the sides that are adjacent to the right angle that two vectors define.\nfunc lgamma(simd_double4) -> simd_double4\nReturns the natural logarithm of the absolute value of the gamma function of each element in a vector.\nfunc nextafter(simd_double4, simd_double4) -> simd_double4\nReturns the next representable value of each element in a vector in the direction of the corresponding element in a second vector.\nfunc pow(simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector raised to the power of the corresponding element in a second vector.\nfunc remainder(simd_double4, simd_double4) -> simd_double4\nReturns the remainder after dividing each element in an array by the corresponding element in a second array of double-precision values.\nfunc round(simd_double4) -> simd_double4\nReturns each element in a vector rounded to the nearest integer.\nfunc simd_muladd(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns the multiply-add result for corresponding elements in three vectors.\nfunc tgamma(simd_double4) -> simd_double4\nReturns the gamma function for each element in a vector.\nfunc trunc(SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector rounded toward zero to the nearest integer."
  },
  {
    "title": "cosh(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/3804569-cosh",
    "html": "See Also\nHyperbolic Functions\nfunc acosh(simd_double4) -> simd_double4\nReturns the inverse hyperbolic cosine of each element in a vector.\nfunc asinh(simd_double4) -> simd_double4\nReturns the inverse hyperbolic sine of each element in a vector.\nfunc atanh(simd_double4) -> simd_double4\nReturns the inverse hyperbolic tangent of each element in a vector.\nfunc sinh(simd_double4) -> simd_double4\nReturns the hyperbolic sine of each element in a vector.\nfunc tanh(simd_double4) -> simd_double4\nReturns the hyperbolic tangent of each element in a vector."
  },
  {
    "title": "vector4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918998-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_double4(Double) -> simd_double4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_double4(Double, Double, Double, Double) -> simd_double4\nReturns a new vector from the specified scalar values.\nfunc simd_make_double4_undef(Double) -> simd_double4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_double4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883306-simd_make_double4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_double4(Double, Double, Double, Double) -> simd_double4\nReturns a new vector from the specified scalar values.\nfunc vector4(Double, Double, Double, Double) -> simd_double4\nReturns a new vector from the specified scalar values.\nfunc simd_make_double4_undef(Double) -> simd_double4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "simd_make_double4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883558-simd_make_double4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_double4(simd_double3) -> simd_double4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_double4(simd_double4) -> simd_double4\nReturns a new vector from the specified vector.\nfunc simd_make_double4(simd_double8) -> simd_double4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_double4(simd_double2, simd_double2) -> simd_double4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_double2, simd_double2) -> simd_double4\nReturns a new vector from the specified vectors.\nfunc simd_make_double4_undef(simd_double2) -> simd_double4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_double4_undef(simd_double3) -> simd_double4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_norm_one(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896503-simd_norm_one",
    "html": "See Also\nVector Norm Functions\nfunc norm_one(SIMD4<Double>) -> Double\nReturns the sum of the absolute values of a vector.\nfunc simd_norm_inf(simd_double4) -> Double\nReturns the maximum absolute value of a vector.\nfunc norm_inf(SIMD4<Double>) -> Double\nReturns the maximum absolute value of a vector."
  },
  {
    "title": "project(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424248-project",
    "html": "See Also\nGeometry Functions\nfunc simd_dot(simd_double4, simd_double4) -> Double\nReturns the dot product of two vectors.\nfunc dot(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double4) -> simd_double4\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc normalize(SIMD4<Double>) -> SIMD4<Double>\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double4) -> simd_double4\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double4) -> simd_double4\nReturns the precise normalized vector.\nfunc simd_project(simd_double4, simd_double4) -> simd_double4\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double4, simd_double4) -> simd_double4\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double4, simd_double4) -> simd_double4\nReturns the precise projected vector.\nfunc simd_reflect(simd_double4, simd_double4) -> simd_double4\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc reflect(SIMD4<Double>, n: SIMD4<Double>) -> SIMD4<Double>\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc simd_refract(simd_double4, simd_double4, Double) -> simd_double4\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta.\nfunc refract(SIMD4<Double>, n: SIMD4<Double>, eta: Double) -> SIMD4<Double>\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta."
  },
  {
    "title": "recip(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425012-recip",
    "html": "See Also\nReciprocal and Reciprocal Square Root Functions\nfunc simd_recip(simd_double4) -> simd_double4\nReturns the reciprocal of each element in a vector.\nfunc simd_rsqrt(simd_double4) -> simd_double4\nReturns the reciprocal square root of each element in a vector.\nfunc rsqrt(SIMD4<Double>) -> SIMD4<Double>\nReturns the reciprocal square root of each element in a vector.\nfunc simd_precise_recip(simd_double4) -> simd_double4\nReturns the precise reciprocal of each element in a vector.\nfunc simd_precise_rsqrt(simd_double4) -> simd_double4\nReturns the precise reciprocal square root of each element in a vector.\nfunc simd_fast_recip(simd_double4) -> simd_double4\nReturns the fast reciprocal of each element in a vector.\nfunc simd_fast_rsqrt(simd_double4) -> simd_double4\nReturns the fast reciprocal square root of each element in a vector."
  },
  {
    "title": "simd_fast_recip(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896501-simd_fast_recip",
    "html": "See Also\nReciprocal and Reciprocal Square Root Functions\nfunc simd_recip(simd_double4) -> simd_double4\nReturns the reciprocal of each element in a vector.\nfunc recip(SIMD4<Double>) -> SIMD4<Double>\nReturns the reciprocal of each element in a vector.\nfunc simd_rsqrt(simd_double4) -> simd_double4\nReturns the reciprocal square root of each element in a vector.\nfunc rsqrt(SIMD4<Double>) -> SIMD4<Double>\nReturns the reciprocal square root of each element in a vector.\nfunc simd_precise_recip(simd_double4) -> simd_double4\nReturns the precise reciprocal of each element in a vector.\nfunc simd_precise_rsqrt(simd_double4) -> simd_double4\nReturns the precise reciprocal square root of each element in a vector.\nfunc simd_fast_rsqrt(simd_double4) -> simd_double4\nReturns the fast reciprocal square root of each element in a vector."
  },
  {
    "title": "rsqrt(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424737-rsqrt",
    "html": "See Also\nReciprocal and Reciprocal Square Root Functions\nfunc simd_recip(simd_double4) -> simd_double4\nReturns the reciprocal of each element in a vector.\nfunc recip(SIMD4<Double>) -> SIMD4<Double>\nReturns the reciprocal of each element in a vector.\nfunc simd_rsqrt(simd_double4) -> simd_double4\nReturns the reciprocal square root of each element in a vector.\nfunc simd_precise_recip(simd_double4) -> simd_double4\nReturns the precise reciprocal of each element in a vector.\nfunc simd_precise_rsqrt(simd_double4) -> simd_double4\nReturns the precise reciprocal square root of each element in a vector.\nfunc simd_fast_recip(simd_double4) -> simd_double4\nReturns the fast reciprocal of each element in a vector.\nfunc simd_fast_rsqrt(simd_double4) -> simd_double4\nReturns the fast reciprocal square root of each element in a vector."
  },
  {
    "title": "refract(_:n:eta:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424470-refract",
    "html": "See Also\nGeometry Functions\nfunc simd_dot(simd_double4, simd_double4) -> Double\nReturns the dot product of two vectors.\nfunc dot(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double4) -> simd_double4\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc normalize(SIMD4<Double>) -> SIMD4<Double>\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double4) -> simd_double4\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double4) -> simd_double4\nReturns the precise normalized vector.\nfunc simd_project(simd_double4, simd_double4) -> simd_double4\nReturns the first vector projected onto the second vector.\nfunc project(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double4, simd_double4) -> simd_double4\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double4, simd_double4) -> simd_double4\nReturns the precise projected vector.\nfunc simd_reflect(simd_double4, simd_double4) -> simd_double4\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc reflect(SIMD4<Double>, n: SIMD4<Double>) -> SIMD4<Double>\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc simd_refract(simd_double4, simd_double4, Double) -> simd_double4\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta."
  },
  {
    "title": "simd_fast_length(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896436-simd_fast_length",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double4) -> Double\nReturns the length of a vector.\nfunc length(SIMD4<Double>) -> Double\nReturns the length of a vector.\nfunc simd_precise_length(simd_double4) -> Double\nReturns the precise length of a vector.\nfunc simd_length_squared(simd_double4) -> Double\nReturns the square of the length of a vector.\nfunc length_squared(SIMD4<Double>) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors.\nfunc simd_fast_distance(simd_double4, simd_double4) -> Double\nReturns the fast distance between two vectors.\nfunc simd_precise_distance(simd_double4, simd_double4) -> Double\nReturns the precise distance between two vectors.\nfunc simd_distance_squared(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance_squared(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "simd_precise_project(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896770-simd_precise_project",
    "html": "See Also\nGeometry Functions\nfunc simd_dot(simd_double4, simd_double4) -> Double\nReturns the dot product of two vectors.\nfunc dot(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double4) -> simd_double4\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc normalize(SIMD4<Double>) -> SIMD4<Double>\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double4) -> simd_double4\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double4) -> simd_double4\nReturns the precise normalized vector.\nfunc simd_project(simd_double4, simd_double4) -> simd_double4\nReturns the first vector projected onto the second vector.\nfunc project(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double4, simd_double4) -> simd_double4\nReturns the fast projected vector.\nfunc simd_reflect(simd_double4, simd_double4) -> simd_double4\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc reflect(SIMD4<Double>, n: SIMD4<Double>) -> SIMD4<Double>\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc simd_refract(simd_double4, simd_double4, Double) -> simd_double4\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta.\nfunc refract(SIMD4<Double>, n: SIMD4<Double>, eta: Double) -> SIMD4<Double>\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta."
  },
  {
    "title": "mix(_:_:t:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424778-mix",
    "html": "See Also\nInterpolation Functions\nfunc simd_smoothstep(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns an elementwise smoothly interpolated value between two vectors.\nfunc smoothstep(SIMD4<Double>, edge0: SIMD4<Double>, edge1: SIMD4<Double>) -> SIMD4<Double>\nReturns an elementwise smoothly interpolated value between two vectors.\nfunc simd_mix(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns an elementwise linearly interpolated value between two vectors.\nfunc mix(SIMD4<Double>, SIMD4<Double>, t: Double) -> SIMD4<Double>\nReturns an elementwise linearly interpolated value between two vectors."
  },
  {
    "title": "simd_norm_inf(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896623-simd_norm_inf",
    "html": "See Also\nVector Norm Functions\nfunc simd_norm_one(simd_double4) -> Double\nReturns the sum of the absolute values of a vector.\nfunc norm_one(SIMD4<Double>) -> Double\nReturns the sum of the absolute values of a vector.\nfunc norm_inf(SIMD4<Double>) -> Double\nReturns the maximum absolute value of a vector."
  },
  {
    "title": "simd_min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896476-simd_min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_double4, simd_double4) -> simd_double4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Double>, Double) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc fmax(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc min(SIMD4<Double>, Double) -> SIMD4<Double>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the minimum value of each element in a vector.\nfunc fmin(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "length(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425728-length",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double4) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double4) -> Double\nReturns the fast length of a vector.\nfunc simd_precise_length(simd_double4) -> Double\nReturns the precise length of a vector.\nfunc simd_length_squared(simd_double4) -> Double\nReturns the square of the length of a vector.\nfunc length_squared(SIMD4<Double>) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors.\nfunc simd_fast_distance(simd_double4, simd_double4) -> Double\nReturns the fast distance between two vectors.\nfunc simd_precise_distance(simd_double4, simd_double4) -> Double\nReturns the precise distance between two vectors.\nfunc simd_distance_squared(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance_squared(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "simd_reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896771-simd_reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_add(simd_double4) -> Double\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD4<Double>) -> Double\nReturns the sum of all elements in a vector.\nfunc reduce_max(SIMD4<Double>) -> Double\nReturns the maximum value in a vector.\nfunc simd_reduce_min(simd_double4) -> Double\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD4<Double>) -> Double\nReturns the minimum value in a vector."
  },
  {
    "title": "simd_precise_length(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896609-simd_precise_length",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double4) -> Double\nReturns the length of a vector.\nfunc length(SIMD4<Double>) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double4) -> Double\nReturns the fast length of a vector.\nfunc simd_length_squared(simd_double4) -> Double\nReturns the square of the length of a vector.\nfunc length_squared(SIMD4<Double>) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors.\nfunc simd_fast_distance(simd_double4, simd_double4) -> Double\nReturns the fast distance between two vectors.\nfunc simd_precise_distance(simd_double4, simd_double4) -> Double\nReturns the precise distance between two vectors.\nfunc simd_distance_squared(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance_squared(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1426273-min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_double4, simd_double4) -> simd_double4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Double>, Double) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc fmax(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_double4, simd_double4) -> simd_double4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the minimum value of each element in a vector.\nfunc fmin(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "reflect(_:n:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425340-reflect",
    "html": "See Also\nGeometry Functions\nfunc simd_dot(simd_double4, simd_double4) -> Double\nReturns the dot product of two vectors.\nfunc dot(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double4) -> simd_double4\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc normalize(SIMD4<Double>) -> SIMD4<Double>\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double4) -> simd_double4\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double4) -> simd_double4\nReturns the precise normalized vector.\nfunc simd_project(simd_double4, simd_double4) -> simd_double4\nReturns the first vector projected onto the second vector.\nfunc project(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double4, simd_double4) -> simd_double4\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double4, simd_double4) -> simd_double4\nReturns the precise projected vector.\nfunc simd_reflect(simd_double4, simd_double4) -> simd_double4\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc simd_refract(simd_double4, simd_double4, Double) -> simd_double4\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta.\nfunc refract(SIMD4<Double>, n: SIMD4<Double>, eta: Double) -> SIMD4<Double>\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta."
  },
  {
    "title": "simd_fast_project(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896708-simd_fast_project",
    "html": "See Also\nGeometry Functions\nfunc simd_dot(simd_double4, simd_double4) -> Double\nReturns the dot product of two vectors.\nfunc dot(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double4) -> simd_double4\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc normalize(SIMD4<Double>) -> SIMD4<Double>\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double4) -> simd_double4\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double4) -> simd_double4\nReturns the precise normalized vector.\nfunc simd_project(simd_double4, simd_double4) -> simd_double4\nReturns the first vector projected onto the second vector.\nfunc project(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the first vector projected onto the second vector.\nfunc simd_precise_project(simd_double4, simd_double4) -> simd_double4\nReturns the precise projected vector.\nfunc simd_reflect(simd_double4, simd_double4) -> simd_double4\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc reflect(SIMD4<Double>, n: SIMD4<Double>) -> SIMD4<Double>\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc simd_refract(simd_double4, simd_double4, Double) -> simd_double4\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta.\nfunc refract(SIMD4<Double>, n: SIMD4<Double>, eta: Double) -> SIMD4<Double>\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta."
  },
  {
    "title": "min(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425411-min",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_double4, simd_double4) -> simd_double4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Double>, Double) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc fmax(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_double4, simd_double4) -> simd_double4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Double>, Double) -> SIMD4<Double>\nReturns the minimum value of each element in a vector.\nfunc fmin(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_refract(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896410-simd_refract",
    "html": "See Also\nGeometry Functions\nfunc simd_dot(simd_double4, simd_double4) -> Double\nReturns the dot product of two vectors.\nfunc dot(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the dot product of two vectors.\nfunc simd_normalize(simd_double4) -> simd_double4\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc normalize(SIMD4<Double>) -> SIMD4<Double>\nReturns a vector pointing in the same direction of the supplied vector with a length of 1.\nfunc simd_fast_normalize(simd_double4) -> simd_double4\nReturns the fast normalized vector.\nfunc simd_precise_normalize(simd_double4) -> simd_double4\nReturns the precise normalized vector.\nfunc simd_project(simd_double4, simd_double4) -> simd_double4\nReturns the first vector projected onto the second vector.\nfunc project(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the first vector projected onto the second vector.\nfunc simd_fast_project(simd_double4, simd_double4) -> simd_double4\nReturns the fast projected vector.\nfunc simd_precise_project(simd_double4, simd_double4) -> simd_double4\nReturns the precise projected vector.\nfunc simd_reflect(simd_double4, simd_double4) -> simd_double4\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc reflect(SIMD4<Double>, n: SIMD4<Double>) -> SIMD4<Double>\nReturns the reflection direction of an incident vector and a unit normal vector.\nfunc refract(SIMD4<Double>, n: SIMD4<Double>, eta: Double) -> SIMD4<Double>\nReturns the refraction direction of an incident vector, a unit normal vector, and an index of refraction eta."
  },
  {
    "title": "simd_fast_distance(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896446-simd_fast_distance",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double4) -> Double\nReturns the length of a vector.\nfunc length(SIMD4<Double>) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double4) -> Double\nReturns the fast length of a vector.\nfunc simd_precise_length(simd_double4) -> Double\nReturns the precise length of a vector.\nfunc simd_length_squared(simd_double4) -> Double\nReturns the square of the length of a vector.\nfunc length_squared(SIMD4<Double>) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors.\nfunc simd_precise_distance(simd_double4, simd_double4) -> Double\nReturns the precise distance between two vectors.\nfunc simd_distance_squared(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance_squared(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "simd_recip(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896645-simd_recip",
    "html": "See Also\nReciprocal and Reciprocal Square Root Functions\nfunc recip(SIMD4<Double>) -> SIMD4<Double>\nReturns the reciprocal of each element in a vector.\nfunc simd_rsqrt(simd_double4) -> simd_double4\nReturns the reciprocal square root of each element in a vector.\nfunc rsqrt(SIMD4<Double>) -> SIMD4<Double>\nReturns the reciprocal square root of each element in a vector.\nfunc simd_precise_recip(simd_double4) -> simd_double4\nReturns the precise reciprocal of each element in a vector.\nfunc simd_precise_rsqrt(simd_double4) -> simd_double4\nReturns the precise reciprocal square root of each element in a vector.\nfunc simd_fast_recip(simd_double4) -> simd_double4\nReturns the fast reciprocal of each element in a vector.\nfunc simd_fast_rsqrt(simd_double4) -> simd_double4\nReturns the fast reciprocal square root of each element in a vector."
  },
  {
    "title": "simd_length_squared(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896764-simd_length_squared",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double4) -> Double\nReturns the length of a vector.\nfunc length(SIMD4<Double>) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double4) -> Double\nReturns the fast length of a vector.\nfunc simd_precise_length(simd_double4) -> Double\nReturns the precise length of a vector.\nfunc length_squared(SIMD4<Double>) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors.\nfunc simd_fast_distance(simd_double4, simd_double4) -> Double\nReturns the fast distance between two vectors.\nfunc simd_precise_distance(simd_double4, simd_double4) -> Double\nReturns the precise distance between two vectors.\nfunc simd_distance_squared(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance_squared(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "distance(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424334-distance",
    "html": "See Also\nLength and Distance Functions\nfunc simd_length(simd_double4) -> Double\nReturns the length of a vector.\nfunc length(SIMD4<Double>) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double4) -> Double\nReturns the fast length of a vector.\nfunc simd_precise_length(simd_double4) -> Double\nReturns the precise length of a vector.\nfunc simd_length_squared(simd_double4) -> Double\nReturns the square of the length of a vector.\nfunc length_squared(SIMD4<Double>) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc simd_fast_distance(simd_double4, simd_double4) -> Double\nReturns the fast distance between two vectors.\nfunc simd_precise_distance(simd_double4, simd_double4) -> Double\nReturns the precise distance between two vectors.\nfunc simd_distance_squared(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance_squared(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "simd_length(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896603-simd_length",
    "html": "See Also\nLength and Distance Functions\nfunc length(SIMD4<Double>) -> Double\nReturns the length of a vector.\nfunc simd_fast_length(simd_double4) -> Double\nReturns the fast length of a vector.\nfunc simd_precise_length(simd_double4) -> Double\nReturns the precise length of a vector.\nfunc simd_length_squared(simd_double4) -> Double\nReturns the square of the length of a vector.\nfunc length_squared(SIMD4<Double>) -> Double\nReturns the square of the length of a vector.\nfunc simd_distance(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors.\nfunc simd_fast_distance(simd_double4, simd_double4) -> Double\nReturns the fast distance between two vectors.\nfunc simd_precise_distance(simd_double4, simd_double4) -> Double\nReturns the precise distance between two vectors.\nfunc simd_distance_squared(simd_double4, simd_double4) -> Double\nReturns the square of the distance between two vectors.\nfunc distance_squared(SIMD4<Double>, SIMD4<Double>) -> Double\nReturns the square of the distance between two vectors."
  },
  {
    "title": "norm_one(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424069-norm_one",
    "html": "See Also\nVector Norm Functions\nfunc simd_norm_one(simd_double4) -> Double\nReturns the sum of the absolute values of a vector.\nfunc simd_norm_inf(simd_double4) -> Double\nReturns the maximum absolute value of a vector.\nfunc norm_inf(SIMD4<Double>) -> Double\nReturns the maximum absolute value of a vector."
  },
  {
    "title": "max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424735-max",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_double4, simd_double4) -> simd_double4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc fmax(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_double4, simd_double4) -> simd_double4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Double>, Double) -> SIMD4<Double>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the minimum value of each element in a vector.\nfunc fmin(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_max(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896600-simd_max",
    "html": "See Also\nExtrema Functions\nfunc max(SIMD4<Double>, Double) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc fmax(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_double4, simd_double4) -> simd_double4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Double>, Double) -> SIMD4<Double>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the minimum value of each element in a vector.\nfunc fmin(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424501-reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_add(simd_double4) -> Double\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD4<Double>) -> Double\nReturns the sum of all elements in a vector.\nfunc simd_reduce_max(simd_double4) -> Double\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD4<Double>) -> Double\nReturns the maximum value in a vector.\nfunc simd_reduce_min(simd_double4) -> Double\nReturns the minimum value in a vector."
  },
  {
    "title": "reduce_max(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425657-reduce_max",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_add(simd_double4) -> Double\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD4<Double>) -> Double\nReturns the sum of all elements in a vector.\nfunc simd_reduce_max(simd_double4) -> Double\nReturns the maximum value in a vector.\nfunc simd_reduce_min(simd_double4) -> Double\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD4<Double>) -> Double\nReturns the minimum value in a vector."
  },
  {
    "title": "smoothstep(_:edge0:edge1:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425136-smoothstep",
    "html": "See Also\nInterpolation Functions\nfunc simd_smoothstep(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns an elementwise smoothly interpolated value between two vectors.\nfunc simd_mix(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns an elementwise linearly interpolated value between two vectors.\nfunc mix(SIMD4<Double>, SIMD4<Double>, t: Double) -> SIMD4<Double>\nReturns an elementwise linearly interpolated value between two vectors.\nfunc mix(SIMD4<Double>, SIMD4<Double>, t: SIMD4<Double>) -> SIMD4<Double>\nReturns an elementwise linearly interpolated value between two vectors."
  },
  {
    "title": "simd_mix(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896695-simd_mix",
    "html": "See Also\nInterpolation Functions\nfunc simd_smoothstep(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns an elementwise smoothly interpolated value between two vectors.\nfunc smoothstep(SIMD4<Double>, edge0: SIMD4<Double>, edge1: SIMD4<Double>) -> SIMD4<Double>\nReturns an elementwise smoothly interpolated value between two vectors.\nfunc mix(SIMD4<Double>, SIMD4<Double>, t: Double) -> SIMD4<Double>\nReturns an elementwise linearly interpolated value between two vectors.\nfunc mix(SIMD4<Double>, SIMD4<Double>, t: SIMD4<Double>) -> SIMD4<Double>\nReturns an elementwise linearly interpolated value between two vectors."
  },
  {
    "title": "simd_smoothstep(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896514-simd_smoothstep",
    "html": "See Also\nInterpolation Functions\nfunc smoothstep(SIMD4<Double>, edge0: SIMD4<Double>, edge1: SIMD4<Double>) -> SIMD4<Double>\nReturns an elementwise smoothly interpolated value between two vectors.\nfunc simd_mix(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns an elementwise linearly interpolated value between two vectors.\nfunc mix(SIMD4<Double>, SIMD4<Double>, t: Double) -> SIMD4<Double>\nReturns an elementwise linearly interpolated value between two vectors.\nfunc mix(SIMD4<Double>, SIMD4<Double>, t: SIMD4<Double>) -> SIMD4<Double>\nReturns an elementwise linearly interpolated value between two vectors."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883418-simd_equal",
    "html": "See Also\nEquality Functions\nfunc simd_almost_equal_elements(simd_double4x4, simd_double4x4, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_double4x4, simd_double4x4, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified double-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883499-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc matrix_multiply(simd_double2x4, simd_double4x2) -> simd_double4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_double3x4, simd_double4x3) -> simd_double4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_double3x4, simd_double4x3) -> simd_double4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_double4x4, simd_double4x4) -> simd_double4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix.\nfunc matrix_multiply(simd_double4x4, simd_double4x4) -> simd_double4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix."
  },
  {
    "title": "matrix_from_diagonal(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2915091-matrix_from_diagonal",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double4x4) -> simd_double4x4\nReturns the inverse of the specified matrix.\nfunc matrix_from_columns(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_determinant(simd_double4x4) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_double4x4, simd_double4x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_double4x4) -> double4x4\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double4x4)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double4x4\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "matrix_determinant(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914249-matrix_determinant",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double4x4) -> simd_double4x4\nReturns the inverse of the specified matrix.\nfunc matrix_from_columns(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_from_diagonal(SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_equal(simd_double4x4, simd_double4x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_double4x4) -> double4x4\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double4x4)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double4x4\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "matrix_invert(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914018-matrix_invert",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_from_columns(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_from_diagonal(SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double4x4) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_double4x4, simd_double4x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_double4x4) -> double4x4\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double4x4)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double4x4\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "simd_make_double4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896723-simd_make_double4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_double4(simd_double2) -> simd_double4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_double4(simd_double3) -> simd_double4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_double4(simd_double4) -> simd_double4\nReturns a new vector from the specified vector.\nfunc simd_make_double4(simd_double8) -> simd_double4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_double4(simd_double2, simd_double2) -> simd_double4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_double2, simd_double2) -> simd_double4\nReturns a new vector from the specified vectors.\nfunc simd_make_double4_undef(simd_double2) -> simd_double4\nReturns a new vector from the specified two-element vector, and other elements undefined."
  },
  {
    "title": "simd_step(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896530-simd_step",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_double4) -> simd_double4\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD4<Double>) -> SIMD4<Double>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: Double, max: Double) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: SIMD4<Double>, max: SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc simd_fract(simd_double4) -> simd_double4\nReturns the fractional part of each element in a vector.\nfunc fract(SIMD4<Double>) -> SIMD4<Double>\nReturns the fractional part of each element in a vector.\nfunc simd_equal(simd_double4, simd_double4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_sign(simd_double4) -> simd_double4\nReturns the sign of each element in a vector.\nfunc sign(SIMD4<Double>) -> SIMD4<Double>\nReturns the sign of each element in a vector.\nfunc step(SIMD4<Double>, edge: SIMD4<Double>) -> SIMD4<Double>\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "matrix_from_columns(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914155-matrix_from_columns",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double4x4) -> simd_double4x4\nReturns the inverse of the specified matrix.\nfunc matrix_from_diagonal(SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double4x4) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_double4x4, simd_double4x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_double4x4) -> double4x4\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double4x4)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double4x4\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424390-reduce_add",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_add(simd_double4) -> Double\nReturns the sum of all elements in a vector.\nfunc simd_reduce_max(simd_double4) -> Double\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD4<Double>) -> Double\nReturns the maximum value in a vector.\nfunc simd_reduce_min(simd_double4) -> Double\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD4<Double>) -> Double\nReturns the minimum value in a vector."
  },
  {
    "title": "step(_:edge:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425720-step",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_double4) -> simd_double4\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD4<Double>) -> SIMD4<Double>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: Double, max: Double) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: SIMD4<Double>, max: SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc simd_fract(simd_double4) -> simd_double4\nReturns the fractional part of each element in a vector.\nfunc fract(SIMD4<Double>) -> SIMD4<Double>\nReturns the fractional part of each element in a vector.\nfunc simd_equal(simd_double4, simd_double4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_sign(simd_double4) -> simd_double4\nReturns the sign of each element in a vector.\nfunc sign(SIMD4<Double>) -> SIMD4<Double>\nReturns the sign of each element in a vector.\nfunc simd_step(simd_double4, simd_double4) -> simd_double4\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "simd_make_double4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883662-simd_make_double4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_double4(Double, Double, simd_double2) -> simd_double4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_double4(Double, simd_double2, Double) -> simd_double4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_double4(Double, simd_double3) -> simd_double4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_double4(simd_double3, Double) -> simd_double4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_double3, Double) -> simd_double4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_double4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917746-simd_make_double4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_double4(simd_double2) -> simd_double4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_double4(simd_double3) -> simd_double4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_double4(simd_double4) -> simd_double4\nReturns a new vector from the specified vector.\nfunc simd_make_double4(simd_double2, simd_double2) -> simd_double4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_double2, simd_double2) -> simd_double4\nReturns a new vector from the specified vectors.\nfunc simd_make_double4_undef(simd_double2) -> simd_double4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_double4_undef(simd_double3) -> simd_double4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_sign(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896510-simd_sign",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_double4) -> simd_double4\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD4<Double>) -> SIMD4<Double>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: Double, max: Double) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: SIMD4<Double>, max: SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc simd_fract(simd_double4) -> simd_double4\nReturns the fractional part of each element in a vector.\nfunc fract(SIMD4<Double>) -> SIMD4<Double>\nReturns the fractional part of each element in a vector.\nfunc simd_equal(simd_double4, simd_double4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc sign(SIMD4<Double>) -> SIMD4<Double>\nReturns the sign of each element in a vector.\nfunc simd_step(simd_double4, simd_double4) -> simd_double4\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one.\nfunc step(SIMD4<Double>, edge: SIMD4<Double>) -> SIMD4<Double>\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918635-simd_double",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_uchar4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "sign(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424046-sign",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_double4) -> simd_double4\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD4<Double>) -> SIMD4<Double>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: Double, max: Double) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: SIMD4<Double>, max: SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc simd_fract(simd_double4) -> simd_double4\nReturns the fractional part of each element in a vector.\nfunc fract(SIMD4<Double>) -> SIMD4<Double>\nReturns the fractional part of each element in a vector.\nfunc simd_equal(simd_double4, simd_double4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_sign(simd_double4) -> simd_double4\nReturns the sign of each element in a vector.\nfunc simd_step(simd_double4, simd_double4) -> simd_double4\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one.\nfunc step(SIMD4<Double>, edge: SIMD4<Double>) -> SIMD4<Double>\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "simd_reduce_add(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896469-simd_reduce_add",
    "html": "See Also\nReduce Functions\nfunc reduce_add(SIMD4<Double>) -> Double\nReturns the sum of all elements in a vector.\nfunc simd_reduce_max(simd_double4) -> Double\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD4<Double>) -> Double\nReturns the maximum value in a vector.\nfunc simd_reduce_min(simd_double4) -> Double\nReturns the minimum value in a vector.\nfunc reduce_min(SIMD4<Double>) -> Double\nReturns the minimum value in a vector."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896404-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_double4(simd_double2) -> simd_double4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_double4(simd_double3) -> simd_double4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_double4(simd_double4) -> simd_double4\nReturns a new vector from the specified vector.\nfunc simd_make_double4(simd_double8) -> simd_double4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_double4(simd_double2, simd_double2) -> simd_double4\nReturns a new vector from the specified vectors.\nfunc simd_make_double4_undef(simd_double2) -> simd_double4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_double4_undef(simd_double3) -> simd_double4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_make_double4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896656-simd_make_double4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_double4(simd_double2) -> simd_double4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_double4(simd_double3) -> simd_double4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_double4(simd_double8) -> simd_double4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_double4(simd_double2, simd_double2) -> simd_double4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_double2, simd_double2) -> simd_double4\nReturns a new vector from the specified vectors.\nfunc simd_make_double4_undef(simd_double2) -> simd_double4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_double4_undef(simd_double3) -> simd_double4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896702-simd_abs",
    "html": "See Also\nCommon Functions\nfunc abs(SIMD4<Double>) -> SIMD4<Double>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: Double, max: Double) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: SIMD4<Double>, max: SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc simd_fract(simd_double4) -> simd_double4\nReturns the fractional part of each element in a vector.\nfunc fract(SIMD4<Double>) -> SIMD4<Double>\nReturns the fractional part of each element in a vector.\nfunc simd_equal(simd_double4, simd_double4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_sign(simd_double4) -> simd_double4\nReturns the sign of each element in a vector.\nfunc sign(SIMD4<Double>) -> SIMD4<Double>\nReturns the sign of each element in a vector.\nfunc simd_step(simd_double4, simd_double4) -> simd_double4\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one.\nfunc step(SIMD4<Double>, edge: SIMD4<Double>) -> SIMD4<Double>\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917935-simd_double",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_ushort4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_double4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896651-simd_make_double4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_double4(simd_double2) -> simd_double4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_double4(simd_double4) -> simd_double4\nReturns a new vector from the specified vector.\nfunc simd_make_double4(simd_double8) -> simd_double4\nReturns a new vector by truncating the specified eight-element vector.\nfunc simd_make_double4(simd_double2, simd_double2) -> simd_double4\nReturns a new vector from the specified vectors.\nfunc vector4(simd_double2, simd_double2) -> simd_double4\nReturns a new vector from the specified vectors.\nfunc simd_make_double4_undef(simd_double2) -> simd_double4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_double4_undef(simd_double3) -> simd_double4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896633-simd_double",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_double4(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867730-simd_make_double4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_double4(Double) -> simd_double4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc vector4(Double, Double, Double, Double) -> simd_double4\nReturns a new vector from the specified scalar values.\nfunc simd_make_double4_undef(Double) -> simd_double4\nReturns a new vector with the first element set to a scalar value, and other elements undefined."
  },
  {
    "title": "vector4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2092213-vector4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_double4(Double, Double, simd_double2) -> simd_double4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_double4(Double, simd_double2, Double) -> simd_double4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_double4(Double, simd_double3) -> simd_double4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_double4(simd_double2, Double, Double) -> simd_double4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_double4(simd_double3, Double) -> simd_double4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_double4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883652-simd_make_double4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_double4(Double, Double, simd_double2) -> simd_double4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_double4(Double, simd_double3) -> simd_double4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_double4(simd_double2, Double, Double) -> simd_double4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_double4(simd_double3, Double) -> simd_double4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_double3, Double) -> simd_double4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_make_double4(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883649-simd_make_double4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_double4(Double, simd_double2, Double) -> simd_double4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_double4(Double, simd_double3) -> simd_double4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_double4(simd_double2, Double, Double) -> simd_double4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_double4(simd_double3, Double) -> simd_double4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_double3, Double) -> simd_double4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896644-simd_double",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_double4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917975-simd_double",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "abs(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425342-abs",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_double4) -> simd_double4\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: Double, max: Double) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: SIMD4<Double>, max: SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc simd_fract(simd_double4) -> simd_double4\nReturns the fractional part of each element in a vector.\nfunc fract(SIMD4<Double>) -> SIMD4<Double>\nReturns the fractional part of each element in a vector.\nfunc simd_equal(simd_double4, simd_double4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_sign(simd_double4) -> simd_double4\nReturns the sign of each element in a vector.\nfunc sign(SIMD4<Double>) -> SIMD4<Double>\nReturns the sign of each element in a vector.\nfunc simd_step(simd_double4, simd_double4) -> simd_double4\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one.\nfunc step(SIMD4<Double>, edge: SIMD4<Double>) -> SIMD4<Double>\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "simd_clamp(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896593-simd_clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_double4) -> simd_double4\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD4<Double>) -> SIMD4<Double>\nReturns the absolute value of each element in a vector.\nfunc clamp(SIMD4<Double>, min: Double, max: Double) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: SIMD4<Double>, max: SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc simd_fract(simd_double4) -> simd_double4\nReturns the fractional part of each element in a vector.\nfunc fract(SIMD4<Double>) -> SIMD4<Double>\nReturns the fractional part of each element in a vector.\nfunc simd_equal(simd_double4, simd_double4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_sign(simd_double4) -> simd_double4\nReturns the sign of each element in a vector.\nfunc sign(SIMD4<Double>) -> SIMD4<Double>\nReturns the sign of each element in a vector.\nfunc simd_step(simd_double4, simd_double4) -> simd_double4\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one.\nfunc step(SIMD4<Double>, edge: SIMD4<Double>) -> SIMD4<Double>\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "clamp(_:min:max:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1424320-clamp",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_double4) -> simd_double4\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD4<Double>) -> SIMD4<Double>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: SIMD4<Double>, max: SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc simd_fract(simd_double4) -> simd_double4\nReturns the fractional part of each element in a vector.\nfunc fract(SIMD4<Double>) -> SIMD4<Double>\nReturns the fractional part of each element in a vector.\nfunc simd_equal(simd_double4, simd_double4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_sign(simd_double4) -> simd_double4\nReturns the sign of each element in a vector.\nfunc sign(SIMD4<Double>) -> SIMD4<Double>\nReturns the sign of each element in a vector.\nfunc simd_step(simd_double4, simd_double4) -> simd_double4\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one.\nfunc step(SIMD4<Double>, edge: SIMD4<Double>) -> SIMD4<Double>\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896448-simd_equal",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_double4) -> simd_double4\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD4<Double>) -> SIMD4<Double>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: Double, max: Double) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: SIMD4<Double>, max: SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc simd_fract(simd_double4) -> simd_double4\nReturns the fractional part of each element in a vector.\nfunc fract(SIMD4<Double>) -> SIMD4<Double>\nReturns the fractional part of each element in a vector.\nfunc simd_sign(simd_double4) -> simd_double4\nReturns the sign of each element in a vector.\nfunc sign(SIMD4<Double>) -> SIMD4<Double>\nReturns the sign of each element in a vector.\nfunc simd_step(simd_double4, simd_double4) -> simd_double4\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one.\nfunc step(SIMD4<Double>, edge: SIMD4<Double>) -> SIMD4<Double>\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "simd_fract(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896429-simd_fract",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_double4) -> simd_double4\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD4<Double>) -> SIMD4<Double>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: Double, max: Double) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: SIMD4<Double>, max: SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc fract(SIMD4<Double>) -> SIMD4<Double>\nReturns the fractional part of each element in a vector.\nfunc simd_equal(simd_double4, simd_double4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_sign(simd_double4) -> simd_double4\nReturns the sign of each element in a vector.\nfunc sign(SIMD4<Double>) -> SIMD4<Double>\nReturns the sign of each element in a vector.\nfunc simd_step(simd_double4, simd_double4) -> simd_double4\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one.\nfunc step(SIMD4<Double>, edge: SIMD4<Double>) -> SIMD4<Double>\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "kvImageGamma_9_over_11_half_precision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/kvimagegamma_9_over_11_half_precision",
    "html": "See Also\nConstant gamma values\nvar kvImageGamma_BT709_forward_half_precision: Int\nThe ITU-R BT.709 standard.\nvar kvImageGamma_BT709_reverse_half_precision: Int\nThe ITU-R BT.709 standard reverse.\nvar kvImageGamma_sRGB_forward_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 2.2.\nvar kvImageGamma_sRGB_reverse_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 1/2.2.\nvar kvImageGamma_5_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 5/9 or 1/1.8.\nvar kvImageGamma_5_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 5/11 or 1/2.2.\nvar kvImageGamma_9_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 9/5 or 1.8.\nvar kvImageGamma_11_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 11/5 or 2.2.\nvar kvImageGamma_11_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 11/9 or (11/5)/(9/5)."
  },
  {
    "title": "kvImageGamma_BT709_reverse_half_precision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/kvimagegamma_bt709_reverse_half_precision",
    "html": "See Also\nConstant gamma values\nvar kvImageGamma_BT709_forward_half_precision: Int\nThe ITU-R BT.709 standard.\nvar kvImageGamma_sRGB_forward_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 2.2.\nvar kvImageGamma_sRGB_reverse_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 1/2.2.\nvar kvImageGamma_5_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 5/9 or 1/1.8.\nvar kvImageGamma_5_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 5/11 or 1/2.2.\nvar kvImageGamma_9_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 9/5 or 1.8.\nvar kvImageGamma_9_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 9/11 or (9/5)/(11/5).\nvar kvImageGamma_11_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 11/5 or 2.2.\nvar kvImageGamma_11_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 11/9 or (11/5)/(9/5)."
  },
  {
    "title": "kvImageGamma_UseGammaValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/kvimagegamma_usegammavalue",
    "html": "See Also\nUser-defined gamma values\nvar kvImageGamma_UseGammaValue_half_precision: Int\nA user-defined gamma value with half-precision calculation."
  },
  {
    "title": "kvImageGamma_5_over_9_half_precision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/kvimagegamma_5_over_9_half_precision",
    "html": "See Also\nConstant gamma values\nvar kvImageGamma_BT709_forward_half_precision: Int\nThe ITU-R BT.709 standard.\nvar kvImageGamma_BT709_reverse_half_precision: Int\nThe ITU-R BT.709 standard reverse.\nvar kvImageGamma_sRGB_forward_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 2.2.\nvar kvImageGamma_sRGB_reverse_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 1/2.2.\nvar kvImageGamma_5_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 5/11 or 1/2.2.\nvar kvImageGamma_9_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 9/5 or 1.8.\nvar kvImageGamma_9_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 9/11 or (9/5)/(11/5).\nvar kvImageGamma_11_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 11/5 or 2.2.\nvar kvImageGamma_11_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 11/9 or (11/5)/(9/5)."
  },
  {
    "title": "kvImageGamma_BT709_forward_half_precision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/kvimagegamma_bt709_forward_half_precision",
    "html": "See Also\nConstant gamma values\nvar kvImageGamma_BT709_reverse_half_precision: Int\nThe ITU-R BT.709 standard reverse.\nvar kvImageGamma_sRGB_forward_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 2.2.\nvar kvImageGamma_sRGB_reverse_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 1/2.2.\nvar kvImageGamma_5_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 5/9 or 1/1.8.\nvar kvImageGamma_5_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 5/11 or 1/2.2.\nvar kvImageGamma_9_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 9/5 or 1.8.\nvar kvImageGamma_9_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 9/11 or (9/5)/(11/5).\nvar kvImageGamma_11_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 11/5 or 2.2.\nvar kvImageGamma_11_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 11/9 or (11/5)/(9/5)."
  },
  {
    "title": "kvImageGamma_sRGB_reverse_half_precision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/kvimagegamma_srgb_reverse_half_precision",
    "html": "See Also\nConstant gamma values\nvar kvImageGamma_BT709_forward_half_precision: Int\nThe ITU-R BT.709 standard.\nvar kvImageGamma_BT709_reverse_half_precision: Int\nThe ITU-R BT.709 standard reverse.\nvar kvImageGamma_sRGB_forward_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 2.2.\nvar kvImageGamma_5_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 5/9 or 1/1.8.\nvar kvImageGamma_5_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 5/11 or 1/2.2.\nvar kvImageGamma_9_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 9/5 or 1.8.\nvar kvImageGamma_9_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 9/11 or (9/5)/(11/5).\nvar kvImageGamma_11_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 11/5 or 2.2.\nvar kvImageGamma_11_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 11/9 or (11/5)/(9/5)."
  },
  {
    "title": "simd_make_double4_undef(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2867700-simd_make_double4_undef",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Scalar Values\nfunc simd_make_double4(Double) -> simd_double4\nReturns a new vector with the first element set to a scalar value, and other elements set to zero.\nfunc simd_make_double4(Double, Double, Double, Double) -> simd_double4\nReturns a new vector from the specified scalar values.\nfunc vector4(Double, Double, Double, Double) -> simd_double4\nReturns a new vector from the specified scalar values."
  },
  {
    "title": "kvImageGamma_9_over_5_half_precision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/kvimagegamma_9_over_5_half_precision",
    "html": "See Also\nConstant gamma values\nvar kvImageGamma_BT709_forward_half_precision: Int\nThe ITU-R BT.709 standard.\nvar kvImageGamma_BT709_reverse_half_precision: Int\nThe ITU-R BT.709 standard reverse.\nvar kvImageGamma_sRGB_forward_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 2.2.\nvar kvImageGamma_sRGB_reverse_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 1/2.2.\nvar kvImageGamma_5_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 5/9 or 1/1.8.\nvar kvImageGamma_5_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 5/11 or 1/2.2.\nvar kvImageGamma_9_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 9/11 or (9/5)/(11/5).\nvar kvImageGamma_11_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 11/5 or 2.2.\nvar kvImageGamma_11_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 11/9 or (11/5)/(9/5)."
  },
  {
    "title": "kvImageGamma_sRGB_forward_half_precision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/kvimagegamma_srgb_forward_half_precision",
    "html": "See Also\nConstant gamma values\nvar kvImageGamma_BT709_forward_half_precision: Int\nThe ITU-R BT.709 standard.\nvar kvImageGamma_BT709_reverse_half_precision: Int\nThe ITU-R BT.709 standard reverse.\nvar kvImageGamma_sRGB_reverse_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 1/2.2.\nvar kvImageGamma_5_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 5/9 or 1/1.8.\nvar kvImageGamma_5_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 5/11 or 1/2.2.\nvar kvImageGamma_9_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 9/5 or 1.8.\nvar kvImageGamma_9_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 9/11 or (9/5)/(11/5).\nvar kvImageGamma_11_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 11/5 or 2.2.\nvar kvImageGamma_11_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 11/9 or (11/5)/(9/5)."
  },
  {
    "title": "simd_make_double4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883479-simd_make_double4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_double4(Double, Double, simd_double2) -> simd_double4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_double4(Double, simd_double2, Double) -> simd_double4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_double4(Double, simd_double3) -> simd_double4\nReturns a new vector from a scalar value and a vector.\nfunc simd_make_double4(simd_double2, Double, Double) -> simd_double4\nReturns a new vector from a vector and scalar values.\nfunc vector4(simd_double3, Double) -> simd_double4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "transpose | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double4x4/2913878-transpose",
    "html": "See Also\nMatrix Properties\nvar determinant: Double\nThe determinant of the matrix.\nvar inverse: simd_double4x4\nThe inverse of the matrix.\nvar columns: (simd_double4, simd_double4, simd_double4, simd_double4)\nThe columns of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896775-simd_double",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, floating-point elements."
  },
  {
    "title": "simd_make_double4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883277-simd_make_double4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Combinations of Vectors and Scalar Values\nfunc simd_make_double4(Double, Double, simd_double2) -> simd_double4\nReturns a new vector from two scalar values and a vector.\nfunc simd_make_double4(Double, simd_double2, Double) -> simd_double4\nReturns a new vector from a scalar value, a vector, and a scalar value.\nfunc simd_make_double4(simd_double2, Double, Double) -> simd_double4\nReturns a new vector from a vector and scalar values.\nfunc simd_make_double4(simd_double3, Double) -> simd_double4\nReturns a new vector from a vector and a scalar value.\nfunc vector4(simd_double3, Double) -> simd_double4\nReturns a new vector from a vector and a scalar value."
  },
  {
    "title": "fract(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425760-fract",
    "html": "See Also\nCommon Functions\nfunc simd_abs(simd_double4) -> simd_double4\nReturns the absolute value of each element in a vector.\nfunc abs(SIMD4<Double>) -> SIMD4<Double>\nReturns the absolute value of each element in a vector.\nfunc simd_clamp(simd_double4, simd_double4, simd_double4) -> simd_double4\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: Double, max: Double) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc clamp(SIMD4<Double>, min: SIMD4<Double>, max: SIMD4<Double>) -> SIMD4<Double>\nReturns each element in a vector clamped to a specified range.\nfunc simd_fract(simd_double4) -> simd_double4\nReturns the fractional part of each element in a vector.\nfunc simd_equal(simd_double4, simd_double4) -> simd_bool\nReturns true if every element in a vector is exactly equal to the corresponding element in a second vector, and otherwise returns false.\nfunc simd_sign(simd_double4) -> simd_double4\nReturns the sign of each element in a vector.\nfunc sign(SIMD4<Double>) -> SIMD4<Double>\nReturns the sign of each element in a vector.\nfunc simd_step(simd_double4, simd_double4) -> simd_double4\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one.\nfunc step(SIMD4<Double>, edge: SIMD4<Double>) -> SIMD4<Double>\nReturns zero for each element in a vector less than a specified edge, and otherwise returns one."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917890-simd_double",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2918090-simd_double",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_make_double4(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883542-simd_make_double4",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Other Vectors\nfunc simd_make_double4(simd_double2) -> simd_double4\nReturns a new vector from the specified two-element vector, and other elements set to zero.\nfunc simd_make_double4(simd_double3) -> simd_double4\nReturns a new vector from the specified three-element vector, and other elements set to zero.\nfunc simd_make_double4(simd_double4) -> simd_double4\nReturns a new vector from the specified vector.\nfunc simd_make_double4(simd_double8) -> simd_double4\nReturns a new vector by truncating the specified eight-element vector.\nfunc vector4(simd_double2, simd_double2) -> simd_double4\nReturns a new vector from the specified vectors.\nfunc simd_make_double4_undef(simd_double2) -> simd_double4\nReturns a new vector from the specified two-element vector, and other elements undefined.\nfunc simd_make_double4_undef(simd_double3) -> simd_double4\nReturns a new vector from the specified three-element vector, and other elements undefined."
  },
  {
    "title": "cmatrix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double4x4/2915010-cmatrix",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double4x4) -> simd_double4x4\nReturns the inverse of the specified matrix.\nfunc matrix_from_columns(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_from_diagonal(SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double4x4) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_double4x4, simd_double4x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_double4x4) -> double4x4\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double4x4)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "kvImageGamma_5_over_11_half_precision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/kvimagegamma_5_over_11_half_precision",
    "html": "See Also\nConstant gamma values\nvar kvImageGamma_BT709_forward_half_precision: Int\nThe ITU-R BT.709 standard.\nvar kvImageGamma_BT709_reverse_half_precision: Int\nThe ITU-R BT.709 standard reverse.\nvar kvImageGamma_sRGB_forward_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 2.2.\nvar kvImageGamma_sRGB_reverse_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 1/2.2.\nvar kvImageGamma_5_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 5/9 or 1/1.8.\nvar kvImageGamma_9_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 9/5 or 1.8.\nvar kvImageGamma_9_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 9/11 or (9/5)/(11/5).\nvar kvImageGamma_11_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 11/5 or 2.2.\nvar kvImageGamma_11_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 11/9 or (11/5)/(9/5)."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917900-simd_double",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_int4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2917812-simd_double",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_int4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, signed integer elements.\nfunc simd_double(simd_uint4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_double(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896713-simd_double",
    "html": "See Also\nFunctions to Create Four-Element Vectors From Vectors of Other Types\nfunc simd_double(simd_char4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, signed integer elements.\nfunc simd_double(simd_uchar4) -> simd_double4\nReturns a new vector from the specified vector of 8-bit, unsigned integer elements.\nfunc simd_double(simd_short4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, signed integer elements.\nfunc simd_double(simd_ushort4) -> simd_double4\nReturns a new vector from the specified vector of 16-bit, unsigned integer elements.\nfunc simd_double(simd_uint4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, unsigned integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_long4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, signed integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_ulong4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, unsigned integer elements.\nfunc simd_double(simd_float4) -> simd_double4\nReturns a new vector from the specified vector of 32-bit, floating-point elements.\nfunc simd_double(simd_double4) -> simd_double4\nReturns a new vector from the specified vector of 64-bit, floating-point elements."
  },
  {
    "title": "simd_determinant(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883628-simd_determinant",
    "html": "See Also\nDeterminant and Inverse Functions\nfunc simd_inverse(simd_double4x4) -> simd_double4x4\nReturns the inverse of the specified matrix."
  },
  {
    "title": "hash(into:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage/multidimensionallookuptable/interpolationmethod/3951551-hash",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "simd_precise_recip(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896486-simd_precise_recip",
    "html": "See Also\nReciprocal and Reciprocal Square Root Functions\nfunc simd_recip(simd_double4) -> simd_double4\nReturns the reciprocal of each element in a vector.\nfunc recip(SIMD4<Double>) -> SIMD4<Double>\nReturns the reciprocal of each element in a vector.\nfunc simd_rsqrt(simd_double4) -> simd_double4\nReturns the reciprocal square root of each element in a vector.\nfunc rsqrt(SIMD4<Double>) -> SIMD4<Double>\nReturns the reciprocal square root of each element in a vector.\nfunc simd_precise_rsqrt(simd_double4) -> simd_double4\nReturns the precise reciprocal square root of each element in a vector.\nfunc simd_fast_recip(simd_double4) -> simd_double4\nReturns the fast reciprocal of each element in a vector.\nfunc simd_fast_rsqrt(simd_double4) -> simd_double4\nReturns the fast reciprocal square root of each element in a vector."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double4x4/2914583-init",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double4x4) -> simd_double4x4\nReturns the inverse of the specified matrix.\nfunc matrix_from_columns(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_from_diagonal(SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double4x4) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_double4x4, simd_double4x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_double4x4) -> double4x4\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_double4x4\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "matrix_transpose(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914365-matrix_transpose",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double4x4) -> simd_double4x4\nReturns the inverse of the specified matrix.\nfunc matrix_from_columns(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_from_diagonal(SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double4x4) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_double4x4, simd_double4x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\ninit(simd_double4x4)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double4x4\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "kvImageGamma_11_over_5_half_precision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/kvimagegamma_11_over_5_half_precision",
    "html": "See Also\nConstant gamma values\nvar kvImageGamma_BT709_forward_half_precision: Int\nThe ITU-R BT.709 standard.\nvar kvImageGamma_BT709_reverse_half_precision: Int\nThe ITU-R BT.709 standard reverse.\nvar kvImageGamma_sRGB_forward_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 2.2.\nvar kvImageGamma_sRGB_reverse_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 1/2.2.\nvar kvImageGamma_5_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 5/9 or 1/1.8.\nvar kvImageGamma_5_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 5/11 or 1/2.2.\nvar kvImageGamma_9_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 9/5 or 1.8.\nvar kvImageGamma_9_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 9/11 or (9/5)/(11/5).\nvar kvImageGamma_11_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 11/9 or (11/5)/(9/5)."
  },
  {
    "title": "matrix_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2913926-matrix_equal",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double4x4) -> simd_double4x4\nReturns the inverse of the specified matrix.\nfunc matrix_from_columns(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_from_diagonal(SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double4x4) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_transpose(simd_double4x4) -> double4x4\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double4x4)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double4x4\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "fmin(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1425812-fmin",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_double4, simd_double4) -> simd_double4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Double>, Double) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc fmax(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_double4, simd_double4) -> simd_double4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Double>, Double) -> SIMD4<Double>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "fmax(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/1426120-fmax",
    "html": "See Also\nExtrema Functions\nfunc simd_max(simd_double4, simd_double4) -> simd_double4\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Double>, Double) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc max(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the maximum value of each element in a vector.\nfunc simd_min(simd_double4, simd_double4) -> simd_double4\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Double>, Double) -> SIMD4<Double>\nReturns the minimum value of each element in a vector.\nfunc min(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the minimum value of each element in a vector.\nfunc fmin(SIMD4<Double>, SIMD4<Double>) -> SIMD4<Double>\nReturns the minimum value of each element in a vector."
  },
  {
    "title": "simd_reduce_min(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896393-simd_reduce_min",
    "html": "See Also\nReduce Functions\nfunc simd_reduce_add(simd_double4) -> Double\nReturns the sum of all elements in a vector.\nfunc reduce_add(SIMD4<Double>) -> Double\nReturns the sum of all elements in a vector.\nfunc simd_reduce_max(simd_double4) -> Double\nReturns the maximum value in a vector.\nfunc reduce_max(SIMD4<Double>) -> Double\nReturns the maximum value in a vector.\nfunc reduce_min(SIMD4<Double>) -> Double\nReturns the minimum value in a vector."
  },
  {
    "title": "determinant | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double4x4/2914965-determinant",
    "html": "See Also\nMatrix Properties\nvar inverse: simd_double4x4\nThe inverse of the matrix.\nvar transpose: double4x4\nThe transpose of the matrix.\nvar columns: (simd_double4, simd_double4, simd_double4, simd_double4)\nThe columns of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "simd_almost_equal_elements(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883266-simd_almost_equal_elements",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_double4x4, simd_double4x4) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_double4x4, simd_double4x4, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified double-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908944-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x4, simd_double4x2) -> simd_double4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_double2x4, simd_double4x2) -> simd_double4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_double3x4, simd_double4x3) -> simd_double4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_double3x4, simd_double4x3) -> simd_double4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_double4x4, simd_double4x4) -> simd_double4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883492-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x4, simd_double4x2) -> simd_double4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_double2x4, simd_double4x2) -> simd_double4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_double3x4, simd_double4x3) -> simd_double4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_double4x4, simd_double4x4) -> simd_double4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix.\nfunc matrix_multiply(simd_double4x4, simd_double4x4) -> simd_double4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908939-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x4, simd_double4x2) -> simd_double4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_double2x4, simd_double4x2) -> simd_double4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_double3x4, simd_double4x3) -> simd_double4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_double4x4, simd_double4x4) -> simd_double4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix.\nfunc matrix_multiply(simd_double4x4, simd_double4x4) -> simd_double4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908961-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x4, simd_double4x2) -> simd_double4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_double3x4, simd_double4x3) -> simd_double4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_double3x4, simd_double4x3) -> simd_double4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_double4x4, simd_double4x4) -> simd_double4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix.\nfunc matrix_multiply(simd_double4x4, simd_double4x4) -> simd_double4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix."
  },
  {
    "title": "kvImageGamma_11_over_9_half_precision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/kvimagegamma_11_over_9_half_precision",
    "html": "See Also\nConstant gamma values\nvar kvImageGamma_BT709_forward_half_precision: Int\nThe ITU-R BT.709 standard.\nvar kvImageGamma_BT709_reverse_half_precision: Int\nThe ITU-R BT.709 standard reverse.\nvar kvImageGamma_sRGB_forward_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 2.2.\nvar kvImageGamma_sRGB_reverse_half_precision: Int\nA half-precision calculation using the sRGB standard gamma value of 1/2.2.\nvar kvImageGamma_5_over_9_half_precision: Int\nA half-precision calculation using a gamma value of 5/9 or 1/1.8.\nvar kvImageGamma_5_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 5/11 or 1/2.2.\nvar kvImageGamma_9_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 9/5 or 1.8.\nvar kvImageGamma_9_over_11_half_precision: Int\nA half-precision calculation using a gamma value of 9/11 or (9/5)/(11/5).\nvar kvImageGamma_11_over_5_half_precision: Int\nA half-precision calculation using a gamma value of 11/5 or 2.2."
  },
  {
    "title": "hashValue | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/vimage/multidimensionallookuptable/interpolationmethod/3951552-hashvalue",
    "html": "Relationships\nFrom Protocol\nHashable"
  },
  {
    "title": "subscript(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double4x4/2914111-subscript",
    "html": "See Also\nElement Access\nsubscript(Int) -> SIMD4<Double>\nAccesses the column at the specified position."
  },
  {
    "title": "simd_inverse(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883577-simd_inverse",
    "html": "See Also\nDeterminant and Inverse Functions\nfunc simd_determinant(simd_double4x4) -> Double\nReturns the determinant of the specified matrix."
  },
  {
    "title": "simd_matrix4x4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883334-simd_matrix4x4",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_double4, simd_double4, simd_double4, simd_double4) -> simd_double4x4\nReturns a new matrix with the specified columns.\nfunc simd_matrix_from_rows(simd_double4, simd_double4, simd_double4, simd_double4) -> simd_double4x4\nReturns a new matrix with the specified rows.\nfunc matrix_from_rows(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified rows.\nfunc simd_diagonal_matrix(simd_double4) -> simd_double4x4\nReturns a new matrix with the specified vector on the main diagonal."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908942-matrix_multiply",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_double4, simd_double4x4) -> simd_double4\nReturns the product of a four-element vector and a 4 x 4 matrix.\nfunc matrix_multiply(simd_double4, simd_double4x4) -> simd_double4\nReturns the product of a four-element vector and a 4 x 4 matrix.\nfunc simd_mul(simd_double4x4, simd_double4) -> simd_double4\nReturns the product of a 4 x 4 matrix and a four-element vector."
  },
  {
    "title": "simd_sub(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883347-simd_sub",
    "html": "See Also\nMath Functions\nfunc simd_add(simd_double4x4, simd_double4x4) -> simd_double4x4\nReturns the sum of two matrices.\nfunc matrix_scale(Double, simd_double4x4) -> simd_double4x4\nReturns the product of a scalar value and a matrix."
  },
  {
    "title": "inverse | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double4x4/2913866-inverse",
    "html": "See Also\nMatrix Properties\nvar determinant: Double\nThe determinant of the matrix.\nvar transpose: double4x4\nThe transpose of the matrix.\nvar columns: (simd_double4, simd_double4, simd_double4, simd_double4)\nThe columns of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908936-matrix_multiply",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_double4, simd_double4x4) -> simd_double4\nReturns the product of a four-element vector and a 4 x 4 matrix.\nfunc simd_mul(simd_double4x4, simd_double4) -> simd_double4\nReturns the product of a 4 x 4 matrix and a four-element vector.\nfunc matrix_multiply(simd_double4x4, simd_double4) -> simd_double4\nReturns the product of a 4 x 4 matrix and a four-element vector."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883634-simd_mul",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc matrix_multiply(simd_double4, simd_double4x4) -> simd_double4\nReturns the product of a four-element vector and a 4 x 4 matrix.\nfunc simd_mul(simd_double4x4, simd_double4) -> simd_double4\nReturns the product of a 4 x 4 matrix and a four-element vector.\nfunc matrix_multiply(simd_double4x4, simd_double4) -> simd_double4\nReturns the product of a 4 x 4 matrix and a four-element vector."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double4x4/2914625-subscript",
    "html": "See Also\nElement Access\nsubscript(Int, Int) -> Double\nAccesses the element at the specified position."
  },
  {
    "title": "simd_almost_equal_elements_relative(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883270-simd_almost_equal_elements_relat",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_double4x4, simd_double4x4) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements(simd_double4x4, simd_double4x4, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883638-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x4, simd_double4x2) -> simd_double4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_double2x4, simd_double4x2) -> simd_double4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_double3x4, simd_double4x3) -> simd_double4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_double3x4, simd_double4x3) -> simd_double4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_double4x4, simd_double4x4) -> simd_double4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix."
  },
  {
    "title": "simd_almost_equal_elements_relative(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883519-simd_almost_equal_elements_relat",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_double4x3, simd_double4x3) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements(simd_double4x3, simd_double4x3, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double4x3/2914572-subscript",
    "html": "See Also\nElement Access\nsubscript(Int, Int) -> Double\nAccesses the element at the specified position."
  },
  {
    "title": "columns | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double4x4/2868298-columns",
    "html": "See Also\nMatrix Properties\nvar determinant: Double\nThe determinant of the matrix.\nvar inverse: simd_double4x4\nThe inverse of the matrix.\nvar transpose: double4x4\nThe transpose of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double4x4/2915019-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible\nSee Also\nMatrix Properties\nvar determinant: Double\nThe determinant of the matrix.\nvar inverse: simd_double4x4\nThe inverse of the matrix.\nvar transpose: double4x4\nThe transpose of the matrix.\nvar columns: (simd_double4, simd_double4, simd_double4, simd_double4)\nThe columns of the matrix."
  },
  {
    "title": "matrix_from_rows(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914757-matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_double4, simd_double4, simd_double4, simd_double4) -> simd_double4x4\nReturns a new matrix with the specified columns.\nfunc simd_matrix_from_rows(simd_double4, simd_double4, simd_double4, simd_double4) -> simd_double4x4\nReturns a new matrix with the specified rows.\nfunc simd_diagonal_matrix(simd_double4) -> simd_double4x4\nReturns a new matrix with the specified vector on the main diagonal.\nfunc simd_matrix4x4(simd_quatd) -> simd_double4x4\nReturns a new matrix with the specified quarternion."
  },
  {
    "title": "simd_matrix(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896736-simd_matrix",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix_from_rows(simd_double4, simd_double4, simd_double4, simd_double4) -> simd_double4x4\nReturns a new matrix with the specified rows.\nfunc matrix_from_rows(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified rows.\nfunc simd_diagonal_matrix(simd_double4) -> simd_double4x4\nReturns a new matrix with the specified vector on the main diagonal.\nfunc simd_matrix4x4(simd_quatd) -> simd_double4x4\nReturns a new matrix with the specified quarternion."
  },
  {
    "title": "simd_matrix_from_rows(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896669-simd_matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_double4, simd_double4, simd_double4, simd_double4) -> simd_double4x4\nReturns a new matrix with the specified columns.\nfunc matrix_from_rows(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified rows.\nfunc simd_diagonal_matrix(simd_double4) -> simd_double4x4\nReturns a new matrix with the specified vector on the main diagonal.\nfunc simd_matrix4x4(simd_quatd) -> simd_double4x4\nReturns a new matrix with the specified quarternion."
  },
  {
    "title": "simd_diagonal_matrix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896654-simd_diagonal_matrix",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_double4, simd_double4, simd_double4, simd_double4) -> simd_double4x4\nReturns a new matrix with the specified columns.\nfunc simd_matrix_from_rows(simd_double4, simd_double4, simd_double4, simd_double4) -> simd_double4x4\nReturns a new matrix with the specified rows.\nfunc matrix_from_rows(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double4x4\nReturns a new matrix with the specified rows.\nfunc simd_matrix4x4(simd_quatd) -> simd_double4x4\nReturns a new matrix with the specified quarternion."
  },
  {
    "title": "matrix_scale(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883676-matrix_scale",
    "html": "See Also\nMath Functions\nfunc simd_add(simd_double4x4, simd_double4x4) -> simd_double4x4\nReturns the sum of two matrices.\nfunc simd_sub(simd_double4x4, simd_double4x4) -> simd_double4x4\nReturns the difference of two matrices."
  },
  {
    "title": "simd_add(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883386-simd_add",
    "html": "See Also\nMath Functions\nfunc simd_sub(simd_double4x4, simd_double4x4) -> simd_double4x4\nReturns the difference of two matrices.\nfunc matrix_scale(Double, simd_double4x4) -> simd_double4x4\nReturns the product of a scalar value and a matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883510-simd_mul",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_double4, simd_double4x4) -> simd_double4\nReturns the product of a four-element vector and a 4 x 4 matrix.\nfunc matrix_multiply(simd_double4, simd_double4x4) -> simd_double4\nReturns the product of a four-element vector and a 4 x 4 matrix.\nfunc matrix_multiply(simd_double4x4, simd_double4) -> simd_double4\nReturns the product of a 4 x 4 matrix and a four-element vector."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float3x4/2914401-subscript",
    "html": "See Also\nElement Access\nsubscript(Int, Int) -> Float\nAccesses the element at the specified position."
  },
  {
    "title": "subscript(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double4x3/2915000-subscript",
    "html": "See Also\nElement Access\nsubscript(Int) -> SIMD3<Double>\nAccesses the column at the specified position."
  },
  {
    "title": "subscript(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float3x4/2914280-subscript",
    "html": "See Also\nElement Access\nsubscript(Int) -> SIMD4<Float>\nAccesses the column at the specified position."
  },
  {
    "title": "matrix_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2913964-matrix_equal",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_from_columns(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double4x3\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_double3x4) -> double4x3\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double4x3)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double4x3\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "cmatrix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double4x3/2915007-cmatrix",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_from_columns(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double4x3\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_equal(simd_double4x3, simd_double4x3) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_double3x4) -> double4x3\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double4x3)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double4x3/2913788-init",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_from_columns(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double4x3\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_equal(simd_double4x3, simd_double4x3) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_double3x4) -> double4x3\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_double4x3\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "matrix_transpose(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2915160-matrix_transpose",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_from_columns(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double4x3\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_equal(simd_double4x3, simd_double4x3) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\ninit(simd_double4x3)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double4x3\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "matrix_scale(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883288-matrix_scale",
    "html": "See Also\nMath Functions\nfunc simd_add(simd_double4x3, simd_double4x3) -> simd_double4x3\nReturns the sum of two matrices.\nfunc simd_sub(simd_double4x3, simd_double4x3) -> simd_double4x3\nReturns the difference of two matrices."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908919-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x3, simd_double4x2) -> simd_double4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_double3x3, simd_double4x3) -> simd_double4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_double3x3, simd_double4x3) -> simd_double4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_double4x3, simd_double4x4) -> simd_double4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix.\nfunc matrix_multiply(simd_double4x3, simd_double4x4) -> simd_double4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix."
  },
  {
    "title": "simd_sub(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883419-simd_sub",
    "html": "See Also\nMath Functions\nfunc simd_add(simd_double4x3, simd_double4x3) -> simd_double4x3\nReturns the sum of two matrices.\nfunc matrix_scale(Double, simd_double4x3) -> simd_double4x3\nReturns the product of a scalar value and a matrix."
  },
  {
    "title": "simd_matrix_from_rows(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896557-simd_matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_double3, simd_double3, simd_double3, simd_double3) -> simd_double4x3\nReturns a new matrix with the specified columns.\nfunc matrix_from_rows(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double4x3\nReturns a new matrix with the specified rows."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908957-matrix_multiply",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_double3, simd_double4x3) -> simd_double4\nReturns the product of a three-element vector and a 4 x 3 matrix.\nfunc matrix_multiply(simd_double3, simd_double4x3) -> simd_double4\nReturns the product of a three-element vector and a 4 x 3 matrix.\nfunc simd_mul(simd_double4x3, simd_double4) -> simd_double3\nReturns the product of a 4 x 3 matrix and a four-element vector."
  },
  {
    "title": "transpose | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double4x3/2914980-transpose",
    "html": "See Also\nMatrix Properties\nvar columns: (simd_double3, simd_double3, simd_double3, simd_double3)\nThe columns of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "simd_add(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883286-simd_add",
    "html": "See Also\nMath Functions\nfunc simd_sub(simd_double4x3, simd_double4x3) -> simd_double4x3\nReturns the difference of two matrices.\nfunc matrix_scale(Double, simd_double4x3) -> simd_double4x3\nReturns the product of a scalar value and a matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908950-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x4, simd_float3x2) -> simd_float3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc matrix_multiply(simd_float2x4, simd_float3x2) -> simd_float3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc simd_mul(simd_float3x4, simd_float3x3) -> simd_float3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc matrix_multiply(simd_float3x4, simd_float3x3) -> simd_float3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc simd_mul(simd_float4x4, simd_float3x4) -> simd_float3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float3x4/2914188-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible\nSee Also\nMatrix Properties\nvar transpose: float4x3\nThe transpose of the matrix.\nvar columns: (simd_float4, simd_float4, simd_float4)\nThe columns of the matrix."
  },
  {
    "title": "cmatrix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float3x4/2914202-cmatrix",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_float3x4, simd_float3x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float3x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_float4x3) -> float3x4\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_float3x4)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "matrix_from_columns(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2913822-matrix_from_columns",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_float3x4, simd_float3x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_float4x3) -> float3x4\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_float3x4)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_float3x4\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "matrix_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914915-matrix_equal",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_from_columns(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float3x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_float4x3) -> float3x4\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_float3x4)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_float3x4\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883605-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x4, simd_float3x2) -> simd_float3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc matrix_multiply(simd_float2x4, simd_float3x2) -> simd_float3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc matrix_multiply(simd_float3x4, simd_float3x3) -> simd_float3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc simd_mul(simd_float4x4, simd_float3x4) -> simd_float3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix.\nfunc matrix_multiply(simd_float4x4, simd_float3x4) -> simd_float3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix."
  },
  {
    "title": "matrix_transpose(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914550-matrix_transpose",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_float3x4, simd_float3x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float3x4\nReturns a new matrix with the specified columns.\nDeprecated\ninit(simd_float3x4)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_float3x4\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "matrix_from_columns(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914698-matrix_from_columns",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_double4x3, simd_double4x3) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_double3x4) -> double4x3\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double4x3)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double4x3\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double4x3/2915015-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible\nSee Also\nMatrix Properties\nvar transpose: double3x4\nThe transpose of the matrix.\nvar columns: (simd_double3, simd_double3, simd_double3, simd_double3)\nThe columns of the matrix."
  },
  {
    "title": "columns | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double4x3/2868307-columns",
    "html": "See Also\nMatrix Properties\nvar transpose: double3x4\nThe transpose of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "simd_matrix(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896412-simd_matrix",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix_from_rows(simd_double4, simd_double4, simd_double4) -> simd_double4x3\nReturns a new matrix with the specified rows.\nfunc matrix_from_rows(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double4x3\nReturns a new matrix with the specified rows."
  },
  {
    "title": "matrix_from_rows(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914553-matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_double3, simd_double3, simd_double3, simd_double3) -> simd_double4x3\nReturns a new matrix with the specified columns.\nfunc simd_matrix_from_rows(simd_double4, simd_double4, simd_double4) -> simd_double4x3\nReturns a new matrix with the specified rows."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883659-simd_mul",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_double3, simd_double4x3) -> simd_double4\nReturns the product of a three-element vector and a 4 x 3 matrix.\nfunc matrix_multiply(simd_double3, simd_double4x3) -> simd_double4\nReturns the product of a three-element vector and a 4 x 3 matrix.\nfunc matrix_multiply(simd_double4x3, simd_double4) -> simd_double3\nReturns the product of a 4 x 3 matrix and a four-element vector."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883328-simd_mul",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc matrix_multiply(simd_double3, simd_double4x3) -> simd_double4\nReturns the product of a three-element vector and a 4 x 3 matrix.\nfunc simd_mul(simd_double4x3, simd_double4) -> simd_double3\nReturns the product of a 4 x 3 matrix and a four-element vector.\nfunc matrix_multiply(simd_double4x3, simd_double4) -> simd_double3\nReturns the product of a 4 x 3 matrix and a four-element vector."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908933-matrix_multiply",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_double3, simd_double4x3) -> simd_double4\nReturns the product of a three-element vector and a 4 x 3 matrix.\nfunc simd_mul(simd_double4x3, simd_double4) -> simd_double3\nReturns the product of a 4 x 3 matrix and a four-element vector.\nfunc matrix_multiply(simd_double4x3, simd_double4) -> simd_double3\nReturns the product of a 4 x 3 matrix and a four-element vector."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883544-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc matrix_multiply(simd_double2x3, simd_double4x2) -> simd_double4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_double3x3, simd_double4x3) -> simd_double4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_double3x3, simd_double4x3) -> simd_double4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_double4x3, simd_double4x4) -> simd_double4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix.\nfunc matrix_multiply(simd_double4x3, simd_double4x4) -> simd_double4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883424-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x4, simd_float3x2) -> simd_float3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc matrix_multiply(simd_float2x4, simd_float3x2) -> simd_float3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc simd_mul(simd_float3x4, simd_float3x3) -> simd_float3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc matrix_multiply(simd_float3x4, simd_float3x3) -> simd_float3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc matrix_multiply(simd_float4x4, simd_float3x4) -> simd_float3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x3/2914996-init",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_float4x3, simd_float4x3) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD3<Float>, SIMD3<Float>, SIMD3<Float>, SIMD3<Float>) -> simd_float4x3\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_float3x4) -> float4x3\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_float4x3\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "transpose | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float3x4/2914420-transpose",
    "html": "See Also\nMatrix Properties\nvar columns: (simd_float4, simd_float4, simd_float4)\nThe columns of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "simd_almost_equal_elements_relative(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883262-simd_almost_equal_elements_relat",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_float3x4, simd_float3x4) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements(simd_float3x4, simd_float3x4, Float) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883393-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc matrix_multiply(simd_float2x4, simd_float3x2) -> simd_float3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc simd_mul(simd_float3x4, simd_float3x3) -> simd_float3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc matrix_multiply(simd_float3x4, simd_float3x3) -> simd_float3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc simd_mul(simd_float4x4, simd_float3x4) -> simd_float3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix.\nfunc matrix_multiply(simd_float4x4, simd_float3x4) -> simd_float3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883612-simd_equal",
    "html": "See Also\nEquality Functions\nfunc simd_almost_equal_elements(simd_double4x3, simd_double4x3, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_double4x3, simd_double4x3, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified double-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908917-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x3, simd_double4x2) -> simd_double4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_double2x3, simd_double4x2) -> simd_double4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_double3x3, simd_double4x3) -> simd_double4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_double3x3, simd_double4x3) -> simd_double4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_double4x3, simd_double4x4) -> simd_double4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908949-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x3, simd_double4x2) -> simd_double4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_double2x3, simd_double4x2) -> simd_double4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_double3x3, simd_double4x3) -> simd_double4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_double4x3, simd_double4x4) -> simd_double4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix.\nfunc matrix_multiply(simd_double4x3, simd_double4x4) -> simd_double4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883472-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x3, simd_double4x2) -> simd_double4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_double2x3, simd_double4x2) -> simd_double4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_double3x3, simd_double4x3) -> simd_double4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_double4x3, simd_double4x4) -> simd_double4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix.\nfunc matrix_multiply(simd_double4x3, simd_double4x4) -> simd_double4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883417-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x3, simd_double4x2) -> simd_double4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_double2x3, simd_double4x2) -> simd_double4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_double3x3, simd_double4x3) -> simd_double4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_double3x3, simd_double4x3) -> simd_double4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_double4x3, simd_double4x4) -> simd_double4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float3x4/2914172-init",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_float3x4, simd_float3x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float3x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_float4x3) -> float3x4\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_float3x4\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "columns | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float3x4/2868324-columns",
    "html": "See Also\nMatrix Properties\nvar transpose: float4x3\nThe transpose of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "simd_almost_equal_elements(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883620-simd_almost_equal_elements",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_float3x4, simd_float3x4) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_float3x4, simd_float3x4, Float) -> simd_bool\nReturns true if every element in a matrix is within a specified single-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "matrix_from_rows(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914718-matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_float4, simd_float4, simd_float4) -> simd_float3x4\nReturns a new matrix with the specified columns.\nfunc simd_matrix_from_rows(simd_float3, simd_float3, simd_float3, simd_float3) -> simd_float3x4\nReturns a new matrix with the specified rows."
  },
  {
    "title": "simd_matrix_from_rows(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896576-simd_matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_float4, simd_float4, simd_float4) -> simd_float3x4\nReturns a new matrix with the specified columns.\nfunc matrix_from_rows(SIMD3<Float>, SIMD3<Float>, SIMD3<Float>, SIMD3<Float>) -> simd_float3x4\nReturns a new matrix with the specified rows."
  },
  {
    "title": "simd_matrix(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896763-simd_matrix",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix_from_rows(simd_float3, simd_float3, simd_float3, simd_float3) -> simd_float3x4\nReturns a new matrix with the specified rows.\nfunc matrix_from_rows(SIMD3<Float>, SIMD3<Float>, SIMD3<Float>, SIMD3<Float>) -> simd_float3x4\nReturns a new matrix with the specified rows."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908927-matrix_multiply",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_float4, simd_float3x4) -> simd_float3\nReturns the product of a four-element vector and a 3 x 4 matrix.\nfunc matrix_multiply(simd_float4, simd_float3x4) -> simd_float3\nReturns the product of a four-element vector and a 3 x 4 matrix.\nfunc simd_mul(simd_float3x4, simd_float3) -> simd_float4\nReturns the product of a 3 x 4 matrix and a three-element vector."
  },
  {
    "title": "simd_add(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883320-simd_add",
    "html": "See Also\nMath Functions\nfunc simd_sub(simd_float3x4, simd_float3x4) -> simd_float3x4\nReturns the difference of two matrices.\nfunc matrix_scale(Float, simd_float3x4) -> simd_float3x4\nReturns the product of a scalar value and a matrix."
  },
  {
    "title": "matrix_scale(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883608-matrix_scale",
    "html": "See Also\nMath Functions\nfunc simd_add(simd_float3x4, simd_float3x4) -> simd_float3x4\nReturns the sum of two matrices.\nfunc simd_sub(simd_float3x4, simd_float3x4) -> simd_float3x4\nReturns the difference of two matrices."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883348-simd_equal",
    "html": "See Also\nEquality Functions\nfunc simd_almost_equal_elements(simd_float3x4, simd_float3x4, Float) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_float3x4, simd_float3x4, Float) -> simd_bool\nReturns true if every element in a matrix is within a specified single-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "simd_sub(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883265-simd_sub",
    "html": "See Also\nMath Functions\nfunc simd_add(simd_float3x4, simd_float3x4) -> simd_float3x4\nReturns the sum of two matrices.\nfunc matrix_scale(Float, simd_float3x4) -> simd_float3x4\nReturns the product of a scalar value and a matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883411-simd_mul",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_float4, simd_float3x4) -> simd_float3\nReturns the product of a four-element vector and a 3 x 4 matrix.\nfunc matrix_multiply(simd_float4, simd_float3x4) -> simd_float3\nReturns the product of a four-element vector and a 3 x 4 matrix.\nfunc matrix_multiply(simd_float3x4, simd_float3) -> simd_float4\nReturns the product of a 3 x 4 matrix and a three-element vector."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883531-simd_mul",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc matrix_multiply(simd_float4, simd_float3x4) -> simd_float3\nReturns the product of a four-element vector and a 3 x 4 matrix.\nfunc simd_mul(simd_float3x4, simd_float3) -> simd_float4\nReturns the product of a 3 x 4 matrix and a three-element vector.\nfunc matrix_multiply(simd_float3x4, simd_float3) -> simd_float4\nReturns the product of a 3 x 4 matrix and a three-element vector."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908908-matrix_multiply",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_float4, simd_float3x4) -> simd_float3\nReturns the product of a four-element vector and a 3 x 4 matrix.\nfunc simd_mul(simd_float3x4, simd_float3) -> simd_float4\nReturns the product of a 3 x 4 matrix and a three-element vector.\nfunc matrix_multiply(simd_float3x4, simd_float3) -> simd_float4\nReturns the product of a 3 x 4 matrix and a three-element vector."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908943-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x4, simd_float3x2) -> simd_float3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc simd_mul(simd_float3x4, simd_float3x3) -> simd_float3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc matrix_multiply(simd_float3x4, simd_float3x3) -> simd_float3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc simd_mul(simd_float4x4, simd_float3x4) -> simd_float3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix.\nfunc matrix_multiply(simd_float4x4, simd_float3x4) -> simd_float3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908960-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x4, simd_float3x2) -> simd_float3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc matrix_multiply(simd_float2x4, simd_float3x2) -> simd_float3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc simd_mul(simd_float3x4, simd_float3x3) -> simd_float3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc simd_mul(simd_float4x4, simd_float3x4) -> simd_float3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix.\nfunc matrix_multiply(simd_float4x4, simd_float3x4) -> simd_float3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix."
  },
  {
    "title": "cmatrix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x3/2915035-cmatrix",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_float4x3, simd_float4x3) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD3<Float>, SIMD3<Float>, SIMD3<Float>, SIMD3<Float>) -> simd_float4x3\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_float3x4) -> float4x3\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_float4x3)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "matrix_from_columns(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914035-matrix_from_columns",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_float4x3, simd_float4x3) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_float3x4) -> float4x3\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_float4x3\nReturns the matrix as the corresponding C matrix type.\nDeprecated\ninit(simd_float4x3)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "matrix_transpose(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914435-matrix_transpose",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_float4x3, simd_float4x3) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD3<Float>, SIMD3<Float>, SIMD3<Float>, SIMD3<Float>) -> simd_float4x3\nReturns a new matrix with the specified columns.\nDeprecated\nvar cmatrix: simd_float4x3\nReturns the matrix as the corresponding C matrix type.\nDeprecated\ninit(simd_float4x3)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "subscript(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x3/2914131-subscript",
    "html": "See Also\nElement Access\nsubscript(Int) -> SIMD3<Float>\nAccesses the column at the specified position."
  },
  {
    "title": "simd_almost_equal_elements_relative(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883367-simd_almost_equal_elements_relat",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_float4x3, simd_float4x3) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements(simd_float4x3, simd_float4x3, Float) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x3/2914299-subscript",
    "html": "See Also\nElement Access\nsubscript(Int, Int) -> Float\nAccesses the element at the specified position."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908900-matrix_multiply",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_float4, simd_float4x4) -> simd_float4\nReturns the product of a four-element vector and a 4 x 4 matrix.\nfunc matrix_multiply(simd_float4, simd_float4x4) -> simd_float4\nReturns the product of a four-element vector and a 4 x 4 matrix.\nfunc simd_mul(simd_float4x4, simd_float4) -> simd_float4\nReturns the product of a 4 x 4 matrix and a four-element vector."
  },
  {
    "title": "simd_almost_equal_elements(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883315-simd_almost_equal_elements",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_float4x3, simd_float4x3) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_float4x3, simd_float4x3, Float) -> simd_bool\nReturns true if every element in a matrix is within a specified single-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908956-matrix_multiply",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_float3, simd_float4x3) -> simd_float4\nReturns the product of a three-element vector and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float4x3, simd_float4) -> simd_float3\nReturns the product of a 4 x 3 matrix and a four-element vector.\nfunc simd_mul(simd_float4x3, simd_float4) -> simd_float3\nReturns the product of a 4 x 3 matrix and a four-element vector."
  },
  {
    "title": "transpose | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x3/2913947-transpose",
    "html": "See Also\nMatrix Properties\nvar columns: (simd_float3, simd_float3, simd_float3, simd_float3)\nThe columns of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "columns | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x3/2868301-columns",
    "html": "See Also\nMatrix Properties\nvar transpose: float3x4\nThe transpose of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908953-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x3, simd_float4x2) -> simd_float4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_float3x3, simd_float4x3) -> simd_float4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float3x3, simd_float4x3) -> simd_float4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_float4x3, simd_float4x4) -> simd_float4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix.\nfunc matrix_multiply(simd_float4x3, simd_float4x4) -> simd_float4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883524-simd_mul",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc matrix_multiply(simd_float3, simd_float4x3) -> simd_float4\nReturns the product of a three-element vector and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float4x3, simd_float4) -> simd_float3\nReturns the product of a 4 x 3 matrix and a four-element vector.\nfunc simd_mul(simd_float4x3, simd_float4) -> simd_float3\nReturns the product of a 4 x 3 matrix and a four-element vector."
  },
  {
    "title": "matrix_scale(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883569-matrix_scale",
    "html": "See Also\nMath Functions\nfunc simd_add(simd_float4x3, simd_float4x3) -> simd_float4x3\nReturns the sum of two matrices.\nfunc simd_sub(simd_float4x3, simd_float4x3) -> simd_float4x3\nReturns the difference of two matrices."
  },
  {
    "title": "matrix_from_columns(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914012-matrix_from_columns",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_float4x4) -> simd_float4x4\nReturns the inverse of the specified matrix.\nfunc matrix_from_diagonal(SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_float4x4) -> Float\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_float4x4, simd_float4x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_float4x4) -> float4x4\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_float4x4\nReturns the matrix as the corresponding C matrix type.\nDeprecated\ninit(simd_float4x4)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908970-matrix_multiply",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_float4, simd_float4x4) -> simd_float4\nReturns the product of a four-element vector and a 4 x 4 matrix.\nfunc simd_mul(simd_float4x4, simd_float4) -> simd_float4\nReturns the product of a 4 x 4 matrix and a four-element vector.\nfunc matrix_multiply(simd_float4x4, simd_float4) -> simd_float4\nReturns the product of a 4 x 4 matrix and a four-element vector."
  },
  {
    "title": "cmatrix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x4/2914534-cmatrix",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_float4x4) -> simd_float4x4\nReturns the inverse of the specified matrix.\nfunc matrix_from_diagonal(SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_float4x4) -> Float\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_float4x4, simd_float4x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_float4x4) -> float4x4\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_float4x4)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "matrix_transpose(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914763-matrix_transpose",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_float4x4) -> simd_float4x4\nReturns the inverse of the specified matrix.\nfunc matrix_from_diagonal(SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_float4x4) -> Float\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_float4x4, simd_float4x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified columns.\nDeprecated\nvar cmatrix: simd_float4x4\nReturns the matrix as the corresponding C matrix type.\nDeprecated\ninit(simd_float4x4)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883439-simd_equal",
    "html": "See Also\nEquality Functions\nfunc simd_almost_equal_elements(simd_float4x3, simd_float4x3, Float) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_float4x3, simd_float4x3, Float) -> simd_bool\nReturns true if every element in a matrix is within a specified single-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x3/2914653-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible\nSee Also\nMatrix Properties\nvar transpose: float3x4\nThe transpose of the matrix.\nvar columns: (simd_float3, simd_float3, simd_float3, simd_float3)\nThe columns of the matrix."
  },
  {
    "title": "matrix_from_rows(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2913917-matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_float3, simd_float3, simd_float3, simd_float3) -> simd_float4x3\nReturns a new matrix with the specified columns.\nfunc simd_matrix_from_rows(simd_float4, simd_float4, simd_float4) -> simd_float4x3\nReturns a new matrix with the specified rows."
  },
  {
    "title": "simd_matrix(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896584-simd_matrix",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix_from_rows(simd_float4, simd_float4, simd_float4) -> simd_float4x3\nReturns a new matrix with the specified rows.\nfunc matrix_from_rows(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float4x3\nReturns a new matrix with the specified rows."
  },
  {
    "title": "simd_matrix_from_rows(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896454-simd_matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_float3, simd_float3, simd_float3, simd_float3) -> simd_float4x3\nReturns a new matrix with the specified columns.\nfunc matrix_from_rows(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float4x3\nReturns a new matrix with the specified rows."
  },
  {
    "title": "simd_add(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883321-simd_add",
    "html": "See Also\nMath Functions\nfunc simd_sub(simd_float4x3, simd_float4x3) -> simd_float4x3\nReturns the difference of two matrices.\nfunc matrix_scale(Float, simd_float4x3) -> simd_float4x3\nReturns the product of a scalar value and a matrix."
  },
  {
    "title": "simd_sub(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883495-simd_sub",
    "html": "See Also\nMath Functions\nfunc simd_add(simd_float4x3, simd_float4x3) -> simd_float4x3\nReturns the sum of two matrices.\nfunc matrix_scale(Float, simd_float4x3) -> simd_float4x3\nReturns the product of a scalar value and a matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908951-matrix_multiply",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_float3, simd_float4x3) -> simd_float4\nReturns the product of a three-element vector and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float3, simd_float4x3) -> simd_float4\nReturns the product of a three-element vector and a 4 x 3 matrix.\nfunc simd_mul(simd_float4x3, simd_float4) -> simd_float3\nReturns the product of a 4 x 3 matrix and a four-element vector."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883518-simd_mul",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_float3, simd_float4x3) -> simd_float4\nReturns the product of a three-element vector and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float3, simd_float4x3) -> simd_float4\nReturns the product of a three-element vector and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float4x3, simd_float4) -> simd_float3\nReturns the product of a 4 x 3 matrix and a four-element vector."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883674-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc matrix_multiply(simd_float2x3, simd_float4x2) -> simd_float4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_float3x3, simd_float4x3) -> simd_float4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float3x3, simd_float4x3) -> simd_float4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_float4x3, simd_float4x4) -> simd_float4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix.\nfunc matrix_multiply(simd_float4x3, simd_float4x4) -> simd_float4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix."
  },
  {
    "title": "matrix_from_diagonal(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914858-matrix_from_diagonal",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_float4x4) -> simd_float4x4\nReturns the inverse of the specified matrix.\nfunc matrix_determinant(simd_float4x4) -> Float\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_float4x4, simd_float4x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_float4x4) -> float4x4\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_float4x4\nReturns the matrix as the corresponding C matrix type.\nDeprecated\ninit(simd_float4x4)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "matrix_invert(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914981-matrix_invert",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_from_diagonal(SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_float4x4) -> Float\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_float4x4, simd_float4x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_float4x4) -> float4x4\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_float4x4\nReturns the matrix as the corresponding C matrix type.\nDeprecated\ninit(simd_float4x4)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x4/2915053-subscript",
    "html": "See Also\nElement Access\nsubscript(Int, Int) -> Float\nAccesses the element at the specified position."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908976-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x4, simd_float4x2) -> simd_float4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float3x4, simd_float4x3) -> simd_float4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_float3x4, simd_float4x3) -> simd_float4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float4x4, simd_float4x4) -> simd_float4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix.\nfunc simd_mul(simd_float4x4, simd_float4x4) -> simd_float4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix."
  },
  {
    "title": "simd_almost_equal_elements(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883671-simd_almost_equal_elements",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_float4x4, simd_float4x4) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_float4x4, simd_float4x4, Float) -> simd_bool\nReturns true if every element in a matrix is within a specified single-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883613-simd_equal",
    "html": "See Also\nEquality Functions\nfunc simd_almost_equal_elements(simd_float4x4, simd_float4x4, Float) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_float4x4, simd_float4x4, Float) -> simd_bool\nReturns true if every element in a matrix is within a specified single-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908896-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x3, simd_float4x2) -> simd_float4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float2x3, simd_float4x2) -> simd_float4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_float3x3, simd_float4x3) -> simd_float4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_float4x3, simd_float4x4) -> simd_float4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix.\nfunc matrix_multiply(simd_float4x3, simd_float4x4) -> simd_float4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883596-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x3, simd_float4x2) -> simd_float4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float2x3, simd_float4x2) -> simd_float4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_float3x3, simd_float4x3) -> simd_float4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float3x3, simd_float4x3) -> simd_float4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float4x3, simd_float4x4) -> simd_float4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883453-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x3, simd_float4x2) -> simd_float4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float2x3, simd_float4x2) -> simd_float4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float3x3, simd_float4x3) -> simd_float4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_float4x3, simd_float4x4) -> simd_float4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix.\nfunc matrix_multiply(simd_float4x3, simd_float4x4) -> simd_float4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908931-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x3, simd_float4x2) -> simd_float4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float2x3, simd_float4x2) -> simd_float4x3\nReturns the product of a 2 x 3 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_float3x3, simd_float4x3) -> simd_float4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float3x3, simd_float4x3) -> simd_float4x3\nReturns the product of a 3 x 3 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_float4x3, simd_float4x4) -> simd_float4x3\nReturns the product of a 4 x 3 matrix and a 4 x 4 matrix."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x4/2914711-init",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_float4x4) -> simd_float4x4\nReturns the inverse of the specified matrix.\nfunc matrix_from_diagonal(SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_float4x4) -> Float\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_float4x4, simd_float4x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_float4x4) -> float4x4\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_float4x4\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "matrix_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914805-matrix_equal",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_float4x4) -> simd_float4x4\nReturns the inverse of the specified matrix.\nfunc matrix_from_diagonal(SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_float4x4) -> Float\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_from_columns(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_float4x4) -> float4x4\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_float4x4\nReturns the matrix as the corresponding C matrix type.\nDeprecated\ninit(simd_float4x4)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "cmatrix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x2/2914522-cmatrix",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_float4x2, simd_float4x2) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD2<Float>, SIMD2<Float>, SIMD2<Float>, SIMD2<Float>) -> simd_float4x2\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_float2x4) -> float4x2\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_float4x2)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883317-simd_equal",
    "html": "See Also\nEquality Functions\nfunc simd_almost_equal_elements(simd_float4x2, simd_float4x2, Float) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_float4x2, simd_float4x2, Float) -> simd_bool\nReturns true if every element in a matrix is within a specified single-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "simd_matrix(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896621-simd_matrix",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix_from_rows(simd_float4, simd_float4, simd_float4, simd_float4) -> simd_float4x4\nReturns a new matrix with the specified rows.\nfunc matrix_from_rows(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified rows.\nfunc simd_diagonal_matrix(simd_float4) -> simd_float4x4\nReturns a new matrix with the specified vector on the main diagonal.\nfunc simd_matrix4x4(simd_quatf) -> simd_float4x4\nReturns a new matrix with the specified quarternion."
  },
  {
    "title": "subscript(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x4/2914362-subscript",
    "html": "See Also\nElement Access\nsubscript(Int) -> SIMD4<Float>\nAccesses the column at the specified position."
  },
  {
    "title": "matrix_determinant(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2915182-matrix_determinant",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_float4x4) -> simd_float4x4\nReturns the inverse of the specified matrix.\nfunc matrix_from_diagonal(SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_equal(simd_float4x4, simd_float4x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_float4x4) -> float4x4\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_float4x4\nReturns the matrix as the corresponding C matrix type.\nDeprecated\ninit(simd_float4x4)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "simd_determinant(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883488-simd_determinant",
    "html": "See Also\nDeterminant and Inverse Functions\nfunc simd_inverse(simd_float4x4) -> simd_float4x4\nReturns the inverse of the specified matrix."
  },
  {
    "title": "simd_almost_equal_elements_relative(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883365-simd_almost_equal_elements_relat",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_float4x4, simd_float4x4) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements(simd_float4x4, simd_float4x4, Float) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "simd_inverse(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883428-simd_inverse",
    "html": "See Also\nDeterminant and Inverse Functions\nfunc simd_determinant(simd_float4x4) -> Float\nReturns the determinant of the specified matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883623-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x4, simd_float4x2) -> simd_float4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float2x4, simd_float4x2) -> simd_float4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float3x4, simd_float4x3) -> simd_float4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float4x4, simd_float4x4) -> simd_float4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix.\nfunc simd_mul(simd_float4x4, simd_float4x4) -> simd_float4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883376-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc matrix_multiply(simd_float2x4, simd_float4x2) -> simd_float4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float3x4, simd_float4x3) -> simd_float4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_float3x4, simd_float4x3) -> simd_float4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float4x4, simd_float4x4) -> simd_float4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix.\nfunc simd_mul(simd_float4x4, simd_float4x4) -> simd_float4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908979-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x4, simd_float4x2) -> simd_float4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float2x4, simd_float4x2) -> simd_float4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float3x4, simd_float4x3) -> simd_float4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_float3x4, simd_float4x3) -> simd_float4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_float4x4, simd_float4x4) -> simd_float4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883650-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x4, simd_float4x2) -> simd_float4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float2x4, simd_float4x2) -> simd_float4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float3x4, simd_float4x3) -> simd_float4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_float3x4, simd_float4x3) -> simd_float4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float4x4, simd_float4x4) -> simd_float4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908946-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x4, simd_float4x2) -> simd_float4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float2x4, simd_float4x2) -> simd_float4x4\nReturns the product of a 2 x 4 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_float3x4, simd_float4x3) -> simd_float4x4\nReturns the product of a 3 x 4 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float4x4, simd_float4x4) -> simd_float4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix.\nfunc simd_mul(simd_float4x4, simd_float4x4) -> simd_float4x4\nReturns the product of a 4 x 4 matrix and a 4 x 4 matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883463-simd_mul",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc matrix_multiply(simd_float4, simd_float4x4) -> simd_float4\nReturns the product of a four-element vector and a 4 x 4 matrix.\nfunc simd_mul(simd_float4x4, simd_float4) -> simd_float4\nReturns the product of a 4 x 4 matrix and a four-element vector.\nfunc matrix_multiply(simd_float4x4, simd_float4) -> simd_float4\nReturns the product of a 4 x 4 matrix and a four-element vector."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883413-simd_mul",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_float4, simd_float4x4) -> simd_float4\nReturns the product of a four-element vector and a 4 x 4 matrix.\nfunc matrix_multiply(simd_float4, simd_float4x4) -> simd_float4\nReturns the product of a four-element vector and a 4 x 4 matrix.\nfunc matrix_multiply(simd_float4x4, simd_float4) -> simd_float4\nReturns the product of a 4 x 4 matrix and a four-element vector."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883421-simd_mul",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc matrix_multiply(simd_float2, simd_float4x2) -> simd_float4\nReturns the product of a two-element vector and a 4 x 2 matrix.\nfunc simd_mul(simd_float4x2, simd_float4) -> simd_float2\nReturns the product of a 4 x 2 matrix and a four-element vector.\nfunc matrix_multiply(simd_float4x2, simd_float4) -> simd_float2\nReturns the product of a 4 x 2 matrix and a four-element vector."
  },
  {
    "title": "matrix_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914786-matrix_equal",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_from_columns(SIMD2<Float>, SIMD2<Float>, SIMD2<Float>, SIMD2<Float>) -> simd_float4x2\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_float2x4) -> float4x2\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_float4x2\nReturns the matrix as the corresponding C matrix type.\nDeprecated\ninit(simd_float4x2)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "matrix_transpose(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2915089-matrix_transpose",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_float4x2, simd_float4x2) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD2<Float>, SIMD2<Float>, SIMD2<Float>, SIMD2<Float>) -> simd_float4x2\nReturns a new matrix with the specified columns.\nDeprecated\nvar cmatrix: simd_float4x2\nReturns the matrix as the corresponding C matrix type.\nDeprecated\ninit(simd_float4x2)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "simd_matrix(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883462-simd_matrix",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix_from_rows(simd_float4, simd_float4) -> simd_float4x2\nReturns a new matrix with the specified rows.\nfunc matrix_from_rows(SIMD4<Float>, SIMD4<Float>) -> simd_float4x2\nReturns a new matrix with the specified rows."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883377-simd_mul",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_float2, simd_float4x2) -> simd_float4\nReturns the product of a two-element vector and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float2, simd_float4x2) -> simd_float4\nReturns the product of a two-element vector and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float4x2, simd_float4) -> simd_float2\nReturns the product of a 4 x 2 matrix and a four-element vector."
  },
  {
    "title": "subscript(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x2/2914264-subscript",
    "html": "See Also\nElement Access\nsubscript(Int) -> SIMD2<Float>\nAccesses the column at the specified position."
  },
  {
    "title": "simd_almost_equal_elements_relative(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883687-simd_almost_equal_elements_relat",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_float4x2, simd_float4x2) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements(simd_float4x2, simd_float4x2, Float) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "simd_almost_equal_elements(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883686-simd_almost_equal_elements",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_float4x2, simd_float4x2) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_float4x2, simd_float4x2, Float) -> simd_bool\nReturns true if every element in a matrix is within a specified single-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "inverse | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x4/2914450-inverse",
    "html": "See Also\nMatrix Properties\nvar determinant: Float\nThe determinant of the matrix.\nvar transpose: float4x4\nThe transpose of the matrix.\nvar columns: (simd_float4, simd_float4, simd_float4, simd_float4)\nThe columns of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "matrix_from_rows(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914528-matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_float4, simd_float4, simd_float4, simd_float4) -> simd_float4x4\nReturns a new matrix with the specified columns.\nfunc simd_matrix_from_rows(simd_float4, simd_float4, simd_float4, simd_float4) -> simd_float4x4\nReturns a new matrix with the specified rows.\nfunc simd_diagonal_matrix(simd_float4) -> simd_float4x4\nReturns a new matrix with the specified vector on the main diagonal.\nfunc simd_matrix4x4(simd_quatf) -> simd_float4x4\nReturns a new matrix with the specified quarternion."
  },
  {
    "title": "simd_matrix4x4(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2873663-simd_matrix4x4",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_float4, simd_float4, simd_float4, simd_float4) -> simd_float4x4\nReturns a new matrix with the specified columns.\nfunc simd_matrix_from_rows(simd_float4, simd_float4, simd_float4, simd_float4) -> simd_float4x4\nReturns a new matrix with the specified rows.\nfunc matrix_from_rows(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified rows.\nfunc simd_diagonal_matrix(simd_float4) -> simd_float4x4\nReturns a new matrix with the specified vector on the main diagonal."
  },
  {
    "title": "determinant | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x4/2913814-determinant",
    "html": "See Also\nMatrix Properties\nvar inverse: simd_float4x4\nThe inverse of the matrix.\nvar transpose: float4x4\nThe transpose of the matrix.\nvar columns: (simd_float4, simd_float4, simd_float4, simd_float4)\nThe columns of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "matrix_scale(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883298-matrix_scale",
    "html": "See Also\nMath Functions\nfunc simd_add(simd_float4x4, simd_float4x4) -> simd_float4x4\nReturns the sum of two matrices.\nfunc simd_sub(simd_float4x4, simd_float4x4) -> simd_float4x4\nReturns the difference of two matrices."
  },
  {
    "title": "simd_diagonal_matrix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896390-simd_diagonal_matrix",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_float4, simd_float4, simd_float4, simd_float4) -> simd_float4x4\nReturns a new matrix with the specified columns.\nfunc simd_matrix_from_rows(simd_float4, simd_float4, simd_float4, simd_float4) -> simd_float4x4\nReturns a new matrix with the specified rows.\nfunc matrix_from_rows(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified rows.\nfunc simd_matrix4x4(simd_quatf) -> simd_float4x4\nReturns a new matrix with the specified quarternion."
  },
  {
    "title": "simd_add(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883685-simd_add",
    "html": "See Also\nMath Functions\nfunc simd_sub(simd_float4x4, simd_float4x4) -> simd_float4x4\nReturns the difference of two matrices.\nfunc matrix_scale(Float, simd_float4x4) -> simd_float4x4\nReturns the product of a scalar value and a matrix."
  },
  {
    "title": "simd_matrix_from_rows(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896569-simd_matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_float4, simd_float4, simd_float4, simd_float4) -> simd_float4x4\nReturns a new matrix with the specified columns.\nfunc matrix_from_rows(SIMD4<Float>, SIMD4<Float>, SIMD4<Float>, SIMD4<Float>) -> simd_float4x4\nReturns a new matrix with the specified rows.\nfunc simd_diagonal_matrix(simd_float4) -> simd_float4x4\nReturns a new matrix with the specified vector on the main diagonal.\nfunc simd_matrix4x4(simd_quatf) -> simd_float4x4\nReturns a new matrix with the specified quarternion."
  },
  {
    "title": "simd_sub(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883661-simd_sub",
    "html": "See Also\nMath Functions\nfunc simd_add(simd_float4x4, simd_float4x4) -> simd_float4x4\nReturns the sum of two matrices.\nfunc matrix_scale(Float, simd_float4x4) -> simd_float4x4\nReturns the product of a scalar value and a matrix."
  },
  {
    "title": "transpose | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x4/2914744-transpose",
    "html": "See Also\nMatrix Properties\nvar determinant: Float\nThe determinant of the matrix.\nvar inverse: simd_float4x4\nThe inverse of the matrix.\nvar columns: (simd_float4, simd_float4, simd_float4, simd_float4)\nThe columns of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x4/2914652-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible\nSee Also\nMatrix Properties\nvar determinant: Float\nThe determinant of the matrix.\nvar inverse: simd_float4x4\nThe inverse of the matrix.\nvar transpose: float4x4\nThe transpose of the matrix.\nvar columns: (simd_float4, simd_float4, simd_float4, simd_float4)\nThe columns of the matrix."
  },
  {
    "title": "columns | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x4/2868290-columns",
    "html": "See Also\nMatrix Properties\nvar determinant: Float\nThe determinant of the matrix.\nvar inverse: simd_float4x4\nThe inverse of the matrix.\nvar transpose: float4x4\nThe transpose of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908893-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x4, simd_double3x2) -> simd_double3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc matrix_multiply(simd_double2x4, simd_double3x2) -> simd_double3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc simd_mul(simd_double3x4, simd_double3x3) -> simd_double3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc simd_mul(simd_double4x4, simd_double3x4) -> simd_double3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix.\nfunc matrix_multiply(simd_double4x4, simd_double3x4) -> simd_double3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix."
  },
  {
    "title": "transpose | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x2/2914092-transpose",
    "html": "See Also\nMatrix Properties\nvar columns: (simd_float2, simd_float2, simd_float2, simd_float2)\nThe columns of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883554-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x4, simd_double3x2) -> simd_double3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc matrix_multiply(simd_double2x4, simd_double3x2) -> simd_double3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc simd_mul(simd_double3x4, simd_double3x3) -> simd_double3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc matrix_multiply(simd_double3x4, simd_double3x3) -> simd_double3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc matrix_multiply(simd_double4x4, simd_double3x4) -> simd_double3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908977-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x4, simd_double3x2) -> simd_double3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc matrix_multiply(simd_double2x4, simd_double3x2) -> simd_double3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc simd_mul(simd_double3x4, simd_double3x3) -> simd_double3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc matrix_multiply(simd_double3x4, simd_double3x3) -> simd_double3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc simd_mul(simd_double4x4, simd_double3x4) -> simd_double3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix."
  },
  {
    "title": "matrix_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2913813-matrix_equal",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_from_columns(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double3x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_double4x3) -> double3x4\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double3x4)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double3x4\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "simd_add(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883275-simd_add",
    "html": "See Also\nMath Functions\nfunc simd_sub(simd_float4x2, simd_float4x2) -> simd_float4x2\nReturns the difference of two matrices.\nfunc matrix_scale(Float, simd_float4x2) -> simd_float4x2\nReturns the product of a scalar value and a matrix."
  },
  {
    "title": "simd_matrix_from_rows(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896547-simd_matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_float2, simd_float2, simd_float2, simd_float2) -> simd_float4x2\nReturns a new matrix with the specified columns.\nfunc matrix_from_rows(SIMD4<Float>, SIMD4<Float>) -> simd_float4x2\nReturns a new matrix with the specified rows."
  },
  {
    "title": "matrix_from_rows(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2913804-matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_float2, simd_float2, simd_float2, simd_float2) -> simd_float4x2\nReturns a new matrix with the specified columns.\nfunc simd_matrix_from_rows(simd_float4, simd_float4) -> simd_float4x2\nReturns a new matrix with the specified rows."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908918-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x2, simd_float4x2) -> simd_float4x2\nReturns the product of a 2 x 2 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_float3x2, simd_float4x3) -> simd_float4x2\nReturns the product of a 3 x 2 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float3x2, simd_float4x3) -> simd_float4x2\nReturns the product of a 3 x 2 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_float4x2, simd_float4x4) -> simd_float4x2\nReturns the product of a 4 x 2 matrix and a 4 x 4 matrix.\nfunc matrix_multiply(simd_float4x2, simd_float4x4) -> simd_float4x2\nReturns the product of a 4 x 2 matrix and a 4 x 4 matrix."
  },
  {
    "title": "simd_sub(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883410-simd_sub",
    "html": "See Also\nMath Functions\nfunc simd_add(simd_float4x2, simd_float4x2) -> simd_float4x2\nReturns the sum of two matrices.\nfunc matrix_scale(Float, simd_float4x2) -> simd_float4x2\nReturns the product of a scalar value and a matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908921-matrix_multiply",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_float2, simd_float4x2) -> simd_float4\nReturns the product of a two-element vector and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float2, simd_float4x2) -> simd_float4\nReturns the product of a two-element vector and a 4 x 2 matrix.\nfunc simd_mul(simd_float4x2, simd_float4) -> simd_float2\nReturns the product of a 4 x 2 matrix and a four-element vector."
  },
  {
    "title": "matrix_scale(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883465-matrix_scale",
    "html": "See Also\nMath Functions\nfunc simd_add(simd_float4x2, simd_float4x2) -> simd_float4x2\nReturns the sum of two matrices.\nfunc simd_sub(simd_float4x2, simd_float4x2) -> simd_float4x2\nReturns the difference of two matrices."
  },
  {
    "title": "matrix_from_columns(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914648-matrix_from_columns",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_float4x2, simd_float4x2) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_float2x4) -> float4x2\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_float4x2\nReturns the matrix as the corresponding C matrix type.\nDeprecated\ninit(simd_float4x2)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883593-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc matrix_multiply(simd_float2x2, simd_float4x2) -> simd_float4x2\nReturns the product of a 2 x 2 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_float3x2, simd_float4x3) -> simd_float4x2\nReturns the product of a 3 x 2 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float3x2, simd_float4x3) -> simd_float4x2\nReturns the product of a 3 x 2 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_float4x2, simd_float4x4) -> simd_float4x2\nReturns the product of a 4 x 2 matrix and a 4 x 4 matrix.\nfunc matrix_multiply(simd_float4x2, simd_float4x4) -> simd_float4x2\nReturns the product of a 4 x 2 matrix and a 4 x 4 matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908926-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x2, simd_float4x2) -> simd_float4x2\nReturns the product of a 2 x 2 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float2x2, simd_float4x2) -> simd_float4x2\nReturns the product of a 2 x 2 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_float3x2, simd_float4x3) -> simd_float4x2\nReturns the product of a 3 x 2 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_float4x2, simd_float4x4) -> simd_float4x2\nReturns the product of a 4 x 2 matrix and a 4 x 4 matrix.\nfunc matrix_multiply(simd_float4x2, simd_float4x4) -> simd_float4x2\nReturns the product of a 4 x 2 matrix and a 4 x 4 matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883663-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x2, simd_float4x2) -> simd_float4x2\nReturns the product of a 2 x 2 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float2x2, simd_float4x2) -> simd_float4x2\nReturns the product of a 2 x 2 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_float3x2, simd_float4x3) -> simd_float4x2\nReturns the product of a 3 x 2 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float3x2, simd_float4x3) -> simd_float4x2\nReturns the product of a 3 x 2 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float4x2, simd_float4x4) -> simd_float4x2\nReturns the product of a 4 x 2 matrix and a 4 x 4 matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908947-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x2, simd_float4x2) -> simd_float4x2\nReturns the product of a 2 x 2 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float2x2, simd_float4x2) -> simd_float4x2\nReturns the product of a 2 x 2 matrix and a 4 x 2 matrix.\nfunc simd_mul(simd_float3x2, simd_float4x3) -> simd_float4x2\nReturns the product of a 3 x 2 matrix and a 4 x 3 matrix.\nfunc matrix_multiply(simd_float3x2, simd_float4x3) -> simd_float4x2\nReturns the product of a 3 x 2 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_float4x2, simd_float4x4) -> simd_float4x2\nReturns the product of a 4 x 2 matrix and a 4 x 4 matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908897-matrix_multiply",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_float2, simd_float4x2) -> simd_float4\nReturns the product of a two-element vector and a 4 x 2 matrix.\nfunc simd_mul(simd_float4x2, simd_float4) -> simd_float2\nReturns the product of a 4 x 2 matrix and a four-element vector.\nfunc matrix_multiply(simd_float4x2, simd_float4) -> simd_float2\nReturns the product of a 4 x 2 matrix and a four-element vector."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x2/2913765-init",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_float4x2, simd_float4x2) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD2<Float>, SIMD2<Float>, SIMD2<Float>, SIMD2<Float>) -> simd_float4x2\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_float2x4) -> float4x2\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_float4x2\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x2/2915146-subscript",
    "html": "See Also\nElement Access\nsubscript(Int, Int) -> Float\nAccesses the element at the specified position."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883641-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x4, simd_double3x2) -> simd_double3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc matrix_multiply(simd_double2x4, simd_double3x2) -> simd_double3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc matrix_multiply(simd_double3x4, simd_double3x3) -> simd_double3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc simd_mul(simd_double4x4, simd_double3x4) -> simd_double3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix.\nfunc matrix_multiply(simd_double4x4, simd_double3x4) -> simd_double3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix."
  },
  {
    "title": "cmatrix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double3x4/2913937-cmatrix",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_double3x4, simd_double3x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double3x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_double4x3) -> double3x4\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double3x4)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "matrix_from_columns(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2913981-matrix_from_columns",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_double3x4, simd_double3x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_double4x3) -> double3x4\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double3x4)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double3x4\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "matrix_transpose(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2913853-matrix_transpose",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_double3x4, simd_double3x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double3x4\nReturns a new matrix with the specified columns.\nDeprecated\ninit(simd_double3x4)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double3x4\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908937-matrix_multiply",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_double4, simd_double3x4) -> simd_double3\nReturns the product of a four-element vector and a 3 x 4 matrix.\nfunc matrix_multiply(simd_double4, simd_double3x4) -> simd_double3\nReturns the product of a four-element vector and a 3 x 4 matrix.\nfunc simd_mul(simd_double3x4, simd_double3) -> simd_double4\nReturns the product of a 3 x 4 matrix and a three-element vector."
  },
  {
    "title": "subscript(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double3x4/2913880-subscript",
    "html": "See Also\nElement Access\nsubscript(Int) -> SIMD4<Double>\nAccesses the column at the specified position."
  },
  {
    "title": "columns | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x2/2868326-columns",
    "html": "See Also\nMatrix Properties\nvar transpose: float2x4\nThe transpose of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_float4x2/2913902-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible\nSee Also\nMatrix Properties\nvar transpose: float2x4\nThe transpose of the matrix.\nvar columns: (simd_float2, simd_float2, simd_float2, simd_float2)\nThe columns of the matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883592-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc matrix_multiply(simd_double2x4, simd_double3x2) -> simd_double3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc simd_mul(simd_double3x4, simd_double3x3) -> simd_double3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc matrix_multiply(simd_double3x4, simd_double3x3) -> simd_double3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc simd_mul(simd_double4x4, simd_double3x4) -> simd_double3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix.\nfunc matrix_multiply(simd_double4x4, simd_double3x4) -> simd_double3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908954-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x4, simd_double3x2) -> simd_double3x4\nReturns the product of a 2 x 4 matrix and a 3 x 2 matrix.\nfunc simd_mul(simd_double3x4, simd_double3x3) -> simd_double3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc matrix_multiply(simd_double3x4, simd_double3x3) -> simd_double3x4\nReturns the product of a 3 x 4 matrix and a 3 x 3 matrix.\nfunc simd_mul(simd_double4x4, simd_double3x4) -> simd_double3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix.\nfunc matrix_multiply(simd_double4x4, simd_double3x4) -> simd_double3x4\nReturns the product of a 4 x 4 matrix and a 3 x 4 matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883352-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_float2x2, simd_float4x2) -> simd_float4x2\nReturns the product of a 2 x 2 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float2x2, simd_float4x2) -> simd_float4x2\nReturns the product of a 2 x 2 matrix and a 4 x 2 matrix.\nfunc matrix_multiply(simd_float3x2, simd_float4x3) -> simd_float4x2\nReturns the product of a 3 x 2 matrix and a 4 x 3 matrix.\nfunc simd_mul(simd_float4x2, simd_float4x4) -> simd_float4x2\nReturns the product of a 4 x 2 matrix and a 4 x 4 matrix.\nfunc matrix_multiply(simd_float4x2, simd_float4x4) -> simd_float4x2\nReturns the product of a 4 x 2 matrix and a 4 x 4 matrix."
  },
  {
    "title": "matrix_invert(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914121-matrix_invert",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_double2x2, simd_double2x2) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_diagonal(SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double2x2) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_from_columns(SIMD2<Double>, SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_double2x2) -> double2x2\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double2x2)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double2x2\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "matrix_from_columns(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914372-matrix_from_columns",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double2x2) -> simd_double2x2\nReturns the inverse of the specified matrix.\nfunc matrix_equal(simd_double2x2, simd_double2x2) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_diagonal(SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double2x2) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_transpose(simd_double2x2) -> double2x2\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double2x2)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double2x2\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "simd_almost_equal_elements(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883394-simd_almost_equal_elements",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_double2x2, simd_double2x2) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_double2x2, simd_double2x2, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified double-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "simd_almost_equal_elements_relative(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883597-simd_almost_equal_elements_relat",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_double2x2, simd_double2x2) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements(simd_double2x2, simd_double2x2, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "transpose | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double3x4/2914314-transpose",
    "html": "See Also\nMatrix Properties\nvar columns: (simd_double4, simd_double4, simd_double4)\nThe columns of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "columns | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double3x4/2868291-columns",
    "html": "See Also\nMatrix Properties\nvar transpose: double4x3\nThe transpose of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "simd_determinant(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883586-simd_determinant",
    "html": "See Also\nDeterminant and Inverse Functions\nfunc simd_inverse(simd_double3x3) -> simd_double3x3\nReturns the inverse of the specified matrix."
  },
  {
    "title": "simd_almost_equal_elements_relative(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883632-simd_almost_equal_elements_relat",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_double3x3, simd_double3x3) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements(simd_double3x3, simd_double3x3, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "simd_matrix(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896619-simd_matrix",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix_from_rows(simd_double3, simd_double3, simd_double3, simd_double3) -> simd_double3x4\nReturns a new matrix with the specified rows.\nfunc matrix_from_rows(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double3x4\nReturns a new matrix with the specified rows."
  },
  {
    "title": "matrix_from_rows(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2913812-matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_double4, simd_double4, simd_double4) -> simd_double3x4\nReturns a new matrix with the specified columns.\nfunc simd_matrix_from_rows(simd_double3, simd_double3, simd_double3, simd_double3) -> simd_double3x4\nReturns a new matrix with the specified rows."
  },
  {
    "title": "simd_sub(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883493-simd_sub",
    "html": "See Also\nMath Functions\nfunc simd_add(simd_double3x4, simd_double3x4) -> simd_double3x4\nReturns the sum of two matrices.\nfunc matrix_scale(Double, simd_double3x4) -> simd_double3x4\nReturns the product of a scalar value and a matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883502-simd_mul",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc matrix_multiply(simd_double4, simd_double3x4) -> simd_double3\nReturns the product of a four-element vector and a 3 x 4 matrix.\nfunc simd_mul(simd_double3x4, simd_double3) -> simd_double4\nReturns the product of a 3 x 4 matrix and a three-element vector.\nfunc matrix_multiply(simd_double3x4, simd_double3) -> simd_double4\nReturns the product of a 3 x 4 matrix and a three-element vector."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908905-matrix_multiply",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_double4, simd_double3x4) -> simd_double3\nReturns the product of a four-element vector and a 3 x 4 matrix.\nfunc simd_mul(simd_double3x4, simd_double3) -> simd_double4\nReturns the product of a 3 x 4 matrix and a three-element vector.\nfunc matrix_multiply(simd_double3x4, simd_double3) -> simd_double4\nReturns the product of a 3 x 4 matrix and a three-element vector."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double3x4/2913912-subscript",
    "html": "See Also\nElement Access\nsubscript(Int, Int) -> Double\nAccesses the element at the specified position."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double3x4/2914224-init",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_equal(simd_double3x4, simd_double3x4) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_columns(SIMD4<Double>, SIMD4<Double>, SIMD4<Double>) -> simd_double3x4\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_double4x3) -> double3x4\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_double3x4\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "simd_matrix_from_rows(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896646-simd_matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_double2, simd_double2) -> simd_double2x2\nReturns a new matrix with the specified columns.\nfunc matrix_from_rows(SIMD2<Double>, SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified vector on the main diagonal.\nfunc simd_diagonal_matrix(simd_double2) -> simd_double2x2\nReturns a new matrix with the specified vector on the main diagonal."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908965-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x3, simd_double3x2) -> simd_double3x3\nReturns the product of a 2 x 3 matrix and a 3 x 2 matrix.\nfunc matrix_multiply(simd_double2x3, simd_double3x2) -> simd_double3x3\nReturns the product of a 2 x 3 matrix and a 3 x 2 matrix.\nfunc simd_mul(simd_double3x3, simd_double3x3) -> simd_double3x3\nReturns the product of a 3 x 3 matrix and a 3 x 3 matrix.\nfunc simd_mul(simd_double4x3, simd_double3x4) -> simd_double3x3\nReturns the product of a 4 x 3 matrix and a 3 x 4 matrix.\nfunc matrix_multiply(simd_double4x3, simd_double3x4) -> simd_double3x3\nReturns the product of a 4 x 3 matrix and a 3 x 4 matrix."
  },
  {
    "title": "simd_matrix(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896435-simd_matrix",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix_from_rows(simd_double2, simd_double2) -> simd_double2x2\nReturns a new matrix with the specified rows.\nfunc matrix_from_rows(SIMD2<Double>, SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified vector on the main diagonal.\nfunc simd_diagonal_matrix(simd_double2) -> simd_double2x2\nReturns a new matrix with the specified vector on the main diagonal."
  },
  {
    "title": "matrix_from_diagonal(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914970-matrix_from_diagonal",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double2x2) -> simd_double2x2\nReturns the inverse of the specified matrix.\nfunc matrix_equal(simd_double2x2, simd_double2x2) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_determinant(simd_double2x2) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_from_columns(SIMD2<Double>, SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_double2x2) -> double2x2\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double2x2)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double2x2\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "matrix_transpose(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2915167-matrix_transpose",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double2x2) -> simd_double2x2\nReturns the inverse of the specified matrix.\nfunc matrix_equal(simd_double2x2, simd_double2x2) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_diagonal(SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double2x2) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_from_columns(SIMD2<Double>, SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified columns.\nDeprecated\ninit(simd_double2x2)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double2x2\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "matrix_determinant(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914174-matrix_determinant",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double2x2) -> simd_double2x2\nReturns the inverse of the specified matrix.\nfunc matrix_equal(simd_double2x2, simd_double2x2) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_diagonal(SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_from_columns(SIMD2<Double>, SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_double2x2) -> double2x2\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double2x2)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double2x2\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883369-simd_equal",
    "html": "See Also\nEquality Functions\nfunc simd_almost_equal_elements(simd_double2x2, simd_double2x2, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_double2x2, simd_double2x2, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified double-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "subscript(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double2x2/2914765-subscript",
    "html": "See Also\nElement Access\nsubscript(Int) -> SIMD2<Double>\nAccesses the column at the specified position."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883440-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x2, simd_double2x2) -> simd_double2x2\nReturns the product of a 2 x 2 matrix and a 2 x 2 matrix.\nfunc matrix_multiply(simd_double2x2, simd_double2x2) -> simd_double2x2\nReturns the product of a 2 x 2 matrix and a 2 x 2 matrix.\nfunc matrix_multiply(simd_double3x2, simd_double2x3) -> simd_double2x2\nReturns the product of a 3 x 2 matrix and a 2 x 3 matrix.\nfunc simd_mul(simd_double4x2, simd_double2x4) -> simd_double2x2\nReturns the product of a 4 x 2 matrix and a 2 x 4 matrix.\nfunc matrix_multiply(simd_double4x2, simd_double2x4) -> simd_double2x2\nReturns the product of a 4 x 2 matrix and a 2 x 4 matrix."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double3x4/2915090-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible\nSee Also\nMatrix Properties\nvar transpose: double4x3\nThe transpose of the matrix.\nvar columns: (simd_double4, simd_double4, simd_double4)\nThe columns of the matrix."
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883272-simd_equal",
    "html": "See Also\nEquality Functions\nfunc simd_almost_equal_elements(simd_double3x4, simd_double3x4, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_double3x4, simd_double3x4, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified double-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "simd_matrix_from_rows(_:_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896480-simd_matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_double4, simd_double4, simd_double4) -> simd_double3x4\nReturns a new matrix with the specified columns.\nfunc matrix_from_rows(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double3x4\nReturns a new matrix with the specified rows."
  },
  {
    "title": "simd_almost_equal_elements(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883346-simd_almost_equal_elements",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_double3x4, simd_double3x4) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_double3x4, simd_double3x4, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified double-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "simd_almost_equal_elements_relative(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883446-simd_almost_equal_elements_relat",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_double3x4, simd_double3x4) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements(simd_double3x4, simd_double3x4, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "matrix_scale(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883337-matrix_scale",
    "html": "See Also\nMath Functions\nfunc simd_add(simd_double3x4, simd_double3x4) -> simd_double3x4\nReturns the sum of two matrices.\nfunc simd_sub(simd_double3x4, simd_double3x4) -> simd_double3x4\nReturns the difference of two matrices."
  },
  {
    "title": "simd_add(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883503-simd_add",
    "html": "See Also\nMath Functions\nfunc simd_sub(simd_double3x4, simd_double3x4) -> simd_double3x4\nReturns the difference of two matrices.\nfunc matrix_scale(Double, simd_double3x4) -> simd_double3x4\nReturns the product of a scalar value and a matrix."
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double3x3/2914097-init",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double3x3) -> simd_double3x3\nReturns the inverse of the specified matrix.\nfunc matrix_from_columns(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_from_diagonal(SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double3x3) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_double3x3, simd_double3x3) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_double3x3) -> double3x3\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_double3x3\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883438-simd_mul",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_double4, simd_double3x4) -> simd_double3\nReturns the product of a four-element vector and a 3 x 4 matrix.\nfunc matrix_multiply(simd_double4, simd_double3x4) -> simd_double3\nReturns the product of a four-element vector and a 3 x 4 matrix.\nfunc matrix_multiply(simd_double3x4, simd_double3) -> simd_double4\nReturns the product of a 3 x 4 matrix and a three-element vector."
  },
  {
    "title": "cmatrix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double3x3/2914020-cmatrix",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double3x3) -> simd_double3x3\nReturns the inverse of the specified matrix.\nfunc matrix_from_columns(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_from_diagonal(SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double3x3) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_double3x3, simd_double3x3) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_double3x3) -> double3x3\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double3x3)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "simd_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883678-simd_equal",
    "html": "See Also\nEquality Functions\nfunc simd_almost_equal_elements(simd_double3x3, simd_double3x3, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_double3x3, simd_double3x3, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified double-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883273-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x3, simd_double3x2) -> simd_double3x3\nReturns the product of a 2 x 3 matrix and a 3 x 2 matrix.\nfunc matrix_multiply(simd_double2x3, simd_double3x2) -> simd_double3x3\nReturns the product of a 2 x 3 matrix and a 3 x 2 matrix.\nfunc simd_mul(simd_double3x3, simd_double3x3) -> simd_double3x3\nReturns the product of a 3 x 3 matrix and a 3 x 3 matrix.\nfunc matrix_multiply(simd_double3x3, simd_double3x3) -> simd_double3x3\nReturns the product of a 3 x 3 matrix and a 3 x 3 matrix.\nfunc matrix_multiply(simd_double4x3, simd_double3x4) -> simd_double3x3\nReturns the product of a 4 x 3 matrix and a 3 x 4 matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908959-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x3, simd_double3x2) -> simd_double3x3\nReturns the product of a 2 x 3 matrix and a 3 x 2 matrix.\nfunc matrix_multiply(simd_double2x3, simd_double3x2) -> simd_double3x3\nReturns the product of a 2 x 3 matrix and a 3 x 2 matrix.\nfunc simd_mul(simd_double3x3, simd_double3x3) -> simd_double3x3\nReturns the product of a 3 x 3 matrix and a 3 x 3 matrix.\nfunc matrix_multiply(simd_double3x3, simd_double3x3) -> simd_double3x3\nReturns the product of a 3 x 3 matrix and a 3 x 3 matrix.\nfunc simd_mul(simd_double4x3, simd_double3x4) -> simd_double3x3\nReturns the product of a 4 x 3 matrix and a 3 x 4 matrix."
  },
  {
    "title": "transpose | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double3x3/2915072-transpose",
    "html": "See Also\nMatrix Properties\nvar determinant: Double\nThe determinant of the matrix.\nvar inverse: simd_double3x3\nThe inverse of the matrix.\nvar columns: (simd_double3, simd_double3, simd_double3)\nThe columns of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908902-matrix_multiply",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_double2, simd_double2x2) -> simd_double2\nReturns the product of a two-element vector and a 2 x 2 matrix.\nfunc matrix_multiply(simd_double2, simd_double2x2) -> simd_double2\nReturns the product of a two-element vector and a 2 x 2 matrix.\nfunc simd_mul(simd_double2x2, simd_double2) -> simd_double2\nReturns the product of a 2 x 2 matrix and a two-element vector."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883435-simd_mul",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_double2, simd_double2x2) -> simd_double2\nReturns the product of a two-element vector and a 2 x 2 matrix.\nfunc matrix_multiply(simd_double2, simd_double2x2) -> simd_double2\nReturns the product of a two-element vector and a 2 x 2 matrix.\nfunc matrix_multiply(simd_double2x2, simd_double2) -> simd_double2\nReturns the product of a 2 x 2 matrix and a two-element vector."
  },
  {
    "title": "columns | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double2x2/2868312-columns",
    "html": "See Also\nMatrix Properties\nvar determinant: Double\nThe determinant of the matrix.\nvar inverse: simd_double2x2\nThe inverse of the matrix.\nvar transpose: double2x2\nThe transpose of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "inverse | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double2x2/2914793-inverse",
    "html": "See Also\nMatrix Properties\nvar determinant: Double\nThe determinant of the matrix.\nvar transpose: double2x2\nThe transpose of the matrix.\nvar columns: (simd_double2, simd_double2)\nThe columns of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "transpose | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double2x2/2914886-transpose",
    "html": "See Also\nMatrix Properties\nvar determinant: Double\nThe determinant of the matrix.\nvar inverse: simd_double2x2\nThe inverse of the matrix.\nvar columns: (simd_double2, simd_double2)\nThe columns of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "debugDescription | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double2x2/2914348-debugdescription",
    "html": "Relationships\nFrom Protocol\nCustomDebugStringConvertible\nSee Also\nMatrix Properties\nvar determinant: Double\nThe determinant of the matrix.\nvar inverse: simd_double2x2\nThe inverse of the matrix.\nvar transpose: double2x2\nThe transpose of the matrix.\nvar columns: (simd_double2, simd_double2)\nThe columns of the matrix."
  },
  {
    "title": "matrix_from_rows(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914916-matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_double2, simd_double2) -> simd_double2x2\nReturns a new matrix with the specified columns.\nfunc simd_matrix_from_rows(simd_double2, simd_double2) -> simd_double2x2\nReturns a new matrix with the specified rows.\nfunc simd_diagonal_matrix(simd_double2) -> simd_double2x2\nReturns a new matrix with the specified vector on the main diagonal."
  },
  {
    "title": "simd_matrix_from_rows(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896485-simd_matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_double3, simd_double3, simd_double3) -> simd_double3x3\nReturns a new matrix with the specified columns.\nfunc matrix_from_rows(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified rows.\nfunc simd_diagonal_matrix(simd_double3) -> simd_double3x3\nReturns a new matrix with the specified vector on the main diagonal.\nfunc simd_matrix3x3(simd_quatd) -> simd_double3x3\nReturns a new matrix with the specified quarternion."
  },
  {
    "title": "simd_diagonal_matrix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896682-simd_diagonal_matrix",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_double2, simd_double2) -> simd_double2x2\nReturns a new matrix with the specified columns.\nfunc simd_matrix_from_rows(simd_double2, simd_double2) -> simd_double2x2\nReturns a new matrix with the specified rows.\nfunc matrix_from_rows(SIMD2<Double>, SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified vector on the main diagonal."
  },
  {
    "title": "cmatrix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double2x2/2913914-cmatrix",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double2x2) -> simd_double2x2\nReturns the inverse of the specified matrix.\nfunc matrix_equal(simd_double2x2, simd_double2x2) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_diagonal(SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double2x2) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_from_columns(SIMD2<Double>, SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_double2x2) -> double2x2\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double2x2)\nCreates a new matrix with the specified matrix.\nDeprecated"
  },
  {
    "title": "init(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double2x2/2914419-init",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double2x2) -> simd_double2x2\nReturns the inverse of the specified matrix.\nfunc matrix_equal(simd_double2x2, simd_double2x2) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_from_diagonal(SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double2x2) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_from_columns(SIMD2<Double>, SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_double2x2) -> double2x2\nReturns the transpose of a matrix.\nDeprecated\nvar cmatrix: simd_double2x2\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "matrix_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914770-matrix_equal",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double2x2) -> simd_double2x2\nReturns the inverse of the specified matrix.\nfunc matrix_from_diagonal(SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double2x2) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_from_columns(SIMD2<Double>, SIMD2<Double>) -> simd_double2x2\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_transpose(simd_double2x2) -> double2x2\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double2x2)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double2x2\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double2x2/2913982-subscript",
    "html": "See Also\nElement Access\nsubscript(Int, Int) -> Double\nAccesses the element at the specified position."
  },
  {
    "title": "simd_inverse(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883443-simd_inverse",
    "html": "See Also\nDeterminant and Inverse Functions\nfunc simd_determinant(simd_double2x2) -> Double\nReturns the determinant of the specified matrix."
  },
  {
    "title": "simd_determinant(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883536-simd_determinant",
    "html": "See Also\nDeterminant and Inverse Functions\nfunc simd_inverse(simd_double2x2) -> simd_double2x2\nReturns the inverse of the specified matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908932-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x2, simd_double2x2) -> simd_double2x2\nReturns the product of a 2 x 2 matrix and a 2 x 2 matrix.\nfunc matrix_multiply(simd_double2x2, simd_double2x2) -> simd_double2x2\nReturns the product of a 2 x 2 matrix and a 2 x 2 matrix.\nfunc simd_mul(simd_double3x2, simd_double2x3) -> simd_double2x2\nReturns the product of a 3 x 2 matrix and a 2 x 3 matrix.\nfunc matrix_multiply(simd_double3x2, simd_double2x3) -> simd_double2x2\nReturns the product of a 3 x 2 matrix and a 2 x 3 matrix.\nfunc simd_mul(simd_double4x2, simd_double2x4) -> simd_double2x2\nReturns the product of a 4 x 2 matrix and a 2 x 4 matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908912-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x2, simd_double2x2) -> simd_double2x2\nReturns the product of a 2 x 2 matrix and a 2 x 2 matrix.\nfunc simd_mul(simd_double3x2, simd_double2x3) -> simd_double2x2\nReturns the product of a 3 x 2 matrix and a 2 x 3 matrix.\nfunc matrix_multiply(simd_double3x2, simd_double2x3) -> simd_double2x2\nReturns the product of a 3 x 2 matrix and a 2 x 3 matrix.\nfunc simd_mul(simd_double4x2, simd_double2x4) -> simd_double2x2\nReturns the product of a 4 x 2 matrix and a 2 x 4 matrix.\nfunc matrix_multiply(simd_double4x2, simd_double2x4) -> simd_double2x2\nReturns the product of a 4 x 2 matrix and a 2 x 4 matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883391-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x2, simd_double2x2) -> simd_double2x2\nReturns the product of a 2 x 2 matrix and a 2 x 2 matrix.\nfunc matrix_multiply(simd_double2x2, simd_double2x2) -> simd_double2x2\nReturns the product of a 2 x 2 matrix and a 2 x 2 matrix.\nfunc simd_mul(simd_double3x2, simd_double2x3) -> simd_double2x2\nReturns the product of a 3 x 2 matrix and a 2 x 3 matrix.\nfunc matrix_multiply(simd_double3x2, simd_double2x3) -> simd_double2x2\nReturns the product of a 3 x 2 matrix and a 2 x 3 matrix.\nfunc matrix_multiply(simd_double4x2, simd_double2x4) -> simd_double2x2\nReturns the product of a 4 x 2 matrix and a 2 x 4 matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908968-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x2, simd_double2x2) -> simd_double2x2\nReturns the product of a 2 x 2 matrix and a 2 x 2 matrix.\nfunc matrix_multiply(simd_double2x2, simd_double2x2) -> simd_double2x2\nReturns the product of a 2 x 2 matrix and a 2 x 2 matrix.\nfunc simd_mul(simd_double3x2, simd_double2x3) -> simd_double2x2\nReturns the product of a 3 x 2 matrix and a 2 x 3 matrix.\nfunc simd_mul(simd_double4x2, simd_double2x4) -> simd_double2x2\nReturns the product of a 4 x 2 matrix and a 2 x 4 matrix.\nfunc matrix_multiply(simd_double4x2, simd_double2x4) -> simd_double2x2\nReturns the product of a 4 x 2 matrix and a 2 x 4 matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883567-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc matrix_multiply(simd_double2x2, simd_double2x2) -> simd_double2x2\nReturns the product of a 2 x 2 matrix and a 2 x 2 matrix.\nfunc simd_mul(simd_double3x2, simd_double2x3) -> simd_double2x2\nReturns the product of a 3 x 2 matrix and a 2 x 3 matrix.\nfunc matrix_multiply(simd_double3x2, simd_double2x3) -> simd_double2x2\nReturns the product of a 3 x 2 matrix and a 2 x 3 matrix.\nfunc simd_mul(simd_double4x2, simd_double2x4) -> simd_double2x2\nReturns the product of a 4 x 2 matrix and a 2 x 4 matrix.\nfunc matrix_multiply(simd_double4x2, simd_double2x4) -> simd_double2x2\nReturns the product of a 4 x 2 matrix and a 2 x 4 matrix."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908973-matrix_multiply",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x3, simd_double3x2) -> simd_double3x3\nReturns the product of a 2 x 3 matrix and a 3 x 2 matrix.\nfunc simd_mul(simd_double3x3, simd_double3x3) -> simd_double3x3\nReturns the product of a 3 x 3 matrix and a 3 x 3 matrix.\nfunc matrix_multiply(simd_double3x3, simd_double3x3) -> simd_double3x3\nReturns the product of a 3 x 3 matrix and a 3 x 3 matrix.\nfunc simd_mul(simd_double4x3, simd_double3x4) -> simd_double3x3\nReturns the product of a 4 x 3 matrix and a 3 x 4 matrix.\nfunc matrix_multiply(simd_double4x3, simd_double3x4) -> simd_double3x3\nReturns the product of a 4 x 3 matrix and a 3 x 4 matrix."
  },
  {
    "title": "determinant | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double2x2/2915065-determinant",
    "html": "See Also\nMatrix Properties\nvar inverse: simd_double2x2\nThe inverse of the matrix.\nvar transpose: double2x2\nThe transpose of the matrix.\nvar columns: (simd_double2, simd_double2)\nThe columns of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883444-simd_mul",
    "html": "See Also\nMatrix-Matrix Multiplication Functions\nfunc simd_mul(simd_double2x3, simd_double3x2) -> simd_double3x3\nReturns the product of a 2 x 3 matrix and a 3 x 2 matrix.\nfunc matrix_multiply(simd_double2x3, simd_double3x2) -> simd_double3x3\nReturns the product of a 2 x 3 matrix and a 3 x 2 matrix.\nfunc matrix_multiply(simd_double3x3, simd_double3x3) -> simd_double3x3\nReturns the product of a 3 x 3 matrix and a 3 x 3 matrix.\nfunc simd_mul(simd_double4x3, simd_double3x4) -> simd_double3x3\nReturns the product of a 4 x 3 matrix and a 3 x 4 matrix.\nfunc matrix_multiply(simd_double4x3, simd_double3x4) -> simd_double3x3\nReturns the product of a 4 x 3 matrix and a 3 x 4 matrix."
  },
  {
    "title": "simd_almost_equal_elements(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883601-simd_almost_equal_elements",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_double3x3, simd_double3x3) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements_relative(simd_double3x3, simd_double3x3, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified double-precision relative tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "simd_add(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883546-simd_add",
    "html": "See Also\nMath Functions\nfunc simd_sub(simd_double2x2, simd_double2x2) -> simd_double2x2\nReturns the difference of two matrices.\nfunc matrix_scale(Double, simd_double2x2) -> simd_double2x2\nReturns the product of a scalar value and a matrix."
  },
  {
    "title": "simd_sub(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883387-simd_sub",
    "html": "See Also\nMath Functions\nfunc simd_add(simd_double2x2, simd_double2x2) -> simd_double2x2\nReturns the sum of two matrices.\nfunc matrix_scale(Double, simd_double2x2) -> simd_double2x2\nReturns the product of a scalar value and a matrix."
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double3x2/2914725-subscript",
    "html": "See Also\nElement Access\nsubscript(Int, Int) -> Double\nAccesses the element at the specified position."
  },
  {
    "title": "simd_almost_equal_elements_relative(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883489-simd_almost_equal_elements_relat",
    "html": "See Also\nEquality Functions\nfunc simd_equal(simd_double3x2, simd_double3x2) -> simd_bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix.\nfunc simd_almost_equal_elements(simd_double3x2, simd_double3x2, Double) -> simd_bool\nReturns true if every element in a matrix is within a specified tolerance to the corresponding element in a second matrix."
  },
  {
    "title": "simd_mul(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883525-simd_mul",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc matrix_multiply(simd_double2, simd_double2x2) -> simd_double2\nReturns the product of a two-element vector and a 2 x 2 matrix.\nfunc simd_mul(simd_double2x2, simd_double2) -> simd_double2\nReturns the product of a 2 x 2 matrix and a two-element vector.\nfunc matrix_multiply(simd_double2x2, simd_double2) -> simd_double2\nReturns the product of a 2 x 2 matrix and a two-element vector."
  },
  {
    "title": "matrix_scale(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883575-matrix_scale",
    "html": "See Also\nMath Functions\nfunc simd_add(simd_double2x2, simd_double2x2) -> simd_double2x2\nReturns the sum of two matrices.\nfunc simd_sub(simd_double2x2, simd_double2x2) -> simd_double2x2\nReturns the difference of two matrices."
  },
  {
    "title": "matrix_multiply(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2908940-matrix_multiply",
    "html": "See Also\nMatrix-Vector Multiplication Functions\nfunc simd_mul(simd_double2, simd_double2x2) -> simd_double2\nReturns the product of a two-element vector and a 2 x 2 matrix.\nfunc simd_mul(simd_double2x2, simd_double2) -> simd_double2\nReturns the product of a 2 x 2 matrix and a two-element vector.\nfunc matrix_multiply(simd_double2x2, simd_double2) -> simd_double2\nReturns the product of a 2 x 2 matrix and a two-element vector."
  },
  {
    "title": "matrix_from_columns(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914607-matrix_from_columns",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double3x3) -> simd_double3x3\nReturns the inverse of the specified matrix.\nfunc matrix_from_diagonal(SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double3x3) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_double3x3, simd_double3x3) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_double3x3) -> double3x3\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double3x3)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double3x3\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "matrix_transpose(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914641-matrix_transpose",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double3x3) -> simd_double3x3\nReturns the inverse of the specified matrix.\nfunc matrix_from_columns(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_from_diagonal(SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double3x3) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_double3x3, simd_double3x3) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\ninit(simd_double3x3)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double3x3\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "subscript(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double3x3/2914789-subscript",
    "html": "See Also\nElement Access\nsubscript(Int, Int) -> Double\nAccesses the element at the specified position."
  },
  {
    "title": "matrix_determinant(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914177-matrix_determinant",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double3x3) -> simd_double3x3\nReturns the inverse of the specified matrix.\nfunc matrix_from_columns(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_from_diagonal(SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_equal(simd_double3x3, simd_double3x3) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_double3x3) -> double3x3\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double3x3)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double3x3\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "matrix_from_diagonal(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914245-matrix_from_diagonal",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double3x3) -> simd_double3x3\nReturns the inverse of the specified matrix.\nfunc matrix_from_columns(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_determinant(simd_double3x3) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_double3x3, simd_double3x3) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_double3x3) -> double3x3\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double3x3)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double3x3\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "matrix_invert(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914974-matrix_invert",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_from_columns(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_from_diagonal(SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double3x3) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_equal(simd_double3x3, simd_double3x3) -> Bool\nReturns true if every element in a matrix is exactly equal to the corresponding element in a second matrix, and otherwise returns false.\nDeprecated\nfunc matrix_transpose(simd_double3x3) -> double3x3\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double3x3)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double3x3\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "simd_inverse(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883349-simd_inverse",
    "html": "See Also\nDeterminant and Inverse Functions\nfunc simd_determinant(simd_double3x3) -> Double\nReturns the determinant of the specified matrix."
  },
  {
    "title": "subscript(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double3x3/2914713-subscript",
    "html": "See Also\nElement Access\nsubscript(Int) -> SIMD3<Double>\nAccesses the column at the specified position."
  },
  {
    "title": "matrix_equal(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914211-matrix_equal",
    "html": "See Also\nDeprecated Symbols\nfunc matrix_invert(simd_double3x3) -> simd_double3x3\nReturns the inverse of the specified matrix.\nfunc matrix_from_columns(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified columns.\nDeprecated\nfunc matrix_from_diagonal(SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified vector on the main diagonal.\nDeprecated\nfunc matrix_determinant(simd_double3x3) -> Double\nReturns the determinant of the specified matrix.\nDeprecated\nfunc matrix_transpose(simd_double3x3) -> double3x3\nReturns the transpose of a matrix.\nDeprecated\ninit(simd_double3x3)\nCreates a new matrix with the specified matrix.\nDeprecated\nvar cmatrix: simd_double3x3\nReturns the matrix as the corresponding C matrix type.\nDeprecated"
  },
  {
    "title": "columns | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/simd_double3x3/2868318-columns",
    "html": "See Also\nMatrix Properties\nvar determinant: Double\nThe determinant of the matrix.\nvar inverse: simd_double3x3\nThe inverse of the matrix.\nvar transpose: double3x3\nThe transpose of the matrix.\nvar debugDescription: String\nA representation of the matrix that is suitable for debugging."
  },
  {
    "title": "simd_matrix(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896492-simd_matrix",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix_from_rows(simd_double3, simd_double3, simd_double3) -> simd_double3x3\nReturns a new matrix with the specified rows.\nfunc matrix_from_rows(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified rows.\nfunc simd_diagonal_matrix(simd_double3) -> simd_double3x3\nReturns a new matrix with the specified vector on the main diagonal.\nfunc simd_matrix3x3(simd_quatd) -> simd_double3x3\nReturns a new matrix with the specified quarternion."
  },
  {
    "title": "matrix_from_rows(_:_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2914433-matrix_from_rows",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_double3, simd_double3, simd_double3) -> simd_double3x3\nReturns a new matrix with the specified columns.\nfunc simd_matrix_from_rows(simd_double3, simd_double3, simd_double3) -> simd_double3x3\nReturns a new matrix with the specified rows.\nfunc simd_diagonal_matrix(simd_double3) -> simd_double3x3\nReturns a new matrix with the specified vector on the main diagonal.\nfunc simd_matrix3x3(simd_quatd) -> simd_double3x3\nReturns a new matrix with the specified quarternion."
  },
  {
    "title": "simd_matrix3x3(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2883664-simd_matrix3x3",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_double3, simd_double3, simd_double3) -> simd_double3x3\nReturns a new matrix with the specified columns.\nfunc simd_matrix_from_rows(simd_double3, simd_double3, simd_double3) -> simd_double3x3\nReturns a new matrix with the specified rows.\nfunc matrix_from_rows(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified rows.\nfunc simd_diagonal_matrix(simd_double3) -> simd_double3x3\nReturns a new matrix with the specified vector on the main diagonal."
  },
  {
    "title": "simd_diagonal_matrix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/accelerate/2896693-simd_diagonal_matrix",
    "html": "See Also\nMatrix Creation Functions\nfunc simd_matrix(simd_double3, simd_double3, simd_double3) -> simd_double3x3\nReturns a new matrix with the specified columns.\nfunc simd_matrix_from_rows(simd_double3, simd_double3, simd_double3) -> simd_double3x3\nReturns a new matrix with the specified rows.\nfunc matrix_from_rows(SIMD3<Double>, SIMD3<Double>, SIMD3<Double>) -> simd_double3x3\nReturns a new matrix with the specified rows.\nfunc simd_matrix3x3(simd_quatd) -> simd_double3x3\nReturns a new matrix with the specified quarternion."
  }
]
