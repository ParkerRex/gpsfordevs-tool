[
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/iterator/4248762-next",
    "html": "Relationships\nFrom Protocol\nAsyncIteratorProtocol"
  },
  {
    "title": "next() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/iterator/4248806-next",
    "html": "Relationships\nFrom Protocol\nAsyncIteratorProtocol"
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248819-dropfirst",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence."
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248823-first",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends."
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248830-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n"
  },
  {
    "title": "CMOdometerOriginDevice.unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerorigindevice/unknown",
    "html": "See Also\nDevice origins\ncase local\nThe origin of the odometer sample comes from the same device that requests the sample.\ncase remote\nThe origin of the odometer sample comes from a device that’s paired with the local device."
  },
  {
    "title": "CMOdometerOriginDevice.remote | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerorigindevice/remote",
    "html": "See Also\nDevice origins\ncase unknown\nThe origin of the odometer sample is unknown.\ncase local\nThe origin of the odometer sample comes from the same device that requests the sample."
  },
  {
    "title": "CMOdometerOriginDevice.local | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerorigindevice/local",
    "html": "See Also\nDevice origins\ncase unknown\nThe origin of the odometer sample is unknown.\ncase remote\nThe origin of the odometer sample comes from a device that’s paired with the local device."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248809-compactmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n"
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248807-allsatisfy",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true."
  },
  {
    "title": "CMErrorNULL | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmerrornull",
    "html": "See Also\nErrors\nvar CMErrorDeviceRequiresMovement: CMError\nThe device must move for a sampling of motion data to occur.\nvar CMErrorInvalidAction: CMError\nThe specified action is invalid.\nvar CMErrorInvalidParameter: CMError\nThe specified parameter is invalid.\nvar CMErrorMotionActivityNotAuthorized: CMError\nThe app isn’t currently authorized to use motion activity support.\nvar CMErrorMotionActivityNotAvailable: CMError\nMotion activity support isn’t available on the current device.\nvar CMErrorMotionActivityNotEntitled: CMError\nThe app is missing an entitlement for the requested activity.\nvar CMErrorNilData: CMError\nCore Motion didn’t return any data.\nvar CMErrorNotAuthorized: CMError\nThe app isn’t authorized to use the Core Motion framework.\nvar CMErrorNotAvailable: CMError\nThe requested service isn’t available on this device.\nvar CMErrorNotEntitled: CMError\nThe app is missing a required entitlement.\nvar CMErrorSize: CMError\nThe data is the incorrect size.\nvar CMErrorTrueNorthNotAvailable: CMError\nTrue north isn’t available on this device.\nvar CMErrorUnknown: CMError\nAn unknown error occurred."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248811-compactmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n"
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248813-contains",
    "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n"
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248815-contains",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248817-drop",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248821-filter",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n"
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248825-flatmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n"
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248827-flatmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n"
  },
  {
    "title": "makeAsyncIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248829-makeasynciterator",
    "html": "Relationships\nFrom Protocol\nAsyncSequence"
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248834-max",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n"
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248832-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n"
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248836-min",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n"
  },
  {
    "title": "CMBatchedSensorManager.DeviceMotionUpdates.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/iterator",
    "html": "Topics\nType Aliases\ntypealias CMBatchedSensorManager.DeviceMotionUpdates.Iterator.Element\nInstance Methods\nfunc next() -> (CMBatchedSensorManager.DeviceMotionUpdates.Element)?\nRelationships\nConforms To\nAsyncIteratorProtocol"
  },
  {
    "title": "allSatisfy(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248763-allsatisfy",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.\n\nReturn Value\n\ntrue if the sequence contains only elements that satisfy predicate; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The allSatisfy(_:) method checks to see whether all elements produced by the sequence are less than 10.\n\nlet allLessThanTen = await Counter(howHigh: 10)\n    .allSatisfy { $0 < 10 }\nprint(allLessThanTen)\n// Prints \"false\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate returns false or the sequence ends.\n\nIf the asynchronous sequence is empty, this method returns true."
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248765-compactmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n    \nlet stream = Counter(howHigh: 5)\n    .compactMap { romanNumeralDict[$0] }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III V \"\n"
  },
  {
    "title": "compactMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248767-compactmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. If transform throws an error, the sequence ends.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure. The sequence ends either when the base sequence ends or when transform throws an error.\n\nDiscussion\n\nUse the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Since there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence. When the value is 5, the closure throws MyError, terminating the sequence.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .compactMap { (value) throws -> String? in\n            if value == 5 {\n                throw MyError()\n            }\n            return romanNumeralDict[value]\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n"
  },
  {
    "title": "contains(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248771-contains",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.\n\nReturn Value\n\ntrue if the sequence contains an element that satisfies predicate; otherwise, false.\n\nDiscussion\n\nYou can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, or to find an element that satisfies a general condition.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(where:) method checks to see whether the sequence produces a value divisible by 3:\n\nlet containsDivisibleByThree = await Counter(howHigh: 10)\n    .contains { $0 % 3 == 0 }\nprint(containsDivisibleByThree)\n// Prints \"true\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends."
  },
  {
    "title": "drop(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248773-drop",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence that skips over values from the base sequence until the provided closure returns false.\n\nDiscussion\n\nUse drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:\n\nlet stream = Counter(howHigh: 10)\n    .drop { $0 % 3 != 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"3 4 5 6 7 8 9 10 \"\n\n\nAfter the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248783-flatmap",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.\n\nlet stream = Counter(howHigh: 5)\n    .flatMap { Counter(howHigh: $0) }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 \"\n"
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248786-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces:\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\nlet stream = Counter(howHigh: 5)\n    .map { romanNumeralDict[$0] ?? \"(unknown)\" }\nfor await numeral in stream {\n    print(numeral, terminator: \" \")\n}\n// Prints \"I II III (unknown) V \"\n"
  },
  {
    "title": "dropFirst(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248775-dropfirst",
    "html": "Parameters\ncount\n\nThe number of elements to drop from the beginning of the sequence. count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence that drops the first count elements from the base sequence.\n\nDiscussion\n\nUse dropFirst(_:) when you want to drop the first n elements from the base sequence and pass through the remaining elements.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The dropFirst(_:) method causes the modified sequence to ignore the values 1 through 3, and instead emit 4 through 10:\n\nfor await number in Counter(howHigh: 10).dropFirst(3) {\n    print(number, terminator: \" \")\n}\n// Prints \"4 5 6 7 8 9 10 \"\n\n\nIf the number of elements to drop exceeds the number of elements in the sequence, the result is an empty sequence."
  },
  {
    "title": "filter(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248777-filter",
    "html": "Parameters\nisIncluded\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether to include the element in the filtered sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The filter(_:) method returns true for even values and false for odd values, thereby filtering out the odd values:\n\nlet stream = Counter(howHigh: 10)\n    .filter { $0 % 2 == 0 }\nfor await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"2 4 6 8 10 \"\n"
  },
  {
    "title": "contains(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248769-contains",
    "html": "Parameters\nsearch\n\nThe element to find in the asynchronous sequence.\n\nReturn Value\n\ntrue if the method found the element in the asynchronous sequence; otherwise, false.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The contains(_:) method checks to see whether the sequence produces the value 5:\n\nlet containsFive = await Counter(howHigh: 10)\n    .contains(5)\nprint(containsFive)\n// Prints \"true\"\n"
  },
  {
    "title": "makeAsyncIterator() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248785-makeasynciterator",
    "html": "Relationships\nFrom Protocol\nAsyncSequence"
  },
  {
    "title": "map(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248788-map",
    "html": "Parameters\ntransform\n\nA mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. transform can also throw an error, which ends the transformed sequence.\n\nReturn Value\n\nAn asynchronous sequence that contains, in order, the elements produced by the transform closure.\n\nDiscussion\n\nUse the map(_:) method to transform every element received from a base asynchronous sequence. Typically, you use this to transform from one type of element to another.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the map(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. This means the outer for await in loop iterates over String instances instead of the underlying Int values that Counter produces. Also, the dictionary doesn’t provide a key for 4, and the closure throws an error for any key it can’t look up, so receiving this value from Counter ends the modified sequence with an error.\n\nlet romanNumeralDict: [Int: String] =\n    [1: \"I\", 2: \"II\", 3: \"III\", 5: \"V\"]\n\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .map { (value) throws -> String in\n            guard let roman = romanNumeralDict[value] else {\n                throw MyError()\n            }\n            return roman\n        }\n    for try await numeral in stream {\n        print(numeral, terminator: \" \")\n    }\n} catch {\n    print(\"Error: \\(error)\")\n}\n// Prints \"I II III Error: MyError() \"\n"
  },
  {
    "title": "max(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248790-max",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the max(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet max = await RankCounter()\n    .max { $0.rawValue < $1.rawValue }\nprint(max ?? \"none\")\n// Prints \"king\"\n"
  },
  {
    "title": "min(by:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248792-min",
    "html": "Parameters\nareInIncreasingOrder\n\nA predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.\n\nReturn Value\n\nThe sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil.\n\nDiscussion\n\nUse this method when the asynchronous sequence’s values don’t conform to Comparable, or when you want to apply a custom ordering to the sequence.\n\nThe predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:\n\nareInIncreasingOrder(a, a) is always false. (Irreflexivity)\n\nIf areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)\n\nTwo elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)\n\nThe following example uses an enumeration of playing cards ranks, Rank, which ranges from ace (low) to king (high). An asynchronous sequence called RankCounter produces all elements of the array. The predicate provided to the min(by:) method sorts ranks based on their rawValue:\n\nenum Rank: Int {\n    case ace = 1, two, three, four, five, six, seven, eight, nine, ten, jack, queen, king\n}\n\n\nlet min = await RankCounter()\n    .min { $0.rawValue < $1.rawValue }\nprint(min ?? \"none\")\n// Prints \"ace\"\n"
  },
  {
    "title": "CMBatchedSensorManager.AccelerometerUpdates.Iterator | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/iterator",
    "html": "Topics\nType Aliases\ntypealias CMBatchedSensorManager.AccelerometerUpdates.Iterator.Element\nInstance Methods\nfunc next() -> (CMBatchedSensorManager.AccelerometerUpdates.Element)?\nRelationships\nConforms To\nAsyncIteratorProtocol"
  },
  {
    "title": "CMFallDetectionEvent.UserResolution.dismissed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmfalldetectionevent/userresolution/dismissed",
    "html": "Discussion\n\nThe user can dismiss the alert by pressing the digital crown or tapping the close button."
  },
  {
    "title": "maxAbsSlope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerdata/4168142-maxabsslope",
    "html": "Discussion\n\nIf the maximum absolute slope is invalid due to low GPS accuracy, this property is nil.\n\nSee Also\nGetting speed and slope\nspeed\nThe instantaneous velocity of the device, measured in meters per second.\nslope\nThe slope at the location toward the direction of travel, measured in degrees."
  },
  {
    "title": "headphoneMotionManagerDidDisconnect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmheadphonemotionmanagerdelegate/3621847-headphonemotionmanagerdiddisconn",
    "html": "Parameters\nmanager\n\nThe manager for the disconnected headphones.\n\nSee Also\nConnecting and Disconnecting Headphones\nfunc headphoneMotionManagerDidConnect(CMHeadphoneMotionManager)\nPerforms a callback to the delegate after you connect headphones.\ntypealias CMHeadphoneMotionManager.DeviceMotionHandler\nThe type of block callback for handling headphone-motion data."
  },
  {
    "title": "headphoneMotionManagerDidConnect(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmheadphonemotionmanagerdelegate/3621846-headphonemotionmanagerdidconnect",
    "html": "Parameters\nmanager\n\nThe manager for the connected headphones.\n\nSee Also\nConnecting and Disconnecting Headphones\nfunc headphoneMotionManagerDidDisconnect(CMHeadphoneMotionManager)\nPerforms a callback to the delegate after you disconnect headphones.\ntypealias CMHeadphoneMotionManager.DeviceMotionHandler\nThe type of block callback for handling headphone-motion data."
  },
  {
    "title": "CMHeadphoneMotionManager.DeviceMotionHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmheadphonemotionmanager/devicemotionhandler",
    "html": "Discussion\n\nThe system calls CMDeviceMotionHandler blocks when there is device-motion data to process. You pass the block into startDeviceMotionUpdates(to:withHandler:) as the second argument. Blocks of this type return no value, but take two arguments:\n\nmotion\n\nA CMHeadphoneMotionManager object, which encapsulates other objects and a structure representing attitude, rotation rate, gravity, and user acceleration.\n\nerror\n\nAn error object representing an error when providing gyroscope data. If an error occurs, you should stop gyroscope updates and inform the user of the problem. If there is no error, this argument is nil. Core Motion errors are of the CMErrorDomain domain and the CMError type.\n\nSee Also\nConnecting and Disconnecting Headphones\nfunc headphoneMotionManagerDidConnect(CMHeadphoneMotionManager)\nPerforms a callback to the delegate after you connect headphones.\nfunc headphoneMotionManagerDidDisconnect(CMHeadphoneMotionManager)\nPerforms a callback to the delegate after you disconnect headphones."
  },
  {
    "title": "init(x:y:z:w:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmquaternion/1616044-init",
    "html": "See Also\nInitializing the Quaternion\ninit()"
  },
  {
    "title": "CMWaterSubmersionMeasurement.DepthState.notSubmerged | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmeasurement/depthstate/notsubmerged",
    "html": "See Also\nDepth states\ncase submergedShallow\nThe device is submerged, but less than 1 meter under water.\ncase submergedDeep\nThe device is submerged at least 1 meter under water.\ncase approachingMaxDepth\nThe device is approaching the maximum safe diving depth.\ncase pastMaxDepth\nThe device has exceeded the maximum safe diving depth.\ncase sensorDepthError\nAn error with the depth sensor occurred.\ncase unknown\nThe device’s depth state is unknown."
  },
  {
    "title": "CMWaterSubmersionEvent.State.unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionevent/state/unknown",
    "html": "See Also\nSubmersion states\ncase notSubmerged\nThe device isn’t submerged in water.\ncase submerged\nThe device is submerged in water."
  },
  {
    "title": "CMWaterSubmersionMeasurement.DepthState.submergedShallow | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmeasurement/depthstate/submergedshallow",
    "html": "See Also\nDepth states\ncase notSubmerged\nThe device is not submerged in water.\ncase submergedDeep\nThe device is submerged at least 1 meter under water.\ncase approachingMaxDepth\nThe device is approaching the maximum safe diving depth.\ncase pastMaxDepth\nThe device has exceeded the maximum safe diving depth.\ncase sensorDepthError\nAn error with the depth sensor occurred.\ncase unknown\nThe device’s depth state is unknown."
  },
  {
    "title": "CMWaterSubmersionMeasurement.DepthState.unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmeasurement/depthstate/unknown",
    "html": "See Also\nDepth states\ncase notSubmerged\nThe device is not submerged in water.\ncase submergedShallow\nThe device is submerged, but less than 1 meter under water.\ncase submergedDeep\nThe device is submerged at least 1 meter under water.\ncase approachingMaxDepth\nThe device is approaching the maximum safe diving depth.\ncase pastMaxDepth\nThe device has exceeded the maximum safe diving depth.\ncase sensorDepthError\nAn error with the depth sensor occurred."
  },
  {
    "title": "CMErrorInvalidParameter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmerrorinvalidparameter",
    "html": "See Also\nErrors\nvar CMErrorDeviceRequiresMovement: CMError\nThe device must move for a sampling of motion data to occur.\nvar CMErrorInvalidAction: CMError\nThe specified action is invalid.\nvar CMErrorMotionActivityNotAuthorized: CMError\nThe app isn’t currently authorized to use motion activity support.\nvar CMErrorMotionActivityNotAvailable: CMError\nMotion activity support isn’t available on the current device.\nvar CMErrorMotionActivityNotEntitled: CMError\nThe app is missing an entitlement for the requested activity.\nvar CMErrorNilData: CMError\nCore Motion didn’t return any data.\nvar CMErrorNULL: CMError\nNo error occurred.\nvar CMErrorNotAuthorized: CMError\nThe app isn’t authorized to use the Core Motion framework.\nvar CMErrorNotAvailable: CMError\nThe requested service isn’t available on this device.\nvar CMErrorNotEntitled: CMError\nThe app is missing a required entitlement.\nvar CMErrorSize: CMError\nThe data is the incorrect size.\nvar CMErrorTrueNorthNotAvailable: CMError\nTrue north isn’t available on this device.\nvar CMErrorUnknown: CMError\nAn unknown error occurred."
  },
  {
    "title": "CMErrorInvalidAction | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmerrorinvalidaction",
    "html": "See Also\nErrors\nvar CMErrorDeviceRequiresMovement: CMError\nThe device must move for a sampling of motion data to occur.\nvar CMErrorInvalidParameter: CMError\nThe specified parameter is invalid.\nvar CMErrorMotionActivityNotAuthorized: CMError\nThe app isn’t currently authorized to use motion activity support.\nvar CMErrorMotionActivityNotAvailable: CMError\nMotion activity support isn’t available on the current device.\nvar CMErrorMotionActivityNotEntitled: CMError\nThe app is missing an entitlement for the requested activity.\nvar CMErrorNilData: CMError\nCore Motion didn’t return any data.\nvar CMErrorNULL: CMError\nNo error occurred.\nvar CMErrorNotAuthorized: CMError\nThe app isn’t authorized to use the Core Motion framework.\nvar CMErrorNotAvailable: CMError\nThe requested service isn’t available on this device.\nvar CMErrorNotEntitled: CMError\nThe app is missing a required entitlement.\nvar CMErrorSize: CMError\nThe data is the incorrect size.\nvar CMErrorTrueNorthNotAvailable: CMError\nTrue north isn’t available on this device.\nvar CMErrorUnknown: CMError\nAn unknown error occurred."
  },
  {
    "title": "CMDeviceMotion.SensorLocation.headphoneRight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdevicemotion/sensorlocation/headphoneright",
    "html": "See Also\nSensor Locations\ncase `default`\nThe default sensor location.\ncase headphoneLeft\nThe sensor is in the left headphone."
  },
  {
    "title": "CMErrorMotionActivityNotAuthorized | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmerrormotionactivitynotauthorized",
    "html": "See Also\nErrors\nvar CMErrorDeviceRequiresMovement: CMError\nThe device must move for a sampling of motion data to occur.\nvar CMErrorInvalidAction: CMError\nThe specified action is invalid.\nvar CMErrorInvalidParameter: CMError\nThe specified parameter is invalid.\nvar CMErrorMotionActivityNotAvailable: CMError\nMotion activity support isn’t available on the current device.\nvar CMErrorMotionActivityNotEntitled: CMError\nThe app is missing an entitlement for the requested activity.\nvar CMErrorNilData: CMError\nCore Motion didn’t return any data.\nvar CMErrorNULL: CMError\nNo error occurred.\nvar CMErrorNotAuthorized: CMError\nThe app isn’t authorized to use the Core Motion framework.\nvar CMErrorNotAvailable: CMError\nThe requested service isn’t available on this device.\nvar CMErrorNotEntitled: CMError\nThe app is missing a required entitlement.\nvar CMErrorSize: CMError\nThe data is the incorrect size.\nvar CMErrorTrueNorthNotAvailable: CMError\nTrue north isn’t available on this device.\nvar CMErrorUnknown: CMError\nAn unknown error occurred."
  },
  {
    "title": "CMDeviceMotion.SensorLocation.headphoneLeft | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdevicemotion/sensorlocation/headphoneleft",
    "html": "See Also\nSensor Locations\ncase `default`\nThe default sensor location.\ncase headphoneRight\nThe sensor is in the right headphone."
  },
  {
    "title": "CMErrorMotionActivityNotAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmerrormotionactivitynotavailable",
    "html": "See Also\nErrors\nvar CMErrorDeviceRequiresMovement: CMError\nThe device must move for a sampling of motion data to occur.\nvar CMErrorInvalidAction: CMError\nThe specified action is invalid.\nvar CMErrorInvalidParameter: CMError\nThe specified parameter is invalid.\nvar CMErrorMotionActivityNotAuthorized: CMError\nThe app isn’t currently authorized to use motion activity support.\nvar CMErrorMotionActivityNotEntitled: CMError\nThe app is missing an entitlement for the requested activity.\nvar CMErrorNilData: CMError\nCore Motion didn’t return any data.\nvar CMErrorNULL: CMError\nNo error occurred.\nvar CMErrorNotAuthorized: CMError\nThe app isn’t authorized to use the Core Motion framework.\nvar CMErrorNotAvailable: CMError\nThe requested service isn’t available on this device.\nvar CMErrorNotEntitled: CMError\nThe app is missing a required entitlement.\nvar CMErrorSize: CMError\nThe data is the incorrect size.\nvar CMErrorTrueNorthNotAvailable: CMError\nTrue north isn’t available on this device.\nvar CMErrorUnknown: CMError\nAn unknown error occurred."
  },
  {
    "title": "CMErrorNilData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmerrornildata",
    "html": "See Also\nErrors\nvar CMErrorDeviceRequiresMovement: CMError\nThe device must move for a sampling of motion data to occur.\nvar CMErrorInvalidAction: CMError\nThe specified action is invalid.\nvar CMErrorInvalidParameter: CMError\nThe specified parameter is invalid.\nvar CMErrorMotionActivityNotAuthorized: CMError\nThe app isn’t currently authorized to use motion activity support.\nvar CMErrorMotionActivityNotAvailable: CMError\nMotion activity support isn’t available on the current device.\nvar CMErrorMotionActivityNotEntitled: CMError\nThe app is missing an entitlement for the requested activity.\nvar CMErrorNULL: CMError\nNo error occurred.\nvar CMErrorNotAuthorized: CMError\nThe app isn’t authorized to use the Core Motion framework.\nvar CMErrorNotAvailable: CMError\nThe requested service isn’t available on this device.\nvar CMErrorNotEntitled: CMError\nThe app is missing a required entitlement.\nvar CMErrorSize: CMError\nThe data is the incorrect size.\nvar CMErrorTrueNorthNotAvailable: CMError\nTrue north isn’t available on this device.\nvar CMErrorUnknown: CMError\nAn unknown error occurred."
  },
  {
    "title": "CMErrorNotAuthorized | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmerrornotauthorized",
    "html": "See Also\nErrors\nvar CMErrorDeviceRequiresMovement: CMError\nThe device must move for a sampling of motion data to occur.\nvar CMErrorInvalidAction: CMError\nThe specified action is invalid.\nvar CMErrorInvalidParameter: CMError\nThe specified parameter is invalid.\nvar CMErrorMotionActivityNotAuthorized: CMError\nThe app isn’t currently authorized to use motion activity support.\nvar CMErrorMotionActivityNotAvailable: CMError\nMotion activity support isn’t available on the current device.\nvar CMErrorMotionActivityNotEntitled: CMError\nThe app is missing an entitlement for the requested activity.\nvar CMErrorNilData: CMError\nCore Motion didn’t return any data.\nvar CMErrorNULL: CMError\nNo error occurred.\nvar CMErrorNotAvailable: CMError\nThe requested service isn’t available on this device.\nvar CMErrorNotEntitled: CMError\nThe app is missing a required entitlement.\nvar CMErrorSize: CMError\nThe data is the incorrect size.\nvar CMErrorTrueNorthNotAvailable: CMError\nTrue north isn’t available on this device.\nvar CMErrorUnknown: CMError\nAn unknown error occurred."
  },
  {
    "title": "CMErrorMotionActivityNotEntitled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmerrormotionactivitynotentitled",
    "html": "See Also\nErrors\nvar CMErrorDeviceRequiresMovement: CMError\nThe device must move for a sampling of motion data to occur.\nvar CMErrorInvalidAction: CMError\nThe specified action is invalid.\nvar CMErrorInvalidParameter: CMError\nThe specified parameter is invalid.\nvar CMErrorMotionActivityNotAuthorized: CMError\nThe app isn’t currently authorized to use motion activity support.\nvar CMErrorMotionActivityNotAvailable: CMError\nMotion activity support isn’t available on the current device.\nvar CMErrorNilData: CMError\nCore Motion didn’t return any data.\nvar CMErrorNULL: CMError\nNo error occurred.\nvar CMErrorNotAuthorized: CMError\nThe app isn’t authorized to use the Core Motion framework.\nvar CMErrorNotAvailable: CMError\nThe requested service isn’t available on this device.\nvar CMErrorNotEntitled: CMError\nThe app is missing a required entitlement.\nvar CMErrorSize: CMError\nThe data is the incorrect size.\nvar CMErrorTrueNorthNotAvailable: CMError\nTrue north isn’t available on this device.\nvar CMErrorUnknown: CMError\nAn unknown error occurred."
  },
  {
    "title": "CMErrorNotAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmerrornotavailable",
    "html": "See Also\nErrors\nvar CMErrorDeviceRequiresMovement: CMError\nThe device must move for a sampling of motion data to occur.\nvar CMErrorInvalidAction: CMError\nThe specified action is invalid.\nvar CMErrorInvalidParameter: CMError\nThe specified parameter is invalid.\nvar CMErrorMotionActivityNotAuthorized: CMError\nThe app isn’t currently authorized to use motion activity support.\nvar CMErrorMotionActivityNotAvailable: CMError\nMotion activity support isn’t available on the current device.\nvar CMErrorMotionActivityNotEntitled: CMError\nThe app is missing an entitlement for the requested activity.\nvar CMErrorNilData: CMError\nCore Motion didn’t return any data.\nvar CMErrorNULL: CMError\nNo error occurred.\nvar CMErrorNotAuthorized: CMError\nThe app isn’t authorized to use the Core Motion framework.\nvar CMErrorNotEntitled: CMError\nThe app is missing a required entitlement.\nvar CMErrorSize: CMError\nThe data is the incorrect size.\nvar CMErrorTrueNorthNotAvailable: CMError\nTrue north isn’t available on this device.\nvar CMErrorUnknown: CMError\nAn unknown error occurred."
  },
  {
    "title": "CMErrorTrueNorthNotAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmerrortruenorthnotavailable",
    "html": "Discussion\n\nThis error usually indicates that the device’s location isn’t yet available.\n\nSee Also\nErrors\nvar CMErrorDeviceRequiresMovement: CMError\nThe device must move for a sampling of motion data to occur.\nvar CMErrorInvalidAction: CMError\nThe specified action is invalid.\nvar CMErrorInvalidParameter: CMError\nThe specified parameter is invalid.\nvar CMErrorMotionActivityNotAuthorized: CMError\nThe app isn’t currently authorized to use motion activity support.\nvar CMErrorMotionActivityNotAvailable: CMError\nMotion activity support isn’t available on the current device.\nvar CMErrorMotionActivityNotEntitled: CMError\nThe app is missing an entitlement for the requested activity.\nvar CMErrorNilData: CMError\nCore Motion didn’t return any data.\nvar CMErrorNULL: CMError\nNo error occurred.\nvar CMErrorNotAuthorized: CMError\nThe app isn’t authorized to use the Core Motion framework.\nvar CMErrorNotAvailable: CMError\nThe requested service isn’t available on this device.\nvar CMErrorNotEntitled: CMError\nThe app is missing a required entitlement.\nvar CMErrorSize: CMError\nThe data is the incorrect size.\nvar CMErrorUnknown: CMError\nAn unknown error occurred."
  },
  {
    "title": "CMErrorSize | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmerrorsize",
    "html": "See Also\nErrors\nvar CMErrorDeviceRequiresMovement: CMError\nThe device must move for a sampling of motion data to occur.\nvar CMErrorInvalidAction: CMError\nThe specified action is invalid.\nvar CMErrorInvalidParameter: CMError\nThe specified parameter is invalid.\nvar CMErrorMotionActivityNotAuthorized: CMError\nThe app isn’t currently authorized to use motion activity support.\nvar CMErrorMotionActivityNotAvailable: CMError\nMotion activity support isn’t available on the current device.\nvar CMErrorMotionActivityNotEntitled: CMError\nThe app is missing an entitlement for the requested activity.\nvar CMErrorNilData: CMError\nCore Motion didn’t return any data.\nvar CMErrorNULL: CMError\nNo error occurred.\nvar CMErrorNotAuthorized: CMError\nThe app isn’t authorized to use the Core Motion framework.\nvar CMErrorNotAvailable: CMError\nThe requested service isn’t available on this device.\nvar CMErrorNotEntitled: CMError\nThe app is missing a required entitlement.\nvar CMErrorTrueNorthNotAvailable: CMError\nTrue north isn’t available on this device.\nvar CMErrorUnknown: CMError\nAn unknown error occurred."
  },
  {
    "title": "CMErrorUnknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmerrorunknown",
    "html": "See Also\nErrors\nvar CMErrorDeviceRequiresMovement: CMError\nThe device must move for a sampling of motion data to occur.\nvar CMErrorInvalidAction: CMError\nThe specified action is invalid.\nvar CMErrorInvalidParameter: CMError\nThe specified parameter is invalid.\nvar CMErrorMotionActivityNotAuthorized: CMError\nThe app isn’t currently authorized to use motion activity support.\nvar CMErrorMotionActivityNotAvailable: CMError\nMotion activity support isn’t available on the current device.\nvar CMErrorMotionActivityNotEntitled: CMError\nThe app is missing an entitlement for the requested activity.\nvar CMErrorNilData: CMError\nCore Motion didn’t return any data.\nvar CMErrorNULL: CMError\nNo error occurred.\nvar CMErrorNotAuthorized: CMError\nThe app isn’t authorized to use the Core Motion framework.\nvar CMErrorNotAvailable: CMError\nThe requested service isn’t available on this device.\nvar CMErrorNotEntitled: CMError\nThe app is missing a required entitlement.\nvar CMErrorSize: CMError\nThe data is the incorrect size.\nvar CMErrorTrueNorthNotAvailable: CMError\nTrue north isn’t available on this device."
  },
  {
    "title": "z | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmacceleration/1616125-z",
    "html": "See Also\nGetting the Acceleration Values\nvar x: Double\nX-axis acceleration in G's (gravitational force).\nvar y: Double\nY-axis acceleration in G's (gravitational force)."
  },
  {
    "title": "x | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmacceleration/1615916-x",
    "html": "See Also\nGetting the Acceleration Values\nvar y: Double\nY-axis acceleration in G's (gravitational force).\nvar z: Double\nZ-axis acceleration in G's (gravitational force)."
  },
  {
    "title": "y | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmacceleration/1615983-y",
    "html": "See Also\nGetting the Acceleration Values\nvar x: Double\nX-axis acceleration in G's (gravitational force).\nvar z: Double\nZ-axis acceleration in G's (gravitational force)."
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248844-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248840-prefix",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n"
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248838-prefix",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence."
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates/4248842-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n"
  },
  {
    "title": "first(where:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248779-first",
    "html": "Parameters\npredicate\n\nA closure that takes an element of the asynchronous sequence as its argument and returns a Boolean value that indicates whether the element is a match.\n\nReturn Value\n\nThe first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate.\n\nDiscussion\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The first(where:) method returns the first member of the sequence that’s evenly divisible by both 2 and 3.\n\nlet divisibleBy2And3 = await Counter(howHigh: 10)\n    .first { $0 % 2 == 0 && $0 % 3 == 0 }\nprint(divisibleBy2And3 ?? \"none\")\n// Prints \"6\"\n\n\nThe predicate executes each time the asynchronous sequence produces an element, until either the predicate finds a match or the sequence ends."
  },
  {
    "title": "flatMap(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248781-flatmap",
    "html": "Parameters\ntransform\n\nAn error-throwing mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence. If transform throws an error, the sequence ends.\n\nReturn Value\n\nA single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform. The sequence ends either when the last sequence created from the last element from base sequence ends, or when transform throws an error.\n\nDiscussion\n\nUse this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence. However, when the closure receives 4, it throws an error, terminating the sequence.\n\ndo {\n    let stream = Counter(howHigh: 5)\n        .flatMap { (value) -> Counter in\n            if value == 4 {\n                throw MyError()\n            }\n            return Counter(howHigh: value)\n        }\n    for try await number in stream {\n        print(number, terminator: \" \")\n    }\n} catch {\n    print(error)\n}\n// Prints \"1 1 2 1 2 3 MyError() \"\n"
  },
  {
    "title": "reduce(_:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248798-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure runs.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 4. The reduce(_:_:) method sums the values received from the asynchronous sequence.\n\nlet sum = await Counter(howHigh: 4)\n    .reduce(0) {\n        $0 + $1\n    }\nprint(sum)\n// Prints \"10\"\n"
  },
  {
    "title": "reduce(into:_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248800-reduce",
    "html": "Parameters\ninitialResult\n\nThe value to use as the initial accumulating value. The nextPartialResult closure receives initialResult the first time the closure executes.\n\nnextPartialResult\n\nA closure that combines an accumulating value and an element of the asynchronous sequence into a new accumulating value, for use in the next call of the nextPartialResult closure or returned to the caller.\n\nReturn Value\n\nThe final accumulated value. If the sequence has no elements, the result is initialResult.\n\nDiscussion\n\nUse the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on a sequence of numbers to find their sum or product.\n\nThe nextPartialResult closure executes sequentially with an accumulating value initialized to initialResult and each element of the sequence.\n\nPrefer this method over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or Dictionary."
  },
  {
    "title": "prefix(while:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248796-prefix",
    "html": "Parameters\npredicate\n\nA closure that takes an element as a parameter and returns a Boolean value indicating whether the element should be included in the modified sequence.\n\nReturn Value\n\nAn asynchronous sequence of the initial, consecutive elements that satisfy predicate.\n\nDiscussion\n\nUse prefix(while:) to produce values while elements from the base sequence meet a condition you specify. The modified sequence ends when the predicate closure returns false.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(while:) method causes the modified sequence to pass along values so long as they aren’t divisible by 2 and 3. Upon reaching 6, the sequence ends:\n\nlet stream = Counter(howHigh: 10)\n    .prefix { $0 % 2 != 0 || $0 % 3 != 0 }\nfor try await number in stream {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 \"\n"
  },
  {
    "title": "prefix(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates/4248794-prefix",
    "html": "Parameters\ncount\n\nThe maximum number of elements to return. The value of count must be greater than or equal to zero.\n\nReturn Value\n\nAn asynchronous sequence starting at the beginning of the base sequence with at most count elements.\n\nDiscussion\n\nUse prefix(_:) to reduce the number of elements produced by the asynchronous sequence.\n\nIn this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The prefix(_:) method causes the modified sequence to pass through the first six values, then end.\n\nfor await number in Counter(howHigh: 10).prefix(6) {\n    print(number, terminator: \" \")\n}\n// Prints \"1 2 3 4 5 6 \"\n\n\nIf the count passed to prefix(_:) exceeds the number of elements in the base sequence, the result contains all of the elements in the sequence."
  },
  {
    "title": "CMErrorDeviceRequiresMovement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmerrordevicerequiresmovement",
    "html": "See Also\nErrors\nvar CMErrorInvalidAction: CMError\nThe specified action is invalid.\nvar CMErrorInvalidParameter: CMError\nThe specified parameter is invalid.\nvar CMErrorMotionActivityNotAuthorized: CMError\nThe app isn’t currently authorized to use motion activity support.\nvar CMErrorMotionActivityNotAvailable: CMError\nMotion activity support isn’t available on the current device.\nvar CMErrorMotionActivityNotEntitled: CMError\nThe app is missing an entitlement for the requested activity.\nvar CMErrorNilData: CMError\nCore Motion didn’t return any data.\nvar CMErrorNULL: CMError\nNo error occurred.\nvar CMErrorNotAuthorized: CMError\nThe app isn’t authorized to use the Core Motion framework.\nvar CMErrorNotAvailable: CMError\nThe requested service isn’t available on this device.\nvar CMErrorNotEntitled: CMError\nThe app is missing a required entitlement.\nvar CMErrorSize: CMError\nThe data is the incorrect size.\nvar CMErrorTrueNorthNotAvailable: CMError\nTrue north isn’t available on this device.\nvar CMErrorUnknown: CMError\nAn unknown error occurred."
  },
  {
    "title": "z | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrotationrate/1616111-z",
    "html": "See Also\nGetting the Rotation Rates\nvar x: Double\nThe value for the X-axis.\nvar y: Double\nThe value for the Y-axis."
  },
  {
    "title": "m33 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrotationmatrix/1616119-m33",
    "html": "See Also\nFields\nvar m11: Double\nvar m12: Double\nvar m13: Double\nvar m21: Double\nvar m22: Double\nvar m23: Double\nvar m31: Double\nvar m32: Double"
  },
  {
    "title": "m23 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrotationmatrix/1616146-m23",
    "html": "See Also\nFields\nvar m11: Double\nvar m12: Double\nvar m13: Double\nvar m21: Double\nvar m22: Double\nvar m31: Double\nvar m32: Double\nvar m33: Double"
  },
  {
    "title": "m32 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrotationmatrix/1615974-m32",
    "html": "See Also\nFields\nvar m11: Double\nvar m12: Double\nvar m13: Double\nvar m21: Double\nvar m22: Double\nvar m23: Double\nvar m31: Double\nvar m33: Double"
  },
  {
    "title": "m31 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrotationmatrix/1616015-m31",
    "html": "See Also\nFields\nvar m11: Double\nvar m12: Double\nvar m13: Double\nvar m21: Double\nvar m22: Double\nvar m23: Double\nvar m32: Double\nvar m33: Double"
  },
  {
    "title": "m22 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrotationmatrix/1615996-m22",
    "html": "See Also\nFields\nvar m11: Double\nvar m12: Double\nvar m13: Double\nvar m21: Double\nvar m23: Double\nvar m31: Double\nvar m32: Double\nvar m33: Double"
  },
  {
    "title": "m21 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrotationmatrix/1615941-m21",
    "html": "See Also\nFields\nvar m11: Double\nvar m12: Double\nvar m13: Double\nvar m22: Double\nvar m23: Double\nvar m31: Double\nvar m32: Double\nvar m33: Double"
  },
  {
    "title": "m13 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrotationmatrix/1616169-m13",
    "html": "See Also\nFields\nvar m11: Double\nvar m12: Double\nvar m21: Double\nvar m22: Double\nvar m23: Double\nvar m31: Double\nvar m32: Double\nvar m33: Double"
  },
  {
    "title": "m12 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrotationmatrix/1616113-m12",
    "html": "See Also\nFields\nvar m11: Double\nvar m13: Double\nvar m21: Double\nvar m22: Double\nvar m23: Double\nvar m31: Double\nvar m32: Double\nvar m33: Double"
  },
  {
    "title": "m11 | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrotationmatrix/1616063-m11",
    "html": "See Also\nFields\nvar m12: Double\nvar m13: Double\nvar m21: Double\nvar m22: Double\nvar m23: Double\nvar m31: Double\nvar m32: Double\nvar m33: Double"
  },
  {
    "title": "y | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmquaternion/1616142-y",
    "html": "See Also\nGetting the Quaternion Values\nvar w: Double\nThe value for the w axis.\nvar x: Double\nThe value for the x axis.\nvar z: Double\nThe value for the z axis"
  },
  {
    "title": "z | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmquaternion/1616007-z",
    "html": "See Also\nGetting the Quaternion Values\nvar w: Double\nThe value for the w axis.\nvar x: Double\nThe value for the x axis.\nvar y: Double\nThe value for the y axis."
  },
  {
    "title": "x | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmquaternion/1616096-x",
    "html": "See Also\nGetting the Quaternion Values\nvar w: Double\nThe value for the w axis.\nvar y: Double\nThe value for the y axis.\nvar z: Double\nThe value for the z axis"
  },
  {
    "title": "w | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmquaternion/1615989-w",
    "html": "See Also\nGetting the Quaternion Values\nvar x: Double\nThe value for the x axis.\nvar y: Double\nThe value for the y axis.\nvar z: Double\nThe value for the z axis"
  },
  {
    "title": "init() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmquaternion/1616075-init",
    "html": "See Also\nInitializing the Quaternion\ninit(x: Double, y: Double, z: Double, w: Double)"
  },
  {
    "title": "CMWaterSubmersionMeasurement.DepthState.submergedDeep | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmeasurement/depthstate/submergeddeep",
    "html": "See Also\nDepth states\ncase notSubmerged\nThe device is not submerged in water.\ncase submergedShallow\nThe device is submerged, but less than 1 meter under water.\ncase approachingMaxDepth\nThe device is approaching the maximum safe diving depth.\ncase pastMaxDepth\nThe device has exceeded the maximum safe diving depth.\ncase sensorDepthError\nAn error with the depth sensor occurred.\ncase unknown\nThe device’s depth state is unknown."
  },
  {
    "title": "CMWaterSubmersionEvent.State.submerged | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionevent/state/submerged",
    "html": "See Also\nSubmersion states\ncase notSubmerged\nThe device isn’t submerged in water.\ncase unknown\nThe submersion state is unknown."
  },
  {
    "title": "stopStepCountingUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmstepcounter/1616157-stopstepcountingupdates",
    "html": "Discussion\n\nCall this method to stop the delivery of updates that you started by calling the startStepCountingUpdates(to:updateOn:withHandler:) method. This method does not stop queries started using the queryStepCountStarting(from:to:to:withHandler:) method.\n\nSee Also\nStarting and Stopping Step Counting Updates\nfunc startStepCountingUpdates(to: OperationQueue, updateOn: Int, withHandler: CMStepUpdateHandler)\nStarts the delivery of current step-counting data to your app.\nDeprecated\ntypealias CMStepUpdateHandler\nA block that reports the number of steps recorded since updates began."
  },
  {
    "title": "queryStepCountStarting(from:to:to:withHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmstepcounter/1616166-querystepcountstarting",
    "html": "Parameters\nstart\n\nThe start time to use when gathering step count data. This parameter must not be nil.\n\nend\n\nThe end time to use when gathering step count data. This parameter must not be nil.\n\nqueue\n\nThe operation queue on which to execute the specified handler block. You can specify a custom queue or use the operation queue associated with your app’s main thread. This parameter must not be nil.\n\nhandler\n\nThe block to execute with the results. For information about the parameters of this block, see CMStepQueryHandler. This parameter must not be nil.\n\nDiscussion\n\nThis method runs asynchronously, returning immediately and delivering the results to the specified handler block. The system stores only the last seven days worth of step data at most. If there are no samples for the specified range of time, a value of 0 is passed to the handler block.\n\nSee Also\nGetting Historical Step Counting Data\ntypealias CMStepQueryHandler\nA block that reports the number of steps for a query operation."
  },
  {
    "title": "CMStepUpdateHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmstepupdatehandler",
    "html": "Discussion\n\nThis block takes the following parameters:\n\nnumberOfSteps\n\nThe total number of steps since the startStepCountingUpdates(to:updateOn:withHandler:) method was called.\n\ntimestamp\n\nThe time at which the current step count was reported.\n\nerror\n\nAn error object indicating that there was a problem gathering the data or nil if the number of steps was determined correctly.\n\nSee Also\nStarting and Stopping Step Counting Updates\nfunc startStepCountingUpdates(to: OperationQueue, updateOn: Int, withHandler: CMStepUpdateHandler)\nStarts the delivery of current step-counting data to your app.\nDeprecated\nfunc stopStepCountingUpdates()\nStops the delivery of step-counting updates to your app.\nDeprecated"
  },
  {
    "title": "slope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerdata/4168144-slope",
    "html": "Discussion\n\nIf the slope is invalid, this property is nil.\n\nSee Also\nGetting speed and slope\nspeed\nThe instantaneous velocity of the device, measured in meters per second.\nmaxAbsSlope\nThe maximum absolute slope at the location toward all directions, measured in degrees."
  },
  {
    "title": "speed | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerdata/4168145-speed",
    "html": "See Also\nGetting speed and slope\nvar slope: Double?\nThe slope at the location toward the direction of travel, measured in degrees.\nvar maxAbsSlope: Double?\nThe maximum absolute slope at the location toward all directions, measured in degrees."
  },
  {
    "title": "maxAbsSlope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerdata/4168163-maxabsslope",
    "html": "Discussion\n\nIf the maximum absolute slope is invalid due to low GPS accuracy, this property is nil.\n\nSee Also\nGetting speed and slope\nvar speed: CLLocationSpeed\nThe instantaneous velocity of the device, measured in meters per second.\nvar slope: Double?\nThe slope at the location toward the direction of travel, measured in degrees."
  },
  {
    "title": "slope | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerdata/4168164-slope",
    "html": "Discussion\n\nIf the slope measurement is invalid, this property is nil.\n\nSee Also\nGetting speed and slope\nvar speed: CLLocationSpeed\nThe instantaneous velocity of the device, measured in meters per second.\nvar maxAbsSlope: Double?\nThe maximum absolute slope at the location toward all directions, measured in degrees."
  },
  {
    "title": "CMStepQueryHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmstepqueryhandler",
    "html": "Discussion\n\nThis block takes two parameters:\n\nnumberOfSteps\n\nThe number of steps that occurred between the start and end times specified by the query.\n\nerror\n\nAn error object indicating that there was a problem gathering the data or nil if the number of steps was determined correctly.\n\nSee Also\nGetting Historical Step Counting Data\nfunc queryStepCountStarting(from: Date, to: Date, to: OperationQueue, withHandler: CMStepQueryHandler)\nGathers and returns historical step count data for the specified time period.\nDeprecated"
  },
  {
    "title": "startDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerdata/4168147-startdate",
    "html": "See Also\nGetting date and times\nvar endDate: Date\nThe time that the device stops recording the odometer data.\nvar gpsDate: Date\nThe time of the GPS measurement associated with the location."
  },
  {
    "title": "gpsDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerdata/4168141-gpsdate",
    "html": "See Also\nGetting date and times\nvar startDate: Date\nThe time that the device starts recording the odometer data.\nvar endDate: Date\nThe time that the device stops recording the odometer data."
  },
  {
    "title": "deltaDistance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerdata/4168138-deltadistance",
    "html": "See Also\nMeasuring distances\nvar deltaAltitude: CLLocationDistance\nThe change in altitude above mean sea level associated with the location, measured in meters."
  },
  {
    "title": "deltaAltitude | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerdata/4168137-deltaaltitude",
    "html": "See Also\nMeasuring distances\nvar deltaDistance: CLLocationDistance\nThe change in distance that the user travels since the last location, measured in meters."
  },
  {
    "title": "speedAccuracy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerdata/4168146-speedaccuracy",
    "html": "Discussion\n\nThis property measures the accuracy of the speed property. When this property contains 0 or a positive number, the value in the speed property is plus or minus the specified number of meters per second. When this property contains a negative number, the value in the speed property is invalid.\n\nSee Also\nGetting the location accuracy\nvar verticalAccuracy: CLLocationAccuracy\nThe validity of the altitude values and their estimated uncertainty, measured in meters.\nvar deltaDistanceAccuracy: CLLocationAccuracy\nThe accuracy of the change in distance value."
  },
  {
    "title": "CMHighFrequencyHeartRateDataConfidence.highest | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmhighfrequencyheartratedataconfidence/highest",
    "html": "See Also\nLevels of confidence\ncase low\nA low level of confidence in the heart rate data.\ncase medium\nA medium level of confidence in the heart rate data.\ncase high\nA high level of confidence in the heart rate data."
  },
  {
    "title": "date | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometerevent/1778439-date",
    "html": "See Also\nPedometer Data\nvar type: CMPedometerEventType\nThe type of change that occurred.\nenum CMPedometerEventType\nConstants indicating the change that occurred to the user's pedestrian activity."
  },
  {
    "title": "CMHighFrequencyHeartRateDataConfidence.low | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmhighfrequencyheartratedataconfidence/low",
    "html": "See Also\nLevels of confidence\ncase medium\nA medium level of confidence in the heart rate data.\ncase high\nA high level of confidence in the heart rate data.\ncase highest\nThe highest level of confidence in the heart rate data."
  },
  {
    "title": "CMPedometerEventType | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometereventtype",
    "html": "Topics\nEnumeration Cases\ncase pause\nThe user's pedestrian activity stopped.\ncase resume\nThe user's pedestrian activity resumed.\nRelationships\nConforms To\nSendable\nSee Also\nPedometer Data\nvar date: Date\nThe date on which the pedometer event was recorded.\nvar type: CMPedometerEventType\nThe type of change that occurred."
  },
  {
    "title": "type | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometerevent/1778448-type",
    "html": "See Also\nPedometer Data\nvar date: Date\nThe date on which the pedometer event was recorded.\nenum CMPedometerEventType\nConstants indicating the change that occurred to the user's pedestrian activity."
  },
  {
    "title": "CMHighFrequencyHeartRateDataConfidence.medium | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmhighfrequencyheartratedataconfidence/medium",
    "html": "See Also\nLevels of confidence\ncase low\nA low level of confidence in the heart rate data.\ncase high\nA high level of confidence in the heart rate data.\ncase highest\nThe highest level of confidence in the heart rate data."
  },
  {
    "title": "z | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmagneticfield/1615962-z",
    "html": "See Also\nGetting the Field Values\nvar x: Double\nX-axis magnetic field in microteslas.\nvar y: Double\nY-axis magnetic field in microteslas."
  },
  {
    "title": "x | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmagneticfield/1616109-x",
    "html": "See Also\nGetting the Field Values\nvar y: Double\nY-axis magnetic field in microteslas.\nvar z: Double\nZ-axis magnetic field in microteslas."
  },
  {
    "title": "y | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmagneticfield/1615965-y",
    "html": "See Also\nGetting the Field Values\nvar x: Double\nX-axis magnetic field in microteslas.\nvar z: Double\nZ-axis magnetic field in microteslas."
  },
  {
    "title": "startActivityUpdates(to:withHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivitymanager/1615945-startactivityupdates",
    "html": "Parameters\nqueue\n\nThe operation queue on which to execute the specified handler block. You can specify a custom queue or use the operation queue associated with your app’s main thread. This parameter must not be nil.\n\nhandler\n\nThe block to execute when a change in the current type of motion is detected. For information about the parameters of this block, see CMMotionActivityHandler. This property must not be nil.\n\nDiscussion\n\nThis method initiates the tracking of motion data asynchronously. Upon calling this method, the motion activity manager executes the handler block on the specified queue, reporting the current motion in effect for the device. After that, the motion activity manager executes the handler block only when the motion data changes.\n\nThe handler block is executed on a best effort basis and updates are not delivered while your app is suspended. If updates arrived while your app was suspended, the last update is delivered to your app when it resumes execution. To get all of the updates that occurred while your app was suspended, use the queryActivityStarting(from:to:to:withHandler:) method.\n\nUpon starting activity updates, the motion activity manager reports changes to its block until you call the stopActivityUpdates() method. If you call this method again with a new block, the activity manager stops delivering updates to the old block and delivers them to the new block instead. Updates stop altogether when the motion activity manager object itself is deallocated.\n\nSee Also\nStarting and Stopping Activity Updates\nfunc stopActivityUpdates()\nStops the delivery of motion updates to your app\ntypealias CMMotionActivityHandler\nA block that reports the current motion associated with the device."
  },
  {
    "title": "CMDeviceMotion.SensorLocation.default | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdevicemotion/sensorlocation/default",
    "html": "See Also\nSensor Locations\ncase headphoneLeft\nThe sensor is in the left headphone.\ncase headphoneRight\nThe sensor is in the right headphone."
  },
  {
    "title": "accuracy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmcalibratedmagneticfield/1615956-accuracy",
    "html": "See Also\nAccessing the Field Values\nvar field: CMMagneticField\nA structure containing 3-axis calibrated magnetic field data. See the description of the CMMagneticField structure."
  },
  {
    "title": "field | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmcalibratedmagneticfield/1616102-field",
    "html": "See Also\nAccessing the Field Values\nvar accuracy: CMMagneticFieldCalibrationAccuracy\nAn enum-constant value that indicates the accuracy of the magnetic field estimate. See CMMagneticFieldCalibrationAccuracy."
  },
  {
    "title": "startDeviceMotionUpdates(handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4245772-startdevicemotionupdates",
    "html": "See Also\nCollecting device-motion data\nfunc startDeviceMotionUpdates()\nfunc stopDeviceMotionUpdates()\nvar deviceMotionBatch: [CMDeviceMotion]?\nfunc deviceMotionUpdates() -> CMBatchedSensorManager.DeviceMotionUpdates\nstruct CMBatchedSensorManager.DeviceMotionUpdates\nvar isDeviceMotionActive: Bool"
  },
  {
    "title": "accelerometerDataFrequency | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4245769-accelerometerdatafrequency",
    "html": "See Also\nConfiguring the update frequency\nvar deviceMotionDataFrequency: Int"
  },
  {
    "title": "isDeviceMotionActive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4172855-isdevicemotionactive",
    "html": "See Also\nCollecting device-motion data\nfunc startDeviceMotionUpdates()\nfunc startDeviceMotionUpdates(handler: ([CMDeviceMotion]?, (any Error)?) -> Void)\nfunc stopDeviceMotionUpdates()\nvar deviceMotionBatch: [CMDeviceMotion]?\nfunc deviceMotionUpdates() -> CMBatchedSensorManager.DeviceMotionUpdates\nstruct CMBatchedSensorManager.DeviceMotionUpdates"
  },
  {
    "title": "authorizationStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4172854-authorizationstatus",
    "html": "See Also\nDetermining authorization and availability\nclass var isAccelerometerSupported: Bool\nclass var isDeviceMotionSupported: Bool"
  },
  {
    "title": "queryActivityStarting(from:to:to:withHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivitymanager/1615929-queryactivitystarting",
    "html": "Parameters\nstart\n\nThe start time to use when gathering motion data. This parameter must not be nil.\n\nend\n\nThe end time to use when gathering motion data. This parameter must not be nil.\n\nqueue\n\nThe operation queue on which to execute the specified handler block. You can specify a custom queue or use the operation queue associated with your app’s main thread. This parameter must not be nil.\n\nhandler\n\nThe block to execute with the results. For information about the parameters of this block, see CMMotionActivityQueryHandler. This parameter must not be nil.\n\nDiscussion\n\nThis method runs asynchronously, returning immediately and delivering the results to the specified handler block. A delay of up to several minutes in reported activities is expected.\n\nThe system stores only the last seven days worth of activity data at most. If there are no samples for the specified range of time, an error object with the code CMErrorUnknown is passed to the handler block.\n\nSee Also\nGetting Historical Activity Data\ntypealias CMMotionActivityQueryHandler\nA block that reports the motion updates that occurred between the specified query interval."
  },
  {
    "title": "isAccelerometerSupported | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4172853-isaccelerometersupported",
    "html": "See Also\nDetermining authorization and availability\nclass var authorizationStatus: CMAuthorizationStatus\nclass var isDeviceMotionSupported: Bool"
  },
  {
    "title": "CMWaterSubmersionMeasurement.DepthState.approachingMaxDepth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmeasurement/depthstate/approachingmaxdepth",
    "html": "Discussion\n\nThe system sets the maximum depth based on the entitlement that your app uses, as shown in this table:\n\nShallow Depth and Pressure entitlement\n\n\t\n\n6 m\n\n\n\n\nFull Submerged Depth and Pressure entitlement\n\n\t\n\n40 m\n\nSee Also\nDepth states\ncase notSubmerged\nThe device is not submerged in water.\ncase submergedShallow\nThe device is submerged, but less than 1 meter under water.\ncase submergedDeep\nThe device is submerged at least 1 meter under water.\ncase pastMaxDepth\nThe device has exceeded the maximum safe diving depth.\ncase sensorDepthError\nAn error with the depth sensor occurred.\ncase unknown\nThe device’s depth state is unknown."
  },
  {
    "title": "y | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrotationrate/1616165-y",
    "html": "See Also\nGetting the Rotation Rates\nvar x: Double\nThe value for the X-axis.\nvar z: Double\nThe value for the Z-axis."
  },
  {
    "title": "CMHeadphoneMotionManagerDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmheadphonemotionmanagerdelegate",
    "html": "Topics\nConnecting and Disconnecting Headphones\nfunc headphoneMotionManagerDidConnect(CMHeadphoneMotionManager)\nPerforms a callback to the delegate after you connect headphones.\nfunc headphoneMotionManagerDidDisconnect(CMHeadphoneMotionManager)\nPerforms a callback to the delegate after you disconnect headphones.\ntypealias CMHeadphoneMotionManager.DeviceMotionHandler\nThe type of block callback for handling headphone-motion data.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nGetting the Delegate\nvar delegate: (any CMHeadphoneMotionManagerDelegate)?\nThe object that receives headphone motion manager events."
  },
  {
    "title": "x | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrotationrate/1615994-x",
    "html": "See Also\nGetting the Rotation Rates\nvar y: Double\nThe value for the Y-axis.\nvar z: Double\nThe value for the Z-axis."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmheadphonemotionmanager/3621844-delegate",
    "html": "See Also\nGetting the Delegate\nprotocol CMHeadphoneMotionManagerDelegate\nA set of methods that defines an interface for connecting and disconnecting headphones."
  },
  {
    "title": "deviceMotion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmheadphonemotionmanager/3585091-devicemotion",
    "html": "Discussion\n\nThis property is nil when there is no device-motion data."
  },
  {
    "title": "stopDeviceMotionUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmheadphonemotionmanager/3585096-stopdevicemotionupdates",
    "html": "See Also\nStarting and Stopping Updates\nfunc startDeviceMotionUpdates()\nStarts device-motion updates.\nfunc startDeviceMotionUpdates(to: OperationQueue, withHandler: CMHeadphoneMotionManager.DeviceMotionHandler)\nStarts device-motion updates with a handler."
  },
  {
    "title": "startDeviceMotionUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmheadphonemotionmanager/3585094-startdevicemotionupdates",
    "html": "Discussion\n\nTo receive the latest device-motion data, examine the deviceMotion property.\n\nSee Also\nStarting and Stopping Updates\nfunc startDeviceMotionUpdates(to: OperationQueue, withHandler: CMHeadphoneMotionManager.DeviceMotionHandler)\nStarts device-motion updates with a handler.\nfunc stopDeviceMotionUpdates()\nStops device-motion updates."
  },
  {
    "title": "authorizationStatus() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmheadphonemotionmanager/3675589-authorizationstatus",
    "html": "See Also\nChecking Availability\nvar isDeviceMotionAvailable: Bool\nA Boolean value that indicates whether the current device supports the headphone motion manager.\nvar isDeviceMotionActive: Bool\nA Boolean value that indicates whether the headphone motion manager is active."
  },
  {
    "title": "rotationRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdevicemotion/1615967-rotationrate",
    "html": "Discussion\n\nA CMRotationRate structure contains data specifying the device’s rate of rotation around three axes. The value of this property contains a measurement of gyroscope data whose bias has been removed by Core Motion algorithms. The identically name property of CMGyroData, on the other hand, gives the raw data from the gyroscope. The structure type is declared in CMGyroData.h.\n\nSee Also\nGetting Attitude and Rotation Rate\nvar attitude: CMAttitude\nThe attitude of the device."
  },
  {
    "title": "gravity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdevicemotion/1616164-gravity",
    "html": "Discussion\n\nThe total acceleration of the device is equal to gravity plus the acceleration the user imparts to the device (userAcceleration).\n\nSee Also\nGetting Acceleration Data\nvar userAcceleration: CMAcceleration\nThe acceleration that the user is giving to the device."
  },
  {
    "title": "startDeviceMotionUpdates(to:withHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmheadphonemotionmanager/3585095-startdevicemotionupdates",
    "html": "Parameters\nqueue\n\nThe queue for handling updates.\n\nhandler\n\nThe handler that receives the updates.\n\nSee Also\nStarting and Stopping Updates\nfunc startDeviceMotionUpdates()\nStarts device-motion updates.\nfunc stopDeviceMotionUpdates()\nStops device-motion updates."
  },
  {
    "title": "attitude | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdevicemotion/1616050-attitude",
    "html": "Discussion\n\nA CMAttitude object represents a measurement of attitude—that is, the orientation of a body relative to a given frame of reference.\n\nSee Also\nGetting Attitude and Rotation Rate\nvar rotationRate: CMRotationRate\nThe rotation rate of the device.\nRelated Documentation\nEvent Handling Guide for UIKit Apps"
  },
  {
    "title": "running | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivity/1615441-running",
    "html": "See Also\nGetting the Type of Motion\nvar stationary: Bool\nA Boolean indicating whether the device is stationary.\nvar walking: Bool\nA Boolean indicating whether the device is on a walking person.\nvar automotive: Bool\nA Boolean indicating whether the device is in an automobile.\nvar cycling: Bool\nA Boolean indicating whether the device is in a bicycle.\nvar unknown: Bool\nA Boolean indicating whether the type of motion is unknown."
  },
  {
    "title": "stationary | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivity/1615430-stationary",
    "html": "See Also\nGetting the Type of Motion\nvar walking: Bool\nA Boolean indicating whether the device is on a walking person.\nvar running: Bool\nA Boolean indicating whether the device is on a running person.\nvar automotive: Bool\nA Boolean indicating whether the device is in an automobile.\nvar cycling: Bool\nA Boolean indicating whether the device is in a bicycle.\nvar unknown: Bool\nA Boolean indicating whether the type of motion is unknown."
  },
  {
    "title": "walking | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivity/1615432-walking",
    "html": "See Also\nGetting the Type of Motion\nvar stationary: Bool\nA Boolean indicating whether the device is stationary.\nvar running: Bool\nA Boolean indicating whether the device is on a running person.\nvar automotive: Bool\nA Boolean indicating whether the device is in an automobile.\nvar cycling: Bool\nA Boolean indicating whether the device is in a bicycle.\nvar unknown: Bool\nA Boolean indicating whether the type of motion is unknown."
  },
  {
    "title": "CMMotionActivityConfidence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivityconfidence",
    "html": "Topics\nConstants\ncase low\nConfidence is low.\ncase medium\nConfidence is good.\ncase high\nConfidence is high.\nRelationships\nConforms To\nSendable\nSee Also\nGetting Metadata for the Motion\nvar startDate: Date\nThe time at which the change in motion occurred.\nvar confidence: CMMotionActivityConfidence\nThe confidence in the assessment of the motion type."
  },
  {
    "title": "startDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivity/1615453-startdate",
    "html": "See Also\nGetting Metadata for the Motion\nvar confidence: CMMotionActivityConfidence\nThe confidence in the assessment of the motion type.\nenum CMMotionActivityConfidence\nThe confidence that the motion data is accurate."
  },
  {
    "title": "automotive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivity/1615437-automotive",
    "html": "See Also\nGetting the Type of Motion\nvar stationary: Bool\nA Boolean indicating whether the device is stationary.\nvar walking: Bool\nA Boolean indicating whether the device is on a walking person.\nvar running: Bool\nA Boolean indicating whether the device is on a running person.\nvar cycling: Bool\nA Boolean indicating whether the device is in a bicycle.\nvar unknown: Bool\nA Boolean indicating whether the type of motion is unknown."
  },
  {
    "title": "confidence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivity/1615433-confidence",
    "html": "See Also\nGetting Metadata for the Motion\nvar startDate: Date\nThe time at which the change in motion occurred.\nenum CMMotionActivityConfidence\nThe confidence that the motion data is accurate."
  },
  {
    "title": "unknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivity/1615439-unknown",
    "html": "Discussion\n\nThis property is set to true when there is no way to estimate the current type of motion. For example, this property might be true if the device was turned on recently and not enough motion data had been gathered to determine the type of motion.\n\nSee Also\nGetting the Type of Motion\nvar stationary: Bool\nA Boolean indicating whether the device is stationary.\nvar walking: Bool\nA Boolean indicating whether the device is on a walking person.\nvar running: Bool\nA Boolean indicating whether the device is on a running person.\nvar automotive: Bool\nA Boolean indicating whether the device is in an automobile.\nvar cycling: Bool\nA Boolean indicating whether the device is in a bicycle."
  },
  {
    "title": "isActivityAvailable() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivitymanager/1616116-isactivityavailable",
    "html": "Return Value\n\ntrue if motion data is available or false if it is not.\n\nDiscussion\n\nMotion data is not available on all iOS devices. Use this method to determine if support is available on the current device.\n\nSee Also\nDetermining Activity Availability\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns a value indicating whether the app is authorized to retrieve stored motion data.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features."
  },
  {
    "title": "cycling | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivity/1615451-cycling",
    "html": "See Also\nGetting the Type of Motion\nvar stationary: Bool\nA Boolean indicating whether the device is stationary.\nvar walking: Bool\nA Boolean indicating whether the device is on a walking person.\nvar running: Bool\nA Boolean indicating whether the device is on a running person.\nvar automotive: Bool\nA Boolean indicating whether the device is in an automobile.\nvar unknown: Bool\nA Boolean indicating whether the type of motion is unknown."
  },
  {
    "title": "queryPedometerData(from:to:withHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometer/1613946-querypedometerdata",
    "html": "Parameters\nstart\n\nThe start date for the data you want. This parameter must not be nil.\n\nend\n\nThe end date for the data you want. This parameter must not be nil.\n\nhandler\n\nThe block to execute with the resulting data. This block is called once on the same serial dispatch queue used to process continuous updates. This parameter must not be nil. For information about this block, see CMPedometerHandler.\n\nDiscussion\n\nUse this method to retrieve historical pedestrian data between the specified dates. This method runs asynchronously and delivers the data to the block you provide. Only the past seven days worth of data is stored and available for you to retrieve. Specifying a start date that is more than seven days in the past returns only the available data.\n\nIt is safe to call this method at the same time that you are generating continuous updates using the startUpdates(from:withHandler:) method."
  },
  {
    "title": "authorizationStatus() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivitymanager/2913744-authorizationstatus",
    "html": "See Also\nDetermining Activity Availability\nclass func isActivityAvailable() -> Bool\nReturns a Boolean indicating whether motion data is available on the current device.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features."
  },
  {
    "title": "isAuthorizedForRecording() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmsensorrecorder/1616021-isauthorizedforrecording",
    "html": "Deprecated\n\nUse authorizationStatus() instead.\n\nReturn Value\n\ntrue if the app is authorized to record sensor data or false if it is not.\n\nSee Also\nChecking the Availability of Sensor Recording\nclass func isAccelerometerRecordingAvailable() -> Bool\nReturns a Boolean value indicating whether accelerometer recording is supported on the current device.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns a value indicating whether the app is authorized to record sensor data.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features."
  },
  {
    "title": "startStepCountingUpdates(to:updateOn:withHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmstepcounter/1616151-startstepcountingupdates",
    "html": "Parameters\nqueue\n\nThe operation queue on which to execute the specified handler block. You can specify a custom queue or use the operation queue associated with your app’s main thread. This parameter must not be nil.\n\nstepCounts\n\nThe number of steps to record before executing the handler block. The number of steps must be greater than 0.\n\nhandler\n\nThe block to execute when the number of steps has been reached or exceeded. For information about the parameters of this block, see CMStepUpdateHandler. This property must not be nil.\n\nDiscussion\n\nThis method initiates tracking of the user’s steps and calls the provided block periodically to deliver the results. When you call this method, the step counter resets the current step count value to 0 and begins counting. Each time the step counter records the number of steps in the stepCounts parameter, it executes the specified handler block. For example, if stepCounts is 100, it would send updates at 100 steps, 200 steps, 300 steps, and so on. The number of steps reported to your handler is always the total number of steps since you called this method.\n\nThe handler block is executed on a best effort basis each time the step count threshold is exceeded. If your app is suspended when the threshold is exceeded, the block is not executed. When your app resumes, the block is not executed until the threshold is exceeded again.\n\nTo stop the delivery of step-counting updates, call the stopStepCountingUpdates() method. Updates also stop when the step counter object itself is deallocated.\n\nSee Also\nStarting and Stopping Step Counting Updates\nfunc stopStepCountingUpdates()\nStops the delivery of step-counting updates to your app.\nDeprecated\ntypealias CMStepUpdateHandler\nA block that reports the number of steps recorded since updates began."
  },
  {
    "title": "CMErrorNotEntitled | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmerrornotentitled",
    "html": "See Also\nErrors\nvar CMErrorDeviceRequiresMovement: CMError\nThe device must move for a sampling of motion data to occur.\nvar CMErrorInvalidAction: CMError\nThe specified action is invalid.\nvar CMErrorInvalidParameter: CMError\nThe specified parameter is invalid.\nvar CMErrorMotionActivityNotAuthorized: CMError\nThe app isn’t currently authorized to use motion activity support.\nvar CMErrorMotionActivityNotAvailable: CMError\nMotion activity support isn’t available on the current device.\nvar CMErrorMotionActivityNotEntitled: CMError\nThe app is missing an entitlement for the requested activity.\nvar CMErrorNilData: CMError\nCore Motion didn’t return any data.\nvar CMErrorNULL: CMError\nNo error occurred.\nvar CMErrorNotAuthorized: CMError\nThe app isn’t authorized to use the Core Motion framework.\nvar CMErrorNotAvailable: CMError\nThe requested service isn’t available on this device.\nvar CMErrorSize: CMError\nThe data is the incorrect size.\nvar CMErrorTrueNorthNotAvailable: CMError\nTrue north isn’t available on this device.\nvar CMErrorUnknown: CMError\nAn unknown error occurred."
  },
  {
    "title": "CMWaterSubmersionEvent.State.notSubmerged | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionevent/state/notsubmerged",
    "html": "See Also\nSubmersion states\ncase submerged\nThe device is submerged in water.\ncase unknown\nThe submersion state is unknown."
  },
  {
    "title": "isStepCountingAvailable() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmstepcounter/1616013-isstepcountingavailable",
    "html": "Return Value\n\ntrue if step-counting support is available or false if it is not.\n\nDiscussion\n\nStep-counting support is not available on all iOS devices. Use this method to determine if support is available on the current device."
  },
  {
    "title": "endDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerdata/4168140-enddate",
    "html": "See Also\nGetting date and times\nvar startDate: Date\nThe time that the device starts recording the odometer data.\nvar gpsDate: Date\nThe time of the GPS measurement associated with the location."
  },
  {
    "title": "CMHighFrequencyHeartRateDataConfidence.high | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmhighfrequencyheartratedataconfidence/high",
    "html": "See Also\nLevels of confidence\ncase low\nA low level of confidence in the heart rate data.\ncase medium\nA medium level of confidence in the heart rate data.\ncase highest\nThe highest level of confidence in the heart rate data."
  },
  {
    "title": "deltaDistanceAccuracy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerdata/4168139-deltadistanceaccuracy",
    "html": "Discussion\n\nThis property measures the accuracy of the deltaDistance property.\n\nSee Also\nGetting the location accuracy\nvar speedAccuracy: CLLocationSpeedAccuracy\nThe accuracy of the speed value.\nvar verticalAccuracy: CLLocationAccuracy\nThe validity of the altitude values and their estimated uncertainty, measured in meters."
  },
  {
    "title": "verticalAccuracy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerdata/4168148-verticalaccuracy",
    "html": "See Also\nGetting the location accuracy\nvar speedAccuracy: CLLocationSpeedAccuracy\nThe accuracy of the speed value.\nvar deltaDistanceAccuracy: CLLocationAccuracy\nThe accuracy of the change in distance value."
  },
  {
    "title": "originDevice | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerdata/4168143-origindevice",
    "html": "See Also\nGetting the device\nenum CMOdometerOriginDevice\nThe device that the odometer sample originates from."
  },
  {
    "title": "CMOdometerOriginDevice | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerorigindevice",
    "html": "Topics\nDevice origins\ncase unknown\nThe origin of the odometer sample is unknown.\ncase local\nThe origin of the odometer sample comes from the same device that requests the sample.\ncase remote\nThe origin of the odometer sample comes from a device that’s paired with the local device.\nRelationships\nConforms To\nSendable\nSee Also\nGetting the device\nvar originDevice: CMOdometerOriginDevice\nThe device that measures the data."
  },
  {
    "title": "altitude | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmabsolutealtitudedata/3746853-altitude",
    "html": "Discussion\n\nThis value can be positive or negative.\n\nSee Also\nAccessing Altitude Data\nvar accuracy: Double\nThe estimated uncertainty of the altimeter in meters, based on one standard deviation.\nvar precision: Double\nThe recommended resolution for the altitude, in meters."
  },
  {
    "title": "endDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmtremorresult/2994333-enddate",
    "html": "Discussion\n\nThe result’s endDate is always one minute or less after the startDate.\n\nSee Also\nReading the Time Interval\nvar startDate: Date\nThe result’s start time and date."
  },
  {
    "title": "precision | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmabsolutealtitudedata/3746854-precision",
    "html": "See Also\nAccessing Altitude Data\nvar altitude: Double\nThe absolute altitude of the device relative to sea level, measured in meters.\nvar accuracy: Double\nThe estimated uncertainty of the altimeter in meters, based on one standard deviation."
  },
  {
    "title": "CMMotionActivityHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivityhandler",
    "html": "Discussion\n\nThis block takes the following parameter:\n\nactivity\n\nThe motion activity object that defines the current type of motion for the device.\n\nSee Also\nStarting and Stopping Activity Updates\nfunc startActivityUpdates(to: OperationQueue, withHandler: CMMotionActivityHandler)\nStarts the delivery of current motion data updates to your app.\nfunc stopActivityUpdates()\nStops the delivery of motion updates to your app"
  },
  {
    "title": "stopActivityUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivitymanager/1616086-stopactivityupdates",
    "html": "Discussion\n\nCall this method to stop the delivery of updates that you started by calling the startActivityUpdates(to:withHandler:) method. This method does not stop queries started using the queryActivityStarting(from:to:to:withHandler:) method.\n\nSee Also\nStarting and Stopping Activity Updates\nfunc startActivityUpdates(to: OperationQueue, withHandler: CMMotionActivityHandler)\nStarts the delivery of current motion data updates to your app.\ntypealias CMMotionActivityHandler\nA block that reports the current motion associated with the device."
  },
  {
    "title": "CMMotionActivityQueryHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivityqueryhandler",
    "html": "Discussion\n\nThis block takes the following parameters:\n\nactivities\n\nAn array of CMMotionActivity objects indicating the updates that occurred. The objects in the array are ordered by the time at which they occurred in the specified time interval. Use the startDate property in each motion object to determine when the update occurred.\n\nerror\n\nAn error object indicating that there was a problem gathering the data or nil if the motion data was determined correctly.\n\nSee Also\nGetting Historical Activity Data\nfunc queryActivityStarting(from: Date, to: Date, to: OperationQueue, withHandler: CMMotionActivityQueryHandler)\nGathers and returns historical motion data for the specified time period"
  },
  {
    "title": "isDeviceMotionSupported | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4172858-isdevicemotionsupported",
    "html": "See Also\nDetermining authorization and availability\nclass var authorizationStatus: CMAuthorizationStatus\nclass var isAccelerometerSupported: Bool"
  },
  {
    "title": "startDeviceMotionUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4172861-startdevicemotionupdates",
    "html": "See Also\nCollecting device-motion data\nfunc startDeviceMotionUpdates(handler: ([CMDeviceMotion]?, (any Error)?) -> Void)\nfunc stopDeviceMotionUpdates()\nvar deviceMotionBatch: [CMDeviceMotion]?\nfunc deviceMotionUpdates() -> CMBatchedSensorManager.DeviceMotionUpdates\nstruct CMBatchedSensorManager.DeviceMotionUpdates\nvar isDeviceMotionActive: Bool"
  },
  {
    "title": "stopDeviceMotionUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4172864-stopdevicemotionupdates",
    "html": "See Also\nCollecting device-motion data\nfunc startDeviceMotionUpdates()\nfunc startDeviceMotionUpdates(handler: ([CMDeviceMotion]?, (any Error)?) -> Void)\nvar deviceMotionBatch: [CMDeviceMotion]?\nfunc deviceMotionUpdates() -> CMBatchedSensorManager.DeviceMotionUpdates\nstruct CMBatchedSensorManager.DeviceMotionUpdates\nvar isDeviceMotionActive: Bool"
  },
  {
    "title": "deviceMotionBatch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4172857-devicemotionbatch",
    "html": "See Also\nCollecting device-motion data\nfunc startDeviceMotionUpdates()\nfunc startDeviceMotionUpdates(handler: ([CMDeviceMotion]?, (any Error)?) -> Void)\nfunc stopDeviceMotionUpdates()\nfunc deviceMotionUpdates() -> CMBatchedSensorManager.DeviceMotionUpdates\nstruct CMBatchedSensorManager.DeviceMotionUpdates\nvar isDeviceMotionActive: Bool"
  },
  {
    "title": "deviceMotionUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4248846-devicemotionupdates",
    "html": "See Also\nCollecting device-motion data\nfunc startDeviceMotionUpdates()\nfunc startDeviceMotionUpdates(handler: ([CMDeviceMotion]?, (any Error)?) -> Void)\nfunc stopDeviceMotionUpdates()\nvar deviceMotionBatch: [CMDeviceMotion]?\nstruct CMBatchedSensorManager.DeviceMotionUpdates\nvar isDeviceMotionActive: Bool"
  },
  {
    "title": "CMBatchedSensorManager.DeviceMotionUpdates | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/devicemotionupdates",
    "html": "Topics\nType Aliases\ntypealias CMBatchedSensorManager.DeviceMotionUpdates.AsyncIterator\ntypealias CMBatchedSensorManager.DeviceMotionUpdates.Element\nInstance Methods\nfunc allSatisfy(([CMDeviceMotion]) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>(([CMDeviceMotion]) -> ElementOfResult?) -> AsyncCompactMapSequence<CMBatchedSensorManager.DeviceMotionUpdates, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>(([CMDeviceMotion]) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<CMBatchedSensorManager.DeviceMotionUpdates, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc contains([CMDeviceMotion]) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: ([CMDeviceMotion]) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: ([CMDeviceMotion]) -> Bool) -> AsyncDropWhileSequence<CMBatchedSensorManager.DeviceMotionUpdates>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<CMBatchedSensorManager.DeviceMotionUpdates>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter(([CMDeviceMotion]) -> Bool) -> AsyncFilterSequence<CMBatchedSensorManager.DeviceMotionUpdates>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: ([CMDeviceMotion]) -> Bool) -> [CMDeviceMotion]?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>(([CMDeviceMotion]) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<CMBatchedSensorManager.DeviceMotionUpdates, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>(([CMDeviceMotion]) -> SegmentOfResult) -> AsyncFlatMapSequence<CMBatchedSensorManager.DeviceMotionUpdates, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc makeAsyncIterator() -> CMBatchedSensorManager.DeviceMotionUpdates.Iterator\nfunc map<Transformed>(([CMDeviceMotion]) -> Transformed) -> AsyncMapSequence<CMBatchedSensorManager.DeviceMotionUpdates, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>(([CMDeviceMotion]) -> Transformed) -> AsyncThrowingMapSequence<CMBatchedSensorManager.DeviceMotionUpdates, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc max(by: ([CMDeviceMotion], [CMDeviceMotion]) -> Bool) -> [CMDeviceMotion]?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: ([CMDeviceMotion], [CMDeviceMotion]) -> Bool) -> [CMDeviceMotion]?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<CMBatchedSensorManager.DeviceMotionUpdates>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: ([CMDeviceMotion]) -> Bool) -> AsyncPrefixWhileSequence<CMBatchedSensorManager.DeviceMotionUpdates>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, [CMDeviceMotion]) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, [CMDeviceMotion]) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nStructures\nstruct CMBatchedSensorManager.DeviceMotionUpdates.Iterator\nRelationships\nConforms To\nAsyncSequence\nSee Also\nCollecting device-motion data\nfunc startDeviceMotionUpdates()\nfunc startDeviceMotionUpdates(handler: ([CMDeviceMotion]?, (any Error)?) -> Void)\nfunc stopDeviceMotionUpdates()\nvar deviceMotionBatch: [CMDeviceMotion]?\nfunc deviceMotionUpdates() -> CMBatchedSensorManager.DeviceMotionUpdates\nvar isDeviceMotionActive: Bool"
  },
  {
    "title": "accelerometerUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4248845-accelerometerupdates",
    "html": "See Also\nCollecting accelerometer data\nfunc startAccelerometerUpdates()\nfunc startAccelerometerUpdates(handler: ([CMAccelerometerData]?, (any Error)?) -> Void)\nfunc stopAccelerometerUpdates()\nvar accelerometerBatch: [CMAccelerometerData]?\nstruct CMBatchedSensorManager.AccelerometerUpdates\nvar isAccelerometerActive: Bool"
  },
  {
    "title": "CMBatchedSensorManager.AccelerometerUpdates | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/accelerometerupdates",
    "html": "Topics\nType Aliases\ntypealias CMBatchedSensorManager.AccelerometerUpdates.AsyncIterator\ntypealias CMBatchedSensorManager.AccelerometerUpdates.Element\nInstance Methods\nfunc allSatisfy(([CMAccelerometerData]) -> Bool) -> Bool\nReturns a Boolean value that indicates whether all elements produced by the asynchronous sequence satisfy the given predicate.\nfunc compactMap<ElementOfResult>(([CMAccelerometerData]) -> ElementOfResult?) -> AsyncCompactMapSequence<CMBatchedSensorManager.AccelerometerUpdates, ElementOfResult>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.\nfunc compactMap<ElementOfResult>(([CMAccelerometerData]) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<CMBatchedSensorManager.AccelerometerUpdates, ElementOfResult>\nCreates an asynchronous sequence that maps an error-throwing closure over the base sequence’s elements, omitting results that don’t return a value.\nfunc contains([CMAccelerometerData]) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains the given element.\nfunc contains(where: ([CMAccelerometerData]) -> Bool) -> Bool\nReturns a Boolean value that indicates whether the asynchronous sequence contains an element that satisfies the given predicate.\nfunc drop(while: ([CMAccelerometerData]) -> Bool) -> AsyncDropWhileSequence<CMBatchedSensorManager.AccelerometerUpdates>\nOmits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.\nfunc dropFirst(Int) -> AsyncDropFirstSequence<CMBatchedSensorManager.AccelerometerUpdates>\nOmits a specified number of elements from the base asynchronous sequence, then passes through all remaining elements.\nfunc filter(([CMAccelerometerData]) -> Bool) -> AsyncFilterSequence<CMBatchedSensorManager.AccelerometerUpdates>\nCreates an asynchronous sequence that contains, in order, the elements of the base sequence that satisfy the given predicate.\nfunc first(where: ([CMAccelerometerData]) -> Bool) -> [CMAccelerometerData]?\nReturns the first element of the sequence that satisfies the given predicate.\nfunc flatMap<SegmentOfResult>(([CMAccelerometerData]) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<CMBatchedSensorManager.AccelerometerUpdates, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given error-throwing transformation with each element of this sequence.\nfunc flatMap<SegmentOfResult>(([CMAccelerometerData]) -> SegmentOfResult) -> AsyncFlatMapSequence<CMBatchedSensorManager.AccelerometerUpdates, SegmentOfResult>\nCreates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.\nfunc makeAsyncIterator() -> CMBatchedSensorManager.AccelerometerUpdates.Iterator\nfunc map<Transformed>(([CMAccelerometerData]) -> Transformed) -> AsyncMapSequence<CMBatchedSensorManager.AccelerometerUpdates, Transformed>\nCreates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements.\nfunc map<Transformed>(([CMAccelerometerData]) -> Transformed) -> AsyncThrowingMapSequence<CMBatchedSensorManager.AccelerometerUpdates, Transformed>\nCreates an asynchronous sequence that maps the given error-throwing closure over the asynchronous sequence’s elements.\nfunc max(by: ([CMAccelerometerData], [CMAccelerometerData]) -> Bool) -> [CMAccelerometerData]?\nReturns the maximum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc min(by: ([CMAccelerometerData], [CMAccelerometerData]) -> Bool) -> [CMAccelerometerData]?\nReturns the minimum element in the asynchronous sequence, using the given predicate as the comparison between elements.\nfunc prefix(Int) -> AsyncPrefixSequence<CMBatchedSensorManager.AccelerometerUpdates>\nReturns an asynchronous sequence, up to the specified maximum length, containing the initial elements of the base asynchronous sequence.\nfunc prefix(while: ([CMAccelerometerData]) -> Bool) -> AsyncPrefixWhileSequence<CMBatchedSensorManager.AccelerometerUpdates>\nReturns an asynchronous sequence, containing the initial, consecutive elements of the base sequence that satisfy the given predicate.\nfunc reduce<Result>(Result, (Result, [CMAccelerometerData]) -> Result) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure.\nfunc reduce<Result>(into: Result, (inout Result, [CMAccelerometerData]) -> Void) -> Result\nReturns the result of combining the elements of the asynchronous sequence using the given closure, given a mutable initial value.\nStructures\nstruct CMBatchedSensorManager.AccelerometerUpdates.Iterator\nRelationships\nConforms To\nAsyncSequence\nSee Also\nCollecting accelerometer data\nfunc startAccelerometerUpdates()\nfunc startAccelerometerUpdates(handler: ([CMAccelerometerData]?, (any Error)?) -> Void)\nfunc stopAccelerometerUpdates()\nvar accelerometerBatch: [CMAccelerometerData]?\nfunc accelerometerUpdates() -> CMBatchedSensorManager.AccelerometerUpdates\nvar isAccelerometerActive: Bool"
  },
  {
    "title": "isAccelerometerActive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4172850-isaccelerometeractive",
    "html": "See Also\nCollecting accelerometer data\nfunc startAccelerometerUpdates()\nfunc startAccelerometerUpdates(handler: ([CMAccelerometerData]?, (any Error)?) -> Void)\nfunc stopAccelerometerUpdates()\nvar accelerometerBatch: [CMAccelerometerData]?\nfunc accelerometerUpdates() -> CMBatchedSensorManager.AccelerometerUpdates\nstruct CMBatchedSensorManager.AccelerometerUpdates"
  },
  {
    "title": "pressure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmambientpressuredata/3917554-pressure",
    "html": "See Also\nAccessing the data\nvar temperature: Measurement<UnitTemperature>\nThe temperature."
  },
  {
    "title": "CMFallDetectionEvent.UserResolution | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmfalldetectionevent/userresolution",
    "html": "Overview\n\nThe resolution of an event reflects the user’s action in response to the fall detection notification. For example, the user might tap a button to respond inside the notification, or press the digital crown to dismiss the notification.\n\nTopics\nEnumeration Cases\ncase confirmed\nThe user confirmed the event.\ncase dismissed\nThe user dismissed the fall event alert, but didn’t explicitly confirm or reject the event.\ncase rejected\nThe user rejected the fall event.\ncase unresponsive\nThe user didn’t respond to the fall event and the system hasn’t detected recovery motions.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing Fall Data\nvar resolution: CMFallDetectionEvent.UserResolution\nThe event’s resolution."
  },
  {
    "title": "temperature | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmambientpressuredata/3917555-temperature",
    "html": "See Also\nAccessing the data\nvar pressure: Measurement<UnitPressure>\nThe ambient pressure."
  },
  {
    "title": "resolution | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmfalldetectionevent/3697142-resolution",
    "html": "Discussion\n\nThe resolution of an event reflects the user’s action in response to the fall detection notification. For example, the user might tap a button to respond inside the notification, or press the digital crown to dismiss the notification.\n\nSee Also\nAccessing Fall Data\nenum CMFallDetectionEvent.UserResolution\nUser resolutions for fall detection events."
  },
  {
    "title": "requestAuthorization(handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmfalldetectionmanager/3697151-requestauthorization",
    "html": "Parameters\nhandler\n\nA block that is called by the system after the user accepts or declines the authorization request.\n\nThe system passes the following parameter:\n\nstatus\n\nThe authorization status chosen by the user.\n\nDiscussion\n\nAs soon as the user authorizes fall detection, the system calls the delegate’s fallDetectionManager(_:didDetect:completionHandler:) method and passes the latest fall detection event.\n\nSee Also\nRequesting Authorization\nvar authorizationStatus: CMAuthorizationStatus\nThe authorization status for receiving fall detection event notifications.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features."
  },
  {
    "title": "authorizationStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmfalldetectionmanager/3697148-authorizationstatus",
    "html": "See Also\nRequesting Authorization\nfunc requestAuthorization(handler: (CMAuthorizationStatus) -> Void)\nRequests authorization to receive notifications about fall detection events.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features."
  },
  {
    "title": "date | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatertemperature/4080419-date",
    "html": "See Also\nAccessing the data\nvar temperature: Measurement<UnitTemperature>\nThe water temperature.\nvar temperatureUncertainty: Measurement<UnitTemperature>\nThe amount of uncertainty in the measurement of the water temperature."
  },
  {
    "title": "delegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmfalldetectionmanager/3697150-delegate",
    "html": "See Also\nHandling Events\nprotocol CMFallDetectionDelegate\nA delegate that receives information about fall detection events and authorization status changes."
  },
  {
    "title": "date | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmeasurement/4080409-date",
    "html": "See Also\nAccessing the data\nvar depth: Measurement<UnitLength>?\nThe depth under water.\nvar pressure: Measurement<UnitPressure>?\nThe water pressure.\nvar surfacePressure: Measurement<UnitPressure>\nThe surface air pressure.\nvar submersionState: CMWaterSubmersionMeasurement.DepthState\nThe depth state.\nenum CMWaterSubmersionMeasurement.DepthState\nA state based on the device’s depth under water."
  },
  {
    "title": "temperature | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatertemperature/4080420-temperature",
    "html": "See Also\nAccessing the data\nvar date: Date\nThe time and date when the system recorded the measurements.\nvar temperatureUncertainty: Measurement<UnitTemperature>\nThe amount of uncertainty in the measurement of the water temperature."
  },
  {
    "title": "temperatureUncertainty | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatertemperature/4080421-temperatureuncertainty",
    "html": "See Also\nAccessing the data\nvar date: Date\nThe time and date when the system recorded the measurements.\nvar temperature: Measurement<UnitTemperature>\nThe water temperature."
  },
  {
    "title": "surfacePressure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmeasurement/4080413-surfacepressure",
    "html": "See Also\nAccessing the data\nvar date: Date\nThe time and date when the system recorded the measurements.\nvar depth: Measurement<UnitLength>?\nThe depth under water.\nvar pressure: Measurement<UnitPressure>?\nThe water pressure.\nvar submersionState: CMWaterSubmersionMeasurement.DepthState\nThe depth state.\nenum CMWaterSubmersionMeasurement.DepthState\nA state based on the device’s depth under water."
  },
  {
    "title": "depth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmeasurement/4080410-depth",
    "html": "See Also\nAccessing the data\nvar date: Date\nThe time and date when the system recorded the measurements.\nvar pressure: Measurement<UnitPressure>?\nThe water pressure.\nvar surfacePressure: Measurement<UnitPressure>\nThe surface air pressure.\nvar submersionState: CMWaterSubmersionMeasurement.DepthState\nThe depth state.\nenum CMWaterSubmersionMeasurement.DepthState\nA state based on the device’s depth under water."
  },
  {
    "title": "pressure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmeasurement/4080411-pressure",
    "html": "See Also\nAccessing the data\nvar date: Date\nThe time and date when the system recorded the measurements.\nvar depth: Measurement<UnitLength>?\nThe depth under water.\nvar surfacePressure: Measurement<UnitPressure>\nThe surface air pressure.\nvar submersionState: CMWaterSubmersionMeasurement.DepthState\nThe depth state.\nenum CMWaterSubmersionMeasurement.DepthState\nA state based on the device’s depth under water."
  },
  {
    "title": "submersionState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmeasurement/4080412-submersionstate",
    "html": "See Also\nAccessing the data\nvar date: Date\nThe time and date when the system recorded the measurements.\nvar depth: Measurement<UnitLength>?\nThe depth under water.\nvar pressure: Measurement<UnitPressure>?\nThe water pressure.\nvar surfacePressure: Measurement<UnitPressure>\nThe surface air pressure.\nenum CMWaterSubmersionMeasurement.DepthState\nA state based on the device’s depth under water."
  },
  {
    "title": "CMWaterSubmersionMeasurement.DepthState | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmeasurement/depthstate",
    "html": "Topics\nDepth states\ncase notSubmerged\nThe device is not submerged in water.\ncase submergedShallow\nThe device is submerged, but less than 1 meter under water.\ncase submergedDeep\nThe device is submerged at least 1 meter under water.\ncase approachingMaxDepth\nThe device is approaching the maximum safe diving depth.\ncase pastMaxDepth\nThe device has exceeded the maximum safe diving depth.\ncase sensorDepthError\nAn error with the depth sensor occurred.\ncase unknown\nThe device’s depth state is unknown.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing the data\nvar date: Date\nThe time and date when the system recorded the measurements.\nvar depth: Measurement<UnitLength>?\nThe depth under water.\nvar pressure: Measurement<UnitPressure>?\nThe water pressure.\nvar surfacePressure: Measurement<UnitPressure>\nThe surface air pressure.\nvar submersionState: CMWaterSubmersionMeasurement.DepthState\nThe depth state."
  },
  {
    "title": "manager(_:didUpdate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmanagerdelegate/4080427-manager",
    "html": "Required\n\nParameters\nmanager\n\nThe manager for water submersion data.\n\nevent\n\nAn event indicating that the submersion state has changed.\n\nDiscussion\n\nImplement this method to respond to changes in the device’s submersion state.\n\nnonisolated func manager(_ manager: CMWaterSubmersionManager, didUpdate event: CMWaterSubmersionEvent) {\n\n\n    let submerged: Bool?\n    switch event.state {\n    case .unknown:\n        logger.info(\"*** Received an unknown event ***\")\n        submerged = nil\n\n\n    case .notSubmerged:\n        logger.info(\"*** Not Submerged Event ***\")\n        submerged = false\n\n\n    case .submerged:\n        logger.info(\"*** Submerged Event ***\")\n        submerged = true\n\n\n    @unknown default:\n        fatalError(\"*** unknown event received: \\(event.state) ***\")\n    }\n\n\n    Task {\n        await myAdd(event: event)\n        if let submerged {\n            await mySet(submerged: submerged)\n        }\n    }\n}\n\n\nSee Also\nReceiving updates\nfunc manager(CMWaterSubmersionManager, didUpdate: CMWaterSubmersionMeasurement)\nProvides the delegate with a new set of pressure and depth measurements.\n\nRequired\n\nfunc manager(CMWaterSubmersionManager, didUpdate: CMWaterTemperature)\nProvides the delegate with updated water temperature data.\n\nRequired\n\nfunc manager(CMWaterSubmersionManager, errorOccurred: any Error)\nTells the delegate when an error occurs.\n\nRequired"
  },
  {
    "title": "manager(_:didUpdate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmanagerdelegate/4080429-manager",
    "html": "Required\n\nParameters\nmanager\n\nThe manager for water submersion data.\n\nmeasurement\n\nA data object that contains information about the water temperature and the measurement’s uncertainty.\n\nDiscussion\n\nImplement this method to receive water temperature updates. The system sends temperature updates three times a second while submerged. When on the surface, the system provides updates at a slower rate, and may stop providing updates if the device isn’t moving.\n\nnonisolated func manager(_ manager: CMWaterSubmersionManager, didUpdate measurement: CMWaterTemperature) {\n    let temp = measurement.temperature\n    let uncertainty = measurement.temperatureUncertainty\n    let currentTemperature = \"\\(temp.value) +/- \\(uncertainty.value) \\(temp.unit)\"\n\n\n    logger.info((\"*** \\(currentTemperature) ***\"))\n\n\n    Task {\n        await myAdd(temperature:measurement)\n    }\n}\n\n\nSee Also\nReceiving updates\nfunc manager(CMWaterSubmersionManager, didUpdate: CMWaterSubmersionEvent)\nTells the delegate when a water submersion event occurs.\n\nRequired\n\nfunc manager(CMWaterSubmersionManager, didUpdate: CMWaterSubmersionMeasurement)\nProvides the delegate with a new set of pressure and depth measurements.\n\nRequired\n\nfunc manager(CMWaterSubmersionManager, errorOccurred: any Error)\nTells the delegate when an error occurs.\n\nRequired"
  },
  {
    "title": "manager(_:didUpdate:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmanagerdelegate/4080428-manager",
    "html": "Required\n\nParameters\nmanager\n\nThe manager for water submersion data.\n\nmeasurement\n\nA data object that contains information about the pressure and depth.\n\nDiscussion\n\nImplement this method to receive updated surface pressure, water pressure, and depth data. The system sends measurement updates three times a second while submerged. When on the surface, the system provides updates at a slower rate, and may stop providing updates if the device isn’t moving.\n\nnonisolated func manager(_ manager: CMWaterSubmersionManager, didUpdate measurement: CMWaterSubmersionMeasurement) {\n\n\n    logger.info(\"*** Received a depth measurement ***\")\n\n\n    let currentDepth: String\n    if let depth = measurement.depth {\n        currentDepth = \"\\(depth.value) \\(depth.unit)\"\n    } else {\n        currentDepth = \"None\"\n    }\n\n\n    let currentSurfacePressure: String\n    let surfacePressure = measurement.surfacePressure\n    currentSurfacePressure = \"\\(surfacePressure.value) \\(surfacePressure.unit)\"\n\n\n    let currentPressure: String\n    if let pressure = measurement.pressure {\n        currentPressure = \"\\(pressure.value) \\(pressure.unit)\"\n    } else {\n        currentPressure = \"None\"\n    }\n\n\n    logger.info(\"*** Depth: \\(currentDepth) ***\")\n    logger.info(\"*** Surface Pressure: \\(currentSurfacePressure) ***\")\n    logger.info(\"*** Pressure: \\(currentPressure) ***\")\n\n\n    let submerged: Bool?\n    switch measurement.submersionState {\n    case .unknown:\n        logger.info(\"*** Unknown Depth ***\")\n        submerged = nil\n    case .notSubmerged:\n        logger.info(\"*** Not Submerged ***\")\n        submerged = false\n    case .submergedShallow:\n        logger.info(\"*** Shallow Depth ***\")\n        submerged = true\n    case .submergedDeep:\n        logger.info(\"*** Deep Depth ***\")\n        submerged = true\n    case .approachingMaxDepth:\n        logger.info(\"*** Approaching Max Depth ***\")\n        submerged = true\n    case .pastMaxDepth:\n        logger.info(\"*** Past Max Depth ***\")\n        submerged = true\n    case .sensorDepthError:\n        logger.info(\"*** A depth error has occurred. ***\")\n        submerged = nil\n    @unknown default:\n        fatalError(\"*** An unknown measurement depth state: \\(measurement.submersionState)\")\n    }\n\n\n    Task {\n        await myAdd(measurement: measurement)\n        if let submerged {\n            await mySet(submerged: submerged)\n        }\n    }\n}\n\n\nSee Also\nReceiving updates\nfunc manager(CMWaterSubmersionManager, didUpdate: CMWaterSubmersionEvent)\nTells the delegate when a water submersion event occurs.\n\nRequired\n\nfunc manager(CMWaterSubmersionManager, didUpdate: CMWaterTemperature)\nProvides the delegate with updated water temperature data.\n\nRequired\n\nfunc manager(CMWaterSubmersionManager, errorOccurred: any Error)\nTells the delegate when an error occurs.\n\nRequired"
  },
  {
    "title": "CMWaterSubmersionEvent.State | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionevent/state",
    "html": "Topics\nSubmersion states\ncase notSubmerged\nThe device isn’t submerged in water.\ncase submerged\nThe device is submerged in water.\ncase unknown\nThe submersion state is unknown.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing event data\nvar date: Date\nThe time and date of the event.\nvar state: CMWaterSubmersionEvent.State\nThe new submersion state."
  },
  {
    "title": "state | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionevent/4080407-state",
    "html": "See Also\nAccessing event data\nvar date: Date\nThe time and date of the event.\nenum CMWaterSubmersionEvent.State\nThe device’s submersion state."
  },
  {
    "title": "date | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionevent/4080406-date",
    "html": "See Also\nAccessing event data\nvar state: CMWaterSubmersionEvent.State\nThe new submersion state.\nenum CMWaterSubmersionEvent.State\nThe device’s submersion state."
  },
  {
    "title": "manager(_:errorOccurred:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmanagerdelegate/4080430-manager",
    "html": "Required\n\nParameters\nmanager\n\nThe manager for water submersion data.\n\nerror\n\nAn error object that contains information about the error.\n\nDiscussion\n\nImplement this method to respond to errors.\n\n// Respond to errors.\nnonisolated func manager(_ manager: CMWaterSubmersionManager, errorOccurred error: Error) {\n    logger.error(\"*** An error occurred: \\(error.localizedDescription) ***\")\n}\n\n\nSee Also\nReceiving updates\nfunc manager(CMWaterSubmersionManager, didUpdate: CMWaterSubmersionEvent)\nTells the delegate when a water submersion event occurs.\n\nRequired\n\nfunc manager(CMWaterSubmersionManager, didUpdate: CMWaterSubmersionMeasurement)\nProvides the delegate with a new set of pressure and depth measurements.\n\nRequired\n\nfunc manager(CMWaterSubmersionManager, didUpdate: CMWaterTemperature)\nProvides the delegate with updated water temperature data.\n\nRequired"
  },
  {
    "title": "CMWaterSubmersionMeasurement.DepthState.pastMaxDepth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmeasurement/depthstate/pastmaxdepth",
    "html": "Discussion\n\nThe system sets the maximum depth based on the entitlement that your app uses, as shown in this table:\n\nShallow Depth and Pressure entitlement\n\n\t\n\n6 m\n\n\n\n\nFull Submerged Depth and Pressure entitlement\n\n\t\n\n40 m\n\nSee Also\nDepth states\ncase notSubmerged\nThe device is not submerged in water.\ncase submergedShallow\nThe device is submerged, but less than 1 meter under water.\ncase submergedDeep\nThe device is submerged at least 1 meter under water.\ncase approachingMaxDepth\nThe device is approaching the maximum safe diving depth.\ncase sensorDepthError\nAn error with the depth sensor occurred.\ncase unknown\nThe device’s depth state is unknown."
  },
  {
    "title": "CMWaterSubmersionMeasurement.DepthState.sensorDepthError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmeasurement/depthstate/sensordeptherror",
    "html": "Discussion\n\nThe system sends a measurement with this state if the wearer continues to descend past the maximum depth.\n\nSee Also\nDepth states\ncase notSubmerged\nThe device is not submerged in water.\ncase submergedShallow\nThe device is submerged, but less than 1 meter under water.\ncase submergedDeep\nThe device is submerged at least 1 meter under water.\ncase approachingMaxDepth\nThe device is approaching the maximum safe diving depth.\ncase pastMaxDepth\nThe device has exceeded the maximum safe diving depth.\ncase unknown\nThe device’s depth state is unknown."
  },
  {
    "title": "currentCadence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometerdata/1613969-currentcadence",
    "html": "Discussion\n\nDuring regular updates, this property is set to the user’s cadence. The value in this property is nil when you are performing a query for historical pedometer data or when cadence information is not yet available for the user. This property is also nil for devices that do not support the gathering of cadence data.\n\nSee Also\nGetting the Pedestrian Data\nvar numberOfSteps: NSNumber\nThe number of steps taken by the user.\nvar distance: NSNumber?\nThe estimated distance (in meters) traveled by the user.\nvar averageActivePace: NSNumber?\nThe average pace of the user, measured in seconds per meter.\nvar currentPace: NSNumber?\nThe current pace of the user, measured in seconds per meter."
  },
  {
    "title": "CMDeviceMotion.SensorLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdevicemotion/sensorlocation",
    "html": "Topics\nSensor Locations\ncase `default`\nThe default sensor location.\ncase headphoneLeft\nThe sensor is in the left headphone.\ncase headphoneRight\nThe sensor is in the right headphone.\nRelationships\nConforms To\nSendable\nSee Also\nGetting the Sensor Location\nvar sensorLocation: CMDeviceMotion.SensorLocation\nThe location of the sensors that compute the device-motion data."
  },
  {
    "title": "isDeviceMotionActive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmheadphonemotionmanager/3585092-isdevicemotionactive",
    "html": "See Also\nChecking Availability\nvar isDeviceMotionAvailable: Bool\nA Boolean value that indicates whether the current device supports the headphone motion manager.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns the authorization status for monitoring headphone motion."
  },
  {
    "title": "isDeviceMotionAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmheadphonemotionmanager/3585093-isdevicemotionavailable",
    "html": "See Also\nChecking Availability\nvar isDeviceMotionActive: Bool\nA Boolean value that indicates whether the headphone motion manager is active.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns the authorization status for monitoring headphone motion."
  },
  {
    "title": "magneticField | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdevicemotion/1616140-magneticfield",
    "html": "Discussion\n\nThe CMCalibratedMagneticField returned by this property gives you the total magnetic field in the device’s vicinity without device bias. Unlike the magneticField property of the CMMagnetometerData class, these values reflect the earth’s magnetic field plus surrounding fields, minus device bias.\n\nIf the device does not have a magnetometer, the accuracy field of the property’s value (a CMCalibratedMagneticField structure) is CMMagneticFieldCalibrationAccuracy.uncalibrated.\n\nSee Also\nGetting the Calibrated Magnetic Field\nstruct CMCalibratedMagneticField\nCalibrated magnetic field data and an estimate of the accuracy of the calibration.\nenum CMMagneticFieldCalibrationAccuracy\nIndicates the calibration accuracy of a magnetic field estimate"
  },
  {
    "title": "CMCalibratedMagneticField | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmcalibratedmagneticfield",
    "html": "Topics\nInitializers\ninit()\nInitializes the magnetic field to a set of default values.\ninit(field: CMMagneticField, accuracy: CMMagneticFieldCalibrationAccuracy)\nInitializes the magnetic field to the specified set of values.\nAccessing the Field Values\nvar field: CMMagneticField\nA structure containing 3-axis calibrated magnetic field data. See the description of the CMMagneticField structure.\nvar accuracy: CMMagneticFieldCalibrationAccuracy\nAn enum-constant value that indicates the accuracy of the magnetic field estimate. See CMMagneticFieldCalibrationAccuracy.\nSee Also\nGetting the Calibrated Magnetic Field\nvar magneticField: CMCalibratedMagneticField\nReturns the magnetic field vector with respect to the device.\nenum CMMagneticFieldCalibrationAccuracy\nIndicates the calibration accuracy of a magnetic field estimate"
  },
  {
    "title": "CMMagneticFieldCalibrationAccuracy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmagneticfieldcalibrationaccuracy",
    "html": "Overview\n\nOne of the enum constants of the CMMagneticFieldCalibrationAccuracy type is the value of the accuracy field of the CMCalibratedMagneticField structure returned from the magneticField property.\n\nTopics\nConstants\ncase uncalibrated\nThe magnetic field estimate is not calibrated.\ncase low\nThe accuracy of the magnetic field calibration is low.\ncase medium\nThe accuracy of the magnetic field calibration is medium.\ncase high\nThe accuracy of the magnetic field calibration is high.\nRelationships\nConforms To\nSendable\nSee Also\nGetting the Calibrated Magnetic Field\nvar magneticField: CMCalibratedMagneticField\nReturns the magnetic field vector with respect to the device.\nstruct CMCalibratedMagneticField\nCalibrated magnetic field data and an estimate of the accuracy of the calibration."
  },
  {
    "title": "userAcceleration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdevicemotion/1616149-useracceleration",
    "html": "Discussion\n\nThe total acceleration of the device is equal to gravity plus the acceleration the user imparts to the device.\n\nSee Also\nGetting Acceleration Data\nvar gravity: CMAcceleration\nThe gravity acceleration vector expressed in the device's reference frame."
  },
  {
    "title": "heading | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdevicemotion/2890756-heading",
    "html": "Discussion\n\nThis property contains a value in the range of 0.0 to 360.0 degrees. This value is available only when the frame of reference is xMagneticNorthZVertical or xTrueNorthZVertical. If the reference frame is xArbitraryZVertical or xArbitraryCorrectedZVertical, this property contains a negative number to indicate the heading is invalid."
  },
  {
    "title": "sensorLocation | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdevicemotion/3566498-sensorlocation",
    "html": "See Also\nGetting the Sensor Location\nenum CMDeviceMotion.SensorLocation\nDefines the device’s sensor locations."
  },
  {
    "title": "CMPedometerHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometerhandler",
    "html": "Discussion\n\nYou provide a block of this type when requesting data from the CMPedometer object. When the data becomes available, the pedometer object delivers that data to your block for processing. If there was an error retrieving the data, the pedometer object provides an error object instead.\n\nThis block has no return value and takes the following parameters:\n\npedometerData\n\nA CMPedometerData object containing the available data. If there was an error retrieving the data, this parameter is nil.\n\nerror\n\nAn NSError object if there was a problem or nil if the pedometer data was retrieved successfully.\n\nSee Also\nGathering Live Pedometer Data\nfunc startUpdates(from: Date, withHandler: CMPedometerHandler)\nStarts the delivery of recent pedestrian-related data to your app.\nfunc stopUpdates()\nStops the delivery of recent pedestrian data updates to your app.\nfunc startEventUpdates(handler: CMPedometerEventHandler)\nStarts the delivery of pedometer events to your app.\nfunc stopEventUpdates()\nStops the delivery of pedometer events to your app.\ntypealias CMPedometerEventHandler\nA block for processing pedometer events."
  },
  {
    "title": "startEventUpdates(handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometer/1778437-starteventupdates",
    "html": "Parameters\nhandler\n\nThe block to execute when a pedometer event is available. This parameter must not be nil.\n\nDiscussion\n\nPedometer events report changes in the user's pedestrian activity.\n\nSee Also\nGathering Live Pedometer Data\nfunc startUpdates(from: Date, withHandler: CMPedometerHandler)\nStarts the delivery of recent pedestrian-related data to your app.\nfunc stopUpdates()\nStops the delivery of recent pedestrian data updates to your app.\nfunc stopEventUpdates()\nStops the delivery of pedometer events to your app.\ntypealias CMPedometerHandler\nA block for processing pedometer-related data.\ntypealias CMPedometerEventHandler\nA block for processing pedometer events."
  },
  {
    "title": "endDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometerdata/1613952-enddate",
    "html": "Discussion\n\nThe startDate and endDate represent the period of time over which the pedometer data was gathered.\n\nSee Also\nGetting the Dates\nvar startDate: Date\nThe start time for the pedometer data."
  },
  {
    "title": "isPedometerEventTrackingAvailable() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometer/1778440-ispedometereventtrackingavailabl",
    "html": "Return Value\n\ntrue if pedometer events are available or false if they are not.\n\nSee Also\nDetermining Pedometer Availability\nclass func isStepCountingAvailable() -> Bool\nReturns a Boolean value indicating whether step counting is available on the current device.\nclass func isDistanceAvailable() -> Bool\nReturns a Boolean value indicating whether distance estimation is available on the current device.\nclass func isFloorCountingAvailable() -> Bool\nReturns a Boolean value indicating whether floor counting is available on the current device.\nclass func isPaceAvailable() -> Bool\nReturns a Boolean value indicating whether pace information is available on the current device.\nclass func isCadenceAvailable() -> Bool\nReturns a Boolean value indicating whether cadence information is available on the current device.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns a value indicating whether the app is authorized to gather pedometer data.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features."
  },
  {
    "title": "waterSubmersionAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmanager/4080425-watersubmersionavailable",
    "html": "Discussion\n\nOn Apple Watch Ultra, the system sets waterSubmersionAvailable to true. On all other devices and in Simulator, the system sets it to false.\n\nSee Also\nChecking availability and authorization\nclass var authorizationStatus: CMAuthorizationStatus\nA value indicating whether the app has user authorization to receive submersion data."
  },
  {
    "title": "authorizationStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmanager/4080423-authorizationstatus",
    "html": "Discussion\n\nThe system automatically requests authorization to access motion data the first time your app instantiates a CMWaterSubmersionManager. You can use this property to check the current authorization status.\n\nSee Also\nChecking availability and authorization\nclass var waterSubmersionAvailable: Bool\nA Boolean value indicating whether the current device supports the submersion manager."
  },
  {
    "title": "percentStrong | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmtremorresult/3003348-percentstrong",
    "html": "See Also\nAccessing Tremor Data\nvar percentUnknown: Float\nThe percentage of time when the algorithm couldn’t make a determination.\nvar percentNone: Float\nThe percentage of time when no tremor was detected.\nvar percentSlight: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was slight.\nvar percentMild: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was mild.\nvar percentModerate: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was moderate."
  },
  {
    "title": "isFloorCountingAvailable() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometer/1613967-isfloorcountingavailable",
    "html": "Return Value\n\ntrue if floor counting is available or false if it is not.\n\nDiscussion\n\nFloor counting indicates the ability to count the number of floors the user walks up or down using stairs. This capability is not supported on all devices.\n\nSee Also\nDetermining Pedometer Availability\nclass func isStepCountingAvailable() -> Bool\nReturns a Boolean value indicating whether step counting is available on the current device.\nclass func isDistanceAvailable() -> Bool\nReturns a Boolean value indicating whether distance estimation is available on the current device.\nclass func isPaceAvailable() -> Bool\nReturns a Boolean value indicating whether pace information is available on the current device.\nclass func isCadenceAvailable() -> Bool\nReturns a Boolean value indicating whether cadence information is available on the current device.\nclass func isPedometerEventTrackingAvailable() -> Bool\nReturns a Boolean value indicating whether pedometer events are available on the current device.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns a value indicating whether the app is authorized to gather pedometer data.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features."
  },
  {
    "title": "percentModerate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmtremorresult/3003345-percentmoderate",
    "html": "See Also\nAccessing Tremor Data\nvar percentUnknown: Float\nThe percentage of time when the algorithm couldn’t make a determination.\nvar percentNone: Float\nThe percentage of time when no tremor was detected.\nvar percentSlight: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was slight.\nvar percentMild: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was mild.\nvar percentStrong: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was strong."
  },
  {
    "title": "percentNone | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmtremorresult/3003346-percentnone",
    "html": "See Also\nAccessing Tremor Data\nvar percentUnknown: Float\nThe percentage of time when the algorithm couldn’t make a determination.\nvar percentSlight: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was slight.\nvar percentMild: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was mild.\nvar percentModerate: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was moderate.\nvar percentStrong: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was strong."
  },
  {
    "title": "percentMild | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmtremorresult/3003344-percentmild",
    "html": "See Also\nAccessing Tremor Data\nvar percentUnknown: Float\nThe percentage of time when the algorithm couldn’t make a determination.\nvar percentNone: Float\nThe percentage of time when no tremor was detected.\nvar percentSlight: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was slight.\nvar percentModerate: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was moderate.\nvar percentStrong: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was strong."
  },
  {
    "title": "percentSlight | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmtremorresult/3003347-percentslight",
    "html": "See Also\nAccessing Tremor Data\nvar percentUnknown: Float\nThe percentage of time when the algorithm couldn’t make a determination.\nvar percentNone: Float\nThe percentage of time when no tremor was detected.\nvar percentMild: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was mild.\nvar percentModerate: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was moderate.\nvar percentStrong: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was strong."
  },
  {
    "title": "percentUnknown | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmtremorresult/2994340-percentunknown",
    "html": "Discussion\n\nBoth active motion and low signal level can cause percentUnknown results.\n\nSee Also\nAccessing Tremor Data\nvar percentNone: Float\nThe percentage of time when no tremor was detected.\nvar percentSlight: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was slight.\nvar percentMild: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was mild.\nvar percentModerate: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was moderate.\nvar percentStrong: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was strong."
  },
  {
    "title": "startDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmtremorresult/2994341-startdate",
    "html": "See Also\nReading the Time Interval\nvar endDate: Date\nThe result's end time and date."
  },
  {
    "title": "percentLikely | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdyskineticsymptomresult/3003333-percentlikely",
    "html": "See Also\nAccessing Dyskinetic Symptom Data\nvar percentUnlikely: Float\nThe percentage of time when dyskinetic symptoms were unlikely."
  },
  {
    "title": "lastProcessedDate() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmovementdisordermanager/3017309-lastprocesseddate",
    "html": "Return Value\n\nThe date of the most recently calculated results, or nil if no results are available.\n\nDiscussion\n\nBecause the manager processes results in batches, data may not be available immediately. Use this method to determine the end date for the currently processed data. Additional data will continue to become available, until the manager processes everything up to the monitor expiration date.\n\nThis method returns nil if you have not yet begun monitoring the user, or if the manager has not yet processed any data.\n\nSee Also\nQuerying for Movement Disorders\nfunc queryTremor(from: Date, to: Date, withHandler: CMTremorResultHandler)\nQuery for tremor results from the provided time interval.\ntypealias CMTremorResultHandler\nA completion handler for accessing and processing tremor results.\nfunc queryDyskineticSymptom(from: Date, to: Date, withHandler: CMDyskineticSymptomResultHandler)\nQuery for dyskinetic symptoms from the provided time interval.\ntypealias CMDyskineticSymptomResultHandler\nA completion handler for processing dyskinetic symptom results."
  },
  {
    "title": "percentUnlikely | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdyskineticsymptomresult/3003335-percentunlikely",
    "html": "See Also\nAccessing Dyskinetic Symptom Data\nvar percentLikely: Float\nThe percentage of time when dyskinetic symptoms were likely."
  },
  {
    "title": "endDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdyskineticsymptomresult/3003332-enddate",
    "html": "Discussion\n\nThe result’s endDate is always one minute or less after the startDate.\n\nSee Also\nReading the Time Interval\nvar startDate: Date\nThe result’s start time and date."
  },
  {
    "title": "startDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdyskineticsymptomresult/3003336-startdate",
    "html": "See Also\nReading the Time Interval\nvar endDate: Date\nThe result's end time and date."
  },
  {
    "title": "CMDyskineticSymptomResultHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdyskineticsymptomresulthandler",
    "html": "Parameters\ndyskineticSymptomResult\n\nAn array of dyskinetic symptom results found by the query.\n\nerror\n\nIf an error occurred, this parameter contains information about the error; otherwise it is nil.\n\nSee Also\nQuerying for Movement Disorders\nfunc queryTremor(from: Date, to: Date, withHandler: CMTremorResultHandler)\nQuery for tremor results from the provided time interval.\ntypealias CMTremorResultHandler\nA completion handler for accessing and processing tremor results.\nfunc queryDyskineticSymptom(from: Date, to: Date, withHandler: CMDyskineticSymptomResultHandler)\nQuery for dyskinetic symptoms from the provided time interval.\nfunc lastProcessedDate() -> Date?\nReturns the date of the most recently calculated results."
  },
  {
    "title": "queryDyskineticSymptom(from:to:withHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmovementdisordermanager/3003342-querydyskineticsymptom",
    "html": "Parameters\nfromDate\n\nThe start date and time of the query. The start must be within the last seven days.\n\ntoDate\n\nThe end date and time of the query. The end must be within the last seven days, and must be after the start date.\n\nhandler\n\nA block for handling the dyskinetic symptom results returned by the query.\n\nDiscussion\n\nUse this method to asynchronously query for dyskinetic symptoms recorded by the monitorKinesias(forDuration:) method. The movement disorder manager keeps dyskinetic symptom results for only seven days after the time of recording.\n\nAfter the manager retrieves the queried results, it calls your handler block from an anonymous background queue. Provide a completion handler to access and process these results.\n\nSee Also\nQuerying for Movement Disorders\nfunc queryTremor(from: Date, to: Date, withHandler: CMTremorResultHandler)\nQuery for tremor results from the provided time interval.\ntypealias CMTremorResultHandler\nA completion handler for accessing and processing tremor results.\ntypealias CMDyskineticSymptomResultHandler\nA completion handler for processing dyskinetic symptom results.\nfunc lastProcessedDate() -> Date?\nReturns the date of the most recently calculated results.\nRelated Documentation\nfunc monitorKinesias(forDuration: TimeInterval)\nCalculate and store tremor and dyskinetic symptom results for the duration of the specified time interval."
  },
  {
    "title": "CMTremorResultHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmtremorresulthandler",
    "html": "Parameters\ntremorResult\n\nAn array of tremor results found by the query.\n\nerror\n\nIf an error occurred, this parameter contains information about the error; otherwise it is nil.\n\nSee Also\nQuerying for Movement Disorders\nfunc queryTremor(from: Date, to: Date, withHandler: CMTremorResultHandler)\nQuery for tremor results from the provided time interval.\nfunc queryDyskineticSymptom(from: Date, to: Date, withHandler: CMDyskineticSymptomResultHandler)\nQuery for dyskinetic symptoms from the provided time interval.\ntypealias CMDyskineticSymptomResultHandler\nA completion handler for processing dyskinetic symptom results.\nfunc lastProcessedDate() -> Date?\nReturns the date of the most recently calculated results."
  },
  {
    "title": "monitorKinesiasExpirationDate() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmovementdisordermanager/3020513-monitorkinesiasexpirationdate",
    "html": "Return Value\n\nThe current expiration date, or nil if you have not yet begun monitoring.\n\nDiscussion\n\nThis date is set when you call the monitorKinesias(forDuration:) method. You can extend the date by calling monitorKinesias(forDuration:) again; however, you can’t shorten the monitoring duration.\n\nYou can use the expiration date to determine whether you are currently monitoring the user.\n\nguard let experiationDate = movementDisorderManager.monitorKinesiasExpirationDate() else {\n    // You haven't started monitoring the user.\n    return\n}\n\n\nif experiationDate > Date() {\n    // Currently monitoring the user.\n} else {\n    // The monitoring period has ended.\n}\n\n\nSee Also\nRecording Movement Disorders\nfunc monitorKinesias(forDuration: TimeInterval)\nCalculate and store tremor and dyskinetic symptom results for the duration of the specified time interval."
  },
  {
    "title": "isRelativeAltitudeAvailable() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmaltimeter/1616170-isrelativealtitudeavailable",
    "html": "Return Value\n\ntrue if the device supports relative altitude changes or false if it does not.\n\nDiscussion\n\nUse this method to determine if altitude updates are available before calling the startRelativeAltitudeUpdates(to:withHandler:) method.\n\nSee Also\nDetermining Altitude Availability\nclass func isAbsoluteAltitudeAvailable() -> Bool\nReturns a Boolean value indicating whether the current device reports changes in the absolute altitude.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns a value indicating whether the app is authorized to retrieve altimeter data.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features."
  },
  {
    "title": "queryTremor(from:to:withHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmovementdisordermanager/3003343-querytremor",
    "html": "Parameters\nfromDate\n\nThe start date and time of the query. The start must be within the last seven days.\n\ntoDate\n\nThe end date and time of the query. The end must be within the last seven days, and must be after the start date.\n\nhandler\n\nA block for handling the tremor results returned by the query.\n\nDiscussion\n\nUse this method to asynchronously query for tremor results recorded by the monitorKinesias(forDuration:) method. The movement disorder manager keeps tremor results for only seven days after the time of recording.\n\nAfter the manager retrieves the queried results, it calls your handler block from an anonymous background queue. Provide a completion handler to access and process these results.\n\nSee Also\nQuerying for Movement Disorders\ntypealias CMTremorResultHandler\nA completion handler for accessing and processing tremor results.\nfunc queryDyskineticSymptom(from: Date, to: Date, withHandler: CMDyskineticSymptomResultHandler)\nQuery for dyskinetic symptoms from the provided time interval.\ntypealias CMDyskineticSymptomResultHandler\nA completion handler for processing dyskinetic symptom results.\nfunc lastProcessedDate() -> Date?\nReturns the date of the most recently calculated results.\nRelated Documentation\nfunc monitorKinesias(forDuration: TimeInterval)\nCalculate and store tremor and dyskinetic symptom results for the duration of the specified time interval."
  },
  {
    "title": "isAbsoluteAltitudeAvailable() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmaltimeter/3746857-isabsolutealtitudeavailable",
    "html": "Discussion\n\nUse this method to determine if altitude updates are available before calling the startAbsoluteAltitudeUpdates(to:withHandler:) method.\n\nNote\n\nAbsolute altitude is only available on iPhone 12 and later and Apple Watch 6 or SE and later.\n\nSee Also\nDetermining Altitude Availability\nclass func isRelativeAltitudeAvailable() -> Bool\nReturns a Boolean value indicating whether the current device supports generating data for relative altitude changes.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns a value indicating whether the app is authorized to retrieve altimeter data.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features."
  },
  {
    "title": "authorizationStatus() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmaltimeter/2913742-authorizationstatus",
    "html": "See Also\nDetermining Altitude Availability\nclass func isAbsoluteAltitudeAvailable() -> Bool\nReturns a Boolean value indicating whether the current device reports changes in the absolute altitude.\nclass func isRelativeAltitudeAvailable() -> Bool\nReturns a Boolean value indicating whether the current device supports generating data for relative altitude changes.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features."
  },
  {
    "title": "startAbsoluteAltitudeUpdates(to:withHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmaltimeter/3746858-startabsolutealtitudeupdates",
    "html": "Parameters\nqueue\n\nThe operation queue on which to execute your handler block. The altimeter object stores a strong reference to this object. This parameter must not be nil.\n\nhandler\n\nThe handler block to execute when new altitude data is available. This parameter must not be nil. For information about the format of this block, see CMAbsoluteAltitudeHandler.\n\nDiscussion\n\nCall isAbsoluteAltitudeAvailable() to verify that the current device supports absolute altitude updates before calling the startAbsoluteAltitudeUpdates(to:withHandler:) method.\n\nNote\n\nAbsolute altitude is only available on iPhone 12 and later and Apple Watch 6 or SE and later.\n\nSee Also\nStarting and Stopping Altitude Updates\nfunc stopAbsoluteAltitudeUpdates()\nStops the delivery of absolute altitude data for this altimeter object.\ntypealias CMAbsoluteAltitudeHandler\nA block for receiving absolute altitude data.\nfunc startRelativeAltitudeUpdates(to: OperationQueue, withHandler: CMAltitudeHandler)\nStarts the delivery of relative altitude data to the specified handler.\nfunc stopRelativeAltitudeUpdates()\nStops the delivery of relative altitude data for the altimeter object.\ntypealias CMAltitudeHandler\nA block for receiving relative altitude data."
  },
  {
    "title": "CMAltitudeHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmaltitudehandler",
    "html": "Parameters\naltitudeData\n\nThe relative change in altitude data. If there’s an error generating the data, this parameter is nil.\n\nerror\n\nThe error object. Returns nil if the altimeter successfully delivers the altitude data. When an error occurs, you can use the information in the provided object to recover the data or to alert the user.\n\nDiscussion\n\nYou pass a block of this type to the altimeter object’s startRelativeAltitudeUpdates(to:withHandler:) method when starting the delivery of altitude data.\n\nSee Also\nStarting and Stopping Altitude Updates\nfunc startAbsoluteAltitudeUpdates(to: OperationQueue, withHandler: CMAbsoluteAltitudeHandler)\nStarts the delivery of absolute altitude data to the specified handler.\nfunc stopAbsoluteAltitudeUpdates()\nStops the delivery of absolute altitude data for this altimeter object.\ntypealias CMAbsoluteAltitudeHandler\nA block for receiving absolute altitude data.\nfunc startRelativeAltitudeUpdates(to: OperationQueue, withHandler: CMAltitudeHandler)\nStarts the delivery of relative altitude data to the specified handler.\nfunc stopRelativeAltitudeUpdates()\nStops the delivery of relative altitude data for the altimeter object."
  },
  {
    "title": "relativeAltitude | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmaltitudedata/1615907-relativealtitude",
    "html": "Discussion\n\nFor the first altitude event delivered to your altimeter object, the value of this property is 0. Subsequent events contain a number that reflects the relative change in altitude with respect to the first reported event. For example, if the altitude changed five meters between the first and second events, the value in this property is 5 for the second event.\n\nSee Also\nGetting the Altitude Data\nvar pressure: NSNumber\nThe recorded pressure, in kilopascals."
  },
  {
    "title": "pressure | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmaltitudedata/1616152-pressure",
    "html": "See Also\nGetting the Altitude Data\nvar relativeAltitude: NSNumber\nThe change in altitude (in meters) since the first reported event."
  },
  {
    "title": "accuracy | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmabsolutealtitudedata/3746852-accuracy",
    "html": "See Also\nAccessing Altitude Data\nvar altitude: Double\nThe absolute altitude of the device relative to sea level, measured in meters.\nvar precision: Double\nThe recommended resolution for the altitude, in meters."
  },
  {
    "title": "floorsDescended | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometerdata/1613940-floorsdescended",
    "html": "Discussion\n\nThis value reflects only the floors descended while the user was walking or running down stairs and does not reflect the floors descended by elevator or other assisted means. A single floor has a height of approximately three meters. The value in this property is nil when floor counting is not supported on the current device.\n\nSee Also\nGetting the Floor Counts\nvar floorsAscended: NSNumber?\nThe approximate number of floors ascended by walking."
  },
  {
    "title": "isMagnetometerAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616143-ismagnetometeravailable",
    "html": "See Also\nDetermining the Availability of Services\nvar isDeviceMotionAvailable: Bool\nA Boolean value that indicates whether the device-motion service is available on the device.\nvar isAccelerometerAvailable: Bool\nA Boolean value that indicates whether an accelerometer is available on the device.\nvar isGyroAvailable: Bool\nA Boolean value that indicates whether a gyroscope is available on the device.\nRelated Documentation\nvar isMagnetometerActive: Bool\nA Boolean value that determines whether magnetometer updates are currently happening."
  },
  {
    "title": "deviceMotionDataFrequency | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4245770-devicemotiondatafrequency",
    "html": "See Also\nConfiguring the update frequency\nvar accelerometerDataFrequency: Int"
  },
  {
    "title": "startAccelerometerUpdates(handler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4245771-startaccelerometerupdates",
    "html": "See Also\nCollecting accelerometer data\nfunc startAccelerometerUpdates()\nfunc stopAccelerometerUpdates()\nvar accelerometerBatch: [CMAccelerometerData]?\nfunc accelerometerUpdates() -> CMBatchedSensorManager.AccelerometerUpdates\nstruct CMBatchedSensorManager.AccelerometerUpdates\nvar isAccelerometerActive: Bool"
  },
  {
    "title": "accelerometerBatch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4172852-accelerometerbatch",
    "html": "See Also\nCollecting accelerometer data\nfunc startAccelerometerUpdates()\nfunc startAccelerometerUpdates(handler: ([CMAccelerometerData]?, (any Error)?) -> Void)\nfunc stopAccelerometerUpdates()\nfunc accelerometerUpdates() -> CMBatchedSensorManager.AccelerometerUpdates\nstruct CMBatchedSensorManager.AccelerometerUpdates\nvar isAccelerometerActive: Bool"
  },
  {
    "title": "stopAccelerometerUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4172863-stopaccelerometerupdates",
    "html": "See Also\nCollecting accelerometer data\nfunc startAccelerometerUpdates()\nfunc startAccelerometerUpdates(handler: ([CMAccelerometerData]?, (any Error)?) -> Void)\nvar accelerometerBatch: [CMAccelerometerData]?\nfunc accelerometerUpdates() -> CMBatchedSensorManager.AccelerometerUpdates\nstruct CMBatchedSensorManager.AccelerometerUpdates\nvar isAccelerometerActive: Bool"
  },
  {
    "title": "startAccelerometerUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager/4172859-startaccelerometerupdates",
    "html": "See Also\nCollecting accelerometer data\nfunc startAccelerometerUpdates(handler: ([CMAccelerometerData]?, (any Error)?) -> Void)\nfunc stopAccelerometerUpdates()\nvar accelerometerBatch: [CMAccelerometerData]?\nfunc accelerometerUpdates() -> CMBatchedSensorManager.AccelerometerUpdates\nstruct CMBatchedSensorManager.AccelerometerUpdates\nvar isAccelerometerActive: Bool"
  },
  {
    "title": "fallDetectionManagerDidChangeAuthorization(_:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmfalldetectiondelegate/3697146-falldetectionmanagerdidchangeaut",
    "html": "Parameters\nfallDetectionManager\n\nThe fall detection manager for the event.\n\nDiscussion\n\nThe system calls this method after the fall detection authorization status changes. Check the fall detection manager’s authorizationStatus property to determine the current status."
  },
  {
    "title": "fallDetectionManager(_:didDetect:completionHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmfalldetectiondelegate/3697145-falldetectionmanager",
    "html": "Parameters\nfallDetectionManager\n\nThe fall detection manager for the event.\n\nevent\n\nAn object containing data about the event.\n\nhandler\n\nA completion handler for the event. Call this handler as soon as you finish processing the event.\n\nDiscussion\n\nConcurrency Note\n\nYou can call this method from synchronous code using a completion handler, as shown on this page, or you can call it as an asynchronous method that has the following declaration:\n\noptional func fallDetectionManager(_ fallDetectionManager: CMFallDetectionManager, didDetect event: CMFallDetectionEvent) async\n\n\nFor information about concurrency and asynchronous code in Swift, see Calling Objective-C APIs Asynchronously.\n\nIf the user authorized fall detection, the system wakes or launches your app when a fall detection event occurs. Your app receives a short amount of time to run in the background. You must process the event and call the completion handler before the time expires, or the system suspends your app.\n\nAdditionally, each time the user launches your app, the system checks to see if a fall event has occurred during the recent past. If one has occurred, it calls this method.\n\nNote that your app may receive the same event multiple times, for example, if the app crashes and relaunches. Always check the event’s date property to determine whether your app has already received the event. The system guarantees that different fall events have different date values."
  },
  {
    "title": "date | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmfalldetectionevent/3697141-date",
    "html": "Discussion\n\nUse the date to identify a fall event. The system guarantees fall events have different date values."
  },
  {
    "title": "Adhering to the movement disorder data collection requirements | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/adhering_to_the_movement_disorder_data_collection_requirements",
    "html": "Overview\n\nWhen using the movement disorder APIs, it’s critical that your app provides a transparent data collection experience. Your app must display an introductory screen that describes its data use policy. Additionally, some data types require specific disclosures.\n\nImportant\n\nApps that offer movement disorders monitoring must adhere to the Movement Disorder API Addendum. Note that only Apple Developer Program account holders can access the addendum. In addition, all health-related apps must follow best practices for handling the user’s health data, as defined by the HealthKit guidelines (see Protecting user privacy).\n\nExplain your app’s data use policy\n\nApps that perform movement disorder monitoring must display an introduction screen when the user first launches the app. This screen must describe the following:\n\nThe app’s purpose and target audience.\n\nThe data that your app collects during movement disorder monitoring.\n\nHow you plan to use the data.\n\nWhether your app collects data while running in the background.\n\nInstructions on how to opt out of data collection in the future.\n\nInclude required disclosures\n\nFor some types of data, your app must include additional text in the introduction screen. For each of the following situations, add the specified text:\n\nResting tremor data\n\n“This app is monitoring and collecting your Parkinsonian resting tremor data, only if you self-report or have been clinically diagnosed with resting tremor, and indicate within the app that this is true.”\n\nChoreiform dyskinesia data\n\n“This app is monitoring and collecting your choreiform dyskinesia data, only if you self-report or have been clinically diagnosed with choreiform dyskinesias, and indicate within the app that this is true.”\n\nMovement disorder data in the background\n\n“This app is able to collect your movement disorder data even when the app is not active, on screen, or responding to your user input.”\n\nSee Also\nMovement disorder manager\nGetting movement disorder symptom data\nRetrieve data from the Apple Watch’s movement disorder manager.\nMovement disorder algorithm changelog\nA chronological log of notable changes to the movement disorder algorithm.\nclass CMMovementDisorderManager\nA manager for recording and querying movement disorder data.\nclass CMTremorResult\nA result object that contains data about the presence and strength of tremors during a one-minute interval.\nclass CMDyskineticSymptomResult\nA result object that contains data about the likely presence of dyskinetic symptoms during a one-minute interval."
  },
  {
    "title": "floorsAscended | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometerdata/1613961-floorsascended",
    "html": "Discussion\n\nThis value reflects only the floors ascended while the user was walking or running up stairs and does not reflect the floors ascended by elevator or other assisted means. A single floor has a height of approximately three meters. The value in this property is nil when floor counting is not supported on the current device.\n\nSee Also\nGetting the Floor Counts\nvar floorsDescended: NSNumber?\nThe approximate number of floors descended by walking."
  },
  {
    "title": "currentPace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometerdata/1613971-currentpace",
    "html": "Discussion\n\nDuring regular updates, this property is set to the user’s pace. The value in this property is nil when you are performing a query for historical pedometer data or when pace information is not yet available for the user. This property is also nil for devices that do not support the gathering of pace data.\n\nSee Also\nGetting the Pedestrian Data\nvar numberOfSteps: NSNumber\nThe number of steps taken by the user.\nvar distance: NSNumber?\nThe estimated distance (in meters) traveled by the user.\nvar averageActivePace: NSNumber?\nThe average pace of the user, measured in seconds per meter.\nvar currentCadence: NSNumber?\nThe rate at which steps are taken, measured in steps per second."
  },
  {
    "title": "averageActivePace | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometerdata/1649705-averageactivepace",
    "html": "Discussion\n\nDuring regular updates, this property is set to the user’s average active pace since startUpdates(from:withHandler:) was called. When you perform historical queries, the property is set to the average active pace between startDate and endDate.\n\nThe property averages the user’s pace only during periods of activity and it omits all periods of inactivity. The value of this property is nil when you are performing a query for historical pedometer data and the information is not available (such as when the user did not move between startDate and endDate). This property is also nil for devices that do not support the gathering of pace data.\n\nSee Also\nGetting the Pedestrian Data\nvar numberOfSteps: NSNumber\nThe number of steps taken by the user.\nvar distance: NSNumber?\nThe estimated distance (in meters) traveled by the user.\nvar currentPace: NSNumber?\nThe current pace of the user, measured in seconds per meter.\nvar currentCadence: NSNumber?\nThe rate at which steps are taken, measured in steps per second."
  },
  {
    "title": "startDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometerdata/1613942-startdate",
    "html": "Discussion\n\nThe startDate and endDate represent the period of time over which the pedometer data was gathered.\n\nSee Also\nGetting the Dates\nvar endDate: Date\nThe end time for the pedometer data."
  },
  {
    "title": "numberOfSteps | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometerdata/1613965-numberofsteps",
    "html": "See Also\nGetting the Pedestrian Data\nvar distance: NSNumber?\nThe estimated distance (in meters) traveled by the user.\nvar averageActivePace: NSNumber?\nThe average pace of the user, measured in seconds per meter.\nvar currentPace: NSNumber?\nThe current pace of the user, measured in seconds per meter.\nvar currentCadence: NSNumber?\nThe rate at which steps are taken, measured in steps per second."
  },
  {
    "title": "CMPedometerEventHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometereventhandler",
    "html": "Discussion\n\nYou provide a block of this type when requesting pedometer events from a CMPedometer object. When a new event becomes available, the pedometer object delivers that data to your block for processing. If there was an error retrieving the data, the pedometer object provides an error object instead.\n\nThis block has no return value and takes the following parameters.\n\npedometerEvent\n\nA CMPedometerEvent object containing the event information. If there was an error retrieving the data, this parameter is nil.\n\nerror\n\nAn NSError object if there was a problem or nil if the pedometer event was retrieved successfully.\n\nSee Also\nGathering Live Pedometer Data\nfunc startUpdates(from: Date, withHandler: CMPedometerHandler)\nStarts the delivery of recent pedestrian-related data to your app.\nfunc stopUpdates()\nStops the delivery of recent pedestrian data updates to your app.\nfunc startEventUpdates(handler: CMPedometerEventHandler)\nStarts the delivery of pedometer events to your app.\nfunc stopEventUpdates()\nStops the delivery of pedometer events to your app.\ntypealias CMPedometerHandler\nA block for processing pedometer-related data."
  },
  {
    "title": "stopEventUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometer/1778446-stopeventupdates",
    "html": "See Also\nGathering Live Pedometer Data\nfunc startUpdates(from: Date, withHandler: CMPedometerHandler)\nStarts the delivery of recent pedestrian-related data to your app.\nfunc stopUpdates()\nStops the delivery of recent pedestrian data updates to your app.\nfunc startEventUpdates(handler: CMPedometerEventHandler)\nStarts the delivery of pedometer events to your app.\ntypealias CMPedometerHandler\nA block for processing pedometer-related data.\ntypealias CMPedometerEventHandler\nA block for processing pedometer events."
  },
  {
    "title": "stopUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometer/1613973-stopupdates",
    "html": "Discussion\n\nUse this method to stop the delivery of continuous updates that were initiated by a call to the startUpdates(from:withHandler:) method.\n\nSee Also\nGathering Live Pedometer Data\nfunc startUpdates(from: Date, withHandler: CMPedometerHandler)\nStarts the delivery of recent pedestrian-related data to your app.\nfunc startEventUpdates(handler: CMPedometerEventHandler)\nStarts the delivery of pedometer events to your app.\nfunc stopEventUpdates()\nStops the delivery of pedometer events to your app.\ntypealias CMPedometerHandler\nA block for processing pedometer-related data.\ntypealias CMPedometerEventHandler\nA block for processing pedometer events."
  },
  {
    "title": "startUpdates(from:withHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometer/1613950-startupdates",
    "html": "Parameters\nstart\n\nThe date from which to start reporting data. You can specify a date in the past to retrieve the data from that time until now. This parameter must not be nil.\n\nhandler\n\nThe block to execute when data is available. This block is called repeatedly on a background thread as new data arrives. This parameter must not be nil. For information about this block, see CMPedometerHandler.\n\nDiscussion\n\nUpon calling this method, the pedometer object starts calling your handler block regularly with data. The data passed to your handler block represents the cumulative data starting at the specified start date and ending at the current time. (You can get the start and end dates from the CMPedometerData object passed to your handler.) This method initiates the event delivery process asynchronously and executes your block on a serial dispatch queue, which ensures that only one copy of the block runs at any given time.\n\nWhen the app is suspended, the delivery of updates stops temporarily. Upon returning to foreground or background execution, the pedometer object begins updates again.\n\nTo stop the delivery of events, call the stopUpdates() method.\n\nIt is safe to start the delivery of events using this method and then perform additional queries using the queryPedometerData(from:to:withHandler:) method.\n\nSee Also\nGathering Live Pedometer Data\nfunc stopUpdates()\nStops the delivery of recent pedestrian data updates to your app.\nfunc startEventUpdates(handler: CMPedometerEventHandler)\nStarts the delivery of pedometer events to your app.\nfunc stopEventUpdates()\nStops the delivery of pedometer events to your app.\ntypealias CMPedometerHandler\nA block for processing pedometer-related data.\ntypealias CMPedometerEventHandler\nA block for processing pedometer events."
  },
  {
    "title": "isCadenceAvailable() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometer/1613948-iscadenceavailable",
    "html": "Return Value\n\ntrue if cadence information is available or false if it is not.\n\nDiscussion\n\nCadence measurement indicates the ability to determine the rate at which the user takes steps, in steps per second. This capability is not supported on all devices.\n\nSee Also\nDetermining Pedometer Availability\nclass func isStepCountingAvailable() -> Bool\nReturns a Boolean value indicating whether step counting is available on the current device.\nclass func isDistanceAvailable() -> Bool\nReturns a Boolean value indicating whether distance estimation is available on the current device.\nclass func isFloorCountingAvailable() -> Bool\nReturns a Boolean value indicating whether floor counting is available on the current device.\nclass func isPaceAvailable() -> Bool\nReturns a Boolean value indicating whether pace information is available on the current device.\nclass func isPedometerEventTrackingAvailable() -> Bool\nReturns a Boolean value indicating whether pedometer events are available on the current device.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns a value indicating whether the app is authorized to gather pedometer data.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features."
  },
  {
    "title": "isPaceAvailable() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometer/1613938-ispaceavailable",
    "html": "Return Value\n\ntrue if pace information is available or false if it is not.\n\nDiscussion\n\nPace measurement indicates the ability to determine the user’s pace in seconds per meter. This capability is not supported on all devices.\n\nSee Also\nDetermining Pedometer Availability\nclass func isStepCountingAvailable() -> Bool\nReturns a Boolean value indicating whether step counting is available on the current device.\nclass func isDistanceAvailable() -> Bool\nReturns a Boolean value indicating whether distance estimation is available on the current device.\nclass func isFloorCountingAvailable() -> Bool\nReturns a Boolean value indicating whether floor counting is available on the current device.\nclass func isCadenceAvailable() -> Bool\nReturns a Boolean value indicating whether cadence information is available on the current device.\nclass func isPedometerEventTrackingAvailable() -> Bool\nReturns a Boolean value indicating whether pedometer events are available on the current device.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns a value indicating whether the app is authorized to gather pedometer data.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features."
  },
  {
    "title": "isDistanceAvailable() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometer/1613957-isdistanceavailable",
    "html": "Return Value\n\ntrue if distance estimation is available or false if it is not.\n\nDiscussion\n\nDistance estimation indicates the ability to use step information to supply the approximate distance traveled by the user. This capability is not supported on all devices.\n\nSee Also\nDetermining Pedometer Availability\nclass func isStepCountingAvailable() -> Bool\nReturns a Boolean value indicating whether step counting is available on the current device.\nclass func isFloorCountingAvailable() -> Bool\nReturns a Boolean value indicating whether floor counting is available on the current device.\nclass func isPaceAvailable() -> Bool\nReturns a Boolean value indicating whether pace information is available on the current device.\nclass func isCadenceAvailable() -> Bool\nReturns a Boolean value indicating whether cadence information is available on the current device.\nclass func isPedometerEventTrackingAvailable() -> Bool\nReturns a Boolean value indicating whether pedometer events are available on the current device.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns a value indicating whether the app is authorized to gather pedometer data.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features."
  },
  {
    "title": "isStepCountingAvailable() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometer/1613963-isstepcountingavailable",
    "html": "Return Value\n\ntrue if step counting is available or false if it is not.\n\nSee Also\nDetermining Pedometer Availability\nclass func isDistanceAvailable() -> Bool\nReturns a Boolean value indicating whether distance estimation is available on the current device.\nclass func isFloorCountingAvailable() -> Bool\nReturns a Boolean value indicating whether floor counting is available on the current device.\nclass func isPaceAvailable() -> Bool\nReturns a Boolean value indicating whether pace information is available on the current device.\nclass func isCadenceAvailable() -> Bool\nReturns a Boolean value indicating whether cadence information is available on the current device.\nclass func isPedometerEventTrackingAvailable() -> Bool\nReturns a Boolean value indicating whether pedometer events are available on the current device.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns a value indicating whether the app is authorized to gather pedometer data.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features."
  },
  {
    "title": "accelerometerData(from:to:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmsensorrecorder/1615937-accelerometerdata",
    "html": "Parameters\nfromDate\n\nThe starting date (inclusive) from which to retrieve data. Entries occurring before this date are excluded from the results.\n\ntoDate\n\nThe end date (inclusive) at which to stop retrieving data. Entries occurring after this date are excluded from the results. The difference in time between the fromDate and this parameter must be 12 hours or less.\n\nReturn Value\n\nAn object to use for enumerating over the accelerometer data.\n\nDiscussion\n\nUse this method to fetch accelerometer data entries in the specified date range. When fetching entries for a date range, the recorder returns only the data entries it has. If there were gaps in the recording, no data entries are returned for those gaps. Recorded accelerometer data is kept for a maximum of three days. There may be a delay of up to three minutes before new samples are available for retrieval.\n\nSee Also\nRetrieving Past Accelerometer Data\naccelerometerDataSince:\nRetrieves the accelerometer data for entries in the same batch."
  },
  {
    "title": "CMError | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmerror",
    "html": "Topics\nErrors\nvar CMErrorDeviceRequiresMovement: CMError\nThe device must move for a sampling of motion data to occur.\nvar CMErrorInvalidAction: CMError\nThe specified action is invalid.\nvar CMErrorInvalidParameter: CMError\nThe specified parameter is invalid.\nvar CMErrorMotionActivityNotAuthorized: CMError\nThe app isn’t currently authorized to use motion activity support.\nvar CMErrorMotionActivityNotAvailable: CMError\nMotion activity support isn’t available on the current device.\nvar CMErrorMotionActivityNotEntitled: CMError\nThe app is missing an entitlement for the requested activity.\nvar CMErrorNilData: CMError\nCore Motion didn’t return any data.\nvar CMErrorNULL: CMError\nNo error occurred.\nvar CMErrorNotAuthorized: CMError\nThe app isn’t authorized to use the Core Motion framework.\nvar CMErrorNotAvailable: CMError\nThe requested service isn’t available on this device.\nvar CMErrorNotEntitled: CMError\nThe app is missing a required entitlement.\nvar CMErrorSize: CMError\nThe data is the incorrect size.\nvar CMErrorTrueNorthNotAvailable: CMError\nTrue north isn’t available on this device.\nvar CMErrorUnknown: CMError\nAn unknown error occurred.\nInitializers\ninit(UInt32)\ninit(rawValue: UInt32)\nInstance Properties\nvar rawValue: UInt32\nRelationships\nConforms To\nEquatable\nRawRepresentable\nSee Also\nUnderstanding Errors\nlet CMErrorDomain: String\nThe error domain for Core Motion."
  },
  {
    "title": "CMErrorDomain | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmerrordomain",
    "html": "See Also\nUnderstanding Errors\nstruct CMError\nDefines motion errors."
  },
  {
    "title": "accelerometerDataSince: | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmsensorrecorder/1804909-accelerometerdatasince",
    "html": "Parameters\nidentifier\n\nThe batch identifier of the requested samples. You can obtain this identifier from accelerometer data entries retrieved during a previous query.\n\nReturn Value\n\nAn object to use for enumerating over the accelerometer data.\n\nOverview\n\nThe sensor recorder captures accelerometer data in batches and assigns each sample the same identifier. Use this method to retrieve the samples associated with a specific batch.\n\nSee Also\nRetrieving Past Accelerometer Data\nfunc accelerometerData(from: Date, to: Date) -> CMSensorDataList?\nRetrieves the accelerometer data collected between the specified dates."
  },
  {
    "title": "recordAccelerometer(forDuration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmsensorrecorder/1615987-recordaccelerometer",
    "html": "Parameters\nduration\n\nThe amount of time (in seconds) for which to record the data. You may specify a time interval of up to 43,200 seconds (12 hours).\n\nDiscussion\n\nWhen you call this method, the system begins capturing accelerometer data at a sample rate of 50 Hz. The system records the data for the specified amount of time, even if your app is suspended or terminated. The collected data remains accessible to your app for up to three days."
  },
  {
    "title": "authorizationStatus() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmsensorrecorder/2913746-authorizationstatus",
    "html": "See Also\nChecking the Availability of Sensor Recording\nclass func isAccelerometerRecordingAvailable() -> Bool\nReturns a Boolean value indicating whether accelerometer recording is supported on the current device.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features.\nclass func isAuthorizedForRecording() -> Bool\nReturns a Boolean value indicating whether the app is authorized to record sensor data.\nDeprecated"
  },
  {
    "title": "CMAuthorizationStatus | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmauthorizationstatus",
    "html": "Topics\nEnumeration Cases\ncase notDetermined\nThe status has not yet been determined.\ncase restricted\nAccess is denied due to system-wide restrictions.\ncase denied\nAccess was denied by the user.\ncase authorized\nAccess was granted by the user.\nRelationships\nConforms To\nSendable\nSee Also\nChecking the Availability of Sensor Recording\nclass func isAccelerometerRecordingAvailable() -> Bool\nReturns a Boolean value indicating whether accelerometer recording is supported on the current device.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns a value indicating whether the app is authorized to record sensor data.\nclass func isAuthorizedForRecording() -> Bool\nReturns a Boolean value indicating whether the app is authorized to record sensor data.\nDeprecated"
  },
  {
    "title": "startDate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrecordedaccelerometerdata/1616130-startdate",
    "html": "See Also\nGetting the Accelerometer Data\nvar identifier: UInt64\nThe unique identifier for the accelerometer data."
  },
  {
    "title": "isAccelerometerRecordingAvailable() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmsensorrecorder/1615943-isaccelerometerrecordingavailabl",
    "html": "Return Value\n\ntrue if accelerometer recording is available or false if it is not.\n\nDiscussion\n\nCall this method before trying to record or retrieve any accelerometer data using the methods of this class. Accelerometer data recording is not supported on all devices.\n\nSee Also\nChecking the Availability of Sensor Recording\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns a value indicating whether the app is authorized to record sensor data.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features.\nclass func isAuthorizedForRecording() -> Bool\nReturns a Boolean value indicating whether the app is authorized to record sensor data.\nDeprecated"
  },
  {
    "title": "identifier | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrecordedaccelerometerdata/1616134-identifier",
    "html": "Discussion\n\nAccelerometer data is recorded in batches, which are assigned a unique identifier. This property contains the identifier of the batch in which this particular sample was recorded.\n\nSee Also\nGetting the Accelerometer Data\nvar startDate: Date\nThe wall clock time when the sensor sample was recorded."
  },
  {
    "title": "availableAttitudeReferenceFrames() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1615955-availableattitudereferenceframes",
    "html": "Return Value\n\nA bitmask that you can bitwise-AND with the enum constants of the CMAttitudeReferenceFrame type.\n\nDiscussion\n\nWhen starting a service that allows you to specify a reference frame, it’s your responsibility to specify a reference frame that’s available on the current device. Some reference frames might be unavailable because the required hardware isn’t present or not currently available.\n\nThe following example shows how to call this method and test for the availability of the xMagneticNorthZVertical value.\n\nif ([CMMotionManager availableAttitudeReferenceFrames] & CMAttitudeReferenceFrameXMagneticNorthZVertical) {\n    // do something appropriate here\n}\n\nSee Also\nAccessing Attitude Reference Frames\nvar attitudeReferenceFrame: CMAttitudeReferenceFrame\nReturns either the reference frame currently being used or the default attitude reference frame."
  },
  {
    "title": "CMAcceleration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmacceleration",
    "html": "Overview\n\nA G is a unit of gravitation force equal to that exerted by the earth’s gravitational field (9.81 m s−2).\n\nTopics\nInitializers\ninit()\ninit(x: Double, y: Double, z: Double)\nGetting the Acceleration Values\nvar x: Double\nX-axis acceleration in G's (gravitational force).\nvar y: Double\nY-axis acceleration in G's (gravitational force).\nvar z: Double\nZ-axis acceleration in G's (gravitational force).\nSee Also\nAccessing Accelerometer Data\nvar acceleration: CMAcceleration\nThe acceleration measured by the accelerometer."
  },
  {
    "title": "acceleration | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmaccelerometerdata/1615958-acceleration",
    "html": "Discussion\n\nThe description of the CMAcceleration structure type describes the fields used for measuring acceleration.\n\nSee Also\nAccessing Accelerometer Data\nstruct CMAcceleration\nThe type of a structure containing 3-axis acceleration values."
  },
  {
    "title": "magnetometerData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616032-magnetometerdata",
    "html": "Discussion\n\nIf no magnetometer data is available, the value of this property is nil. An app that is receiving magnetometer data after calling startMagnetometerUpdates() periodically checks the value of this property and processes the magnetometer data.\n\nSee Also\nManaging Magnetometer Updates\nvar magnetometerUpdateInterval: TimeInterval\nThe interval, in seconds, at which the system delivers magnetometer data to the block handler.\nfunc startMagnetometerUpdates(to: OperationQueue, withHandler: CMMagnetometerHandler)\nStarts magnetometer updates on an operation queue and with a specified handler.\nfunc startMagnetometerUpdates()\nStarts magnetometer updates without a block handler.\nfunc stopMagnetometerUpdates()\nStops magnetometer updates.\ntypealias CMMagnetometerHandler\nThe type of block callback for handling magnetometer data."
  },
  {
    "title": "stopMagnetometerUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616174-stopmagnetometerupdates",
    "html": "See Also\nManaging Magnetometer Updates\nvar magnetometerUpdateInterval: TimeInterval\nThe interval, in seconds, at which the system delivers magnetometer data to the block handler.\nfunc startMagnetometerUpdates(to: OperationQueue, withHandler: CMMagnetometerHandler)\nStarts magnetometer updates on an operation queue and with a specified handler.\nfunc startMagnetometerUpdates()\nStarts magnetometer updates without a block handler.\nvar magnetometerData: CMMagnetometerData?\nThe latest sample of magnetometer data.\ntypealias CMMagnetometerHandler\nThe type of block callback for handling magnetometer data."
  },
  {
    "title": "magnetometerUpdateInterval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616089-magnetometerupdateinterval",
    "html": "Discussion\n\nThe supplies magnetometer data to the block handler specified in startMagnetometerUpdates(to:withHandler:) at regular intervals determined by the value of this property. The interval unit are in seconds. The value of this property is capped to minimum and maximum values; the maximum value is determined by the maximum frequency supported by the hardware. If your app is sensitive to the intervals of magnetometer data, it should always check the timestamps of the delivered CMMagnetometerData instances to determine the true update interval.\n\nSee Also\nManaging Magnetometer Updates\nfunc startMagnetometerUpdates(to: OperationQueue, withHandler: CMMagnetometerHandler)\nStarts magnetometer updates on an operation queue and with a specified handler.\nfunc startMagnetometerUpdates()\nStarts magnetometer updates without a block handler.\nfunc stopMagnetometerUpdates()\nStops magnetometer updates.\nvar magnetometerData: CMMagnetometerData?\nThe latest sample of magnetometer data.\ntypealias CMMagnetometerHandler\nThe type of block callback for handling magnetometer data."
  },
  {
    "title": "startGyroUpdates(to:withHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616104-startgyroupdates",
    "html": "Parameters\nqueue\n\nAn operation queue provided by the caller. Because the processed events might arrive at a high rate, using the main operation queue is not recommended.\n\nhandler\n\nA block that is invoked with each update to handle new gyroscope data. The block must conform to the CMGyroHandler type.\n\nDiscussion\n\nYou must call stopGyroUpdates() when you no longer want your app to process gyroscope updates.\n\nSee Also\nManaging Gyroscope Updates\nvar gyroUpdateInterval: TimeInterval\nThe interval, in seconds, for providing gyroscope updates to the block handler.\nfunc startGyroUpdates()\nStarts gyroscope updates without a handler.\nfunc stopGyroUpdates()\nStops gyroscope updates.\nvar gyroData: CMGyroData?\nThe latest sample of gyroscope data.\ntypealias CMGyroHandler\nThe type of block callback for handling gyroscope data."
  },
  {
    "title": "stopGyroUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616059-stopgyroupdates",
    "html": "See Also\nManaging Gyroscope Updates\nvar gyroUpdateInterval: TimeInterval\nThe interval, in seconds, for providing gyroscope updates to the block handler.\nfunc startGyroUpdates(to: OperationQueue, withHandler: CMGyroHandler)\nStarts gyroscope updates on an operation queue and with a specified handler.\nfunc startGyroUpdates()\nStarts gyroscope updates without a handler.\nvar gyroData: CMGyroData?\nThe latest sample of gyroscope data.\ntypealias CMGyroHandler\nThe type of block callback for handling gyroscope data."
  },
  {
    "title": "startMagnetometerUpdates(to:withHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1615968-startmagnetometerupdates",
    "html": "Parameters\nqueue\n\nAn operation queue provided by the caller. Because the processed events might arrive at a high rate, using the main operation queue is not recommended.\n\nhandler\n\nA block that is invoked with each update to handle new magnetometer data. The block must conform to the CMMagnetometerHandler type.\n\nDiscussion\n\nYou must call stopMagnetometerUpdates() when you no longer want your app to process magnetometer updates.\n\nSee Also\nManaging Magnetometer Updates\nvar magnetometerUpdateInterval: TimeInterval\nThe interval, in seconds, at which the system delivers magnetometer data to the block handler.\nfunc startMagnetometerUpdates()\nStarts magnetometer updates without a block handler.\nfunc stopMagnetometerUpdates()\nStops magnetometer updates.\nvar magnetometerData: CMMagnetometerData?\nThe latest sample of magnetometer data.\ntypealias CMMagnetometerHandler\nThe type of block callback for handling magnetometer data."
  },
  {
    "title": "startGyroUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616156-startgyroupdates",
    "html": "Discussion\n\nYou can get the latest gyroscope data through the gyroData property. You must call stopGyroUpdates() when you no longer want your app to process gyroscope updates.\n\nSee Also\nManaging Gyroscope Updates\nvar gyroUpdateInterval: TimeInterval\nThe interval, in seconds, for providing gyroscope updates to the block handler.\nfunc startGyroUpdates(to: OperationQueue, withHandler: CMGyroHandler)\nStarts gyroscope updates on an operation queue and with a specified handler.\nfunc stopGyroUpdates()\nStops gyroscope updates.\nvar gyroData: CMGyroData?\nThe latest sample of gyroscope data.\ntypealias CMGyroHandler\nThe type of block callback for handling gyroscope data."
  },
  {
    "title": "gyroUpdateInterval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616160-gyroupdateinterval",
    "html": "Discussion\n\nThe system supplies gyroscope (that is, rotation rate) updates to the block handler specified in startGyroUpdates(to:withHandler:) at regular intervals determined by the value of this property. The interval units are in seconds. The value of this property is capped to minimum and maximum values; the maximum value is determined by the maximum frequency supported by the hardware. If your app is sensitive to the intervals of gyroscope data, it should always check the timestamps of the delivered CMGyroData instances to determine the true update interval.\n\nSee Also\nManaging Gyroscope Updates\nfunc startGyroUpdates(to: OperationQueue, withHandler: CMGyroHandler)\nStarts gyroscope updates on an operation queue and with a specified handler.\nfunc startGyroUpdates()\nStarts gyroscope updates without a handler.\nfunc stopGyroUpdates()\nStops gyroscope updates.\nvar gyroData: CMGyroData?\nThe latest sample of gyroscope data.\ntypealias CMGyroHandler\nThe type of block callback for handling gyroscope data."
  },
  {
    "title": "maximumDepth | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmanager/4245773-maximumdepth",
    "html": "Discussion\n\nTo access data for dives with a maximum depth of 6 m, add the Shallow Depth and Pressure capability to your app. For more information, see Adding capabilities to your app.\n\nTo enable a maximum depth of 40 m, you must apply for the full Submerged Depth and Pressure entitlement. For more information, see Express interest in the Submerged Depth and Pressure API."
  },
  {
    "title": "accelerometerData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1615992-accelerometerdata",
    "html": "Discussion\n\nIf no accelerometer data is available, the value of this property is nil. An app that is receiving accelerometer data after calling startAccelerometerUpdates() periodically checks the value of this property and processes the acceleration data.\n\nSee Also\nManaging Accelerometer Updates\nvar accelerometerUpdateInterval: TimeInterval\nThe interval, in seconds, for providing accelerometer updates to the block handler.\nfunc startAccelerometerUpdates(to: OperationQueue, withHandler: CMAccelerometerHandler)\nStarts accelerometer updates on an operation queue and with a specified handler.\nfunc startAccelerometerUpdates()\nStarts accelerometer updates without a handler.\nfunc stopAccelerometerUpdates()\nStops accelerometer updates.\ntypealias CMAccelerometerHandler\nThe type of block callback for handling accelerometer data."
  },
  {
    "title": "startAccelerometerUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616171-startaccelerometerupdates",
    "html": "Discussion\n\nYou can get the latest accelerometer data through the accelerometerData property. You must call stopAccelerometerUpdates() when you no longer want your app to process accelerometer updates.\n\nSee Also\nManaging Accelerometer Updates\nvar accelerometerUpdateInterval: TimeInterval\nThe interval, in seconds, for providing accelerometer updates to the block handler.\nfunc startAccelerometerUpdates(to: OperationQueue, withHandler: CMAccelerometerHandler)\nStarts accelerometer updates on an operation queue and with a specified handler.\nfunc stopAccelerometerUpdates()\nStops accelerometer updates.\nvar accelerometerData: CMAccelerometerData?\nThe latest sample of accelerometer data.\ntypealias CMAccelerometerHandler\nThe type of block callback for handling accelerometer data."
  },
  {
    "title": "CMAccelerometerHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmaccelerometerhandler",
    "html": "Discussion\n\nBlocks of type CMAccelerometerHandler are called when there is accelerometer data to process. You pass the block into startAccelerometerUpdates(to:withHandler:) as the second argument. Blocks of this type return no value but take two arguments:\n\naccelerometerData\n\nAn object that encapsulates a CMAcceleration structure with fields holding acceleration values for the three axes of movement.\n\nerror\n\nAn error object representing an error encountered in providing accelerometer updates. If an error occurs, you should stop accelerometer updates and inform the user of the problem. If there is no error, this argument is nil. Core Motion errors are of the CMErrorDomain domain and the CMError type.\n\nSee Also\nManaging Accelerometer Updates\nvar accelerometerUpdateInterval: TimeInterval\nThe interval, in seconds, for providing accelerometer updates to the block handler.\nfunc startAccelerometerUpdates(to: OperationQueue, withHandler: CMAccelerometerHandler)\nStarts accelerometer updates on an operation queue and with a specified handler.\nfunc startAccelerometerUpdates()\nStarts accelerometer updates without a handler.\nfunc stopAccelerometerUpdates()\nStops accelerometer updates.\nvar accelerometerData: CMAccelerometerData?\nThe latest sample of accelerometer data."
  },
  {
    "title": "stopAccelerometerUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616138-stopaccelerometerupdates",
    "html": "See Also\nManaging Accelerometer Updates\nvar accelerometerUpdateInterval: TimeInterval\nThe interval, in seconds, for providing accelerometer updates to the block handler.\nfunc startAccelerometerUpdates(to: OperationQueue, withHandler: CMAccelerometerHandler)\nStarts accelerometer updates on an operation queue and with a specified handler.\nfunc startAccelerometerUpdates()\nStarts accelerometer updates without a handler.\nvar accelerometerData: CMAccelerometerData?\nThe latest sample of accelerometer data.\ntypealias CMAccelerometerHandler\nThe type of block callback for handling accelerometer data."
  },
  {
    "title": "CMAbsoluteAltitudeHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmabsolutealtitudehandler",
    "html": "Parameters\naltitudeData\n\nThe current altitude for the device. If there’s an error generating the data, this parameter is nil.\n\nerror\n\nThe error object. Returns nil if the altimeter successfully delivers the altitude data. When an error occurs, you can use the information in the provided object to recover the data or to alert the user.\n\nDiscussion\n\nYou pass a block of this type to the altimeter object’s startAbsoluteAltitudeUpdates(to:withHandler:) method when starting the delivery of altitude data.\n\nNote\n\nAbsolute altitude is only available on iPhone 12 and later and Apple Watch 6 or SE and later.\n\nSee Also\nStarting and Stopping Altitude Updates\nfunc startAbsoluteAltitudeUpdates(to: OperationQueue, withHandler: CMAbsoluteAltitudeHandler)\nStarts the delivery of absolute altitude data to the specified handler.\nfunc stopAbsoluteAltitudeUpdates()\nStops the delivery of absolute altitude data for this altimeter object.\nfunc startRelativeAltitudeUpdates(to: OperationQueue, withHandler: CMAltitudeHandler)\nStarts the delivery of relative altitude data to the specified handler.\nfunc stopRelativeAltitudeUpdates()\nStops the delivery of relative altitude data for the altimeter object.\ntypealias CMAltitudeHandler\nA block for receiving relative altitude data."
  },
  {
    "title": "version() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmovementdisordermanager/4025561-version",
    "html": "Discussion\n\nUse this method to determine the algorithm used by the movement disorder manager. If the current device supports gathering movement disorder data, this method returns a string with the version number in <major>.<minor>.<fix> format. It returns nil anytime isAvailable() returns false. For information about the current version, see Movement disorder algorithm changelog.\n\nImportant\n\nYour app uses the version of the algorithm provided by the current operating system running on the device. This means the algorithm your app uses might change, without requiring you to rebuild and resubmit your app.\n\nTo set up tests that notify you when the version changes, create a unit test that checks the current version against the expected value. You can then use continuous integration to automatically monitor this value with each new release.\n\nfunc testForVersionChange() throws {\n    let expectedVersion = \"1.0.0\"\n    let currentVersion = CMMovementDisorderManager.version()\n    XCTAssertEqual(expectedVersion, currentVersion, \"*** The version has changes to \\(String(describing: currentVersion)). ***\")\n}\n\n\nSee Also\nChecking Availablility\nclass func isAvailable() -> Bool\nA Boolean value indicating whether the current device supports the movement disorder manager.\nclass func authorizationStatus() -> CMAuthorizationStatus\nA value indicating whether the user has authorized the app to monitor and query for movement disorder data."
  },
  {
    "title": "authorizationStatus() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmovementdisordermanager/3003339-authorizationstatus",
    "html": "Discussion\n\nThe first time your app attempts to monitor or query for movement disorder data, the manager asks the user for permission to collect or retrieve their movement disorder data. To request permission, your app must set a motion usage description in its Info.plist file. For more information, see Provide the motion usage description.\n\nSee Also\nChecking Availablility\nclass func isAvailable() -> Bool\nA Boolean value indicating whether the current device supports the movement disorder manager.\nclass func version() -> String?\nReturns a string that describes the movement disorder algorithm’s current version."
  },
  {
    "title": "monitorKinesias(forDuration:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmovementdisordermanager/3003341-monitorkinesias",
    "html": "Parameters\nduration\n\nThe monitoring duration in seconds. The maximum duration is seven days.\n\nDiscussion\n\nCall this method to begin monitoring, calculating, and storing tremor and dyskinetic symptom results. The manager stores results for a period of seven days after the time of recording. You can access the results at any time within that seven-day interval, after which they expire. To retrieve these results, call the queryTremor(from:to:withHandler:) and queryDyskineticSymptom(from:to:withHandler:) methods.\n\nTo determine whether the results are currently being monitored and calculated, call the monitorKinesiasExpirationDate() method. The maximum monitoring duration is seven days. In order to continue monitoring beyond the expiration date, you need to renew your subscription by calling monitorKinesias(forDuration:) again before the monitoring period expires. Note that repeated calls allow you to extend monitoring, but not shorten it.\n\nSee Also\nRecording Movement Disorders\nfunc monitorKinesiasExpirationDate() -> Date?\nReturns the expiration date for the most recent monitoring period.\nRelated Documentation\nfunc queryTremor(from: Date, to: Date, withHandler: CMTremorResultHandler)\nQuery for tremor results from the provided time interval.\nfunc queryDyskineticSymptom(from: Date, to: Date, withHandler: CMDyskineticSymptomResultHandler)\nQuery for dyskinetic symptoms from the provided time interval."
  },
  {
    "title": "isAvailable() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmovementdisordermanager/3003340-isavailable",
    "html": "See Also\nChecking Availablility\nclass func authorizationStatus() -> CMAuthorizationStatus\nA value indicating whether the user has authorized the app to monitor and query for movement disorder data.\nclass func version() -> String?\nReturns a string that describes the movement disorder algorithm’s current version."
  },
  {
    "title": "startRelativeAltitudeUpdates(to:withHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmaltimeter/1616004-startrelativealtitudeupdates",
    "html": "Parameters\nqueue\n\nThe operation queue on which to execute your handler block. The altimeter object stores a strong reference to this object. This parameter must not be nil.\n\nhandler\n\nThe handler block to execute when new altitude data is available. This parameter must not be nil. For information about the format of this block, see CMAltitudeHandler.\n\nDiscussion\n\nCall this method to initiate the delivery of events. The altimeter object stores a strong reference to the specified queue and makes a copy of your block. If you call the method a second time, the altimeter object releases its references to the previous queue and handler before storing references to the new ones. Only the last installed handler receives events. When you no longer need the altitude data, or when an error occurs, call the stopRelativeAltitudeUpdates() method to stop the delivery of events.\n\nIf altitude data isn’t available on the current device, this method does nothing.\n\nSee Also\nStarting and Stopping Altitude Updates\nfunc startAbsoluteAltitudeUpdates(to: OperationQueue, withHandler: CMAbsoluteAltitudeHandler)\nStarts the delivery of absolute altitude data to the specified handler.\nfunc stopAbsoluteAltitudeUpdates()\nStops the delivery of absolute altitude data for this altimeter object.\ntypealias CMAbsoluteAltitudeHandler\nA block for receiving absolute altitude data.\nfunc stopRelativeAltitudeUpdates()\nStops the delivery of relative altitude data for the altimeter object.\ntypealias CMAltitudeHandler\nA block for receiving relative altitude data."
  },
  {
    "title": "stopRelativeAltitudeUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmaltimeter/1615947-stoprelativealtitudeupdates",
    "html": "Discussion\n\nCalling this method ends the delivery of relative altitude events and releases the references to the operation queue and block that you specified in the startRelativeAltitudeUpdates(to:withHandler:) method. If you haven’t started delivering data, or if you’ve already called stopRelativeAltitudeUpdates(), this method does nothing.\n\nSee Also\nStarting and Stopping Altitude Updates\nfunc startAbsoluteAltitudeUpdates(to: OperationQueue, withHandler: CMAbsoluteAltitudeHandler)\nStarts the delivery of absolute altitude data to the specified handler.\nfunc stopAbsoluteAltitudeUpdates()\nStops the delivery of absolute altitude data for this altimeter object.\ntypealias CMAbsoluteAltitudeHandler\nA block for receiving absolute altitude data.\nfunc startRelativeAltitudeUpdates(to: OperationQueue, withHandler: CMAltitudeHandler)\nStarts the delivery of relative altitude data to the specified handler.\ntypealias CMAltitudeHandler\nA block for receiving relative altitude data."
  },
  {
    "title": "stopAbsoluteAltitudeUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmaltimeter/3746859-stopabsolutealtitudeupdates",
    "html": "Discussion\n\nCalling this method ends the delivery of absolute altitude events and releases the references to the operation queue and block that you specified in the startAbsoluteAltitudeUpdates(to:withHandler:) method. If you haven’t started delivering data, or if you’ve already called stopAbsoluteAltitudeUpdates(), this method does nothing.\n\nNote\n\nAbsolute altitude is only available on iPhone 12 and later and Apple Watch 6 or SE and later.\n\nSee Also\nStarting and Stopping Altitude Updates\nfunc startAbsoluteAltitudeUpdates(to: OperationQueue, withHandler: CMAbsoluteAltitudeHandler)\nStarts the delivery of absolute altitude data to the specified handler.\ntypealias CMAbsoluteAltitudeHandler\nA block for receiving absolute altitude data.\nfunc startRelativeAltitudeUpdates(to: OperationQueue, withHandler: CMAltitudeHandler)\nStarts the delivery of relative altitude data to the specified handler.\nfunc stopRelativeAltitudeUpdates()\nStops the delivery of relative altitude data for the altimeter object.\ntypealias CMAltitudeHandler\nA block for receiving relative altitude data."
  },
  {
    "title": "startAccelerometerUpdates(to:withHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616148-startaccelerometerupdates",
    "html": "Parameters\nqueue\n\nAn operation queue provided by the caller. Because the processed events might arrive at a high rate, using the main operation queue is not recommended.\n\nhandler\n\nA block that is invoked with each update to handle new accelerometer data. The block must conform to the CMAccelerometerHandler type.\n\nDiscussion\n\nYou must call stopAccelerometerUpdates() when you no longer want your app to process accelerometer updates.\n\nSee Also\nManaging Accelerometer Updates\nvar accelerometerUpdateInterval: TimeInterval\nThe interval, in seconds, for providing accelerometer updates to the block handler.\nfunc startAccelerometerUpdates()\nStarts accelerometer updates without a handler.\nfunc stopAccelerometerUpdates()\nStops accelerometer updates.\nvar accelerometerData: CMAccelerometerData?\nThe latest sample of accelerometer data.\ntypealias CMAccelerometerHandler\nThe type of block callback for handling accelerometer data."
  },
  {
    "title": "showsDeviceMovementDisplay | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616122-showsdevicemovementdisplay",
    "html": "Discussion\n\nWhen a device requires movement (for example, to calibrate the compass), the value of this property indicates if the system’s device-movement display should be shown. When a device requires movement, the block handler of type CMDeviceMotionHandler reports the CMErrorDeviceRequiresMovement error once. By default, this property is false.\n\nSee Also\nManaging Device Motion Updates\nvar deviceMotionUpdateInterval: TimeInterval\nThe interval, in seconds, for providing device-motion updates to the block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame, to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified reference frame and block handler.\nfunc startDeviceMotionUpdates(to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame)\nStarts device-motion updates using a reference frame but without a block handler.\nfunc startDeviceMotionUpdates()\nStarts device-motion updates without a block handler.\nfunc stopDeviceMotionUpdates()\nStops device-motion updates.\nvar deviceMotion: CMDeviceMotion?\nThe latest sample of device-motion data.\ntypealias CMDeviceMotionHandler\nThe type of block callback for handling device-motion data."
  },
  {
    "title": "accelerometerUpdateInterval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616135-accelerometerupdateinterval",
    "html": "Discussion\n\nThe system supplies accelerometer updates to the block handler specified in startAccelerometerUpdates(to:withHandler:) at regular intervals determined by the value of this property. The interval units are in seconds. The value of this property is capped to minimum and maximum values; the maximum value is determined by the maximum frequency supported by the hardware. If your app is sensitive to the intervals of acceleration data, it should always check the timestamps of the delivered CMAccelerometerData instances to determine the true update interval.\n\nSee Also\nManaging Accelerometer Updates\nfunc startAccelerometerUpdates(to: OperationQueue, withHandler: CMAccelerometerHandler)\nStarts accelerometer updates on an operation queue and with a specified handler.\nfunc startAccelerometerUpdates()\nStarts accelerometer updates without a handler.\nfunc stopAccelerometerUpdates()\nStops accelerometer updates.\nvar accelerometerData: CMAccelerometerData?\nThe latest sample of accelerometer data.\ntypealias CMAccelerometerHandler\nThe type of block callback for handling accelerometer data.\nRelated Documentation\nEvent Handling Guide for UIKit Apps"
  },
  {
    "title": "isMagnetometerActive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1615977-ismagnetometeractive",
    "html": "Discussion\n\nThis property indicates whether the startMagnetometerUpdates(to:withHandler:) or startMagnetometerUpdates() method has been called since the last time the stopMagnetometerUpdates() method was called. (If the start methods hadn’t been called, the app could be getting updates from the magnetometer after calling, for example, startDeviceMotionUpdates(), but this property would return false.)\n\nSee Also\nDetermining Which Services Are Active\nvar isDeviceMotionActive: Bool\nA Boolean value that determines whether the app is receiving updates from the device-motion service.\nvar isAccelerometerActive: Bool\nA Boolean value that indicates whether accelerometer updates are currently happening.\nvar isGyroActive: Bool\nA Boolean value that determines whether gyroscope updates are currently happening.\nRelated Documentation\nvar isMagnetometerAvailable: Bool\nA Boolean value that indicates whether a magnetometer is available on the device."
  },
  {
    "title": "isGyroActive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616153-isgyroactive",
    "html": "Discussion\n\nThis property indicates whether startGyroUpdates(to:withHandler:) or startGyroUpdates() has been called since the last time stopGyroUpdates() was called. (If the start methods hadn’t been called, the app could be getting updates from the gyroscope after calling, for example, startDeviceMotionUpdates(), but this property would return false.)\n\nSee Also\nDetermining Which Services Are Active\nvar isDeviceMotionActive: Bool\nA Boolean value that determines whether the app is receiving updates from the device-motion service.\nvar isAccelerometerActive: Bool\nA Boolean value that indicates whether accelerometer updates are currently happening.\nvar isMagnetometerActive: Bool\nA Boolean value that determines whether magnetometer updates are currently happening.\nRelated Documentation\nvar isGyroAvailable: Bool\nA Boolean value that indicates whether a gyroscope is available on the device."
  },
  {
    "title": "isGyroAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1615951-isgyroavailable",
    "html": "See Also\nDetermining the Availability of Services\nvar isDeviceMotionAvailable: Bool\nA Boolean value that indicates whether the device-motion service is available on the device.\nvar isAccelerometerAvailable: Bool\nA Boolean value that indicates whether an accelerometer is available on the device.\nvar isMagnetometerAvailable: Bool\nA Boolean value that indicates whether a magnetometer is available on the device.\nRelated Documentation\nvar isGyroActive: Bool\nA Boolean value that determines whether gyroscope updates are currently happening."
  },
  {
    "title": "isDeviceMotionActive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616158-isdevicemotionactive",
    "html": "Discussion\n\nThis property indicates whether startDeviceMotionUpdates(to:withHandler:) or startDeviceMotionUpdates() has been called since the last time stopDeviceMotionUpdates() was called.\n\nSee Also\nDetermining Which Services Are Active\nvar isAccelerometerActive: Bool\nA Boolean value that indicates whether accelerometer updates are currently happening.\nvar isGyroActive: Bool\nA Boolean value that determines whether gyroscope updates are currently happening.\nvar isMagnetometerActive: Bool\nA Boolean value that determines whether magnetometer updates are currently happening.\nRelated Documentation\nvar isDeviceMotionAvailable: Bool\nA Boolean value that indicates whether the device-motion service is available on the device."
  },
  {
    "title": "isAccelerometerActive | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1615990-isaccelerometeractive",
    "html": "Discussion\n\nThis property indicates whether startAccelerometerUpdates(to:withHandler:) or startAccelerometerUpdates() has been called since the last time stopAccelerometerUpdates() was called. (If the start methods hadn’t been called, the app could be getting updates from the accelerometer after calling, for example, startDeviceMotionUpdates(), but this property would return false.)\n\nSee Also\nDetermining Which Services Are Active\nvar isDeviceMotionActive: Bool\nA Boolean value that determines whether the app is receiving updates from the device-motion service.\nvar isGyroActive: Bool\nA Boolean value that determines whether gyroscope updates are currently happening.\nvar isMagnetometerActive: Bool\nA Boolean value that determines whether magnetometer updates are currently happening.\nRelated Documentation\nvar isAccelerometerAvailable: Bool\nA Boolean value that indicates whether an accelerometer is available on the device."
  },
  {
    "title": "startDeviceMotionUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616110-startdevicemotionupdates",
    "html": "Discussion\n\nYou can get the latest device-motion data through the deviceMotion property. You must call stopDeviceMotionUpdates() when you no longer want your app to process device-motion updates. This method uses the reference frame returned by attitudeReferenceFrame for device-motion updates.\n\nSee Also\nManaging Device Motion Updates\nvar showsDeviceMovementDisplay: Bool\nControls whether the device-movement display is shown.\nvar deviceMotionUpdateInterval: TimeInterval\nThe interval, in seconds, for providing device-motion updates to the block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame, to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified reference frame and block handler.\nfunc startDeviceMotionUpdates(to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame)\nStarts device-motion updates using a reference frame but without a block handler.\nfunc stopDeviceMotionUpdates()\nStops device-motion updates.\nvar deviceMotion: CMDeviceMotion?\nThe latest sample of device-motion data.\ntypealias CMDeviceMotionHandler\nThe type of block callback for handling device-motion data."
  },
  {
    "title": "isAccelerometerAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616057-isaccelerometeravailable",
    "html": "See Also\nDetermining the Availability of Services\nvar isDeviceMotionAvailable: Bool\nA Boolean value that indicates whether the device-motion service is available on the device.\nvar isGyroAvailable: Bool\nA Boolean value that indicates whether a gyroscope is available on the device.\nvar isMagnetometerAvailable: Bool\nA Boolean value that indicates whether a magnetometer is available on the device.\nRelated Documentation\nvar isAccelerometerActive: Bool\nA Boolean value that indicates whether accelerometer updates are currently happening."
  },
  {
    "title": "startDeviceMotionUpdates(to:withHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616048-startdevicemotionupdates",
    "html": "Parameters\nqueue\n\nAn operation queue provided by the caller. Because the processed events might arrive at a high rate, using the main operation queue is not recommended.\n\nhandler\n\nA block that is invoked with each update to handle new device-motion data. The block must conform to the CMDeviceMotionHandler type.\n\nDiscussion\n\nThis method reports motion relative to the reference frame in the attitudeReferenceFrame property. You must call stopDeviceMotionUpdates() when you no longer want your app to process device-motion updates.\n\nSee Also\nManaging Device Motion Updates\nvar showsDeviceMovementDisplay: Bool\nControls whether the device-movement display is shown.\nvar deviceMotionUpdateInterval: TimeInterval\nThe interval, in seconds, for providing device-motion updates to the block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame, to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified reference frame and block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame)\nStarts device-motion updates using a reference frame but without a block handler.\nfunc startDeviceMotionUpdates()\nStarts device-motion updates without a block handler.\nfunc stopDeviceMotionUpdates()\nStops device-motion updates.\nvar deviceMotion: CMDeviceMotion?\nThe latest sample of device-motion data.\ntypealias CMDeviceMotionHandler\nThe type of block callback for handling device-motion data."
  },
  {
    "title": "startDeviceMotionUpdates(using:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616107-startdevicemotionupdates",
    "html": "Parameters\nreferenceFrame\n\nA constant identifying the reference frame to use for device-motion updates. It’s your responsibility to specify a reference frame that’s available on the current device. Call availableAttitudeReferenceFrames() to determine which reference frames are currently available.\n\nDiscussion\n\nYou can get the latest device-motion data through the deviceMotion property. You must call stopDeviceMotionUpdates() when you no longer want your app to process device-motion updates.\n\nSee Also\nManaging Device Motion Updates\nvar showsDeviceMovementDisplay: Bool\nControls whether the device-movement display is shown.\nvar deviceMotionUpdateInterval: TimeInterval\nThe interval, in seconds, for providing device-motion updates to the block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame, to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified reference frame and block handler.\nfunc startDeviceMotionUpdates(to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified block handler.\nfunc startDeviceMotionUpdates()\nStarts device-motion updates without a block handler.\nfunc stopDeviceMotionUpdates()\nStops device-motion updates.\nvar deviceMotion: CMDeviceMotion?\nThe latest sample of device-motion data.\ntypealias CMDeviceMotionHandler\nThe type of block callback for handling device-motion data."
  },
  {
    "title": "startDeviceMotionUpdates(using:to:withHandler:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616176-startdevicemotionupdates",
    "html": "Parameters\nreferenceFrame\n\nA constant identifying the reference frame to use for device-motion updates. It’s your responsibility to specify a reference frame that’s available on the current device. Call availableAttitudeReferenceFrames() to determine which reference frames are currently available.\n\nqueue\n\nAn operation queue provided by the caller. Because the processed events might arrive at a high rate, using the main operation queue is not recommended.\n\nhandler\n\nA block that is invoked with each update to handle new device-motion data. The block must conform to the CMDeviceMotionHandler type.\n\nDiscussion\n\nYou must call stopDeviceMotionUpdates() when you no longer want your app to process device-motion updates.\n\nSee Also\nManaging Device Motion Updates\nvar showsDeviceMovementDisplay: Bool\nControls whether the device-movement display is shown.\nvar deviceMotionUpdateInterval: TimeInterval\nThe interval, in seconds, for providing device-motion updates to the block handler.\nfunc startDeviceMotionUpdates(to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame)\nStarts device-motion updates using a reference frame but without a block handler.\nfunc startDeviceMotionUpdates()\nStarts device-motion updates without a block handler.\nfunc stopDeviceMotionUpdates()\nStops device-motion updates.\nvar deviceMotion: CMDeviceMotion?\nThe latest sample of device-motion data.\ntypealias CMDeviceMotionHandler\nThe type of block callback for handling device-motion data."
  },
  {
    "title": "timestamp | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmlogitem/1615939-timestamp",
    "html": "Discussion\n\nThe timestamp is the amount of time in seconds since the device booted."
  },
  {
    "title": "multiply(byInverseOf:) | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmattitude/1615909-multiply",
    "html": "Parameters\nattitude\n\nAn object representing the device’s attitude at a given moment of measurement.\n\nDiscussion\n\nThis method multiplies the inverse of the specified CMAttitude object by the attitude represented by the receiving object. It replaces the receiving instance with the attitude change relative to the object passed in attitude. You should cache the CMAttitude instance you want to use as a reference and pass that object as the argument to subsequent calls of this method."
  },
  {
    "title": "CMRotationMatrix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrotationmatrix",
    "html": "Topics\nFields\nvar m11: Double\nvar m12: Double\nvar m13: Double\nvar m21: Double\nvar m22: Double\nvar m23: Double\nvar m31: Double\nvar m32: Double\nvar m33: Double\nInitializers\ninit()\ninit(m11: Double, m12: Double, m13: Double, m21: Double, m22: Double, m23: Double, m31: Double, m32: Double, m33: Double)\nSee Also\nGetting a Mathematical Representation of Attitude as a Rotation Matrix\nvar rotationMatrix: CMRotationMatrix\nReturns a rotation matrix representing the device's attitude."
  },
  {
    "title": "quaternion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmattitude/1616025-quaternion",
    "html": "Discussion\n\nSee the discussion of the CMQuaternion type in “Constants” for further information.\n\nSee Also\nGetting a Mathematical Representation of Attitude as a Quaternion\nstruct CMQuaternion\nThe type for a quaternion representing a measurement of attitude.\nRelated Documentation\nvar rotationMatrix: CMRotationMatrix\nReturns a rotation matrix representing the device's attitude."
  },
  {
    "title": "rotationMatrix | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmattitude/1616139-rotationmatrix",
    "html": "Discussion\n\nA rotation matrix in linear algebra describes the rotation of a body in three-dimensional Euclidean space.\n\nSee Also\nGetting a Mathematical Representation of Attitude as a Rotation Matrix\nstruct CMRotationMatrix\nThe type of a structure representing a rotation matrix.\nRelated Documentation\nvar quaternion: CMQuaternion\nReturns a quaternion representing the device's attitude."
  },
  {
    "title": "stopDeviceMotionUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616115-stopdevicemotionupdates",
    "html": "See Also\nManaging Device Motion Updates\nvar showsDeviceMovementDisplay: Bool\nControls whether the device-movement display is shown.\nvar deviceMotionUpdateInterval: TimeInterval\nThe interval, in seconds, for providing device-motion updates to the block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame, to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified reference frame and block handler.\nfunc startDeviceMotionUpdates(to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame)\nStarts device-motion updates using a reference frame but without a block handler.\nfunc startDeviceMotionUpdates()\nStarts device-motion updates without a block handler.\nvar deviceMotion: CMDeviceMotion?\nThe latest sample of device-motion data.\ntypealias CMDeviceMotionHandler\nThe type of block callback for handling device-motion data."
  },
  {
    "title": "CMQuaternion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmquaternion",
    "html": "Overview\n\nA quaternion offers a way to parameterize attitude. If q is an instance of CMQuaternion, mathematically it represents the following unit quaternion: q.x*i + q.y*j + q.z*k + q.w. A unit quaternion represents a rotation of theta radians about the unit vector {x,y,z}, and {q.x, q.y, q.z, q.w} satisfies the following:\n\nq.x = x * sin(theta / 2)\nq.y = y * sin(theta / 2)\nq.z = z * sin(theta / 2)\nq.w = cos(theta / 2)\n\nTopics\nInitializing the Quaternion\ninit()\ninit(x: Double, y: Double, z: Double, w: Double)\nGetting the Quaternion Values\nvar w: Double\nThe value for the w axis.\nvar x: Double\nThe value for the x axis.\nvar y: Double\nThe value for the y axis.\nvar z: Double\nThe value for the z axis\nSee Also\nGetting a Mathematical Representation of Attitude as a Quaternion\nvar quaternion: CMQuaternion\nReturns a quaternion representing the device's attitude."
  },
  {
    "title": "attitudeReferenceFrame | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616112-attitudereferenceframe",
    "html": "Discussion\n\nIf the device-motion service is active, this property returns the reference frame currently in use. If the service is inactive, but your app started it at some point since launch, this property contains the last reference frame you used. If you haven’t started the device-motion service since app launch, this property returns the default frame of reference, which is xArbitraryZVertical.\n\nIf device motion is not available on the current device, the value of this property is undefined.\n\nSee Also\nAccessing Attitude Reference Frames\nclass func availableAttitudeReferenceFrames() -> CMAttitudeReferenceFrame\nReturns a bitmask of the available reference frames for reporting the attitude of the current device.\nRelated Documentation\nvar isDeviceMotionAvailable: Bool\nA Boolean value that indicates whether the device-motion service is available on the device."
  },
  {
    "title": "pitch | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmattitude/1615925-pitch",
    "html": "Discussion\n\nA pitch is a rotation around a lateral axis that passes through the device from side to side.\n\nSee Also\nGetting a Mathematical Representation of Attitude as Euler Angles\nvar roll: Double\nThe roll of the device, in radians.\nvar yaw: Double\nThe yaw of the device, in radians."
  },
  {
    "title": "roll | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmattitude/1616028-roll",
    "html": "Discussion\n\nA roll is a rotation around a longitudinal axis that passes through the device from its top to bottom.\n\nSee Also\nGetting a Mathematical Representation of Attitude as Euler Angles\nvar pitch: Double\nThe pitch of the device, in radians.\nvar yaw: Double\nThe yaw of the device, in radians.\nRelated Documentation\nEvent Handling Guide for UIKit Apps"
  },
  {
    "title": "xTrueNorthZVertical | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmattitudereferenceframe/1616019-xtruenorthzvertical",
    "html": "Discussion\n\nUse this option to determine the attitude of the device relative to true north. For example, you might use this to implement more precise navigation. The yaw (Z-axis) value in CMAttitude is 0 when the X axis is aligned with true north.\n\nThe device must have a magnetometer and that sensor must be available. Location services must also be available to calculate the difference between magnetic and true north. If the magnetometer isn’t currently calibrated, Core Motion prompts the person to move the device to calibrate it.\n\nSee Also\nGetting the reference frames\nstatic var xArbitraryZVertical: CMAttitudeReferenceFrame\nA reference frame where the Z axis is vertical and the X axis points in an arbitrary direction in the horizontal plane.\nstatic var xArbitraryCorrectedZVertical: CMAttitudeReferenceFrame\nA reference frame where the Z axis is vertical and has improved rotation accuracy, and the X axis points in an arbitrary direction in the horizontal plane.\nstatic var xMagneticNorthZVertical: CMAttitudeReferenceFrame\nA reference frame where the Z axis is vertical and the X axis points to the magnetic north pole."
  },
  {
    "title": "xArbitraryCorrectedZVertical | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmattitudereferenceframe/1615969-xarbitrarycorrectedzvertical",
    "html": "Discussion\n\nWhen you start the device-motion service, Core Motion uses the current device orientation to set the initial frame of reference. You might use this option when you don’t need to know the device’s attitude relative to true or magnetic north, and only track rotational changes over time.\n\nThis option uses the magnetometer to improve long-term accuracy for the z axis (yaw) measurements. The device must have a magnetometer and that sensor must be available and calibrated.\n\nThis option requires more CPU usage than the xArbitraryZVertical option.\n\nTip\n\nSave the first reported attitude value, and compare it to new values to determine changes since the start of the service.\n\nSee Also\nGetting the reference frames\nstatic var xArbitraryZVertical: CMAttitudeReferenceFrame\nA reference frame where the Z axis is vertical and the X axis points in an arbitrary direction in the horizontal plane.\nstatic var xMagneticNorthZVertical: CMAttitudeReferenceFrame\nA reference frame where the Z axis is vertical and the X axis points to the magnetic north pole.\nstatic var xTrueNorthZVertical: CMAttitudeReferenceFrame\nA reference frame where the Z axis is vertical and the X axis points to the geographic north pole."
  },
  {
    "title": "xArbitraryZVertical | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmattitudereferenceframe/1615953-xarbitraryzvertical",
    "html": "Discussion\n\nWhen you start the device-motion service, Core Motion sets the frame of reference to the device’s initial orientation. You might use this option when you don’t need to know the device’s attitude relative to true or magnetic north, and only track rotational changes over time.\n\nThis option uses fewer sensors to determine the device attitude, and is more power efficient than the xArbitraryCorrectedZVertical option.\n\nTip\n\nSave the first reported attitude value, and compare it to new values to determine changes since the start of the service.\n\nSee Also\nGetting the reference frames\nstatic var xArbitraryCorrectedZVertical: CMAttitudeReferenceFrame\nA reference frame where the Z axis is vertical and has improved rotation accuracy, and the X axis points in an arbitrary direction in the horizontal plane.\nstatic var xMagneticNorthZVertical: CMAttitudeReferenceFrame\nA reference frame where the Z axis is vertical and the X axis points to the magnetic north pole.\nstatic var xTrueNorthZVertical: CMAttitudeReferenceFrame\nA reference frame where the Z axis is vertical and the X axis points to the geographic north pole."
  },
  {
    "title": "xMagneticNorthZVertical | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmattitudereferenceframe/1616123-xmagneticnorthzvertical",
    "html": "Discussion\n\nUse this option to determine the attitude of the device relative to magnetic north. For example, you might use this to implement a compass feature in your app. The yaw (Z-axis) value in CMAttitude is 0 when the X axis is aligned with magnetic north.\n\nThe device must have a magnetometer and that sensor must be available. If the magnetometer isn’t currently calibrated, Core Motion prompts the person to move the device to calibrate it.\n\nSee Also\nGetting the reference frames\nstatic var xArbitraryZVertical: CMAttitudeReferenceFrame\nA reference frame where the Z axis is vertical and the X axis points in an arbitrary direction in the horizontal plane.\nstatic var xArbitraryCorrectedZVertical: CMAttitudeReferenceFrame\nA reference frame where the Z axis is vertical and has improved rotation accuracy, and the X axis points in an arbitrary direction in the horizontal plane.\nstatic var xTrueNorthZVertical: CMAttitudeReferenceFrame\nA reference frame where the Z axis is vertical and the X axis points to the geographic north pole."
  },
  {
    "title": "Accessing submersion data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/accessing_submersion_data",
    "html": "Overview\n\nApple Watch Ultra can collect water pressure, depth, and temperature data while submerged; however, before your app can access this data, you need to perform the following setup steps:\n\nInclude an Apple-supplied entitlement that grants access to the submersion data.\n\nProvide an information property list key that describes why the app needs access to submersion data.\n\nAdd the underwater-depth Background Mode capability to the app.\n\nVerify that the submersion manager is available on the current device.\n\nTo start monitoring submersion data, instantiate a CMWaterSubmersionManager and assign a delegate to the submersion manager. The system begins sending updates to your delegate. You can then start an extended runtime session when the watch first submerges, and transition your app to a touchless user interface for the duration of the dive.\n\nAdd the required entitlement\n\nBefore you can instantiate the CMWaterSubmersionManager class, your app needs to include a Submerged Depth and Pressure entitlement to access submersion data.\n\nTo access data for dives with a maximum depth of 6 m, add the Shallow Depth and Pressure capability to your app. For more information, see Adding capabilities to your app.\n\nTo enable a maximum depth of 40 m, you must apply for the full Submersion Depth and Pressure entitlement. For more information, see Express interest in the Submerged Depth and Pressure API.\n\nIf you instantiate the manager without an entitlement, the system calls your delegate’s manager(_:errorOccurred:) method, passing a CMErrorNotEntitled error, and your delegate doesn’t receive any additional data.\n\nAuthorize access to motion data\n\nThe system automatically asks the wearer for authorization to access motion data when you first instantiate a CMWaterSubmersionManager; however, before you can instantiate the manager, you need to include the NSMotionUsageDescription key in your app target’s information property list and provide a usage description string.\n\nThe system displays this usage description when it prompts the wearer for authorization to access motion data. If you don’t include a usage description string, your app crashes when you try to instantiate a CMWaterSubmersionManager object.\n\nAdd support for the underwater depth extended runtime session\n\nTo make sure your app continues to run, and remains visible, you need to add the underwater-depth Background Mode to your app’s Info.plist file. This background mode lets your app run as the frontmost app during a dive session.\n\nOpen the Info.plist file as XML by Control-clicking it in the Project navigator and selecting Open As > Source Code. Next, edit the string value for the WKBackgroundModes key so that it contains the underwater-depth value.\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>WKBackgroundModes</key>\n    <array>\n        <string>underwater-depth</string>\n    </array>\n</dict>\n</plist>\n\n\n\n\nIf your app doesn’t already have an Info.plist file, you can add a placeholder, and then edit it using the following steps:\n\nSelect your app’s WatchKit Extension target and click the Signing & Capabilities tab.\n\nChoose Editor > Add Capability and double-click the Background Modes capability to add it to the Signing & Capabilities pane.\n\nChoose an option to use as a placeholder from the Session Type pop-up menu. The Info.plist file appears in the Project navigator.\n\nOpen the Info.plist file as XML source code and replace the placeholder string value for the WKBackgroundModes key with the underwater-depth value.\n\nAdding the underwater-depth Background Mode capability to your Info.plist file lets your app run an extended runtime session so that it can remain the frontmost app for the duration of the dive session. It also adds your app to the list of apps that the system can autolaunch when the wearer submerges the watch.\n\nUnlike most extended runtime sessions, your app doesn’t need to start an extended runtime session to gain additional time as the frontmost app. Just by adding this key, the system automatically keeps your app as the frontmost app for 30 minutes after the wearer launches it. This gives the wearer time to prepare for the dive before submerging. Then, after you start an extended runtime session, your app remains the frontmost app for the duration of the dive. The session doesn’t time out until the watch spends more than 10 minutes unsubmerged or the wearer turns off Water Lock.\n\nIf you don’t explicitly start an extended runtime session, the system automatically starts a runtime session when the wearer dives below 1 meter, and your app transitions to the CMWaterSubmersionMeasurement.DepthState.submergedDeep state.\n\nVerify that the submersion data is available on the current device.\n\nBefore creating a submersion manager, verify that the data is available on the current device.\n\nguard CMWaterSubmersionManager.waterSubmersionAvailable else {\n    return false\n}\n\n\nOn Apple Watch Ultra, the system sets waterSubmersionAvailable to true. On all other devices and in Simulator, the system sets it to false.\n\nStart monitoring submersion data\n\nTo begin receiving submersion data, instantiate a CMWaterSubmersionManager object and assign a CMWaterSubmersionManagerDelegate.\n\n// Instantiate the submersion manager.\nsubmersionManager = CMWaterSubmersionManager()\n\n\n// Assign the submersion manager delegate.\nsubmersionManager.delegate = self\n\n\nYour delegate begins to receive data as soon as you assign it. For example, your delegate receives both event notifications and errors.\n\n// Respond to events.\nnonisolated func manager(_ manager: CMWaterSubmersionManager, didUpdate event: CMWaterSubmersionEvent) {\n\n\n    let submerged: Bool?\n    switch event.state {\n    case .unknown:\n        logger.info(\"*** Received an unknown event. ***\")\n        submerged = nil\n\n\n    case .notSubmerged:\n        logger.info(\"*** Not Submerged Event ***\")\n        submerged = false\n\n\n    case .submerged:\n        logger.info(\"*** Submerged Event ***\")\n        submerged = true\n\n\n    @unknown default:\n        fatalError(\"*** Unknown event received: \\(event.state) ***\")\n    }\n\n\n    Task {\n        await myAdd(event: event)\n        if let submerged {\n            await mySet(submerged: submerged)\n        }\n    }\n}\n\n\n// Respond to errors.\nnonisolated func manager(_ manager: CMWaterSubmersionManager, errorOccurred error: Error) {\n    logger.error(\"*** An error occurred: \\(error.localizedDescription) ***\")\n}\n\n\n\n\nYour delegate also begins receiving measurement updates. If the watch isn’t submerged, the updates only include surface pressure and submersion state data. After submersion, it also receives water pressure and depth data. The system sends measurement updates three times a second while the watch is submerged. When the watch is on the surface, the system provides updates at a slower rate, and may stop providing updates if the watch isn’t moving.\n\nnonisolated func manager(_ manager: CMWaterSubmersionManager, didUpdate measurement: CMWaterSubmersionMeasurement) {\n\n\n    logger.info(\"*** Received a depth measurement. ***\")\n\n\n    let currentDepth: String\n    if let depth = measurement.depth {\n        currentDepth = \"\\(depth.value) \\(depth.unit)\"\n    } else {\n        currentDepth = \"None\"\n    }\n\n\n    let currentSurfacePressure: String\n    let surfacePressure = measurement.surfacePressure\n    currentSurfacePressure = \"\\(surfacePressure.value) \\(surfacePressure.unit)\"\n\n\n    let currentPressure: String\n    if let pressure = measurement.pressure {\n        currentPressure = \"\\(pressure.value) \\(pressure.unit)\"\n    } else {\n        currentPressure = \"None\"\n    }\n\n\n    logger.info(\"*** Depth: \\(currentDepth) ***\")\n    logger.info(\"*** Surface Pressure: \\(currentSurfacePressure) ***\")\n    logger.info(\"*** Pressure: \\(currentPressure) ***\")\n\n\n    let submerged: Bool?\n    switch measurement.submersionState {\n    case .unknown:\n        logger.info(\"*** Unknown Depth ***\")\n        submerged = nil\n    case .notSubmerged:\n        logger.info(\"*** Not Submerged ***\")\n        submerged = false\n    case .submergedShallow:\n        logger.info(\"*** Shallow Depth ***\")\n        submerged = true\n    case .submergedDeep:\n        logger.info(\"*** Deep Depth ***\")\n        submerged = true\n    case .approachingMaxDepth:\n        logger.info(\"*** Approaching Max Depth ***\")\n        submerged = true\n    case .pastMaxDepth:\n        logger.info(\"*** Past Max Depth ***\")\n        submerged = true\n    case .sensorDepthError:\n        logger.info(\"*** A depth error has occurred. ***\")\n        submerged = nil\n    @unknown default:\n        fatalError(\"*** An unknown measurement depth state: \\(measurement.submersionState)\")\n    }\n\n\n    Task {\n        await myAdd(measurement: measurement)\n        if let submerged {\n            await mySet(submerged: submerged)\n        }\n    }\n}\n\n\nThe watch also receives water temperature data when it’s submerged.\n\nnonisolated func manager(_ manager: CMWaterSubmersionManager, didUpdate measurement: CMWaterTemperature) {\n    let temp = measurement.temperature\n    let uncertainty = measurement.temperatureUncertainty\n    let currentTemperature = \"\\(temp.value) +/- \\(uncertainty.value) \\(temp.unit)\"\n\n\n    logger.info((\"*** \\(currentTemperature) ***\"))\n\n\n    Task {\n        await myAdd(temperature:measurement)\n    }\n}\n\n\nThe water temperature readings can take some time to converge on the correct value. The system estimates how long it takes to converge to the correct results, and calculates an uncertainty value based on the expected convergence.\n\nStart a dive session\n\nYou can start an extended runtime session as the wearer begins their dive.\n\nfunc myStartDiveSession() {\n    logger.info(\"*** Starting a dive session. ***\")\n\n\n    // Create the extended runtime session.\n    let session = WKExtendedRuntimeSession()\n\n\n    // Assign a delegate to the session.\n    session.delegate = self\n\n\n    // Start the session.\n    session.start()\n\n\n    self.extendedRuntimeSession = session\n    diveSessionRunning = true\n}\n\n\nThis session continues to run until:\n\nYou explicitly cancel the session by calling invalidate() on it.\n\nThe wearer turns off Water Lock.\n\nYour app remains in the CMWaterSubmersionEvent.State.notSubmerged state for at least 10 minutes.\n\nFor more information, see Using extended runtime sessions.\n\nTransition to a touchless user interface\n\nStarting an extended runtime session automatically enables Water Lock on the watch. As a result, the system disables the watch’s touchscreen for the duration of the dive. If you want the wearer to interact with your app during the dive, you need to enable interaction using either the Digital Crown or the Action button.\n\nMany views, like List, ScrollView, and Picker, automatically respond to the Digital Crown. The wearer can interact with these elements without needing any changes to the user interface.\n\nstruct MyPickerView: View {\n\n\n    enum Action: String, CaseIterable, Identifiable {\n        case none, action1, action2, action3\n        var id: Self { self }\n    }\n\n\n    @State var selection: Action = .none\n\n\n    var body: some View {\n        Text(selection.rawValue)\n        Picker(\"Action\", selection: $selection) {\n            ForEach(Action.allCases) { action in\n                Text(action.rawValue.capitalized)\n            }\n        }\n    }\n}\n\n\nYou can also use the digitalCrownRotation(_:) view modifier to respond directly when the wearer rotates the Digital Crown.\n\nstruct DigitalCrown: View {\n    @State private var crownValue = 0.0\n\n\n    var body: some View {\n        Text(\"\\(crownValue)\")\n            .focusable()\n            .digitalCrownRotation($crownValue,\n                                  from: 1,\n                                  through: 10,\n                                  by: 1.0,\n                                  sensitivity: .low,\n                                  isHapticFeedbackEnabled: true)\n    }\n}\n\n\nFor the Action button, implement a StartDiveIntent to launch your app and prepare for a new dive when the wearer first presses the Action button. You can then donate an AppIntent for the Action button’s next action. If the wearer presses the Action button any other time during the session, it triggers the next action. Your app can have only one next action at a time, and donating a new intent changes the next action — letting you customize the next action based on your app’s current state.\n\n// Create an intent to launch your app and set up the dive manager.\nstruct MyStartDiveSessionIntent: StartDiveIntent {\n\n\n    static var title: LocalizedStringResource = \"Starting a dive session.\"\n\n\n    func perform() async throws -> some IntentResult {\n        logger.debug(\"*** Starting a dive session. ***\")\n\n\n        await MyDiveManager.shared.start()\n        return .result(actionButtonIntent: MyBeginDescent())\n    }\n}\n\n\n// Create an intent that defines the Action button's next action.\nstruct MyBeginDescent: AppIntent {\n\n\n    static var title: LocalizedStringResource = \"Start Your Descent\"\n\n\n    func perform() async throws -> some IntentResult {\n        logger.debug(\"*** Starting the descent. ***\")\n        await MyDiveManager.shared.beginDescent()\n        return .result()\n    }\n}\n\n\n\n\nFor more information, see Responding to the Action button on Apple Watch Ultra.\n\nHandle automatic dive sessions\n\nIf you don’t explicitly start an extended runtime session, the system automatically starts a session when the wearer descends below 1 meter. It then passes the session to your app delegate’s handle(_:) method. To use this session, add a delegate and save it to a variable that remains in scope for the entire dive’s duration.\n\nfunc handle(_ extendedRuntimeSession: WKExtendedRuntimeSession) {\n    // The system starts a session because the wearer is more than\n    // 1 meter underwater without an active extended runtime session.\n\n\n    let submersionSession = MySubmersionSession.shared\n\n\n    // Assign a delegate to the session.\n    extendedRuntimeSession.delegate = submersionSession\n\n\n    submersionSession.extendedRuntimeSession = extendedRuntimeSession\n    submersionSession.diveSessionRunning = true\n}\n\n\nRespond to autolaunch\n\nOn Apple Watch Ultra, the wearer can tell the system to launch an app when the watch becomes submerged. To enable this feature, they choose Settings > General > Auto-Launch and select the Auto-Launch App setting from the When Submerged group. They can also select which app the system launches.\n\nThe system adds your app to the list of autolaunchable apps as soon as you add the underwater-depth Background Mode capability to your app’s Info.plist file. This means your app needs to respond appropriately if the wearer sets it as the autolaunch app, and jumps into the water without otherwise interacting with your app.\n\nFor example, you can set up your app’s CMWaterSubmersionManager when your app launches. This ensures that your app is always ready to receive submersion data. Then, when the wearer descends below 1 meter, you can use your handle(_:) method to grab the automatically generated extended runtime session. Alternatively, if you prefer to explicitly start your own extended runtime session, you can start the session when your app receives a CMWaterSubmersionEvent.State.submerged event.\n\nTest submersion data\n\nAlways test submersion data on Apple Watch Ultra. You can’t instantiate the submersion manager in Simulator. To trigger a submersion event, you need to submerge Apple Watch Ultra in a tank of water at least one foot deep. When testing in a pressurized container, make sure the watch is completely submerged in water.\n\nIf the water isn’t deep enough to trigger a submersion event, you can enable Easy Submersion mode using a paired iPhone. Connect the phone to your Mac and in Xcode 14.2 or later, select Debug > Induce Device Conditions > Easy Submersion > Enable Easy Submersion.\n\nSee Also\nWater submersion manager\nclass CMWaterSubmersionManager\nAn object for managing the collection of pressure and temperature data during submersion.\nprotocol CMWaterSubmersionManagerDelegate\nA delegate that receives updates about ambient pressure, water pressure, water temperature, and submersion events.\nclass CMWaterSubmersionEvent\nAn event indicating that the device’s submersion state has changed.\nclass CMWaterSubmersionMeasurement\nAn update that contains data about the pressure and depth.\nclass CMWaterTemperature\nAn update that contains data about the water temperature."
  },
  {
    "title": "CMStepCounter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmstepcounter",
    "html": "Deprecated\n\nUse the CMPedometer class instead.\n\nOverview\n\nStep information is gathered on devices with the appropriate built-in hardware and stored so that you can run queries to determine the user’s recent physical activity. You use this class to gather both current step data and any historical data.\n\nTopics\nDetermining Step Counting Availability\nclass func isStepCountingAvailable() -> Bool\nReturns a Boolean indicating whether step-counting support is available on the current device.\nStarting and Stopping Step Counting Updates\nfunc startStepCountingUpdates(to: OperationQueue, updateOn: Int, withHandler: CMStepUpdateHandler)\nStarts the delivery of current step-counting data to your app.\nfunc stopStepCountingUpdates()\nStops the delivery of step-counting updates to your app.\ntypealias CMStepUpdateHandler\nA block that reports the number of steps recorded since updates began.\nGetting Historical Step Counting Data\nfunc queryStepCountStarting(from: Date, to: Date, to: OperationQueue, withHandler: CMStepQueryHandler)\nGathers and returns historical step count data for the specified time period.\ntypealias CMStepQueryHandler\nA block that reports the number of steps for a query operation.\nRelationships\nInherits From\nNSObject\nSee Also\nPedometer and fitness\nclass CMPedometer\nAn object for fetching the system-generated live walking data.\nclass CMPedometerData\nInformation about the distance traveled by a user on foot.\nclass CMPedometerEvent\nA change in the user's pedestrian activity.\nclass CMOdometerData\nA class that represents odometer data for workouts.\nclass CMHighFrequencyHeartRateData\nA class that represents heart rate data collected at 1 Hz."
  },
  {
    "title": "isDeviceMotionAvailable | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616094-isdevicemotionavailable",
    "html": "Discussion\n\nThe device-motion service is available if a device has both an accelerometer and a gyroscope. Because all devices have accelerometers, this property is functionally equivalent to isGyroAvailable.\n\nSee Also\nDetermining the Availability of Services\nvar isAccelerometerAvailable: Bool\nA Boolean value that indicates whether an accelerometer is available on the device.\nvar isGyroAvailable: Bool\nA Boolean value that indicates whether a gyroscope is available on the device.\nvar isMagnetometerAvailable: Bool\nA Boolean value that indicates whether a magnetometer is available on the device.\nRelated Documentation\nvar isDeviceMotionActive: Bool\nA Boolean value that determines whether the app is receiving updates from the device-motion service."
  },
  {
    "title": "CMOdometerData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmodometerdata",
    "html": "Overview\n\nTo get the measurements, use the speed and slope properties. To compute distances, use the deltaDistance and deltaAltitude properties.\n\nTopics\nGetting speed and slope\nvar speed: CLLocationSpeed\nThe instantaneous velocity of the device, measured in meters per second.\nvar slope: Double?\nThe slope at the location toward the direction of travel, measured in degrees.\nvar maxAbsSlope: Double?\nThe maximum absolute slope at the location toward all directions, measured in degrees.\nGetting date and times\nvar startDate: Date\nThe time that the device starts recording the odometer data.\nvar endDate: Date\nThe time that the device stops recording the odometer data.\nvar gpsDate: Date\nThe time of the GPS measurement associated with the location.\nMeasuring distances\nvar deltaDistance: CLLocationDistance\nThe change in distance that the user travels since the last location, measured in meters.\nvar deltaAltitude: CLLocationDistance\nThe change in altitude above mean sea level associated with the location, measured in meters.\nGetting the location accuracy\nvar speedAccuracy: CLLocationSpeedAccuracy\nThe accuracy of the speed value.\nvar verticalAccuracy: CLLocationAccuracy\nThe validity of the altitude values and their estimated uncertainty, measured in meters.\nvar deltaDistanceAccuracy: CLLocationAccuracy\nThe accuracy of the change in distance value.\nGetting the device\nvar originDevice: CMOdometerOriginDevice\nThe device that measures the data.\nenum CMOdometerOriginDevice\nThe device that the odometer sample originates from.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSendable\nSee Also\nPedometer and fitness\nclass CMPedometer\nAn object for fetching the system-generated live walking data.\nclass CMPedometerData\nInformation about the distance traveled by a user on foot.\nclass CMPedometerEvent\nA change in the user's pedestrian activity.\nclass CMStepCounter\nThe number of steps the user has taken with the device.\nDeprecated\nclass CMHighFrequencyHeartRateData\nA class that represents heart rate data collected at 1 Hz."
  },
  {
    "title": "distance | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometerdata/1613944-distance",
    "html": "Discussion\n\nThis value reflects the distance traveled while walking and running. The value in this property may be nil if distance estimation is not supported on the current device.\n\nSee Also\nGetting the Pedestrian Data\nvar numberOfSteps: NSNumber\nThe number of steps taken by the user.\nvar averageActivePace: NSNumber?\nThe average pace of the user, measured in seconds per meter.\nvar currentPace: NSNumber?\nThe current pace of the user, measured in seconds per meter.\nvar currentCadence: NSNumber?\nThe rate at which steps are taken, measured in steps per second."
  },
  {
    "title": "CMHighFrequencyHeartRateDataConfidence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmhighfrequencyheartratedataconfidence",
    "html": "Topics\nLevels of confidence\ncase low\nA low level of confidence in the heart rate data.\ncase medium\nA medium level of confidence in the heart rate data.\ncase high\nA high level of confidence in the heart rate data.\ncase highest\nThe highest level of confidence in the heart rate data.\nRelationships\nConforms To\nSendable\nSee Also\nAccessing heart rate data\nvar heartRate: Double\nThe heart rate value in units of beats per minute (BPM).\nvar confidence: CMHighFrequencyHeartRateDataConfidence\nThe confidence level of the heart rate value."
  },
  {
    "title": "confidence | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmhighfrequencyheartratedata/4134612-confidence",
    "html": "See Also\nAccessing heart rate data\nvar heartRate: Double\nThe heart rate value in units of beats per minute (BPM).\nenum CMHighFrequencyHeartRateDataConfidence\nThe level of confidence in the accuracy of the heart rate data."
  },
  {
    "title": "heartRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmhighfrequencyheartratedata/4134614-heartrate",
    "html": "See Also\nAccessing heart rate data\nvar confidence: CMHighFrequencyHeartRateDataConfidence\nThe confidence level of the heart rate value.\nenum CMHighFrequencyHeartRateDataConfidence\nThe level of confidence in the accuracy of the heart rate data."
  },
  {
    "title": "CMPedometerEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometerevent",
    "html": "Topics\nPedometer Data\nvar date: Date\nThe date on which the pedometer event was recorded.\nvar type: CMPedometerEventType\nThe type of change that occurred.\nenum CMPedometerEventType\nConstants indicating the change that occurred to the user's pedestrian activity.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nPedometer and fitness\nclass CMPedometer\nAn object for fetching the system-generated live walking data.\nclass CMPedometerData\nInformation about the distance traveled by a user on foot.\nclass CMStepCounter\nThe number of steps the user has taken with the device.\nDeprecated\nclass CMOdometerData\nA class that represents odometer data for workouts.\nclass CMHighFrequencyHeartRateData\nA class that represents heart rate data collected at 1 Hz."
  },
  {
    "title": "authorizationStatus() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometer/2913743-authorizationstatus",
    "html": "See Also\nDetermining Pedometer Availability\nclass func isStepCountingAvailable() -> Bool\nReturns a Boolean value indicating whether step counting is available on the current device.\nclass func isDistanceAvailable() -> Bool\nReturns a Boolean value indicating whether distance estimation is available on the current device.\nclass func isFloorCountingAvailable() -> Bool\nReturns a Boolean value indicating whether floor counting is available on the current device.\nclass func isPaceAvailable() -> Bool\nReturns a Boolean value indicating whether pace information is available on the current device.\nclass func isCadenceAvailable() -> Bool\nReturns a Boolean value indicating whether cadence information is available on the current device.\nclass func isPedometerEventTrackingAvailable() -> Bool\nReturns a Boolean value indicating whether pedometer events are available on the current device.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features."
  },
  {
    "title": "CMRecordedRotationRateData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrecordedrotationratedata",
    "html": "Topics\nAccessing Rotation Data\nvar startDate: Date\nThe time when the gyroscope measured the rotation data.\nRelationships\nInherits From\nCMRotationRateData\nSee Also\nGetting the Rotation Rate\nvar rotationRate: CMRotationRate\nThe rotation rate as measured by the device’s gyroscope.\nstruct CMRotationRate\nThe type of structures representing a measurement of rotation rate.\nclass CMRotationRateData\nA data object that contains a single rotation-rate measurement."
  },
  {
    "title": "CMMagneticField | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmagneticfield",
    "html": "Topics\nGetting the Field Values\nvar x: Double\nX-axis magnetic field in microteslas.\nvar y: Double\nY-axis magnetic field in microteslas.\nvar z: Double\nZ-axis magnetic field in microteslas.\nInitializers\ninit()\ninit(x: Double, y: Double, z: Double)\nSee Also\nGetting the Field Strength\nvar magneticField: CMMagneticField\nReturns the magnetic field measured by the magnetometer."
  },
  {
    "title": "CMRotationRateData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrotationratedata",
    "html": "Topics\nAccessing Rotation Data\nvar rotationRate: CMRotationRate\nThe rotation rate measured by the gyroscope.\nRelationships\nInherits From\nCMLogItem\nSee Also\nGetting the Rotation Rate\nvar rotationRate: CMRotationRate\nThe rotation rate as measured by the device’s gyroscope.\nstruct CMRotationRate\nThe type of structures representing a measurement of rotation rate.\nclass CMRecordedRotationRateData\nA data object that contains a single rotation-rate measurement at a specific time."
  },
  {
    "title": "magneticField | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmagnetometerdata/1616084-magneticfield",
    "html": "Discussion\n\nThe value of this property is the total magnetic field observed by the device which is equal to the Earth’s geomagnetic field plus bias introduced from the device itself and its surroundings.\n\nThis is the “raw” magnetic-field value, unlike the calibrated value of the magneticField property of CMDeviceMotion which filters out the bias introduced by the device and, in some cases, its surrounding fields.\n\nSee Also\nGetting the Field Strength\nstruct CMMagneticField\nA structure containing 3-axis magnetometer data"
  },
  {
    "title": "rotationRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmgyrodata/1616167-rotationrate",
    "html": "Discussion\n\nThis property yields a measurement of the device’s rate of rotation around three axes. Whereas this property gives the raw data from the gyroscope, the identically named property of CMDeviceMotion gives a CMRotationRate structure measuring gyroscope data whose bias has been removed by Core Motion algorithms.\n\nSee Also\nGetting the Rotation Rate\nstruct CMRotationRate\nThe type of structures representing a measurement of rotation rate.\nclass CMRotationRateData\nA data object that contains a single rotation-rate measurement.\nclass CMRecordedRotationRateData\nA data object that contains a single rotation-rate measurement at a specific time.\nRelated Documentation\nEvent Handling Guide for UIKit Apps"
  },
  {
    "title": "CMRotationRate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrotationrate",
    "html": "Topics\nGetting the Rotation Rates\nvar x: Double\nThe value for the X-axis.\nvar y: Double\nThe value for the Y-axis.\nvar z: Double\nThe value for the Z-axis.\nInitializers\ninit()\ninit(x: Double, y: Double, z: Double)\nSee Also\nGetting the Rotation Rate\nvar rotationRate: CMRotationRate\nThe rotation rate as measured by the device’s gyroscope.\nclass CMRotationRateData\nA data object that contains a single rotation-rate measurement.\nclass CMRecordedRotationRateData\nA data object that contains a single rotation-rate measurement at a specific time."
  },
  {
    "title": "CMHeadphoneMotionManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmheadphonemotionmanager",
    "html": "Overview\n\nThis class delivers headphone motion updates to your app. Use an instance of the manager to determine if the device supports motion, and to start and stop updates. Adopt the CMHeadphoneMotionManagerDelegate protocol to receive and respond to motion updates. Before using this class, check isDeviceMotionAvailable to make sure the feature is available.\n\nImportant\n\nIn iOS and macOS, include the NSMotionUsageDescription key in your app’s Info.plist file. If this key is absent, the system crashes your app when you start device-motion updates.\n\nIdentify the coordinate axes\n\nTo interpret attitude data, you need to know the orientation of the device’s coordinate axes. The following illustration shows the positive x-axis, positive y-axis, and positive z-axis for motion-capable Apple headphones.\n\nTopics\nChecking Availability\nvar isDeviceMotionAvailable: Bool\nA Boolean value that indicates whether the current device supports the headphone motion manager.\nvar isDeviceMotionActive: Bool\nA Boolean value that indicates whether the headphone motion manager is active.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns the authorization status for monitoring headphone motion.\nStarting and Stopping Updates\nfunc startDeviceMotionUpdates()\nStarts device-motion updates.\nfunc startDeviceMotionUpdates(to: OperationQueue, withHandler: CMHeadphoneMotionManager.DeviceMotionHandler)\nStarts device-motion updates with a handler.\nfunc stopDeviceMotionUpdates()\nStops device-motion updates.\nGetting the Delegate\nvar delegate: (any CMHeadphoneMotionManagerDelegate)?\nThe object that receives headphone motion manager events.\nprotocol CMHeadphoneMotionManagerDelegate\nA set of methods that defines an interface for connecting and disconnecting headphones.\nGetting Device-Motion Information\nvar deviceMotion: CMDeviceMotion?\nThe latest device-motion data.\nRelationships\nInherits From\nNSObject\nSee Also\nDevice motion\nGetting processed device-motion data\nRetrieve motion data that the system processed to remove environmental bias, such as the effects of gravity.\nclass CMDeviceMotion\nEncapsulated measurements of the attitude, rotation rate, and acceleration of a device.\nclass CMAttitude\nThe device’s orientation relative to a known frame of reference at a point in time.\nstruct CMAttitudeReferenceFrame\nConstants that indicate the frame of reference for attitude-related motion data."
  },
  {
    "title": "CMLogItem | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmlogitem",
    "html": "Overview\n\nThe CMLogItem class defines a read-only timestamp property that records the time a motion-event measurement was taken.\n\nTopics\nGetting the Time of the Event\nvar timestamp: TimeInterval\nThe time when the logged item is valid.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding"
  },
  {
    "title": "CMAttitudeReferenceFrame | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmattitudereferenceframe",
    "html": "Overview\n\nWhen you start a service that reports the device’s attitude in three-dimensional space, Core Motion establishes a frame of reference for reporting pitch, roll, and yaw values. All subsequent data values specify the device attitude relative to this frame of reference. To get a list of the currently available reference frames for the current device, call the availableAttitudeReferenceFrames() class method.\n\nWhen starting services, it’s your responsibility to specify a reference frame that’s available on the current device. Services that don’t let you specify a reference frame explicitly rely on the value in the attitudeReferenceFrame property of CMMotionManager.\n\nTopics\nGetting the reference frames\nstatic var xArbitraryZVertical: CMAttitudeReferenceFrame\nA reference frame where the Z axis is vertical and the X axis points in an arbitrary direction in the horizontal plane.\nstatic var xArbitraryCorrectedZVertical: CMAttitudeReferenceFrame\nA reference frame where the Z axis is vertical and has improved rotation accuracy, and the X axis points in an arbitrary direction in the horizontal plane.\nstatic var xMagneticNorthZVertical: CMAttitudeReferenceFrame\nA reference frame where the Z axis is vertical and the X axis points to the magnetic north pole.\nstatic var xTrueNorthZVertical: CMAttitudeReferenceFrame\nA reference frame where the Z axis is vertical and the X axis points to the geographic north pole.\nInitializers\ninit(rawValue: UInt)\nRelationships\nConforms To\nOptionSet\nSendable\nSee Also\nDevice motion\nGetting processed device-motion data\nRetrieve motion data that the system processed to remove environmental bias, such as the effects of gravity.\nclass CMDeviceMotion\nEncapsulated measurements of the attitude, rotation rate, and acceleration of a device.\nclass CMAttitude\nThe device’s orientation relative to a known frame of reference at a point in time.\nclass CMHeadphoneMotionManager\nAn object that starts and manages headphone motion services."
  },
  {
    "title": "CMDeviceMotion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdevicemotion",
    "html": "Overview\n\nAn application receives or samples CMDeviceMotion objects at regular intervals after calling the startDeviceMotionUpdates(using:to:withHandler:) method, the startDeviceMotionUpdates(to:withHandler:) method, the startDeviceMotionUpdates(using:) method, or the startDeviceMotionUpdates() method of the CMMotionManager class.\n\nThe accelerometer measures the sum of two acceleration vectors: gravity and user acceleration. User acceleration is the acceleration that the user imparts to the device. Because Core Motion is able to track a device’s attitude using both the gyroscope and the accelerometer, it can differentiate between gravity and user acceleration. A CMDeviceMotion object provides both measurements in the gravity and userAcceleration properties.\n\nTopics\nGetting Attitude and Rotation Rate\nvar attitude: CMAttitude\nThe attitude of the device.\nvar rotationRate: CMRotationRate\nThe rotation rate of the device.\nGetting Acceleration Data\nvar gravity: CMAcceleration\nThe gravity acceleration vector expressed in the device's reference frame.\nvar userAcceleration: CMAcceleration\nThe acceleration that the user is giving to the device.\nGetting the Calibrated Magnetic Field\nvar magneticField: CMCalibratedMagneticField\nReturns the magnetic field vector with respect to the device.\nstruct CMCalibratedMagneticField\nCalibrated magnetic field data and an estimate of the accuracy of the calibration.\nenum CMMagneticFieldCalibrationAccuracy\nIndicates the calibration accuracy of a magnetic field estimate\nGetting the Heading\nvar heading: Double\nThe heading angle (measured in degrees) relative to the current reference frame.\nGetting the Sensor Location\nvar sensorLocation: CMDeviceMotion.SensorLocation\nThe location of the sensors that compute the device-motion data.\nenum CMDeviceMotion.SensorLocation\nDefines the device’s sensor locations.\nRelationships\nInherits From\nCMLogItem\nSee Also\nDevice motion\nGetting processed device-motion data\nRetrieve motion data that the system processed to remove environmental bias, such as the effects of gravity.\nclass CMAttitude\nThe device’s orientation relative to a known frame of reference at a point in time.\nstruct CMAttitudeReferenceFrame\nConstants that indicate the frame of reference for attitude-related motion data.\nclass CMHeadphoneMotionManager\nAn object that starts and manages headphone motion services."
  },
  {
    "title": "CMMagnetometerHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmagnetometerhandler",
    "html": "Discussion\n\nBlocks of type CMMagnetometerHandler are called when there is magnetometer data to process. You pass the block into the startMagnetometerUpdates(to:withHandler:) method as the second argument. Blocks of this type return no value but take two arguments:\n\nmagnetometerData\n\nAn object that encapsulates a CMMagneticField structure with fields holding magnetic-field values for the three axes of movement.\n\nerror\n\nAn error object representing an error encountered in providing magnetometer data. If an error occurs, you should stop magnetometer updates and inform the user of the problem. If there is no error, this argument is nil. Core Motion errors are of the CMErrorDomain domain and the CMError type.\n\nSee Also\nManaging Magnetometer Updates\nvar magnetometerUpdateInterval: TimeInterval\nThe interval, in seconds, at which the system delivers magnetometer data to the block handler.\nfunc startMagnetometerUpdates(to: OperationQueue, withHandler: CMMagnetometerHandler)\nStarts magnetometer updates on an operation queue and with a specified handler.\nfunc startMagnetometerUpdates()\nStarts magnetometer updates without a block handler.\nfunc stopMagnetometerUpdates()\nStops magnetometer updates.\nvar magnetometerData: CMMagnetometerData?\nThe latest sample of magnetometer data."
  },
  {
    "title": "CMGyroHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmgyrohandler",
    "html": "Discussion\n\nBlocks of type CMGyroHandler are called when there is gyroscope data to process. You pass the block into startGyroUpdates(to:withHandler:) as the second argument. Blocks of this type return no value but take two arguments:\n\ngyroData\n\nAn object that encapsulates a CMRotationRate structure with fields holding rotation-rate values for the three axes of movement.\n\nerror\n\nAn error object representing an error encountered in providing gyroscope data. If an error occurs, you should stop gyroscope updates and inform the user of the problem. If there is no error, this argument is nil. Core Motion errors are of the CMErrorDomain domain and the CMError type.\n\nSee Also\nManaging Gyroscope Updates\nvar gyroUpdateInterval: TimeInterval\nThe interval, in seconds, for providing gyroscope updates to the block handler.\nfunc startGyroUpdates(to: OperationQueue, withHandler: CMGyroHandler)\nStarts gyroscope updates on an operation queue and with a specified handler.\nfunc startGyroUpdates()\nStarts gyroscope updates without a handler.\nfunc stopGyroUpdates()\nStops gyroscope updates.\nvar gyroData: CMGyroData?\nThe latest sample of gyroscope data."
  },
  {
    "title": "startMagnetometerUpdates() | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1615961-startmagnetometerupdates",
    "html": "Discussion\n\nYou can get the latest magnetometer data through the magnetometerData property. You must call stopMagnetometerUpdates() when you no longer want your app to process magnetometer updates.\n\nSee Also\nManaging Magnetometer Updates\nvar magnetometerUpdateInterval: TimeInterval\nThe interval, in seconds, at which the system delivers magnetometer data to the block handler.\nfunc startMagnetometerUpdates(to: OperationQueue, withHandler: CMMagnetometerHandler)\nStarts magnetometer updates on an operation queue and with a specified handler.\nfunc stopMagnetometerUpdates()\nStops magnetometer updates.\nvar magnetometerData: CMMagnetometerData?\nThe latest sample of magnetometer data.\ntypealias CMMagnetometerHandler\nThe type of block callback for handling magnetometer data."
  },
  {
    "title": "gyroData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616154-gyrodata",
    "html": "Discussion\n\nIf no gyroscope data is available, the value of this property is nil. An app that is receiving gyroscope data after calling startGyroUpdates() periodically checks the value of this property and processes the gyroscope data.\n\nSee Also\nManaging Gyroscope Updates\nvar gyroUpdateInterval: TimeInterval\nThe interval, in seconds, for providing gyroscope updates to the block handler.\nfunc startGyroUpdates(to: OperationQueue, withHandler: CMGyroHandler)\nStarts gyroscope updates on an operation queue and with a specified handler.\nfunc startGyroUpdates()\nStarts gyroscope updates without a handler.\nfunc stopGyroUpdates()\nStops gyroscope updates.\ntypealias CMGyroHandler\nThe type of block callback for handling gyroscope data."
  },
  {
    "title": "CMMotionActivity | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivity",
    "html": "Overview\n\nOn devices that support motion, you can use a CMMotionActivityManager object to request updates when the current type of motion changes. When a change occurs, the update information is packaged into a CMMotionActivity object and sent to your app.\n\nThe motion-related properties of this class aren’t mutually exclusive. In other words, it’s possible for more than one of the motion-related properties to contain the value true. For example, if the user was driving in a car and the car stopped at a red light, the update event associated with that change in motion would have both the automotive and stationary properties set to true. It’s also possible for all of the properties to be set to false when the device is in motion but the movement doesn’t correlate to walking, running, cycling, or automotive travel.\n\nYou don’t create instances of this class yourself. The CMMotionActivityManager object creates them and sends them to the handler block you registered. For more information about how to initiate the delivery of motion activity updates to your app, see CMMotionActivityManager.\n\nTopics\nGetting the Type of Motion\nvar stationary: Bool\nA Boolean indicating whether the device is stationary.\nvar walking: Bool\nA Boolean indicating whether the device is on a walking person.\nvar running: Bool\nA Boolean indicating whether the device is on a running person.\nvar automotive: Bool\nA Boolean indicating whether the device is in an automobile.\nvar cycling: Bool\nA Boolean indicating whether the device is in a bicycle.\nvar unknown: Bool\nA Boolean indicating whether the type of motion is unknown.\nGetting Metadata for the Motion\nvar startDate: Date\nThe time at which the change in motion occurred.\nvar confidence: CMMotionActivityConfidence\nThe confidence in the assessment of the motion type.\nenum CMMotionActivityConfidence\nThe confidence that the motion data is accurate.\nRelationships\nInherits From\nCMLogItem\nSee Also\nHistorical data\nclass CMBatchedSensorManager\nclass CMMotionActivityManager\nAn object that manages access to the motion data stored by the device."
  },
  {
    "title": "CMMotionActivityManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionactivitymanager",
    "html": "Overview\n\nMotion data reflects whether the user is walking, running, in a vehicle, or stationary for periods of time. Using this class, you can ask for notifications when the current type of motion changes or you can gather past motion change data. For example, a navigation app might look for changes in the current type of motion and offer different directions for each.\n\nImportant\n\nTo use this API, you must include the NSMotionUsageDescription key in your app’s Info.plist file and provide a usage description string for this key. The usage description appears in the prompt that the user must accept the first time the system asks the user to access motion data for your app. If you don’t include a usage description string, your app crashes when you call this API.\n\nTopics\nDetermining Activity Availability\nclass func isActivityAvailable() -> Bool\nReturns a Boolean indicating whether motion data is available on the current device.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns a value indicating whether the app is authorized to retrieve stored motion data.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features.\nStarting and Stopping Activity Updates\nfunc startActivityUpdates(to: OperationQueue, withHandler: CMMotionActivityHandler)\nStarts the delivery of current motion data updates to your app.\nfunc stopActivityUpdates()\nStops the delivery of motion updates to your app\ntypealias CMMotionActivityHandler\nA block that reports the current motion associated with the device.\nGetting Historical Activity Data\nfunc queryActivityStarting(from: Date, to: Date, to: OperationQueue, withHandler: CMMotionActivityQueryHandler)\nGathers and returns historical motion data for the specified time period\ntypealias CMMotionActivityQueryHandler\nA block that reports the motion updates that occurred between the specified query interval.\nRelationships\nInherits From\nNSObject\nSee Also\nHistorical data\nclass CMBatchedSensorManager\nclass CMMotionActivity\nThe data for a single motion update event."
  },
  {
    "title": "CMDeviceMotionHandler | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdevicemotionhandler",
    "html": "Discussion\n\nBlocks of type CMDeviceMotionHandler are called when there is device-motion data to process. You pass the block into startDeviceMotionUpdates(to:withHandler:) as the second argument. Blocks of this type return no value but take two arguments:\n\nmotion\n\nA CMDeviceMotion object, which encapsulates other objects and a structure representing attitude, rotation rate, gravity, and user acceleration.\n\nerror\n\nAn error object representing an error encountered in providing device-motion data. If an error occurs, you should stop device-motion data updates and inform the user of the problem. If there is no error, this argument is nil. Core Motion errors are of the CMErrorDomain domain and the CMError type.\n\nSee Also\nManaging Device Motion Updates\nvar showsDeviceMovementDisplay: Bool\nControls whether the device-movement display is shown.\nvar deviceMotionUpdateInterval: TimeInterval\nThe interval, in seconds, for providing device-motion updates to the block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame, to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified reference frame and block handler.\nfunc startDeviceMotionUpdates(to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame)\nStarts device-motion updates using a reference frame but without a block handler.\nfunc startDeviceMotionUpdates()\nStarts device-motion updates without a block handler.\nfunc stopDeviceMotionUpdates()\nStops device-motion updates.\nvar deviceMotion: CMDeviceMotion?\nThe latest sample of device-motion data."
  },
  {
    "title": "deviceMotionUpdateInterval | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616065-devicemotionupdateinterval",
    "html": "Discussion\n\nThe system supplies device-motion updates to the block handler specified in startDeviceMotionUpdates(to:withHandler:) at regular intervals determined by the value of this property. The interval units are in seconds. The value of this property is capped to minimum and maximum values; the maximum value is determined by the maximum frequency supported by the hardware. If your app is sensitive to the intervals of device-motion data, it should always check the timestamps of the delivered CMDeviceMotion instances to determine the true update interval.\n\nSee Also\nManaging Device Motion Updates\nvar showsDeviceMovementDisplay: Bool\nControls whether the device-movement display is shown.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame, to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified reference frame and block handler.\nfunc startDeviceMotionUpdates(to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame)\nStarts device-motion updates using a reference frame but without a block handler.\nfunc startDeviceMotionUpdates()\nStarts device-motion updates without a block handler.\nfunc stopDeviceMotionUpdates()\nStops device-motion updates.\nvar deviceMotion: CMDeviceMotion?\nThe latest sample of device-motion data.\ntypealias CMDeviceMotionHandler\nThe type of block callback for handling device-motion data."
  },
  {
    "title": "deviceMotion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager/1616040-devicemotion",
    "html": "Discussion\n\nIf no device-motion data is available, the value of this property is nil. An app that is receiving device-motion data after calling startDeviceMotionUpdates() periodically checks the value of this property and processes the device-motion data.\n\nSee Also\nManaging Device Motion Updates\nvar showsDeviceMovementDisplay: Bool\nControls whether the device-movement display is shown.\nvar deviceMotionUpdateInterval: TimeInterval\nThe interval, in seconds, for providing device-motion updates to the block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame, to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified reference frame and block handler.\nfunc startDeviceMotionUpdates(to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame)\nStarts device-motion updates using a reference frame but without a block handler.\nfunc startDeviceMotionUpdates()\nStarts device-motion updates without a block handler.\nfunc stopDeviceMotionUpdates()\nStops device-motion updates.\ntypealias CMDeviceMotionHandler\nThe type of block callback for handling device-motion data."
  },
  {
    "title": "yaw | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmattitude/1615931-yaw",
    "html": "Discussion\n\nA yaw is a rotation around an axis that runs vertically through the device. It is perpendicular to the body of the device, with its origin at the center of gravity and directed toward the bottom of the device.\n\nSee Also\nGetting a Mathematical Representation of Attitude as Euler Angles\nvar roll: Double\nThe roll of the device, in radians.\nvar pitch: Double\nThe pitch of the device, in radians."
  },
  {
    "title": "CMBatchedSensorManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmbatchedsensormanager",
    "html": "Topics\nDetermining authorization and availability\nclass var authorizationStatus: CMAuthorizationStatus\nclass var isAccelerometerSupported: Bool\nclass var isDeviceMotionSupported: Bool\nConfiguring the update frequency\nvar deviceMotionDataFrequency: Int\nvar accelerometerDataFrequency: Int\nCollecting device-motion data\nfunc startDeviceMotionUpdates()\nfunc startDeviceMotionUpdates(handler: ([CMDeviceMotion]?, (any Error)?) -> Void)\nfunc stopDeviceMotionUpdates()\nvar deviceMotionBatch: [CMDeviceMotion]?\nfunc deviceMotionUpdates() -> CMBatchedSensorManager.DeviceMotionUpdates\nstruct CMBatchedSensorManager.DeviceMotionUpdates\nvar isDeviceMotionActive: Bool\nCollecting accelerometer data\nfunc startAccelerometerUpdates()\nfunc startAccelerometerUpdates(handler: ([CMAccelerometerData]?, (any Error)?) -> Void)\nfunc stopAccelerometerUpdates()\nvar accelerometerBatch: [CMAccelerometerData]?\nfunc accelerometerUpdates() -> CMBatchedSensorManager.AccelerometerUpdates\nstruct CMBatchedSensorManager.AccelerometerUpdates\nvar isAccelerometerActive: Bool\nRelationships\nInherits From\nNSObject\nSee Also\nHistorical data\nclass CMMotionActivityManager\nAn object that manages access to the motion data stored by the device.\nclass CMMotionActivity\nThe data for a single motion update event."
  },
  {
    "title": "CMAmbientPressureData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmambientpressuredata",
    "html": "Topics\nAccessing the data\nvar pressure: Measurement<UnitPressure>\nThe ambient pressure.\nvar temperature: Measurement<UnitTemperature>\nThe temperature.\nRelationships\nInherits From\nCMLogItem\nSee Also\nAmbient pressure\nclass CMRecordedPressureData\nA recorded measurement of pressure data."
  },
  {
    "title": "CMFallDetectionEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmfalldetectionevent",
    "html": "Topics\nAccessing Fall Data\nvar resolution: CMFallDetectionEvent.UserResolution\nThe event’s resolution.\nenum CMFallDetectionEvent.UserResolution\nUser resolutions for fall detection events.\nGetting the event date\nvar date: Date\nThe event’s time and date.\nRelationships\nInherits From\nNSObject\nSee Also\nFall detection\nclass CMFallDetectionManager\nAn object for managing fall detection events.\nprotocol CMFallDetectionDelegate\nA delegate that receives information about fall detection events and authorization status changes.\nproperty list key NSFallDetectionUsageDescription\nA message to the user that explains the app’s request for permission to access fall detection event data.\nName: Fall Detection Usage Description"
  },
  {
    "title": "CMRecordedPressureData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrecordedpressuredata",
    "html": "Overview\n\nUse SensorKit’s ambientPressure sensor to read ambient pressure data.\n\nTopics\nInstance Properties\nvar identifier: UInt64\nA value that uniquely identifies this measurement.\nvar startDate: Date\nThe time and date when the system recorded the measurement.\nRelationships\nInherits From\nCMAmbientPressureData\nSee Also\nAmbient pressure\nclass CMAmbientPressureData\nA measurement of the ambient pressure and temperature."
  },
  {
    "title": "CMFallDetectionDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmfalldetectiondelegate",
    "html": "Topics\nDetecting Falls\nfunc fallDetectionManager(CMFallDetectionManager, didDetect: CMFallDetectionEvent, completionHandler: () -> Void)\nIndicates a fall detection event occurred.\nDetecting Authorization Changes\nfunc fallDetectionManagerDidChangeAuthorization(CMFallDetectionManager)\nIndicates the fall detection authorization status changed.\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nFall detection\nclass CMFallDetectionManager\nAn object for managing fall detection events.\nclass CMFallDetectionEvent\nAn object that contains data about a fall detection event.\nproperty list key NSFallDetectionUsageDescription\nA message to the user that explains the app’s request for permission to access fall detection event data.\nName: Fall Detection Usage Description"
  },
  {
    "title": "CMFallDetectionManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmfalldetectionmanager",
    "html": "Overview\n\nIn Series 4 and later, Apple Watch can detect when a wearer falls, and contact emergency services if necessary. Using the CMFallDetectionManager, your app can request the user’s authorization, and set up a delegate to receive notifications about these fall detection events. For more information, see Use fall detection with Apple Watch.\n\nImportant\n\nTo use this API, you must include the NSFallDetectionUsageDescription key in your app’s Info.plist file and provide a usage description string for the key. The description appears in the prompt that the user receives when the system asks to access fall detection data for your app. If you don’t include a usage description string, your app crashes when you call this API.\n\nCMFallDetectionManager requires an entitlement from Apple. To apply for the entitlement, see Fall Detection Entitlement Request. This entitlement allows the app to run in the background without requiring any additional capabilities. However, you can add capabilities for other background modes, as needed by your app.\n\nThere are two approaches to detecting falls in your app. You can either query for numberOfTimesFallen samples in HealthKit, or you can use Core Motion’s CMFallDetectionManager.\n\nDetect and Respond to Falls\n\nThe Core Motion fall detection manager is particularly useful for apps that need to respond to falls in a timely manner so that the app can provide help to the person who fell.\n\nThe fall detection manager:\n\nNotifies the app in real time\n\nNotifies the app of all fall events\n\nProvides background runtime so that your app can respond to the fall\n\nDetect and Monitor Falls Over Time\n\nThe HealthKit sample is particularly useful for apps that monitor falls over longer time periods, because there can be a delay between the fall event and HealthKit updating its samples.\n\nHealthKit provides:\n\nSamples that are available on all devices that can access the person’s HealthKit data—not just the device that detected the fall\n\nSamples for falls where the person who fell confirmed the fall, or the system escalated the fall to emergency services. If the person who fell dismisses the fall alert, HealthKit doesn’t record the fall.\n\nCreate the Manager\n\nTo receive fall detection notifications, ensure that the feature is available on the current device. If the feature is available, create the manager and set its delegate.\n\nif CMFallDetectionManager.isAvailable  {\n    \n    // Create the manager.\n    let manager = CMFallDetectionManager()\n    \n    // Assign a delegate that adopts the CMFallDetectionDelegte protocol.\n    manager.delegate = myDelegate\n    \n    // Keep a reference to the manager.\n    myManager = manager\n}\n\n\nSet the delegate as early as possible, ideally in your extension delegate’s applicationDidFinishLaunching() method. The system may not instantiate your app’s user interface when launching your app in the background, so you can’t set the delegate from your user interface code, such as when an interface controller activates, or in response to a change in SwiftUI’s ScenePhase state.\n\nImportant\n\nCreate only a single instance of the detection manager. Store the manager in a variable so you can access it later. Be sure to use a variable that remains in memory throughout your app’s lifetime—for example, add the variable to your extension delegate.\n\nRequest User Authorization\n\nAfter your user interface loads, check if you previously requested approval. If you haven’t, call requestAuthorization(handler:) to initiate a request.\n\n// Check to see if you have already asked the user to\n// authorize fall detection event notifications.\nif myManager?.authorizationStatus == .notDetermined {\n    \n    // Request Authorization.\n    myManager?.requestAuthorization { (authorizationStatus) in\n        \n        // Respond to the authorization status.\n    }\n}\n\n\nYour delegate only receives fall detection event notifications if the user authorizes your app. The user can change your app’s authorization state at any time from Settings > Privacy > Fall Detection.\n\nAfter you set the delegate and the user grants authorization, your app checks for recent fall events. If the system finds an event, it calls your delegate’s fallDetectionManager(_:didDetect:completionHandler:) method and passes the most recent event. On subsequent launches, as long as your app remains authorized and the system has detected a recent fall event, the system calls fallDetectionManager(_:didDetect:completionHandler:) as soon as you set the delegate.\n\nThe system also wakes your app in the background to respond to any new fall detection events. The system only gives your app a short amount of time to respond to the event and call the completion handler. If the app exceeds the allotted time, the system may suspend it.\n\nTopics\nChecking Availability\nclass var isAvailable: Bool\nA Boolean value that indicates whether the current device supports fall detection.\nRequesting Authorization\nfunc requestAuthorization(handler: (CMAuthorizationStatus) -> Void)\nRequests authorization to receive notifications about fall detection events.\nvar authorizationStatus: CMAuthorizationStatus\nThe authorization status for receiving fall detection event notifications.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features.\nHandling Events\nvar delegate: (any CMFallDetectionDelegate)?\nA delegate that can receive notifications about fall detection events.\nprotocol CMFallDetectionDelegate\nA delegate that receives information about fall detection events and authorization status changes.\nRelationships\nInherits From\nNSObject\nSee Also\nFall detection\nprotocol CMFallDetectionDelegate\nA delegate that receives information about fall detection events and authorization status changes.\nclass CMFallDetectionEvent\nAn object that contains data about a fall detection event.\nproperty list key NSFallDetectionUsageDescription\nA message to the user that explains the app’s request for permission to access fall detection event data.\nName: Fall Detection Usage Description"
  },
  {
    "title": "CMWaterTemperature | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatertemperature",
    "html": "Topics\nAccessing the data\nvar date: Date\nThe time and date when the system recorded the measurements.\nvar temperature: Measurement<UnitTemperature>\nThe water temperature.\nvar temperatureUncertainty: Measurement<UnitTemperature>\nThe amount of uncertainty in the measurement of the water temperature.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nWater submersion manager\nAccessing submersion data\nUse a water-submersion manager to receive water pressure, temperature, and depth data on Apple Watch Ultra.\nclass CMWaterSubmersionManager\nAn object for managing the collection of pressure and temperature data during submersion.\nprotocol CMWaterSubmersionManagerDelegate\nA delegate that receives updates about ambient pressure, water pressure, water temperature, and submersion events.\nclass CMWaterSubmersionEvent\nAn event indicating that the device’s submersion state has changed.\nclass CMWaterSubmersionMeasurement\nAn update that contains data about the pressure and depth."
  },
  {
    "title": "CMWaterSubmersionMeasurement | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmeasurement",
    "html": "Topics\nAccessing the data\nvar date: Date\nThe time and date when the system recorded the measurements.\nvar depth: Measurement<UnitLength>?\nThe depth under water.\nvar pressure: Measurement<UnitPressure>?\nThe water pressure.\nvar surfacePressure: Measurement<UnitPressure>\nThe surface air pressure.\nvar submersionState: CMWaterSubmersionMeasurement.DepthState\nThe depth state.\nenum CMWaterSubmersionMeasurement.DepthState\nA state based on the device’s depth under water.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nWater submersion manager\nAccessing submersion data\nUse a water-submersion manager to receive water pressure, temperature, and depth data on Apple Watch Ultra.\nclass CMWaterSubmersionManager\nAn object for managing the collection of pressure and temperature data during submersion.\nprotocol CMWaterSubmersionManagerDelegate\nA delegate that receives updates about ambient pressure, water pressure, water temperature, and submersion events.\nclass CMWaterSubmersionEvent\nAn event indicating that the device’s submersion state has changed.\nclass CMWaterTemperature\nAn update that contains data about the water temperature."
  },
  {
    "title": "CMWaterSubmersionEvent | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionevent",
    "html": "Topics\nAccessing event data\nvar date: Date\nThe time and date of the event.\nvar state: CMWaterSubmersionEvent.State\nThe new submersion state.\nenum CMWaterSubmersionEvent.State\nThe device’s submersion state.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nWater submersion manager\nAccessing submersion data\nUse a water-submersion manager to receive water pressure, temperature, and depth data on Apple Watch Ultra.\nclass CMWaterSubmersionManager\nAn object for managing the collection of pressure and temperature data during submersion.\nprotocol CMWaterSubmersionManagerDelegate\nA delegate that receives updates about ambient pressure, water pressure, water temperature, and submersion events.\nclass CMWaterSubmersionMeasurement\nAn update that contains data about the pressure and depth.\nclass CMWaterTemperature\nAn update that contains data about the water temperature."
  },
  {
    "title": "CMWaterSubmersionManagerDelegate | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmanagerdelegate",
    "html": "Overview\n\nThe system calls your delegate’s methods to provide updated data to your app. When the watch isn’t submerged, your app receives event, measurement, and error messages. However, the measurement updates include only surface pressure and submersion state data. After submersion, the measurement updates include depth and water pressure data. The watch also begins receiving water temperature updates.\n\nNote\n\nThe system calls all the delegate’s methods on an anonymous background queue. Typically, you need to dispatch this data to the main queue or pass it to a MainActor object before updating the user interface.\n\nThe system sends measurement and temperature updates three times a second while the watch is submerged. When the watch is on the surface, the system provides updates at a slower rate, and may stop providing updates if the watch isn’t moving.\n\nTopics\nReceiving updates\nfunc manager(CMWaterSubmersionManager, didUpdate: CMWaterSubmersionEvent)\nTells the delegate when a water submersion event occurs.\n\nRequired\n\nfunc manager(CMWaterSubmersionManager, didUpdate: CMWaterSubmersionMeasurement)\nProvides the delegate with a new set of pressure and depth measurements.\n\nRequired\n\nfunc manager(CMWaterSubmersionManager, didUpdate: CMWaterTemperature)\nProvides the delegate with updated water temperature data.\n\nRequired\n\nfunc manager(CMWaterSubmersionManager, errorOccurred: any Error)\nTells the delegate when an error occurs.\n\nRequired\n\nRelationships\nInherits From\nNSObjectProtocol\nSee Also\nWater submersion manager\nAccessing submersion data\nUse a water-submersion manager to receive water pressure, temperature, and depth data on Apple Watch Ultra.\nclass CMWaterSubmersionManager\nAn object for managing the collection of pressure and temperature data during submersion.\nclass CMWaterSubmersionEvent\nAn event indicating that the device’s submersion state has changed.\nclass CMWaterSubmersionMeasurement\nAn update that contains data about the pressure and depth.\nclass CMWaterTemperature\nAn update that contains data about the water temperature."
  },
  {
    "title": "CMWaterSubmersionManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmwatersubmersionmanager",
    "html": "Overview\n\nUse this class to receive live depth, water pressure, and water temperature data on Apple Watch Ultra.\n\nStart by assigning a usage description using the NSMotionUsageDescription key in your app target’s information property list. You also need to include an entitlement to access the live submersion data.\n\nTo access data for dives with a maximum depth of 6 m, add the Shallow Depth and Pressure capability to your app. For more information, see Adding capabilities to your app.\n\nTo enable a maximum depth of 40 m, you must apply for the full Submerged Depth and Pressure entitlement. For more information, see Express interest in the Submerged Depth and Pressure API.\n\nNote\n\nAs the wearer approaches the maximum depth, the system sends a measurement with an CMWaterSubmersionMeasurement.DepthState.approachingMaxDepth submersion state. When they pass the maximum depth, it sends a CMWaterSubmersionMeasurement.DepthState.pastMaxDepth state, and if they continue to descent past the maximum depth, it sends a CMWaterSubmersionMeasurement.DepthState.sensorDepthError state.\n\nNext, check whether submersion data is available.\n\nguard CMWaterSubmersionManager.waterSubmersionAvailable else {\n    return false\n}\n\n\nIf the waterSubmersionAvailable property is true, instantiate a CMWaterSubmersionManager object and assign a delegate.\n\n// Instantiate the submersion manager.\nsubmersionManager = CMWaterSubmersionManager()\n\n\n\n\n// Assign the submersion manager delegate.\nsubmersionManager.delegate = self\n\n\nYour delegate then begins receiving updates from the system. For more information, see Accessing submersion data.\n\nTopics\nSetting the delegate\nvar delegate: (any CMWaterSubmersionManagerDelegate)?\nThe object that receives updates about submersion data and events.\nChecking availability and authorization\nclass var waterSubmersionAvailable: Bool\nA Boolean value indicating whether the current device supports the submersion manager.\nclass var authorizationStatus: CMAuthorizationStatus\nA value indicating whether the app has user authorization to receive submersion data.\nAccessing the maximum depth\nvar maximumDepth: Measurement<UnitLength>?\nThe maximum depth supported by the water submersion manager.\nRelationships\nInherits From\nNSObject\nSee Also\nWater submersion manager\nAccessing submersion data\nUse a water-submersion manager to receive water pressure, temperature, and depth data on Apple Watch Ultra.\nprotocol CMWaterSubmersionManagerDelegate\nA delegate that receives updates about ambient pressure, water pressure, water temperature, and submersion events.\nclass CMWaterSubmersionEvent\nAn event indicating that the device’s submersion state has changed.\nclass CMWaterSubmersionMeasurement\nAn update that contains data about the pressure and depth.\nclass CMWaterTemperature\nAn update that contains data about the water temperature."
  },
  {
    "title": "CMTremorResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmtremorresult",
    "html": "Overview\n\nThe following equation is always true: percentUnknown + percentNone + percentSlight + percentMild + percentModerate + percentStrong = 1.0.\n\nTopics\nReading the Time Interval\nvar startDate: Date\nThe result’s start time and date.\nvar endDate: Date\nThe result's end time and date.\nAccessing Tremor Data\nvar percentUnknown: Float\nThe percentage of time when the algorithm couldn’t make a determination.\nvar percentNone: Float\nThe percentage of time when no tremor was detected.\nvar percentSlight: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was slight.\nvar percentMild: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was mild.\nvar percentModerate: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was moderate.\nvar percentStrong: Float\nThe percentage of time when a tremor was likely, and the displacement amplitude was strong.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nMovement disorder manager\nGetting movement disorder symptom data\nRetrieve data from the Apple Watch’s movement disorder manager.\nAdhering to the movement disorder data collection requirements\nEnsure that your users understand and have control over the data your app collects.\nMovement disorder algorithm changelog\nA chronological log of notable changes to the movement disorder algorithm.\nclass CMMovementDisorderManager\nA manager for recording and querying movement disorder data.\nclass CMDyskineticSymptomResult\nA result object that contains data about the likely presence of dyskinetic symptoms during a one-minute interval."
  },
  {
    "title": "CMDyskineticSymptomResult | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmdyskineticsymptomresult",
    "html": "Overview\n\nDyskinesias are uncontrolled, involuntary movements that occur as a side effect of taking Levadopa to control Parkinson’s disease. Dyskinesias can manifest in a single body part, such as the arm, leg, or head, or they can affect the entire body. Particular dyskinesias resemble actions like fidgeting, writhing, wriggling, head bobbing, or body swaying. These symptoms tend to occur during the drug’s peak dosage. Dyskinesias typically occur in patients with advanced Parkinson's disease, who may require higher dosages of Levadopa.\n\nThe following equation is always true: percentUnlikely + percentLikely = 1.0.\n\nImportant\n\nGather and present data on dyskinetic symptom results only to users with choreiform dyskinesias, either self-reported or diagnosed by a clinician.\n\nTopics\nReading the Time Interval\nvar startDate: Date\nThe result’s start time and date.\nvar endDate: Date\nThe result's end time and date.\nAccessing Dyskinetic Symptom Data\nvar percentUnlikely: Float\nThe percentage of time when dyskinetic symptoms were unlikely.\nvar percentLikely: Float\nThe percentage of time when dyskinetic symptoms were likely.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nMovement disorder manager\nGetting movement disorder symptom data\nRetrieve data from the Apple Watch’s movement disorder manager.\nAdhering to the movement disorder data collection requirements\nEnsure that your users understand and have control over the data your app collects.\nMovement disorder algorithm changelog\nA chronological log of notable changes to the movement disorder algorithm.\nclass CMMovementDisorderManager\nA manager for recording and querying movement disorder data.\nclass CMTremorResult\nA result object that contains data about the presence and strength of tremors during a one-minute interval."
  },
  {
    "title": "CMMovementDisorderManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmovementdisordermanager",
    "html": "Overview\n\nImportant\n\nOnly collect data from patients clinically diagnosed with a movement disorder. This API is not designed to collect data from users who have not been diagnosed with a movement disorder. All medical decisions should be made through the guidance of a licensed clinician. For more information, see Adhering to the movement disorder data collection requirements.\n\nUse CMMovementDisorderManager to measure a resting Parkinsonian tremor in the 3-7 Hz range and choreiform dyskinetic symptoms. When collecting data, the user should wear Apple Watch on their most affected arm.\n\nCMMovementDisorderManager requires an entitlement from Apple. To apply for the entitlement, see Movement Disorder Entitlement Request.\n\nImportant\n\nTo use this API, you must include the NSMotionUsageDescription key in your app’s Info.plist file and provide a usage description string for this key. The usage description appears in the prompt that the user must accept the first time the system asks the user to access motion data for your app. If you don’t include a usage description string, your app crashes when you call this API.\n\nTopics\nChecking Availablility\nclass func isAvailable() -> Bool\nA Boolean value indicating whether the current device supports the movement disorder manager.\nclass func authorizationStatus() -> CMAuthorizationStatus\nA value indicating whether the user has authorized the app to monitor and query for movement disorder data.\nclass func version() -> String?\nReturns a string that describes the movement disorder algorithm’s current version.\nRecording Movement Disorders\nfunc monitorKinesias(forDuration: TimeInterval)\nCalculate and store tremor and dyskinetic symptom results for the duration of the specified time interval.\nfunc monitorKinesiasExpirationDate() -> Date?\nReturns the expiration date for the most recent monitoring period.\nQuerying for Movement Disorders\nfunc queryTremor(from: Date, to: Date, withHandler: CMTremorResultHandler)\nQuery for tremor results from the provided time interval.\ntypealias CMTremorResultHandler\nA completion handler for accessing and processing tremor results.\nfunc queryDyskineticSymptom(from: Date, to: Date, withHandler: CMDyskineticSymptomResultHandler)\nQuery for dyskinetic symptoms from the provided time interval.\ntypealias CMDyskineticSymptomResultHandler\nA completion handler for processing dyskinetic symptom results.\nfunc lastProcessedDate() -> Date?\nReturns the date of the most recently calculated results.\nRelationships\nInherits From\nNSObject\nSee Also\nMovement disorder manager\nGetting movement disorder symptom data\nRetrieve data from the Apple Watch’s movement disorder manager.\nAdhering to the movement disorder data collection requirements\nEnsure that your users understand and have control over the data your app collects.\nMovement disorder algorithm changelog\nA chronological log of notable changes to the movement disorder algorithm.\nclass CMTremorResult\nA result object that contains data about the presence and strength of tremors during a one-minute interval.\nclass CMDyskineticSymptomResult\nA result object that contains data about the likely presence of dyskinetic symptoms during a one-minute interval."
  },
  {
    "title": "Getting movement disorder symptom data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/getting_movement_disorder_symptom_data",
    "html": "Overview\n\nThe CMMovementDisorderManager class provides a power-efficient approach for you to continuously measure and record tremors and dyskinetic symptoms for Parkinson’s disease for your app.\n\nImportant\n\nApple doesn’t market the movement disorder monitoring as a regulated medical device. Depending on how your app uses the API, you may need to meet additional regulatory obligations. Seek the relevant regulatory advice as needed for your app.\n\nWhen you begin retrieving data from the movement disorder manager, Apple Watch starts to gather motion data. To preserve battery life, the manager doesn’t perform calculations in real time. Instead, it periodically and opportunistically analyzes the raw data, saving the results on the user’s device. To preserve disk space, the manager only keeps results for seven days. During this time, you can use the manager to query for the results.\n\nFor more information about the scientific validation and algorithms behind disorder detection and recording, see Smartwatch inertial sensors continuously monitor real-world motor fluctuations in Parkinson’s disease, or download a PDF from Science Translational Medicine Magazine.\n\nApps that use the CMMovementDisorderManager must:\n\nConfirm the user’s diagnosis of Parkinson’s disease.\n\nOnly report on symptoms diagnosed by a clinician or self-reported by the user.\n\nRemind the user to wear Apple Watch on their most affected arm in order to collect the most useful data.\n\nImportant\n\nTo use the Movement Disorder API, your app must adhere to the Movement Disorder Program Requirements. For more information, see Adhering to the movement disorder data collection requirements. Additionally, your app must follow best practices for handling the user’s health data, as defined by the HealthKit guidelines. For more information, see Protecting user privacy.\n\nTo retrieve Parkinson’s tremors or dyskinetic symptoms data from a watchOS app:\n\nProvide a motion usage description in your WatchKit extension’s Info.plist file.\n\nInstantiate a CMMovementDisorderManager object.\n\nEnsure that movement disorder monitoring is available on the current device.\n\nBegin monitoring the user.\n\nQuery for tremors or dyskinetic symptoms.\n\nProvide the motion usage description\n\nYour watchOS app must provide an NSMotionUsageDescription key with a String value in the WatchKit extension’s Info.plist file. The system displays the motion usage description whenever it asks a user for permission to record their data. The description string appears in the Motion and Fitness authorization prompt.\n\nAt a minimum, your description must contain the following text: “In addition, this app would like to access your tremor and dyskinetic symptom data. This is only intended for use in those already diagnosed with Parkinson’s disease.”\n\nYou can include additional information explaining why the user should grant your app permission, and what your app intends to do with the data after this text.\n\nMonitor and query for results\n\nListing 1 shows how to set up your movement disorder manager, and begin monitoring the user’s symptoms.\n\nListing 1 Set up and monitor the user\n// Check to see if the movement disorder manager is available.\nguard CMMovementDisorderManager.isAvailable() else {\n    // The movement disorder manager is not availble on this device.\n    return\n}\n\n\n// Instantiate the Movement Disorder Manager\nmovementDisorderManager = CMMovementDisorderManager()\n\n\n// Start monitoring the user. The maximum duration is seven days.\nmovementDisorderManager.monitorKinesias(forDuration: 60.0 * 60.0 * 24.0 * 7.0)\n\n\nAfter you start monitoring, the manager leverages the CMSensorRecorder to record high-rate accelerometer data passively. When enabled, the CMSensorRecorder records 100 Hz samples. The movement disorder algorithms then periodically and opportunistically use this data to calculate tremors and dyskinetic symptoms.\n\nThe movement disorder manager stores the results of these calculations on the device for seven days. To access the results, use the manager to query for the desired results, as shown in Listing 2.\n\nListing 2 Query for results\n// Get the end date for the last batch of results.\nguard let endDate = movementDisorderManager.lastProcessedDate() else {\n    // The manager has not processed any results yet.\n    return\n}\n\n\n// Get the last batch of tremor results.\nmovementDisorderManager.queryTremor(from: previousDate, to: endDate) { (tremorResults, error) in\n    \n    // Check for errors.\n    if let error = error {\n        // Handle the error here.\n        print(\"*** An error occurred: \\(error.localizedDescription) ***\")\n        return\n    }\n    \n    // Do something with the tremor results here.\n}\n\n\n// Get the last batch of dyskinetic symptom results.\nmovementDisorderManager.queryDyskineticSymptom(from: previousDate, to: endDate) { (dyskineticSymptomResults, error) in\n    \n    // Check for errors.\n    if let error = error {\n        // Handle the error here.\n        print(\"*** An error occurred: \\(error.localizedDescription) ***\")\n        return\n    }\n    \n    // Do something with the dyskinetic symptom results here.\n}\n\n\npreviousDate = endDate\n\n\nTo extend the monitoring past the initial expiration date, call the monitorKinesias(forDuration:) method again.\n\nUnderstand the manager’s limitations\n\nCMMovementDisorderManager measures resting tremors from Parkinson’s disease in the 3-7 Hz range. It returns metrics about the presence and relative severity of resting tremor as a CMTremorResult object. The CMMovementDisorderManager also computes metrics about choreiform dyskinetic symptoms, measuring the likely presence or absence of dyskinetic symptoms as observed at the wrist where the user wears their Apple Watch. It returns the results as CMDyskineticSymptomResult objects.\n\nCMMovementDisorderManager operates under the following constraints:\n\nThe user should wear Apple Watch on the most affected arm.\n\nEmploy dyskinetic symptom tracking only for users who have chorea on the affected arm, either self-reported or diagnosed by a clinician.\n\nThere are many types of tremors. The movement disorder manager explicitly tracks resting tremor; it doesn’t track action tremor or postural tremor, and it may not track finger tremor.\n\nThe manager doesn’t explicitly track dystonia.\n\nThe results may include false positives and false negatives. The user’s activity, watch band fit, and concomitant conditions (such as restless legs syndrome and non-Parkinsonian tremor) can affect the quality of the results.\n\nThe manager only explicitly measures symptoms from the wrist wearing Apple Watch. However, Apple Watch may sense symptoms transmitted through the body from other affected body parts, possibly resulting in misleading or false metrics.\n\nSee Also\nMovement disorder manager\nAdhering to the movement disorder data collection requirements\nEnsure that your users understand and have control over the data your app collects.\nMovement disorder algorithm changelog\nA chronological log of notable changes to the movement disorder algorithm.\nclass CMMovementDisorderManager\nA manager for recording and querying movement disorder data.\nclass CMTremorResult\nA result object that contains data about the presence and strength of tremors during a one-minute interval.\nclass CMDyskineticSymptomResult\nA result object that contains data about the likely presence of dyskinetic symptoms during a one-minute interval."
  },
  {
    "title": "Movement disorder algorithm changelog | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/movement_disorder_algorithm_changelog",
    "html": "Overview\n\nThe movement disorder algorithm measures and records tremors and dyskinetic symptoms for Parkinson’s disease. For more information on receiving and using this data, see Getting movement disorder symptom data.\n\nUnreleased\n\nThe version() method for checking the algorithm’s current version is available in watchOS 9.\n\n1.0.0 — 2018-07-17\n\nAdded\n\nReleased the algorithm used in watchOS 5 and later.\n\nSee Also\nMovement disorder manager\nGetting movement disorder symptom data\nRetrieve data from the Apple Watch’s movement disorder manager.\nAdhering to the movement disorder data collection requirements\nEnsure that your users understand and have control over the data your app collects.\nclass CMMovementDisorderManager\nA manager for recording and querying movement disorder data.\nclass CMTremorResult\nA result object that contains data about the presence and strength of tremors during a one-minute interval.\nclass CMDyskineticSymptomResult\nA result object that contains data about the likely presence of dyskinetic symptoms during a one-minute interval."
  },
  {
    "title": "CMAltimeter | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmaltimeter",
    "html": "Overview\n\nAltitude events report changes in both the relative and absolute altitude. For example, a hiking app could use this object to track the user’s elevation change over the course of a hike, or to report their current absolute altitude during the hike.\n\nBecause altitude events may not be available on all devices, always call the isRelativeAltitudeAvailable() method before starting relative altitude updates, and call isAbsoluteAltitudeAvailable() before starting absolute altitude updates.\n\nAfter checking the availability of altitude data, call the startRelativeAltitudeUpdates(to:withHandler:) method to start receiving relative altitude data, or call the startAbsoluteAltitudeUpdates(to:withHandler:) method for absolute altitude data.\n\nCore Motion generates events at regular intervals (regardless of whether the data has changed) and delivers them to the block you specified. When you no longer need the event data, call the stopRelativeAltitudeUpdates() or stopAbsoluteAltitudeUpdates() methods respectively.\n\nImportant\n\nTo use this API, you must include the NSMotionUsageDescription key in your app’s Info.plist file and provide a usage description string for this key. The usage description appears in the prompt that the user must accept the first time the system asks the user to access motion data for your app. If you don’t include a usage description string, your app crashes when you call this API.\n\nTopics\nDetermining Altitude Availability\nclass func isAbsoluteAltitudeAvailable() -> Bool\nReturns a Boolean value indicating whether the current device reports changes in the absolute altitude.\nclass func isRelativeAltitudeAvailable() -> Bool\nReturns a Boolean value indicating whether the current device supports generating data for relative altitude changes.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns a value indicating whether the app is authorized to retrieve altimeter data.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features.\nStarting and Stopping Altitude Updates\nfunc startAbsoluteAltitudeUpdates(to: OperationQueue, withHandler: CMAbsoluteAltitudeHandler)\nStarts the delivery of absolute altitude data to the specified handler.\nfunc stopAbsoluteAltitudeUpdates()\nStops the delivery of absolute altitude data for this altimeter object.\ntypealias CMAbsoluteAltitudeHandler\nA block for receiving absolute altitude data.\nfunc startRelativeAltitudeUpdates(to: OperationQueue, withHandler: CMAltitudeHandler)\nStarts the delivery of relative altitude data to the specified handler.\nfunc stopRelativeAltitudeUpdates()\nStops the delivery of relative altitude data for the altimeter object.\ntypealias CMAltitudeHandler\nA block for receiving relative altitude data.\nRelationships\nInherits From\nNSObject\nSee Also\nAltitude data\nclass CMAbsoluteAltitudeData\nData that records a change in absolute altitude.\nclass CMAltitudeData\nData for a recorded change in altitude."
  },
  {
    "title": "CMAltitudeData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmaltitudedata",
    "html": "Overview\n\nYou do not create instances of this class directly. When you want to receive altimeter changes, create an instance of the CMAltimeter class and use that object to query for events or to start the delivery of events. The altimeter object creates new instances of this class at appropriate times and delivers them to the handler you specify.\n\nTopics\nGetting the Altitude Data\nvar relativeAltitude: NSNumber\nThe change in altitude (in meters) since the first reported event.\nvar pressure: NSNumber\nThe recorded pressure, in kilopascals.\nRelationships\nInherits From\nCMLogItem\nSee Also\nAltitude data\nclass CMAltimeter\nAn object that initiates the delivery of altitude-related changes.\nclass CMAbsoluteAltitudeData\nData that records a change in absolute altitude."
  },
  {
    "title": "CMAbsoluteAltitudeData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmabsolutealtitudedata",
    "html": "Overview\n\nAbsolute altitude is only available on iPhone 12 and later and Apple Watch 6 or SE and later.\n\nTopics\nAccessing Altitude Data\nvar altitude: Double\nThe absolute altitude of the device relative to sea level, measured in meters.\nvar accuracy: Double\nThe estimated uncertainty of the altimeter in meters, based on one standard deviation.\nvar precision: Double\nThe recommended resolution for the altitude, in meters.\nRelationships\nInherits From\nCMLogItem\nSee Also\nAltitude data\nclass CMAltimeter\nAn object that initiates the delivery of altitude-related changes.\nclass CMAltitudeData\nData for a recorded change in altitude."
  },
  {
    "title": "CMPedometerData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometerdata",
    "html": "Overview\n\nYou do not create instances of this class yourself. Instead, you use a CMPedometer object to request pedometer data from the system. The data for each request is packaged into an instance of this class and delivered to the handlers you registered with the pedometer object.\n\nTopics\nGetting the Dates\nvar startDate: Date\nThe start time for the pedometer data.\nvar endDate: Date\nThe end time for the pedometer data.\nGetting the Pedestrian Data\nvar numberOfSteps: NSNumber\nThe number of steps taken by the user.\nvar distance: NSNumber?\nThe estimated distance (in meters) traveled by the user.\nvar averageActivePace: NSNumber?\nThe average pace of the user, measured in seconds per meter.\nvar currentPace: NSNumber?\nThe current pace of the user, measured in seconds per meter.\nvar currentCadence: NSNumber?\nThe rate at which steps are taken, measured in steps per second.\nGetting the Floor Counts\nvar floorsAscended: NSNumber?\nThe approximate number of floors ascended by walking.\nvar floorsDescended: NSNumber?\nThe approximate number of floors descended by walking.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nPedometer and fitness\nclass CMPedometer\nAn object for fetching the system-generated live walking data.\nclass CMPedometerEvent\nA change in the user's pedestrian activity.\nclass CMStepCounter\nThe number of steps the user has taken with the device.\nDeprecated\nclass CMOdometerData\nA class that represents odometer data for workouts.\nclass CMHighFrequencyHeartRateData\nA class that represents heart rate data collected at 1 Hz."
  },
  {
    "title": "CMPedometer | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmpedometer",
    "html": "Overview\n\nYou use a pedometer object to retrieve step counts and other information about the distance traveled and the number of floors ascended or descended. The pedometer object manages a cache of historic data that you can query or you can ask for live updates as the data is processed.\n\nTo use a pedometer object, create an instance of this class and call the appropriate methods. Use the queryPedometerData(from:to:withHandler:) method to retrieve data that has already been gathered. To get live updates, use the startUpdates(from:withHandler:) method to start the delivery of events to the handler you provide.\n\nImportant\n\nTo use this API, you must include the NSMotionUsageDescription key in your app’s Info.plist file and provide a usage description string for this key. The usage description appears in the prompt that the user must accept the first time the system asks the user to access motion data for your app. If you don’t include a usage description string, your app crashes when you call this API.\n\nTopics\nDetermining Pedometer Availability\nclass func isStepCountingAvailable() -> Bool\nReturns a Boolean value indicating whether step counting is available on the current device.\nclass func isDistanceAvailable() -> Bool\nReturns a Boolean value indicating whether distance estimation is available on the current device.\nclass func isFloorCountingAvailable() -> Bool\nReturns a Boolean value indicating whether floor counting is available on the current device.\nclass func isPaceAvailable() -> Bool\nReturns a Boolean value indicating whether pace information is available on the current device.\nclass func isCadenceAvailable() -> Bool\nReturns a Boolean value indicating whether cadence information is available on the current device.\nclass func isPedometerEventTrackingAvailable() -> Bool\nReturns a Boolean value indicating whether pedometer events are available on the current device.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns a value indicating whether the app is authorized to gather pedometer data.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features.\nGathering Live Pedometer Data\nfunc startUpdates(from: Date, withHandler: CMPedometerHandler)\nStarts the delivery of recent pedestrian-related data to your app.\nfunc stopUpdates()\nStops the delivery of recent pedestrian data updates to your app.\nfunc startEventUpdates(handler: CMPedometerEventHandler)\nStarts the delivery of pedometer events to your app.\nfunc stopEventUpdates()\nStops the delivery of pedometer events to your app.\ntypealias CMPedometerHandler\nA block for processing pedometer-related data.\ntypealias CMPedometerEventHandler\nA block for processing pedometer events.\nFetching Historical Pedometer Data\nfunc queryPedometerData(from: Date, to: Date, withHandler: CMPedometerHandler)\nRetrieves the data between the specified start and end dates.\nRelationships\nInherits From\nNSObject\nSee Also\nPedometer and fitness\nclass CMPedometerData\nInformation about the distance traveled by a user on foot.\nclass CMPedometerEvent\nA change in the user's pedestrian activity.\nclass CMStepCounter\nThe number of steps the user has taken with the device.\nDeprecated\nclass CMOdometerData\nA class that represents odometer data for workouts.\nclass CMHighFrequencyHeartRateData\nA class that represents heart rate data collected at 1 Hz."
  },
  {
    "title": "CMMagnetometerData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmagnetometerdata",
    "html": "Overview\n\nYour application can obtain samples of magnetometer measurements, as represented by instances of this class, from the block handler of the startMagnetometerUpdates(to:withHandler:) method or from the magnetometerData property of the CMMotionManager class.\n\nNote\n\nThe magnetometerData property of CMMotionManager provides a non-nil value only if you have called the startMagnetometerUpdates() method or the startMagnetometerUpdates(to:withHandler:) method to start magnetometer updates.\n\nTopics\nGetting the Field Strength\nvar magneticField: CMMagneticField\nReturns the magnetic field measured by the magnetometer.\nstruct CMMagneticField\nA structure containing 3-axis magnetometer data\nRelationships\nInherits From\nCMLogItem"
  },
  {
    "title": "CMGyroData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmgyrodata",
    "html": "Overview\n\nAn application receives or samples CMGyroData objects at regular intervals after calling the startGyroUpdates(to:withHandler:) method or the startGyroUpdates() method of the CMMotionManager class.\n\nTopics\nGetting the Rotation Rate\nvar rotationRate: CMRotationRate\nThe rotation rate as measured by the device’s gyroscope.\nstruct CMRotationRate\nThe type of structures representing a measurement of rotation rate.\nclass CMRotationRateData\nA data object that contains a single rotation-rate measurement.\nclass CMRecordedRotationRateData\nA data object that contains a single rotation-rate measurement at a specific time.\nRelationships\nInherits From\nCMLogItem\nSee Also\nGyroscopes\nGetting raw gyroscope events\nRetrieve data from the onboard gyroscopes."
  },
  {
    "title": "Getting raw gyroscope events | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/getting_raw_gyroscope_events",
    "html": "Overview\n\nA gyroscope measures the rate at which a device rotates around a spatial axis. Many iOS devices have a three-axis gyroscope, which delivers rotation values in each of the three axes shown in Figure 1. Rotation values are measured in radians per second around the given axis. Rotation values may be positive or negative depending on the direction of rotation.\n\nFigure 1 Gyroscopes measure the rotation rate around the x, y, and z axes\n\nYou access the raw gyroscope data using the classes of the Core Motion framework. Specifically, the CMMotionManager class provides the interfaces for enabling the gyroscope hardware. When enabling the hardware, choose the interfaces that are best suited for your app. You can pull the gyroscope data only when you need it, or you can ask the framework to push updates to your app at regular intervals. Each technique involves different configuration steps and has a different use case.\n\nImportant\n\nIf your app relies on the presence of gyroscope hardware, configure the UIRequiredDeviceCapabilities key of its Info.plist file with the gyroscope value. For more information about the meaning of this key, see Information Property List Key Reference.\n\nThe raw rotation rate data delivered by the gyroscope interfaces may be biased by other factors such as temperature. If your app requires unbiased rotation values, use the device-motion interfaces instead. The device-motion interfaces use special algorithms to remove any bias and deliver more precise rotation values. For more information, see Getting processed device-motion data.\n\nFor information about the coordinate axes of different device types, see CMMotionManager.\n\nCheck for the availability of gyroscope data\n\nGyroscope data might be unavailable for a variety of reasons, so verify that the data is available before you try to obtain it. Check the value of the isGyroAvailable property of CMMotionManager and make sure it’s true. If it’s false, starting updates doesn’t deliver any data to your app.\n\nImportant\n\nIn visionOS, gyroscope data is available only when your app has an open immersive space. For more information, see ImmersiveSpace.\n\nGet gyroscope data only when you need it\n\nFor apps that process gyroscope data on their own schedule, such as games, use the startGyroUpdates() method of CMMotionManager to start the delivery of rotation data. When you call this method, the system enables the gyroscope hardware and begins updating the gyroData property of your CMMotionManager object. However, the system does not notify you when it updates that property. You must explicitly check the value of the property when you need the rotation data.\n\nBefore you start the delivery of gyroscope updates, specify an update frequency by assigning a value to the gyroUpdateInterval property. The maximum frequency at which you can request updates is hardware-dependent but is usually at least 100 Hz. If you request a frequency that is greater than what the hardware supports, Core Motion uses the supported maximum instead.\n\nListing 1 shows a method that configures gyroscope updates to occur 50 times per second. The method then configures a timer to fetch those updates at the same frequency and do something with the data. You could configure the timer to fire at a lower frequency, but doing so would waste power by causing the hardware to generate more updates than were actually used.\n\nListing 1 Fetching gyroscope data on demand\nfunc startGyros() {\n   if motion.isGyroAvailable {\n      self.motion.gyroUpdateInterval = 1.0 / 50.0\n      self.motion.startGyroUpdates()\n\n\n      // Configure a timer to fetch the accelerometer data.\n      self.timer = Timer(fire: Date(), interval: (1.0/50.0), \n             repeats: true, block: { (timer) in\n         // Get the gyro data.\n         if let data = self.motion.gyroData {\n            let x = data.rotationRate.x\n            let y = data.rotationRate.y\n            let z = data.rotationRate.z\n\n\n            // Use the gyroscope data in your app. \n         }\n      })\n\n\n      // Add the timer to the current run loop.\n      RunLoop.current.add(self.timer!, forMode: .defaultRunLoopMode)\n   }\n}\n\n\nfunc stopGyros() {\n   if self.timer != nil {\n      self.timer?.invalidate()\n      self.timer = nil\n\n\n      self.motion.stopGyroUpdates()\n   }\n}\n\n\nProcess a steady stream of gyroscope updates\n\nWhen you want to capture all of the gyroscope data, perhaps so you can analyze it for movement patterns, use the startGyroUpdates(to:withHandler:) method of CMMotionManager. This method pushes each new set of rotation values to your app by executing your handler block on the specified queue. The queueing of these blocks ensures that your app receives all of the gyroscope data, even if your app becomes busy and is unable to process updates for a brief period of time.\n\nBefore you start the delivery of gyroscope updates, specify an update frequency by assigning a value to the gyroUpdateInterval property. The maximum frequency at which you can request updates is hardware-dependent but is usually at least 100 Hz. If you request a frequency that is greater than what the hardware supports, Core Motion uses the supported maximum instead.\n\nListing 2 shows a method from the MotionGraphs sample code project, which you can examine for more context. The app displays a real-time graph of rotation data from the onboard gyroscopes. The user configures the update frequency for the gyroscopes using a slider, the changing of which results in a call to the startUpdatesWithSliderValue: method shown in the example. This method restarts the gyroscope updates with the new frequency. Each time a new sample is received, the specified block is queued on the main thread. That block updates the app’s graph view and labels with the new rotation values.\n\nListing 2 Accessing raw gyroscope data\nstatic const NSTimeInterval gyroMin = 0.01;\n- (void)startUpdatesWithSliderValue:(int)sliderValue {\n   // Determine the update interval\n   NSTimeInterval delta = 0.005;\n   NSTimeInterval updateInterval = gyroMin + delta * sliderValue;\n\n\n   // Create a CMMotionManager\n   CMMotionManager *mManager = [(APLAppDelegate *)\n            [[UIApplication sharedApplication] delegate] sharedManager];\n   APLGyroGraphViewController * __weak weakSelf = self;\n\n\n   // Check whether the gyroscope is available\n   if ([mManager isGyroAvailable] == YES) {\n      // Assign the update interval to the motion manager\n      [mManager setGyroUpdateInterval:updateInterval];\n      [mManager startGyroUpdatesToQueue:[NSOperationQueue mainQueue] \n               withHandler:^(CMGyroData *gyroData, NSError *error) {\n         [weakSelf.graphView addX:gyroData.rotationRate.x \n                  y:gyroData.rotationRate.y \n                  z:gyroData.rotationRate.z];\n         [weakSelf setLabelValueX:gyroData.rotationRate.x \n                  y:gyroData.rotationRate.y \n                  z:gyroData.rotationRate.z];\n      }];\n   }\n   self.updateIntervalLabel.text = [NSString stringWithFormat:@\"%f\", updateInterval];\n}\n- (void)stopUpdates{\n   CMMotionManager *mManager = [(APLAppDelegate *)\n            [[UIApplication sharedApplication] delegate] sharedManager];\n   if ([mManager isGyroActive] == YES) {\n      [mManager stopGyroUpdates];\n   }\n}\n\n\nSee Also\nGyroscopes\nclass CMGyroData\nA single measurement of the device’s rotation rate."
  },
  {
    "title": "CMSensorRecorder | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmsensorrecorder",
    "html": "Overview\n\nUse a sensor recorder to initiate the gathering of accelerometer data. Later, use the sensor recorder to fetch the recorded data so you can analyze it. You might use the recorded data to assess specific types of motion and incorporate the results into your app.\n\nTo use a sensor recorder, create an instance of this class and call the recordAccelerometer(forDuration:) method to begin recording data. You do not need to stop the recording process explicitly. The system stops recording automatically when the specified time expires and no other apps extend the recording time. Listing 1 shows how to record 20 minutes worth of accelerometer data.\n\nListing 1 Recording accelerometer data\nif CMSensorRecorder.isAccelerometerRecordingAvailable() {\n    let recorder = CMSensorRecorder()\n    recorder.recordAccelerometerForDuration(20 * 60)  // Record for 20 minutes\n}\n\n\nImportant\n\nTo use this API, you must include the NSMotionUsageDescription key in your app’s Info.plist file and provide a usage description string for this key. The usage description appears in the prompt that the user must accept the first time the system asks the user to access motion data for your app. If you don’t include a usage description string, your app crashes when you call this API.\n\nTopics\nChecking the Availability of Sensor Recording\nclass func isAccelerometerRecordingAvailable() -> Bool\nReturns a Boolean value indicating whether accelerometer recording is supported on the current device.\nclass func authorizationStatus() -> CMAuthorizationStatus\nReturns a value indicating whether the app is authorized to record sensor data.\nenum CMAuthorizationStatus\nThe authorization status for motion-related features.\nclass func isAuthorizedForRecording() -> Bool\nReturns a Boolean value indicating whether the app is authorized to record sensor data.\nDeprecated\nRecording Accelerometer Data\nfunc recordAccelerometer(forDuration: TimeInterval)\nBegins recording accelerometer data for the specified period of time.\nRetrieving Past Accelerometer Data\nfunc accelerometerData(from: Date, to: Date) -> CMSensorDataList?\nRetrieves the accelerometer data collected between the specified dates.\naccelerometerDataSince:\nRetrieves the accelerometer data for entries in the same batch.\nRelationships\nInherits From\nNSObject\nSee Also\nAccelerometers\nGetting raw accelerometer events\nRetrieve data from the onboard accelerometers.\nclass CMAccelerometerData\nA data sample from the device's three accelerometers.\nclass CMRecordedAccelerometerData\nA single piece of accelerometer data that was recorded by the device.\nclass CMSensorDataList\nA list of the accelerometer data recorded by the system."
  },
  {
    "title": "CMSensorDataList | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmsensordatalist",
    "html": "Overview\n\nYou do not create instances of this class directly. Instead, you receive one as the result of a query for accelerometer data from a CMSensorRecorder object.\n\nYou use a sensor data list object to enumerate over the accelerometer data as shown in Listing 1.\n\nListing 1 Enumerating over the accelerometer data\n-(void)processSamplesFromDate:(NSDate*)start toDate:(NSDate)end {\n   CMSensorRecorder* recorder = [[CMSensorRecorder alloc] init];\n   CMSensorDataList* list = [recorder accelerometerDataFrom:start to:end];\n \n   for (CMRecordedAccelerometerData* data in list) {\n      // Process the data.\n      NSLog(@\"Sample: (%f, %f, %f)\", data.acceleration.x,\n              data.acceleration.y, data.acceleration.z);\n   }\n}\n\nRelationships\nInherits From\nNSObject\nConforms To\nNSFastEnumeration\nSee Also\nAccelerometers\nGetting raw accelerometer events\nRetrieve data from the onboard accelerometers.\nclass CMAccelerometerData\nA data sample from the device's three accelerometers.\nclass CMRecordedAccelerometerData\nA single piece of accelerometer data that was recorded by the device.\nclass CMSensorRecorder\nAn object that gathers and retrieves accelerometer data from a device."
  },
  {
    "title": "CMRecordedAccelerometerData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmrecordedaccelerometerdata",
    "html": "Overview\n\nYou do not create instances of this class directly. Instead, you use a CMSensorRecorder object to retrieve already recorded data from the system.\n\nTopics\nGetting the Accelerometer Data\nvar startDate: Date\nThe wall clock time when the sensor sample was recorded.\nvar identifier: UInt64\nThe unique identifier for the accelerometer data.\nRelationships\nInherits From\nCMAccelerometerData\nSee Also\nAccelerometers\nGetting raw accelerometer events\nRetrieve data from the onboard accelerometers.\nclass CMAccelerometerData\nA data sample from the device's three accelerometers.\nclass CMSensorRecorder\nAn object that gathers and retrieves accelerometer data from a device.\nclass CMSensorDataList\nA list of the accelerometer data recorded by the system."
  },
  {
    "title": "CMAccelerometerData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmaccelerometerdata",
    "html": "Overview\n\nAn application accesses CMAccelerometerData objects through the block handler specified as the last parameter of the startAccelerometerUpdates(to:withHandler:) method and through the accelerometerData property, both declared by the CMMotionManager class. The superclass of CMAccelerometerData, CMLogItem, defines a timestamp property that records when the acceleration measurement was taken.\n\nTopics\nAccessing Accelerometer Data\nvar acceleration: CMAcceleration\nThe acceleration measured by the accelerometer.\nstruct CMAcceleration\nThe type of a structure containing 3-axis acceleration values.\nRelationships\nInherits From\nCMLogItem\nSee Also\nAccelerometers\nGetting raw accelerometer events\nRetrieve data from the onboard accelerometers.\nclass CMRecordedAccelerometerData\nA single piece of accelerometer data that was recorded by the device.\nclass CMSensorRecorder\nAn object that gathers and retrieves accelerometer data from a device.\nclass CMSensorDataList\nA list of the accelerometer data recorded by the system."
  },
  {
    "title": "Getting raw accelerometer events | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/getting_raw_accelerometer_events",
    "html": "Overview\n\nAn accelerometer measures changes in velocity along one axis. All iOS devices have a three-axis accelerometer, which delivers acceleration values in each of the three axes shown in Figure 1. The values reported by the accelerometers are measured in increments of the gravitational acceleration, with the value 1.0 representing an acceleration of 9.8 meters per second (per second) in the given direction. Acceleration values may be positive or negative depending on the direction of the acceleration.\n\nFigure 1 Accelerometers measure changes in velocity along the x, y, and z axes\n\nYou access the raw accelerometer data using the classes of the Core Motion framework. Specifically, the CMMotionManager class provides the interfaces for enabling the accelerometer hardware. When enabling the hardware, choose the interfaces that are best suited for your app. You can pull the accelerometer data only when you need it, or you can ask the framework to push updates to your app at regular intervals. Each technique involves different configuration steps and has a different use case.\n\nImportant\n\nIf your app relies on the presence of accelerometer hardware, configure the UIRequiredDeviceCapabilities key of its Info.plist file with the accelerometer value. For more information about the meaning of this key, see Information Property List Key Reference.\n\nFor information about the coordinate axes of different device types, see CMMotionManager.\n\nCheck for the availability of accelerometer data\n\nAccelerometer data might be unavailable for a variety of reasons, so verify that the data is available before you try to obtain it. Check the value of the isAccelerometerAvailable property of CMMotionManager and make sure it’s true. If it’s false, starting updates doesn’t deliver any data to your app.\n\nImportant\n\nIn visionOS, accelerometer data is available only when your app has an open immersive space. For more information, see ImmersiveSpace.\n\nGet accelerometer data only when you need it\n\nFor apps that process accelerometer data on their own schedule, such as games, use the startAccelerometerUpdates() method of CMMotionManager to start the delivery of accelerometer data. When you call this method, the system enables the accelerometer hardware and begins updating the accelerometerData property of your CMMotionManager object. However, the system does not notify you when it updates that property. You must explicitly check the value of the property when you need the accelerometer data.\n\nBefore you start the delivery of accelerometer updates, specify an update frequency by assigning a value to the accelerometerUpdateInterval property. The maximum frequency at which you can request updates is hardware-dependent but is usually at least 100 Hz. If you request a frequency that is greater than what the hardware supports, Core Motion uses the supported maximum instead.\n\nListing 1 shows a method that configures accelerometer updates to occur 50 times per second. The method then configures a timer to fetch those updates at the same frequency and do something with the data. You could configure the timer to fire at a lower frequency, but doing so would waste power by causing the hardware to generate more updates than were actually used.\n\nListing 1 Fetching accelerometer data on demand\nlet motion = CMMotionManager()\n\n\nfunc startAccelerometers() {\n   // Make sure the accelerometer hardware is available. \n   if self.motion.isAccelerometerAvailable {\n      self.motion.accelerometerUpdateInterval = 1.0 / 50.0  // 50 Hz\n      self.motion.startAccelerometerUpdates()\n\n\n      // Configure a timer to fetch the data.\n      self.timer = Timer(fire: Date(), interval: (1.0/50.0), \n            repeats: true, block: { (timer) in\n         // Get the accelerometer data.\n         if let data = self.motion.accelerometerData {\n            let x = data.acceleration.x\n            let y = data.acceleration.y\n            let z = data.acceleration.z\n\n\n            // Use the accelerometer data in your app.\n         }\n      })\n\n\n      // Add the timer to the current run loop.\n      RunLoop.current.add(self.timer!, forMode: .defaultRunLoopMode)\n   }\n}\n\n\nProcess a steady stream of accelerometer data\n\nWhen you want to capture all of the incoming accelerometer data, perhaps so you can analyze it for movement patterns, use the startAccelerometerUpdates(to:withHandler:) method of CMMotionManager. This method pushes each new set of accelerometer values to your app by executing your handler block on the specified queue. The queueing of these blocks ensures that your app receives all of the accelerometer data, even if your app becomes busy and is unable to process updates for a brief period of time.\n\nBefore you start the delivery of accelerometer updates, specify an update frequency by assigning a value to the accelerometerUpdateInterval property. The maximum frequency at which you can request updates is hardware-dependent but is usually at least 100 Hz. If you request a frequency that is greater than what the hardware supports, Core Motion uses the supported maximum instead.\n\nListing 2 shows a method from the MotionGraphs sample code project, which you can examine for more context. The app displays a real-time graph of accelerometer data. The user configures the update frequency for the accelerometers using a slider, the changing of which results in a call to the startUpdatesWithSliderValue: method shown in the example. This method restarts the accelerometer updates with the new frequency. Each time a new sample is received, the specified block is queued on the main thread. That block updates the app’s graph view and labels with the new accelerometer values.\n\nListing 2 Accessing accelerometer data in MotionGraphs\nstatic const NSTimeInterval accelerometerMin = 0.01;\n- (void)startUpdatesWithSliderValue:(int)sliderValue {\n    // Determine the update interval.\n    NSTimeInterval delta = 0.005;\n    NSTimeInterval updateInterval = accelerometerMin + delta * sliderValue;\n    // Create a CMMotionManager object.\n    CMMotionManager *mManager = [(APLAppDelegate *)\n            [[UIApplication sharedApplication] delegate] sharedManager];\n    APLAccelerometerGraphViewController * __weak weakSelf = self;\n    // Check whether the accelerometer is available.\n    if ([mManager isAccelerometerAvailable] == YES) {\n        // Assign the update interval to the motion manager.\n        [mManager setAccelerometerUpdateInterval:updateInterval];\n        [mManager startAccelerometerUpdatesToQueue:[NSOperationQueue mainQueue]\n               withHandler:^(CMAccelerometerData *accelerometerData, NSError *error) {\n        [weakSelf.graphView addX:accelerometerData.acceleration.x \n                  y:accelerometerData.acceleration.y \n                  z:accelerometerData.acceleration.z];\n        [weakSelf setLabelValueX:accelerometerData.acceleration.x \n                  y:accelerometerData.acceleration.y \n                  z:accelerometerData.acceleration.z];\n      }];\n   }\n   self.updateIntervalLabel.text = [NSString stringWithFormat:@\"%f\", updateInterval];\n}\n- (void)stopUpdates {\n   CMMotionManager *mManager = [(APLAppDelegate *)\n            [[UIApplication sharedApplication] delegate] sharedManager];\n   if ([mManager isAccelerometerActive] == YES) {\n      [mManager stopAccelerometerUpdates];\n   }\n}\n\n\nSee Also\nAccelerometers\nclass CMAccelerometerData\nA data sample from the device's three accelerometers.\nclass CMRecordedAccelerometerData\nA single piece of accelerometer data that was recorded by the device.\nclass CMSensorRecorder\nAn object that gathers and retrieves accelerometer data from a device.\nclass CMSensorDataList\nA list of the accelerometer data recorded by the system."
  },
  {
    "title": "CMMotionManager | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmmotionmanager",
    "html": "Overview\n\nUse a CMMotionManager object to start the services that report movement detected by the device's onboard sensors. Use this object to receive four types of motion data:\n\nAccelerometer data, indicating the instantaneous acceleration of the device in three dimensional space.\n\nGyroscope data, indicating the instantaneous rotation around the device's three primary axes.\n\nMagnetometer data, indicating the device's orientation relative to Earth's magnetic field.\n\nDevice-motion data, indicating key motion-related attributes such as the device's user-initiated acceleration, its attitude, rotation rates, orientation relative to calibrated magnetic fields, and orientation relative to gravity. Core Motion’s sensor fusion algorithms provide this data.\n\nThe processed device-motion data gives the device’s attitude, rotation rate, calibrated magnetic fields, the direction of gravity, and the amount of acceleration the user contributes to the device.\n\nImportant\n\nCreate only one CMMotionManager object for your app. Multiple instances of this class can affect the rate at which the system receives data from the accelerometer and gyroscope.\n\nYou can receive live sensor data at a specified update interval, or you can let the sensors collect data and store it for retrieval later. With both of these approaches, call the appropriate stop method (stopAccelerometerUpdates(), stopGyroUpdates(), stopMagnetometerUpdates(), and stopDeviceMotionUpdates()) when you no longer need the data.\n\nReceive regular motion updates\n\nTo receive motion data at specific intervals, the app calls a start method that takes an operation queue (instance of OperationQueue) and a block handler of a specific type for processing those updates. The motion data is passed into the block handler. The frequency of updates is determined by the value of an interval property.\n\nAccelerometer. Set the accelerometerUpdateInterval property to specify an update interval. Call the startAccelerometerUpdates(to:withHandler:) method, passing in a block of type CMAccelerometerHandler. Accelerometer data is passed into the block as CMAccelerometerData objects.\n\nGyroscope. Set the gyroUpdateInterval property to specify an update interval. Call the startGyroUpdates(to:withHandler:) method, passing in a block of type CMGyroHandler. Rotation-rate data is passed into the block as CMGyroData objects.\n\nMagnetometer. Set the magnetometerUpdateInterval property to specify an update interval. Call the startMagnetometerUpdates(to:withHandler:) method, passing a block of type CMMagnetometerHandler. Magnetic-field data is passed into the block as CMMagnetometerData objects.\n\nDevice motion. Set the deviceMotionUpdateInterval property to specify an update interval. Call the startDeviceMotionUpdates(using:)or startDeviceMotionUpdates(using:to:withHandler:) or startDeviceMotionUpdates(to:withHandler:) method, passing in a block of type CMDeviceMotionHandler. With the former method, you can specify a reference frame to be used for the attitude estimates. Rotation-rate data is passed into the block as CMDeviceMotion objects.\n\nSample motion data periodically\n\nTo sample motion data periodically, start a motion service using a method that takes no parameters and periodically access the properties of the CMMotionManager. This approach is the recommended approach for apps such as games. Handling accelerometer data in a block introduces additional overhead, and most game apps are only interested in the latest sample of motion data when they render a frame.\n\nAccelerometer. Call startAccelerometerUpdates() to begin updates and periodically access CMAccelerometerData objects by reading the accelerometerData property.\n\nGyroscope. Call startGyroUpdates() to begin updates and periodically access CMGyroData objects by reading the gyroData property.\n\nMagnetometer. Call startMagnetometerUpdates() to begin updates and periodically access CMMagnetometerData objects by reading the magnetometerData property.\n\nDevice motion. Call the startDeviceMotionUpdates(using:) or startDeviceMotionUpdates() method to begin updates and periodically access CMDeviceMotion objects by reading the deviceMotion property. The startDeviceMotionUpdates(using:) method lets you specify a reference frame for the attitude estimates.\n\nDetermine hardware availability and state\n\nIf a hardware feature (for example, a gyroscope) is not available on a device, calling a start method related to that feature has no effect. You can find out whether a hardware feature is available or active by checking the appropriate property; for example, for gyroscope data, you can check the value of the isGyroAvailable or isGyroActive properties.\n\nIdentify the coordinate axes of the device\n\nTo interpret accelerometer, gyroscope, or attitude information, you need to know the orientation of the device’s coordinate axes. The following illustration shows the positive x-axis, positive y-axis, and positive z-axis for motion-capable Apple devices.\n\nTopics\nDetermining the Availability of Services\nvar isDeviceMotionAvailable: Bool\nA Boolean value that indicates whether the device-motion service is available on the device.\nvar isAccelerometerAvailable: Bool\nA Boolean value that indicates whether an accelerometer is available on the device.\nvar isGyroAvailable: Bool\nA Boolean value that indicates whether a gyroscope is available on the device.\nvar isMagnetometerAvailable: Bool\nA Boolean value that indicates whether a magnetometer is available on the device.\nDetermining Which Services Are Active\nvar isDeviceMotionActive: Bool\nA Boolean value that determines whether the app is receiving updates from the device-motion service.\nvar isAccelerometerActive: Bool\nA Boolean value that indicates whether accelerometer updates are currently happening.\nvar isGyroActive: Bool\nA Boolean value that determines whether gyroscope updates are currently happening.\nvar isMagnetometerActive: Bool\nA Boolean value that determines whether magnetometer updates are currently happening.\nManaging Device Motion Updates\nvar showsDeviceMovementDisplay: Bool\nControls whether the device-movement display is shown.\nvar deviceMotionUpdateInterval: TimeInterval\nThe interval, in seconds, for providing device-motion updates to the block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame, to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified reference frame and block handler.\nfunc startDeviceMotionUpdates(to: OperationQueue, withHandler: CMDeviceMotionHandler)\nStarts device-motion updates on an operation queue and using a specified block handler.\nfunc startDeviceMotionUpdates(using: CMAttitudeReferenceFrame)\nStarts device-motion updates using a reference frame but without a block handler.\nfunc startDeviceMotionUpdates()\nStarts device-motion updates without a block handler.\nfunc stopDeviceMotionUpdates()\nStops device-motion updates.\nvar deviceMotion: CMDeviceMotion?\nThe latest sample of device-motion data.\ntypealias CMDeviceMotionHandler\nThe type of block callback for handling device-motion data.\nManaging Accelerometer Updates\nvar accelerometerUpdateInterval: TimeInterval\nThe interval, in seconds, for providing accelerometer updates to the block handler.\nfunc startAccelerometerUpdates(to: OperationQueue, withHandler: CMAccelerometerHandler)\nStarts accelerometer updates on an operation queue and with a specified handler.\nfunc startAccelerometerUpdates()\nStarts accelerometer updates without a handler.\nfunc stopAccelerometerUpdates()\nStops accelerometer updates.\nvar accelerometerData: CMAccelerometerData?\nThe latest sample of accelerometer data.\ntypealias CMAccelerometerHandler\nThe type of block callback for handling accelerometer data.\nManaging Gyroscope Updates\nvar gyroUpdateInterval: TimeInterval\nThe interval, in seconds, for providing gyroscope updates to the block handler.\nfunc startGyroUpdates(to: OperationQueue, withHandler: CMGyroHandler)\nStarts gyroscope updates on an operation queue and with a specified handler.\nfunc startGyroUpdates()\nStarts gyroscope updates without a handler.\nfunc stopGyroUpdates()\nStops gyroscope updates.\nvar gyroData: CMGyroData?\nThe latest sample of gyroscope data.\ntypealias CMGyroHandler\nThe type of block callback for handling gyroscope data.\nManaging Magnetometer Updates\nvar magnetometerUpdateInterval: TimeInterval\nThe interval, in seconds, at which the system delivers magnetometer data to the block handler.\nfunc startMagnetometerUpdates(to: OperationQueue, withHandler: CMMagnetometerHandler)\nStarts magnetometer updates on an operation queue and with a specified handler.\nfunc startMagnetometerUpdates()\nStarts magnetometer updates without a block handler.\nfunc stopMagnetometerUpdates()\nStops magnetometer updates.\nvar magnetometerData: CMMagnetometerData?\nThe latest sample of magnetometer data.\ntypealias CMMagnetometerHandler\nThe type of block callback for handling magnetometer data.\nAccessing Attitude Reference Frames\nvar attitudeReferenceFrame: CMAttitudeReferenceFrame\nReturns either the reference frame currently being used or the default attitude reference frame.\nclass func availableAttitudeReferenceFrames() -> CMAttitudeReferenceFrame\nReturns a bitmask of the available reference frames for reporting the attitude of the current device.\nUnderstanding Errors\nlet CMErrorDomain: String\nThe error domain for Core Motion.\nstruct CMError\nDefines motion errors.\nRelationships\nInherits From\nNSObject\nSee Also\nEssentials\nCore Motion updates\nLearn about important changes to Core Motion."
  },
  {
    "title": "CMAttitude | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmattitude",
    "html": "Overview\n\nThe CMAttitude class offers three different mathematical representations of attitude: a rotation matrix, a quaternion, and Euler angles (roll, pitch, and yaw values). You access CMAttitude objects through the attitude property of each CMDeviceMotion objects passed to an application. An application starts receiving these device-motion objects as a result of calling the startDeviceMotionUpdates(using:to:withHandler:) method, the startDeviceMotionUpdates(to:withHandler:) method, the startDeviceMotionUpdates(using:) method, or the startDeviceMotionUpdates() method of the CMMotionManager class.\n\nNote\n\nCore Motion outputs a direction cosine matrix (DCM)—basically a rotation from the last “old” orientation to the new orientation of the device.\n\nTopics\nGetting a Mathematical Representation of Attitude as Euler Angles\nvar roll: Double\nThe roll of the device, in radians.\nvar pitch: Double\nThe pitch of the device, in radians.\nvar yaw: Double\nThe yaw of the device, in radians.\nGetting a Mathematical Representation of Attitude as a Rotation Matrix\nvar rotationMatrix: CMRotationMatrix\nReturns a rotation matrix representing the device's attitude.\nstruct CMRotationMatrix\nThe type of a structure representing a rotation matrix.\nGetting a Mathematical Representation of Attitude as a Quaternion\nvar quaternion: CMQuaternion\nReturns a quaternion representing the device's attitude.\nstruct CMQuaternion\nThe type for a quaternion representing a measurement of attitude.\nObtaining the Change in Attitude\nfunc multiply(byInverseOf: CMAttitude)\nYields the change in attitude given a specific attitude.\nRelationships\nInherits From\nNSObject\nConforms To\nNSCopying\nNSSecureCoding\nSee Also\nDevice motion\nGetting processed device-motion data\nRetrieve motion data that the system processed to remove environmental bias, such as the effects of gravity.\nclass CMDeviceMotion\nEncapsulated measurements of the attitude, rotation rate, and acceleration of a device.\nstruct CMAttitudeReferenceFrame\nConstants that indicate the frame of reference for attitude-related motion data.\nclass CMHeadphoneMotionManager\nAn object that starts and manages headphone motion services."
  },
  {
    "title": "Getting processed device-motion data | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/getting_processed_device-motion_data",
    "html": "Overview\n\nThe Core Motion framework gives you access to the raw data from many different types of hardware sensors, including accelerometers, gyroscopes, and magnetometers. While the raw data is useful, it sometimes contains additional information you don’t need. For example, the raw accelerometer data contains both the acceleration caused by gravity and by the device’s motion. To get only the device-specific acceleration, you must remove the gravitational acceleration from the raw data values. The removal of this data requires additional information and extra processing time.\n\nTo make it easier to get the data you want, the device-motion service processes the raw data and makes the following values available:\n\nThe device’s attitude (or orientation) in three-dimensional space\n\nThe unbiased rotation rate of the device\n\nThe current gravity vector\n\nThe device-specific acceleration (without gravity)\n\nThe current magnetic field vector\n\nThe device-motion service combines information from multiple sensors to provide the listed results. Device-motion services are available from CMMotionManager, CMHeadphoneMotionManager, and CMBatchedSensorManager. If your app can’t function without accelerometer or gyroscope data, update your app’s list of required device capabilities to include that hardware. For more information about specifying required device capabilities, see UIRequiredDeviceCapabilities.\n\nCheck for the availability of motion data\n\nDevice-motion data might be unavailable for a variety of reasons, so verify that the service is available before you try to start it. Check the value of the isDeviceMotionAvailable property of CMMotionManager and make sure it’s true. If it’s false, starting the service doesn’t deliver any data to your app.\n\nImportant\n\nIn visionOS, device-motion data is available only when your app has an open immersive space. For more information, see ImmersiveSpace.\n\nChoose a frame of reference for interpreting attitude data\n\nThe attitude of a device refers to the amount of rotation around each of the device’s axes. The device-motion service reports attitude values relative to a known orientation of the device, also known as the device’s frame of reference. When you start the device-motion service, you specify which frame of reference you want Core Motion to use.\n\nThe default frame of reference is xArbitraryZVertical, which places the z-axis perpendicular to the ground and matches the x- and y-axes to the device’s current orientation in space. Use this option or the xArbitraryCorrectedZVertical option to measure changes relative to the device’s initial starting position. For example, a golf swing analysis app might use this frame of reference to measure a person’s golf swing. For compass or navigation apps, choose the xMagneticNorthZVertical or xTrueNorthZVertical frames of reference, which report the device’s orientation relative to specific magnetic and true north, respectively.\n\nSpecify the reference frame you want when you start the device-motion service. The CMMotionManager object stores your chosen frame of reference in its attitudeReferenceFrame property, and makes it the default choice.\n\nWhen a device’s orientation matches the frame of reference’s orientation, the roll, pitch, and yaw rotation values of a reported CMAttitude contain the value 0. As a person rotates the device, the roll, pitch, and yaw values reflect the amount of rotation (in radians) relative to the frame of reference. The following figure shows how to interpret these values around each axis. Rotation values are in the range -π to π.\n\nFor information about the coordinate axes of different device types, see CMMotionManager or CMHeadphoneMotionManager.\n\nStart device-motion updates\n\nTo start collecting device-motion data, create a CMMotionManager object and call one of the appropriate methods. Core Motion offers two options for processing device-motion updates:\n\nProcess a steady stream of updates using a closure.\n\nProcess updates when you want them.\n\nBoth options require you to specify the frequency of updates from the system using the deviceMotionUpdateInterval property of your CMMotionManager type. The maximum update frequency is hardware dependent, but is usually at least 100 Hz. If you specify an update frequency greater than what the hardware supports, Core Motion uses the maximum frequency instead.\n\nThe following example configures the device-motion service to deliver updates 50 times per second, and to deliver attitude data relative to magnetic north. When starting device motion without a closure, it’s your responsibility to check the deviceMotion property of your CMMotionManager at regular intervals. This example sets up a timer to check the value of the property and apply the latest data to the app’s content:\n\nfunc startDeviceMotion() {\n    if motion.isDeviceMotionAvailable {\n        self.motion.deviceMotionUpdateInterval = 1.0 / 50.0\n        self.motion.showsDeviceMovementDisplay = true\n        self.motion.startDeviceMotionUpdates(using: .xMagneticNorthZVertical)\n        \n        // Configure a timer to fetch the motion data.\n        self.timer = Timer(fire: Date(), interval: (1.0 / 50.0), repeats: true,\n                           block: { (timer) in\n                            if let data = self.motion.deviceMotion {\n                                // Get the attitude relative to the magnetic north reference frame.\n                                let x = data.attitude.pitch\n                                let y = data.attitude.roll\n                                let z = data.attitude.yaw\n                                \n                                // Use the motion data in your app.\n                            }\n        })\n        \n        // Add the timer to the current run loop.\n        RunLoop.current.add(self.timer!, forMode: RunLoop.Mode.default)\n    }\n}\n\n\nTo process a steady stream of events, start the device-motion services using an OperationQueue object and a closure of type CMDeviceMotionHandler. Each time Core Motion receives a new data value, it runs your closure on the operation queue. Each new data value comes with a timestamp value, which you can use to verify the timeliness of the data and discard data that’s older than a certain threshold. The following example uses an operation queue to process 60 updates per second:\n\nfunc startQueuedUpdates() {\n   if motion.isDeviceMotionAvailable {\n      self.motion.deviceMotionUpdateInterval = 1.0 / 60.0\n      self.motion.showsDeviceMovementDisplay = true\n      self.motion.startDeviceMotionUpdates(using: .xMagneticNorthZVertical, \n               to: self.queue, withHandler: { (data, error) in\n         // Make sure the data is valid before accessing it.\n         if let validData = data {\n            // Get the attitude relative to the magnetic north reference frame. \n            let roll = validData.attitude.roll\n            let pitch = validData.attitude.pitch\n            let yaw = validData.attitude.yaw\n\n\n            // Use the motion data in your app.\n         }\n      })\n   }\n}\n\n\n\nStop device-motion updates\n\nTo minimize the impact on a device’s battery life, always call the stopDeviceMotionUpdates() method of your CMMotionManager object when you no longer need motion data. The device-motion service captures motion data using special hardware, and running this hardware consumes additional power. In particular, stop services:\n\nWhen your app deactivates or enters the background\n\nWhen the person stops interacting with the feature that requires motion data\n\nAs soon as your app has all the motion data it needs\n\nIf your app doesn’t require constant motion updates, start the device-motion service, fetch the data you need, and stop the service immediately. Don’t leave the service running any longer than necessary.\n\nSee Also\nDevice motion\nclass CMDeviceMotion\nEncapsulated measurements of the attitude, rotation rate, and acceleration of a device.\nclass CMAttitude\nThe device’s orientation relative to a known frame of reference at a point in time.\nstruct CMAttitudeReferenceFrame\nConstants that indicate the frame of reference for attitude-related motion data.\nclass CMHeadphoneMotionManager\nAn object that starts and manages headphone motion services."
  },
  {
    "title": "CMHighFrequencyHeartRateData | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion/cmhighfrequencyheartratedata",
    "html": "Overview\n\nUse the heartRate property to get the data, and the confidence property for the accuracy.\n\nTopics\nAccessing heart rate data\nvar heartRate: Double\nThe heart rate value in units of beats per minute (BPM).\nvar confidence: CMHighFrequencyHeartRateDataConfidence\nThe confidence level of the heart rate value.\nenum CMHighFrequencyHeartRateDataConfidence\nThe level of confidence in the accuracy of the heart rate data.\nGetting the sample date\nvar date: Date?\nThe time the heart rate value occurs.\nRelationships\nInherits From\nCMLogItem\nSee Also\nPedometer and fitness\nclass CMPedometer\nAn object for fetching the system-generated live walking data.\nclass CMPedometerData\nInformation about the distance traveled by a user on foot.\nclass CMPedometerEvent\nA change in the user's pedestrian activity.\nclass CMStepCounter\nThe number of steps the user has taken with the device.\nDeprecated\nclass CMOdometerData\nA class that represents odometer data for workouts."
  },
  {
    "title": "Core Motion | Apple Developer Documentation",
    "url": "https://developer.apple.com/documentation/coremotion",
    "html": "Overview\n\nCore Motion reports motion- and environment-related data from the available onboard hardware of iOS, iPadOS, watchOS, and visionOS devices. This hardware includes the device’s accelerometers and gyroscopes, and, when available, the pedometer, magnetometer, and barometer. Use this data in your app as input for user interactions, fitness tracking, health-related matters, and more. For example, a game might use accelerometer and gyroscope input to control onscreen game behavior.\n\nThe services of this framework provide access to motion data either as raw or processed values, and many services provide both types of values. Raw values reflect the unmodified data from the hardware, while processed values eliminate forms of bias that might adversely affect your usage of the data. For example, a processed accelerometer value reflects only the acceleration caused by the user and not the acceleration caused by gravity.\n\nNot all services are available on all devices, and some services might be unavailable even on devices with the required hardware. For example, many Core Motion services are available to visionOS apps, but those services aren’t available to compatible iPad and iPhone apps running in visionOS. Before you try to use any motion-related services, check the availability of those services using a CMMotionManager object.\n\nImportant\n\nAn iOS app must include usage description keys in its Info.plist file for the types of data it needs. If these keys aren’t present, the app crashes when you try to access the corresponding service. To access motion and fitness data, include NSMotionUsageDescription. To access the fall-detection service, include NSFallDetectionUsageDescription.\n\nTopics\nEssentials\nCore Motion updates\nLearn about important changes to Core Motion.\nclass CMMotionManager\nThe object for starting and managing motion services.\nDevice motion\nDeliver acceleration, attitude, rotation, and magnetic field data that is adjusted for gravity and other forms of bias.\nGetting processed device-motion data\nRetrieve motion data that the system processed to remove environmental bias, such as the effects of gravity.\nclass CMDeviceMotion\nEncapsulated measurements of the attitude, rotation rate, and acceleration of a device.\nclass CMAttitude\nThe device’s orientation relative to a known frame of reference at a point in time.\nstruct CMAttitudeReferenceFrame\nConstants that indicate the frame of reference for attitude-related motion data.\nclass CMHeadphoneMotionManager\nAn object that starts and manages headphone motion services.\nAccelerometers\nDeliver accelerometer data for all three axes of the device.\nGetting raw accelerometer events\nRetrieve data from the onboard accelerometers.\nclass CMAccelerometerData\nA data sample from the device's three accelerometers.\nclass CMRecordedAccelerometerData\nA single piece of accelerometer data that was recorded by the device.\nclass CMSensorRecorder\nAn object that gathers and retrieves accelerometer data from a device.\nclass CMSensorDataList\nA list of the accelerometer data recorded by the system.\nGyroscopes\nDeliver the raw gyroscope data.\nGetting raw gyroscope events\nRetrieve data from the onboard gyroscopes.\nclass CMGyroData\nA single measurement of the device’s rotation rate.\nMagnetometer\nProvide raw magnetometer data.\nclass CMMagnetometerData\nMeasurements of the Earth's magnetic field relative to the device.\nPedometer and fitness\nProvide step-counting data from the built-in motion processor.\nclass CMPedometer\nAn object for fetching the system-generated live walking data.\nclass CMPedometerData\nInformation about the distance traveled by a user on foot.\nclass CMPedometerEvent\nA change in the user's pedestrian activity.\nclass CMStepCounter\nThe number of steps the user has taken with the device.\nDeprecated\nclass CMOdometerData\nA class that represents odometer data for workouts.\nclass CMHighFrequencyHeartRateData\nA class that represents heart rate data collected at 1 Hz.\nAltitude data\nProvide altitude data based on barometric sensor information.\nclass CMAltimeter\nAn object that initiates the delivery of altitude-related changes.\nclass CMAbsoluteAltitudeData\nData that records a change in absolute altitude.\nclass CMAltitudeData\nData for a recorded change in altitude.\nMovement disorder manager\nGetting movement disorder symptom data\nRetrieve data from the Apple Watch’s movement disorder manager.\nAdhering to the movement disorder data collection requirements\nEnsure that your users understand and have control over the data your app collects.\nMovement disorder algorithm changelog\nA chronological log of notable changes to the movement disorder algorithm.\nclass CMMovementDisorderManager\nA manager for recording and querying movement disorder data.\nclass CMTremorResult\nA result object that contains data about the presence and strength of tremors during a one-minute interval.\nclass CMDyskineticSymptomResult\nA result object that contains data about the likely presence of dyskinetic symptoms during a one-minute interval.\nWater submersion manager\nAccessing submersion data\nUse a water-submersion manager to receive water pressure, temperature, and depth data on Apple Watch Ultra.\nclass CMWaterSubmersionManager\nAn object for managing the collection of pressure and temperature data during submersion.\nprotocol CMWaterSubmersionManagerDelegate\nA delegate that receives updates about ambient pressure, water pressure, water temperature, and submersion events.\nclass CMWaterSubmersionEvent\nAn event indicating that the device’s submersion state has changed.\nclass CMWaterSubmersionMeasurement\nAn update that contains data about the pressure and depth.\nclass CMWaterTemperature\nAn update that contains data about the water temperature.\nFall detection\nclass CMFallDetectionManager\nAn object for managing fall detection events.\nprotocol CMFallDetectionDelegate\nA delegate that receives information about fall detection events and authorization status changes.\nclass CMFallDetectionEvent\nAn object that contains data about a fall detection event.\nproperty list key NSFallDetectionUsageDescription\nA message to the user that explains the app’s request for permission to access fall detection event data.\nName: Fall Detection Usage Description\nAmbient pressure\nclass CMRecordedPressureData\nA recorded measurement of pressure data.\nclass CMAmbientPressureData\nA measurement of the ambient pressure and temperature.\nHistorical data\nDeliver recorded motion events to help you analyze movement patterns.\nclass CMBatchedSensorManager\nclass CMMotionActivityManager\nAn object that manages access to the motion data stored by the device.\nclass CMMotionActivity\nThe data for a single motion update event.\nCommon data\nclass CMLogItem\nThe base class for all motion-related data objects."
  }
]